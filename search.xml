<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SO逆向之轻小说sfsecurity分析</title>
      <link href="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/"/>
      <url>/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211216102133093.png" alt="image-20211216102133093"></p><p>postman发起请求</p><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211216103231917.png" alt="image-20211216103231917"></p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211216132725105.png" alt="image-20211216132725105"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;FRIDA-DEXDump.git  移到~&#x2F;.objection&#x2F;plugins重命名为dexdump</span><br><span class="line">objection -g com.sfacg explore -P ~&#x2F;.objection&#x2F;plugins </span><br><span class="line">plugin dexdump dump</span><br></pre></td></tr></table></figure><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211216105100379.png" alt="image-20211216105100379"></p><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211216145531852.png" alt="image-20211216145531852"></p><p>上图可见，脱壳效果并不好。不过不影响，搜索<code>sfsecurity</code></p><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211221195054622.png" alt="image-20211221195054622"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch com.sf.security.AuthConfig</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x36d6</span><br></pre></td></tr></table></figure><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211221195033520.png" alt="image-20211221195033520"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method com.sf.security.AuthConfig.getSFSecurity --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211223172329906.png" alt="image-20211223172329906"></p><p>入参为context和token，根据输出的结果，包含了nonce和sign两个加密键值对，timestamp时间戳，devicetoken是第二个参数。</p><h1 id="Unidbg"><a href="#Unidbg" class="headerlink" title="Unidbg"></a>Unidbg</h1><p>通过IDA的导出函数找到<code>getSFSecurity</code>的起始地址，尝试主动调用</p><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211227122841406.png" alt="image-20211227122841406"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class qxs extends AbstractJni&#123;</span><br><span class="line">    private final AndroidEmulator emulator;</span><br><span class="line">    private final VM vm;</span><br><span class="line">    private final Module module;</span><br><span class="line"> </span><br><span class="line">    qxs()  &#123;</span><br><span class="line">        emulator &#x3D; AndroidEmulatorBuilder.for32Bit().setProcessName(&quot;com.sfacg&quot;).build(); &#x2F;&#x2F; 创建模拟器实例，要模拟32位或者64位，在这里区分</span><br><span class="line">        final Memory memory &#x3D; emulator.getMemory(); &#x2F;&#x2F; 模拟器的内存操作接口</span><br><span class="line">        memory.setLibraryResolver(new AndroidResolver(23)); &#x2F;&#x2F; 设置系统类库解析</span><br><span class="line"> </span><br><span class="line">        vm &#x3D; emulator.createDalvikVM(new File(&quot;轻小说4.7.24.apk&quot;)); &#x2F;&#x2F; 创建Android虚拟机</span><br><span class="line">        DalvikModule dm &#x3D; vm.loadLibrary(new File(&quot;libsfdata.so&quot;), false); &#x2F;&#x2F; 加载libttEncrypt.so到unicorn虚拟内存，加载成功以后会默认调用init_array等函数</span><br><span class="line">        module &#x3D; dm.getModule(); &#x2F;&#x2F;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 先把JNI Onload跑起来，里面做了大量的初始化工作</span><br><span class="line">        vm.setJni(this);</span><br><span class="line">        vm.setVerbose(true);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        qxs test &#x3D; new qxs();</span><br><span class="line">        System.out.println(test.getSFsecurity());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getSFsecurity()&#123;</span><br><span class="line">        List&lt;Object&gt; list &#x3D; new ArrayList&lt;&gt;(10);</span><br><span class="line">        list.add(vm.getJNIEnv()); &#x2F;&#x2F; 第一个参数是env</span><br><span class="line">        list.add(0); &#x2F;&#x2F; 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到</span><br><span class="line">        Object custom &#x3D; null;</span><br><span class="line">        DvmObject&lt;?&gt; context &#x3D; vm.resolveClass(&quot;android&#x2F;content&#x2F;Context&quot;).newObject(custom);&#x2F;&#x2F; context</span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(new StringObject(vm, &quot;95048C92-C0A4-388E-923F-36861451DE6E&quot;)));</span><br><span class="line"> </span><br><span class="line">        Number number &#x3D; module.callFunction(emulator, 0xA944 + 1, list.toArray())[0];</span><br><span class="line">        String result &#x3D; vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行在调用<code>callStaticObjectMethodV</code>时报错：<code>java.lang.UnsupportedOperationException: java/util/UUID-&gt;randomUUID()Ljava/util/UUID;</code>，补环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    switch (signature) &#123;</span><br><span class="line">        case &quot;java&#x2F;util&#x2F;UUID-&gt;randomUUID()Ljava&#x2F;util&#x2F;UUID;&quot;:&#123;</span><br><span class="line">            return dvmClass.newObject(UUID.randomUUID());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return super.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行在调用<code>callObjectMethodV</code>时报错：<code>java.lang.UnsupportedOperationException: java/util/UUID-&gt;toString()Ljava/lang/String;</code>，补环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    switch (signature) &#123;</span><br><span class="line">        case &quot;java&#x2F;util&#x2F;UUID-&gt;toString()Ljava&#x2F;lang&#x2F;String;&quot;:&#123;</span><br><span class="line">            String uuid &#x3D; dvmObject.getValue().toString();</span><br><span class="line">            return new StringObject(vm, uuid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return super.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211227123438535.png" alt="image-20211227123438535"></p><p>正常获取到结果，可以证明nonce就是通过uuid生成的随机数，timestamp就是当前时间戳，deviceToken就是传入的参数，sign就是生成的结果。</p><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h2><p>本so进行了保护，无法反编译，findHash也没有结果，但是unidbg可以正常跑出加密后的sign，尝试使用<code>traceCode</code>追踪下汇编指令流。</p><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211227124110144.png" alt="image-20211227124110144"></p><p>默认的unidbg的trace是不保存寄存器值的信息的，修改ARM32下的AbstractARMEmulator.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private void printAssemble(PrintStream out, Capstone.CsInsn[] insns, long address, boolean thumb) &#123;</span><br><span class="line">    StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">    for (Capstone.CsInsn ins : insns) &#123;</span><br><span class="line">        sb.append(&quot;### Trace Instruction &quot;);</span><br><span class="line">        sb.append(ARM.assembleDetail(this, ins, address, thumb));</span><br><span class="line">        &#x2F;&#x2F; 打印每条汇编指令里参与运算的寄存器的值</span><br><span class="line">        Set&lt;Integer&gt; regset &#x3D; new HashSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        Arm.OpInfo opInfo &#x3D; (Arm.OpInfo) ins.operands;</span><br><span class="line">        for(int i &#x3D; 0; i&lt;opInfo.op.length; i++)&#123;</span><br><span class="line">            regset.add(opInfo.op[i].value.reg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String RegChange &#x3D; ARM.SaveRegs(this, regset);</span><br><span class="line">        sb.append(RegChange);</span><br><span class="line">        sb.append(&#39;\n&#39;);</span><br><span class="line">        address +&#x3D; ins.size;</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(sb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong>ARM.java</strong>中新建SaveRegs方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">public static String SaveRegs(Emulator&lt;?&gt; emulator, Set&lt;Integer&gt; regs) &#123;</span><br><span class="line">    Backend backend &#x3D; emulator.getBackend();</span><br><span class="line">    StringBuilder builder &#x3D; new StringBuilder();</span><br><span class="line">    builder.append(&quot;&gt;&gt;&gt;&quot;);</span><br><span class="line">    Iterator it &#x3D; regs.iterator();</span><br><span class="line">    while(it.hasNext()) &#123;</span><br><span class="line">        int reg &#x3D; (int) it.next();</span><br><span class="line">        Number number;</span><br><span class="line">        int value;</span><br><span class="line">        switch (reg) &#123;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R0:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; r0&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R1:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; r1&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R2:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; r2&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R3:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; r3&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R4:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; r4&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R5:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; r5&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R6:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; r6&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R7:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; r7&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R8:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; r8&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R9: &#x2F;&#x2F; UC_ARM_REG_SB</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; sb&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_R10: &#x2F;&#x2F; UC_ARM_REG_SL</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; sl&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_FP:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; fp&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_IP:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; ip&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_SP:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; SP&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_LR:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; LR&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">            case ArmConst.UC_ARM_REG_PC:</span><br><span class="line">                number &#x3D; backend.reg_read(reg);</span><br><span class="line">                value &#x3D; number.intValue();</span><br><span class="line">                builder.append(String.format(Locale.US, &quot; PC&#x3D;0x%x&quot;, value));</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return builder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始跑traceCode并将结果保存在qxstrace.txt中，由于sign是32位的十六进制数，猜测是md5相关，关键特征有4个魔数和64个K。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 魔数</span><br><span class="line">A &#x3D; 0x67452301</span><br><span class="line">B &#x3D; 0xefcdab89</span><br><span class="line">C &#x3D; 0x98badcfe</span><br><span class="line">D &#x3D; 0x10325476</span><br><span class="line"> </span><br><span class="line"># K表</span><br><span class="line">Ktable &#x3D; [</span><br><span class="line">    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf,</span><br><span class="line">    0x4787c62a, 0xa8304613, 0xfd469501, 0x698098d8, 0x8b44f7af,</span><br><span class="line">    0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e,</span><br><span class="line">    0x49b40821, 0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,</span><br><span class="line">    0xd62f105d, 0x2441453, 0xd8a1e681, 0xe7d3fbc8, 0x21e1cde6,</span><br><span class="line">    0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8,</span><br><span class="line">    0x676f02d9, 0x8d2a4c8a, 0xfffa3942, 0x8771f681, 0x6d9d6122,</span><br><span class="line">    0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,</span><br><span class="line">    0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x4881d05, 0xd9d4d039,</span><br><span class="line">    0xe6db99e5, 0x1fa27cf8, 0xc4ac5665, 0xf4292244, 0x432aff97,</span><br><span class="line">    0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d,</span><br><span class="line">    0x85845dd1, 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,</span><br><span class="line">    0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>通过检索这些关键特征，可以断定这是一个md5或者魔改后的md5</p><p><img src="/2021/12/16/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%BD%BB%E5%B0%8F%E8%AF%B4sfsecurity%E5%88%86%E6%9E%90/image-20211227125024339.png" alt="image-20211227125024339"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> unidbg </tag>
            
            <tag> ida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之基础定位技巧</title>
      <link href="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p>当我们拿到一个网站时，首先就是抓包定位加密参数的实现，本文将通过常用的定位方案结合实际案例完成对加密参数的分析。</p><h1 id="搜索关键参数"><a href="#搜索关键参数" class="headerlink" title="搜索关键参数"></a>搜索关键参数</h1><p>这是最常见也是最简单的定位方案，F12打开网站控制台后，Ctrl+Shift+F打开搜索面板，比如搜索password参数或者submit函数</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password:&#96;,&#96;password&#x3D;&#96;,&#96;password &#x3D;&#96;请求url，搜索方法&#96;var submit&#96;或者&#96;function submit&#96;或者&#96;submit:</span><br></pre></td></tr></table></figure></blockquote><h2 id="to8to"><a href="#to8to" class="headerlink" title="to8to"></a>to8to</h2><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/image-20211204160831965.png" alt="image-20211204160831965"></p><p>搜索<code>password</code>位置太多，由于抓包请求是<code>new_login.php</code></p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640.jpg" alt="图片"></p><p>在Element面板中搜索<code>new_login.php</code>，ctrl+shift+f 搜索<code>loginCheck</code></p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160070.jpg" alt="图片"></p><p>该方法中<code>jq(&#39;#rsa_userNum&#39;).val(rsaString(password));</code>，调用rsaString方法加密<code>password</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function rsaString(str) &#123;</span><br><span class="line">    return encodeURIComponent(RSAUtilszb.encryptfun(str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>encryptfun</code>定义的js中，rsa加密最少2000行，该方法不过163行，拷贝该js通过编程猫专用工具中的JS调试工具，加载代码，报错<code>引用错误: window 未定义</code>，添加<code>var window = this;</code>,报错<code>引用错误: JSEncrypt 未定义</code>,添加原js中<code>var JSEncrypt = JSEncryptExports.JSEncrypt;</code>，报错<code>引用错误: JSEncryptExports 未定义</code>,搜索<code>var JSEncryptExports</code>，将<code>var JSEncryptExports = {};</code>添加到JS调试工具，报错<code>类型错误: JSEncrypt is not a constructor</code> </p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160078.jpg" alt="图片"></p><p>尝试打上断点，但是每次都不能进入断点，说明肯定是动态加载的js，且每次刷新js后缀会有时间戳。勾选Disable cache,打开fiddler抓包，将js拷贝到本地实现http欺骗，选中该请求点击AutoResponder-Add Rule下拉选择Find a File,找到本地保存的js并开启规则</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160084.jpg" alt="图片"></p><p>由于每次js请求地址不一样，使用正则匹配<code>regex:https://static\.to8to\.com/gb_js/to8torsaszb\.js\?_=\d+</code>并保存规则重新发起请求<code>https://static.to8to.com/gb_js/to8torsaszb.js?_=1628128571412</code>，使用本地js欺骗网络请求js </p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160100.jpg" alt="图片"></p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160125.jpg" alt="图片"></p><p>将整个js格式化找到之前报错<code>JSEncrypt is not a constructor</code>是从上面的压缩的js中export出来的 </p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160108.jpg" alt="图片"></p><p>将上面压缩的代码添加到编程猫的JS调试工具中加载代码，报错<code>引用错误: navigator 未定义</code>，添加<code>var navigator = {}</code>，报错<code>引用错误: window 未定义</code>，添加<code>var window =this</code>,因为如果用<code>window ={}</code>报错<code>ASN1 未定义</code>,而用this则可以拿到当前js中所有的变量函数。 </p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160116.jpg" alt="图片"></p><h1 id="dom元素事件监听"><a href="#dom元素事件监听" class="headerlink" title="dom元素事件监听"></a>dom元素事件监听</h1><p>通过控制台的Elements中的<code>Event Listeners</code>逐个排除按钮的<code>Remove</code>节点，直到最后一个<code>Event Listeners</code>使按钮无效，拿到该按钮真正生效的js位置。</p><h2 id="中烟新商盟"><a href="#中烟新商盟" class="headerlink" title="中烟新商盟"></a>中烟新商盟</h2><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160128.jpg" alt="图片"></p><p>以下通过dom元素事件监听实现对该<code>j_mcmm</code>加密参数逻辑定位分析。</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160141.jpg" alt="图片"></p><p>以上通过尽可能多的地方打上断点，监听元素事件定位到js<code>main-9826b285f8fad5a5.js</code>，左下角格式化js后添加断点，在js页面ctrl查看所有变量值</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160144.jpg" alt="图片"></p><p>鼠标悬停，或者控制台打印出来，点击进入方法声明时打上断点，为同一行中的函数打上断点，F8单步调试,完成加密参数的定位</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160181.jpg" alt="图片"></p><h1 id="xhr断点"><a href="#xhr断点" class="headerlink" title="xhr断点"></a>xhr断点</h1><p>通过定位发包函数跟栈，复制网址请求路径到Sources下的XHR/fetch Breakpoints，支持正则。</p><h2 id="七麦数据"><a href="#七麦数据" class="headerlink" title="七麦数据"></a>七麦数据</h2><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160162.jpg" alt="图片"></p><p>通过关键加密参数<code>analysis</code>搜索无果，尝试在Sources中加入XHR断点，以请求路径作为断点内容</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160191.jpg" alt="图片"></p><p>XHR断点后追溯调用栈，查看每个调用栈的出入参是否包含加密后的<code>analysis</code>,直到进入Promise异步<code>l.request</code>，单步调试到<code>n.then(t.shift(), t.shift())</code>,then作为Promise的异步函数，<code>promise.then(onCompleted, onRejected);</code>，而<code>shift()</code>通过逐条调用t中的方法，参数是上一个方法的返回值，同时删除该方法，相当于队列先进先出。控制台打印t，逐个方法进入打上断点</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160176.jpg" alt="图片"></p><p>在<code>l.prototype.request</code>中暂时还没生成<code>analysis</code>加密参数，逐个进入t方法中 </p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160197.jpg" alt="图片"></p><p>执行完<code>r().interceptors.request.use</code>该方法后生成的a就是<code>analysis</code>，观察该代码中的逻辑完成加密分析。<code>a=(0,n.cv)((0,n.oZ)(r, l))</code>作为逗号表达式，由上图分析n.cv和n.oZ是函数，r和l是变量，可以还原为<code>n.cv(n.oz(r,l))</code>。</p><p>通过控制台获取n中的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">window &#x3D; global;</span><br><span class="line">window.document &#x3D; &#123;</span><br><span class="line">    cookie: &#39;&#39;  &#x2F;&#x2F; 这边带上自己的cookie</span><br><span class="line">&#125;</span><br><span class="line">function i(e) &#123;</span><br><span class="line">    var t, a &#x3D; (t &#x3D; &quot;&quot;,</span><br><span class="line">        [&quot;66&quot;, &quot;72&quot;, &quot;6f&quot;, &quot;6d&quot;, &quot;43&quot;, &quot;68&quot;, &quot;61&quot;, &quot;72&quot;, &quot;43&quot;, &quot;6f&quot;, &quot;64&quot;, &quot;65&quot;].forEach((function (e) &#123;</span><br><span class="line">                t +&#x3D; unescape(&quot;%u00&quot; + e)</span><br><span class="line">            &#125;</span><br><span class="line">        )),</span><br><span class="line">        t);</span><br><span class="line">    return String[a](e)</span><br><span class="line">&#125;</span><br><span class="line">function s() &#123;</span><br><span class="line">    return unescape(&quot;861831832863830866861836861862839831831839862863839830865834861863837837830830837839836861835833&quot;.replace(&#x2F;8&#x2F;g, &quot;%u00&quot;))</span><br><span class="line">&#125;</span><br><span class="line">var n &#x3D; &#123;</span><br><span class="line">    oZ: function g(e, t) &#123;</span><br><span class="line">        t || (t &#x3D; s());</span><br><span class="line">        for (var a &#x3D; (e &#x3D; e.split(&quot;&quot;)).length, n &#x3D; t.length, o &#x3D; &quot;charCodeAt&quot;, r &#x3D; 0; r &lt; a; r++)</span><br><span class="line">            e[r] &#x3D; i(e[r][o](0) ^ t[(r + 10) % n][o](0));</span><br><span class="line">        return e.join(&quot;&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    cv: function h(e) &#123;</span><br><span class="line">        return function (e) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                return btoa(e)</span><br><span class="line">            &#125; catch (t) &#123;</span><br><span class="line">                return Buffer.from(e).toString(&quot;base64&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(encodeURIComponent(e).replace(&#x2F;%([0-9A-F]&#123;2&#125;)&#x2F;g, (function (e, t) &#123;</span><br><span class="line">                return i(&quot;0x&quot; + t)</span><br><span class="line">            &#125;</span><br><span class="line">        )))</span><br><span class="line">    &#125;,</span><br><span class="line">    ej: function u(e) &#123;</span><br><span class="line">        var t, a &#x3D; new RegExp(&quot;(^| )&quot; + e + &quot;&#x3D;([^;]*)(;|$)&quot;);</span><br><span class="line">        return (t &#x3D; document.cookie.match(a)) ? unescape(t[2]) : null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于btoa本质就是base64加密，通过引入CryptoJS.pad.js后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function base64(data) &#123;</span><br><span class="line"> var wordArray &#x3D; CryptoJS.enc.Utf8.parse(data);</span><br><span class="line"> var base64_data &#x3D; CryptoJS.enc.Base64.stringify(wordArray);</span><br><span class="line"> return base64_data</span><br><span class="line">&#125;</span><br><span class="line">var n &#x3D; &#123;</span><br><span class="line">    oZ: function g(e, t) &#123;</span><br><span class="line">        t || (t &#x3D; s());</span><br><span class="line">        for (var a &#x3D; (e &#x3D; e.split(&quot;&quot;)).length, n &#x3D; t.length, o &#x3D; &quot;charCodeAt&quot;, r &#x3D; 0; r &lt; a; r++)</span><br><span class="line">            e[r] &#x3D; i(e[r][o](0) ^ t[(r + 10) % n][o](0));</span><br><span class="line">        return e.join(&quot;&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    cv: function h(e) &#123;</span><br><span class="line">        return function (e) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                return base64(e)</span><br><span class="line">            &#125; catch (t) &#123;</span><br><span class="line">                return Buffer.from(e).toString(&quot;base64&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(encodeURIComponent(e).replace(&#x2F;%([0-9A-F]&#123;2&#125;)&#x2F;g, (function (e, t) &#123;</span><br><span class="line">                return i(&quot;0x&quot; + t)</span><br><span class="line">            &#125;</span><br><span class="line">        )))</span><br><span class="line">    &#125;,</span><br><span class="line">    ej: function u(e) &#123;</span><br><span class="line">        var t, a &#x3D; new RegExp(&quot;(^| )&quot; + e + &quot;&#x3D;([^;]*)(;|$)&quot;);</span><br><span class="line">        return (t &#x3D; document.cookie.match(a)) ? unescape(t[2]) : null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将try/catch中逻辑还原</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var l &#x3D; &quot;00000008d78d46a&quot;</span><br><span class="line">var d &#x3D; &quot;@#&quot;</span><br><span class="line">var e &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; url: &quot;&#x2F;rank&#x2F;indexPlus&#x2F;brand_id&#x2F;1&quot;,</span><br><span class="line">    url: &quot;&#x2F;rank&#x2F;indexPlus&#x2F;brand_id&#x2F;&quot; + pg,    &#x2F;&#x2F; 1.免费榜 0.付费 2.畅销榜</span><br><span class="line">    baseURL: &quot;https:&#x2F;&#x2F;api.qimai.cn&quot;,</span><br><span class="line">&#125;</span><br><span class="line">var c &#x3D; &#123;</span><br><span class="line">    default: function On(e) &#123;</span><br><span class="line">        this._init(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var u &#x3D; &quot;synct&quot;</span><br><span class="line">var t &#x3D; (0, n.ej)(u);</span><br><span class="line">var m &#x3D; &quot;syncd&quot;</span><br><span class="line">var f &#x3D; f &#x3D; c.default.prototype.difftime &#x3D; -(0, n.ej)(m) || +new Date - 1e3 * t</span><br><span class="line">var o &#x3D; +new Date - (f || 0) - 1515125653845</span><br><span class="line">var r &#x3D; []</span><br><span class="line">r &#x3D; r.sort().join(&quot;&quot;), r &#x3D; (0, n.cv)(r), r +&#x3D; d + e.url.replace(e.baseURL, &quot;&quot;), r +&#x3D; d + o, r +&#x3D; d + 1,</span><br><span class="line">a_ &#x3D; (0, n.cv)((0, n.oZ)(r, l))</span><br><span class="line">return a_</span><br></pre></td></tr></table></figure><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160201.jpg" alt="图片"></p><h1 id="Initiator栈追踪"><a href="#Initiator栈追踪" class="headerlink" title="Initiator栈追踪"></a>Initiator栈追踪</h1><p>Network下的发包请求的Initiator，如jquery堆栈的顶层断点(可能会请求多次，找到发包请求时进入的断点)，重新请求找到堆栈中属于目标网站的js格式化断点。</p><h2 id="升学e网通"><a href="#升学e网通" class="headerlink" title="升学e网通"></a>升学e网通</h2><p>登录抓包，打开Initiator，进入堆栈顶层定位的代码行</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160207.jpg" alt="图片"></p><p>打上断点，查看右侧调用栈，逐个方法往底层去调用，直到react库js找到了preLogin，找到出现password的位置，打上断点</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160224.jpg" alt="图片"></p><p>再次登录时，进入断点，找到password</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160225.jpg" alt="图片"></p><p>进入加密方法中，aes加密</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160237.jpg" alt="图片"></p><p>打开WT-JS中的Crypto类复制key和iv，输出以HEX的十六进制格式，对比结果是标准的AES加密。</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160248.jpg" alt="图片"></p><p>基于base64或十六进制的AES加解密实现见aes.js</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591293593.jpg" alt="图片"></p><h2 id="长房集团"><a href="#长房集团" class="headerlink" title="长房集团"></a>长房集团</h2><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591307509.jpg" alt="图片"></p><p>搜索<code>j_password</code>后打断点，重新登录</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591316431.jpg" alt="图片"></p><p>进入<code>desEncrypt</code>中，大致加密完成逻辑就在该函数中</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591325852.jpg" alt="图片"></p><p>加密逻辑中首先根据<code>SECURITYKEY.get()</code>获取到key，首先通过请求后端拿到str，判断加密类型是否为aes后截取字符串通过<code>toHexString</code>转成十六进制拿到key和iv和security</p><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591332283.jpg" alt="图片"></p><p>整理完逻辑扣出js报错<code>CryptoJS is not defined</code>,点击进入<code>CryptoJS.AES.encrypt</code>扣出来aes.js源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">function toHexString(str) &#123;</span><br><span class="line">    var temp &#x3D; &quot;&quot;;</span><br><span class="line">    for (i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class="line">        temp +&#x3D; str.charCodeAt(i).toString(16)</span><br><span class="line">    &#125;</span><br><span class="line">    return temp</span><br><span class="line">&#125;</span><br><span class="line">function getdes(encodeType) &#123;</span><br><span class="line">    &#x2F;&#x2F; 请求&quot;&#x2F;resource&#x2F;js&#x2F;session.jsp?_&#x3D;1628210376229&quot;返回</span><br><span class="line">    var str &#x3D; &quot;E55A433905551AC39DB3165591D9CD74&quot;;</span><br><span class="line">    if (encodeType &#x3D;&#x3D; null || encodeType &#x3D;&#x3D; &#39;aes&#39;) &#123;</span><br><span class="line">        if (str.length &lt; 32) &#123;</span><br><span class="line">            str +&#x3D; &quot;abcdefghijklmnopqrstuvwxyz1234567890&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        str &#x3D; str.toUpperCase();</span><br><span class="line">        var key &#x3D; &#123;&#125;;</span><br><span class="line">        key.key &#x3D; str.substring(0, 16);</span><br><span class="line">        key.iv &#x3D; str.substring(16, 32);</span><br><span class="line">        key.security &#x3D; &quot;\u4435\u5320\u4d35&quot;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (str.length &lt; 16) &#123;</span><br><span class="line">            str +&#x3D; &quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        str &#x3D; str.toUpperCase();</span><br><span class="line">        var key &#x3D; &#123;&#125;;</span><br><span class="line">        key.key &#x3D; toHexString(str.substring(0, 8));</span><br><span class="line">        key.iv &#x3D; toHexString(str.substring(8, 16));</span><br><span class="line">        key.security &#x3D; &quot;\u4445\u5320\u4d45&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    return key</span><br><span class="line">&#125;</span><br><span class="line">function getPwd(value, type) &#123;</span><br><span class="line">    var keyObj &#x3D; &#123;&#125;;</span><br><span class="line">    if (type &#x3D;&#x3D; null || &quot;aes&quot; &#x3D;&#x3D; type.toLowerCase()) &#123;</span><br><span class="line">        keyObj &#x3D; getdes()</span><br><span class="line">        value &#x3D; CryptoJS.AES.encrypt(value, CryptoJS.enc.Utf8.parse(keyObj.key), &#123;</span><br><span class="line">            iv: CryptoJS.enc.Utf8.parse(keyObj.iv)</span><br><span class="line">        &#125;).toString()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        keyObj &#x3D; getdes()(&#39;des&#39;);</span><br><span class="line">        value &#x3D; CryptoJS.DES.encrypt(value, CryptoJS.enc.Hex.parse(keyObj.key), &#123;</span><br><span class="line">            iv: CryptoJS.enc.Hex.parse(keyObj.iv)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    return keyObj.security + value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591344524.jpg" alt="图片"></p><h1 id="安装编程猫插件"><a href="#安装编程猫插件" class="headerlink" title="安装编程猫插件"></a>安装编程猫插件</h1><ul><li>fiddler 版本必须 &gt;= v4.6.3，复制<code>Fiddler 编程猫专用插件</code>到fiddler程序目录下的Scripts目录中示例:  <code>C:\Program Files (x86)\Fiddler2\Scripts</code></li></ul><h2 id="爱奇艺"><a href="#爱奇艺" class="headerlink" title="爱奇艺"></a>爱奇艺</h2><ol><li>覆盖原函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function xxx()&#123;</span><br><span class="line">    console.log(&quot;1111&quot;)</span><br><span class="line">&#125;</span><br><span class="line">var xxx_ &#x3D; xxx;</span><br><span class="line">xxx &#x3D; function()&#123;</span><br><span class="line">    console.log(&quot;2222&quot;)</span><br><span class="line">&#125;</span><br><span class="line">window.alert &#x3D; function()&#123;console.log(&quot;?&quot;)&#125;</span><br><span class="line">console.clear &#x3D; function()&#123;console.log(&quot;?&quot;)&#125;</span><br><span class="line">setInterval &#x3D; function()&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Object.defineProperty替换对象属性(getter.setter)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    var a &#x3D; &quot;&quot;;</span><br><span class="line">    Object.defineProperty(document, &#39;cookie&#39;, &#123;</span><br><span class="line">        set: function (val) &#123;</span><br><span class="line">            console.log(&#39;Hook捕获到cookie设置-&gt;&#39;, val);</span><br><span class="line">            a &#x3D; val;</span><br><span class="line">            return val;</span><br><span class="line">        &#125;,</span><br><span class="line">        get: function()&#123;</span><br><span class="line">            return a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line">document.cookie &#x3D; &quot;1&quot;  &#x2F;&#x2F; 设置</span><br><span class="line">document.cookie  &#x2F;&#x2F; 获取</span><br></pre></td></tr></table></figure><ol start="3"><li>hook的时机在控制台注入的hook，刷新网页就失效了，过滤Network的js找到第一个加载的js，右键Open in Sources panel格式化，第一行断点，不过有些cookie可能异步可能在html中js生成，在控制台中注入以上hook，清除cookie，手动注入hook，控制台中找到VM虚拟机找到我们的hook的js打上断点，，每次hook都会经过set，右侧就可以查看调用栈，追溯cookie的来源与加密方式。(有可能注入hook的时机会晚于部分异步请求或者html中的js)</li></ol><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591361207.jpg" alt="图片"></p><ol start="4"><li>利用fiddler代理所有请求替换响应,编程猫专用工具注入hook</li></ol><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591404749.jpg" alt="图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    &#39;use strict&#39;;</span><br><span class="line">    Object.defineProperty(document, &#39;cookie&#39;, &#123;</span><br><span class="line">        set: function (val) &#123;</span><br><span class="line">            if (val.indexOf(&quot;__dfp&quot;) !&#x3D; -1) &#123;</span><br><span class="line">                debugger;</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&#39;Hook捕获到cookie设置-&gt;&#39;, val);</span><br><span class="line">            return val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="/2021/12/04/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%BD%8D%E6%8A%80%E5%B7%A7/640-1638591160252.jpg" alt="图片"></p><p>接下来查看调用栈，最终保存到window.name中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    &#39;use strict&#39;;</span><br><span class="line">    var a &#x3D; &quot;&quot;;</span><br><span class="line">    Object.defineProperty(window, &#39;name&#39;, &#123;</span><br><span class="line">        set: function (val) &#123;</span><br><span class="line">            debugger;</span><br><span class="line">            a &#x3D; val;</span><br><span class="line">            console.log(&#39;Hook捕获到cookie设置-&gt;&#39;, val);</span><br><span class="line">            return val;</span><br><span class="line">        &#125;, </span><br><span class="line">        get: function()&#123;</span><br><span class="line">            return a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>重新进入iqiyi，断点完成hook定位从而可以根据调用栈分析cookie的生成逻辑。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向之蚂蜂窝zzzghostsigh</title>
      <link href="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/"/>
      <url>/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="v9-3-7抓包"><a href="#v9-3-7抓包" class="headerlink" title="v9.3.7抓包"></a>v9.3.7抓包</h1><p>postern+charles</p><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211125144322843.png" alt="image-20211125144322843"></p><p>jadx反编译搜索<code>zzzghostsigh</code>找到<code>params.put(LoginCommon.HTTP_BASE_PARAM_GHOSTSIGH, ghostSigh)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private static String appendGhostSighParams(Map&lt;String, String&gt; params, String encodeParams) &#123;</span><br><span class="line">    String ghostSigh &#x3D; ghostSigh(encodeParams);</span><br><span class="line">    params.put(LoginCommon.HTTP_BASE_PARAM_GHOSTSIGH, ghostSigh);</span><br><span class="line">    return encodeParams + encodeUrl(&quot;&amp;&quot;) + encodeUrl(LoginCommon.HTTP_BASE_PARAM_GHOSTSIGH) + encodeUrl(&quot;&#x3D;&quot;) + encodeUrl(ghostSigh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>ghostSigh</code>是<code>Authorizer</code>接口的一个方法</p><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211125145204234.png" alt="image-20211125145204234"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity activities|more   拿到包名com.mfw.roadbook</span><br><span class="line">frida -UF com.mfw.roadbook -l scripts.js  在searchInterface中使用接口名过滤name.indexOf(&quot;Authorizer&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204142501597.png" alt="image-20211204142501597"></p><p>利用frida找到该类的实现，<code>ghostSigh</code>的逻辑就是获取<code>AuthorizeHelper</code>实例house调用<code>getSummary</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public String ghostSigh(@Nullable Context context, @Nullable String params) &#123;</span><br><span class="line">    String summary &#x3D; AuthorizeHelper.getInstance(LoginCommon.getAppPackageName()).getSummary(context, params);</span><br><span class="line">    Intrinsics.checkExpressionValueIsNotNull(summary, &quot;AuthorizeHelper.getInsta…tSummary(context, params)&quot;);</span><br><span class="line">    return summary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>getSummary</code>,其中调用了so层的<code>xPreAuthencode</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private native String xPreAuthencode(Context context, String str, String str2);</span><br><span class="line">public String getSummary(Context context, String source) &#123;</span><br><span class="line">    return xPreAuthencode(context, source, this.packageName);</span><br><span class="line">&#125;</span><br><span class="line">static &#123;</span><br><span class="line">    System.loadLibrary(&quot;mfw&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>objection</code>内存漫游跟踪下<code>xPreAuthencode</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.mfw.roadbook explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">android hooking watch class_method com.mfw.tnative.AuthorizeHelper.xPreAuthencode --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p>它接收三个参数，参数1是一个context，参数2是输入的明文，参数3是app的包名</p><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204143302199.png" alt="image-20211204143302199"></p><h1 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h1><h2 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h2><p>构造context，主动调用动态普通函数<code>xPreAuthencode</code>返回<code>b76da45d4855c8f405ec1352955fe58d3ef0adca</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function mfw()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var currentApplication &#x3D; Java.use(&#39;android.app.ActivityThread&#39;).currentApplication(); </span><br><span class="line">        var context &#x3D; currentApplication.getApplicationContext();</span><br><span class="line">        Java.choose(&quot;com.mfw.tnative.AuthorizeHelper&quot;,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                console.log(&quot;found instance &#x3D;&gt;&quot;,instance);</span><br><span class="line">                console.log(&quot;instance showText is &#x3D;&gt;&quot;,instance.xPreAuthencode(context,&quot;onejane&quot;,&quot;com.mfw.roadbook&quot;)) </span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&#39;Search complete&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(mfw)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204144603984.png" alt="image-20211204144603984"></p><h2 id="unidbg"><a href="#unidbg" class="headerlink" title="unidbg"></a>unidbg</h2><p>搭建Unidbg框架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class mfw extends AbstractJni&#123;</span><br><span class="line">    private final AndroidEmulator emulator;</span><br><span class="line">    private final VM vm;</span><br><span class="line">    private final Module module;</span><br><span class="line"></span><br><span class="line">    mfw() &#123;</span><br><span class="line">        emulator &#x3D; AndroidEmulatorBuilder.for32Bit().setProcessName(&quot;com.mfw.roadbook&quot;).build(); &#x2F;&#x2F; 创建模拟器实例</span><br><span class="line">        final Memory memory &#x3D; emulator.getMemory(); &#x2F;&#x2F; 模拟器的内存操作接口</span><br><span class="line">        memory.setLibraryResolver(new AndroidResolver(23)); &#x2F;&#x2F; 设置系统类库解析</span><br><span class="line">        vm &#x3D; emulator.createDalvikVM(new File(&quot;mafengwo_ziyouxing.apk&quot;)); &#x2F;&#x2F; 创建Android虚拟机</span><br><span class="line">        DalvikModule dm &#x3D; vm.loadLibrary(new File(&quot;libmfw.so&quot;), true); &#x2F;&#x2F; 加载so到虚拟内存</span><br><span class="line">        module &#x3D; dm.getModule(); &#x2F;&#x2F;获取本SO模块的句柄</span><br><span class="line"></span><br><span class="line">        vm.setJni(this);</span><br><span class="line">        vm.setVerbose(true);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        mfw test &#x3D; new mfw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204145131449.png" alt="image-20211204145131449"></p><p><code>JNI_OnLoad</code>运行成功并打印出<code>xPreAuthencode</code>的地址为<code>0x2e301</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public String xPreAuthencode()&#123;</span><br><span class="line">    List&lt;Object&gt; list &#x3D; new ArrayList&lt;&gt;(10);</span><br><span class="line">    list.add(vm.getJNIEnv()); &#x2F;&#x2F; 第一个参数是env</span><br><span class="line">    list.add(0); &#x2F;&#x2F; 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span><br><span class="line">    Object custom &#x3D; null;</span><br><span class="line">    DvmObject&lt;?&gt; context &#x3D; vm.resolveClass(&quot;android&#x2F;content&#x2F;Context&quot;).newObject(custom);&#x2F;&#x2F; context</span><br><span class="line">    list.add(vm.addLocalObject(context));</span><br><span class="line">    list.add(vm.addLocalObject(new StringObject(vm, &quot;onejane&quot;)));</span><br><span class="line">    list.add(vm.addLocalObject(new StringObject(vm, &quot;com.mfw.roadbook&quot;)));</span><br><span class="line"></span><br><span class="line">    Number number &#x3D; module.callFunction(emulator, 0x2e301, list.toArray())[0];</span><br><span class="line">    String result &#x3D; vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    mfw test &#x3D; new mfw();</span><br><span class="line">    System.out.println(test.xPreAuthencode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204150101860.png" alt="image-20211204150101860"></p><h1 id="算法还原"><a href="#算法还原" class="headerlink" title="算法还原"></a>算法还原</h1><p>由于明文不论多长输出固定为40位字符串，疑似哈希算法中的SHA1。使用IDA的FindHash跑完获取到自动生成的js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -UF com.mfw.roadbook -l libmfw_findhash_1638601602.js</span><br></pre></td></tr></table></figure><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204152742933.png" alt="image-20211204152742933"></p><p>g跳转到地址<code>0x30548</code>，x交叉引用，进入<code>sub_2E300</code>函数，正是<code>xPreAuthencode</code>函数的位置<code>0x2e301</code></p><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204152915288.png" alt="image-20211204152915288"></p><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204153516895.png" alt="image-20211204153516895"></p><p>y设置变量a1类型为<code>JNIEnv*</code>,其中<code>sub_30548</code>一定是签名校验函数，如果失败返回<code>Illegal signature</code>，这个逻辑在Unidbg模拟执行时传入的apk替我们处理了签名校验。那么加密逻辑一定存在于<code>sub_312E0</code>或者<code>sub_2E1F4</code>中。</p><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204163853404.png" alt="image-20211204163853404"></p><p><code>sub_312E0</code>第一个参数v9是字符串，第二个参数v13是字符数组，第三个参数v10是字符串长度，使用HookZz尝试对<code>sub_312E0</code>hook并打印参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public void hook_312E0()&#123;</span><br><span class="line">    &#x2F;&#x2F; 获取HookZz对象</span><br><span class="line">    IHookZz hookZz &#x3D; HookZz.getInstance(emulator); &#x2F;&#x2F; 加载HookZz，支持inline hook，文档看https:&#x2F;&#x2F;github.com&#x2F;jmpews&#x2F;HookZz</span><br><span class="line">    &#x2F;&#x2F; enable hook</span><br><span class="line">    hookZz.enable_arm_arm64_b_branch(); &#x2F;&#x2F; 测试enable_arm_arm64_b_branch，可有可无</span><br><span class="line">    &#x2F;&#x2F; hook MDStringOld</span><br><span class="line">    hookZz.wrap(module.base + 0x312E0 + 1, new WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; &#x2F;&#x2F; inline wrap导出函数</span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 方法执行前</span><br><span class="line">        public void preCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">            Pointer input &#x3D; ctx.getPointerArg(0);</span><br><span class="line">            byte[] inputhex &#x3D; input.getByteArray(0, ctx.getR2Int());</span><br><span class="line">            &#x2F;&#x2F; 打印第一个参数v9 字符串</span><br><span class="line">            Inspector.inspect(inputhex, &quot;input&quot;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 将第二个参数v13放到context</span><br><span class="line">            Pointer out &#x3D; ctx.getPointerArg(1);</span><br><span class="line">            ctx.push(out);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 方法执行后</span><br><span class="line">        public void postCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">            Pointer output &#x3D; ctx.pop();</span><br><span class="line">            &#x2F;&#x2F; 打印第二个参数v13[20]</span><br><span class="line">            byte[] outputhex &#x3D; output.getByteArray(0, 20);</span><br><span class="line">            Inspector.inspect(outputhex, &quot;output&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    hookZz.disable_arm_arm64_b_branch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204172027073.png" alt="image-20211204172027073"></p><p><code>sub_312E0</code>第一个参数v9正是我们输入的字符串<code>onejane</code>，第二个参数返回就是加密的最终结果。进入<code>sub_312E0</code>函数</p><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204172305421.png" alt="image-20211204172305421"></p><p>h将数值转为十六进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v30[1] &#x3D; 0xEFCDAB89;</span><br><span class="line">v30[0] &#x3D; 0x67452301;</span><br><span class="line">v30[2] &#x3D; 0x98BADCFE;</span><br><span class="line">v30[3] &#x3D; 0x5E4A1F7C;</span><br><span class="line">v30[4] &#x3D; 0x10325476;</span><br></pre></td></tr></table></figure><p>查看androidxref的<a href="http://androidxref.com/8.0.0_r4/xref/external/boringssl/src/crypto/sha/sha1.c" target="_blank" rel="noopener">sha1.c</a>源码，SHA1的魔数的第4个和第5个IV被改变了</p><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204174843212.png" alt="image-20211204174843212"></p><p>我们尝试将sha1.py中的魔数成本例中的结果，很可惜结果并不是完全一致。</p><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204175737910.png" alt="image-20211204175737910"></p><p>在函数<code>sub_312E0</code>中，n重命名入参，除了定义魔数之外，多处调用了<code>sub_3151C</code>函数，该函数591行，应该就是函数运算部分，加上<code>sub_312E0</code>共700多行，其中完成了对函数的魔改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall sub_312E0(char *input, int output, int length)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  v30[1] &#x3D; 0xEFCDAB89;</span><br><span class="line">  v30[0] &#x3D; 0x67452301;</span><br><span class="line">  v30[2] &#x3D; 0x98BADCFE;</span><br><span class="line">  v30[3] &#x3D; 0x5E4A1F7C;</span><br><span class="line">  v30[4] &#x3D; 0x10325476;</span><br><span class="line">  v4 &#x3D; 0;</span><br><span class="line">  v32 &#x3D; 0;</span><br><span class="line">  v31 &#x3D; 0;</span><br><span class="line">  ...</span><br><span class="line">  if ( (unsigned int)(v21 + 8) &lt; 0x40 )</span><br><span class="line">  &#123;</span><br><span class="line">    v23 &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    v27 &#x3D; 64 - v21;</span><br><span class="line">    qmemcpy(&amp;v33[v21], v29, 64 - v21);</span><br><span class="line">    sub_3151C(v30, v33);</span><br><span class="line">    v23 &#x3D; v27;</span><br><span class="line">    v21 &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  qmemcpy(&amp;v33[v21], &amp;v29[v23], 8 - v23);</span><br><span class="line">  for ( k &#x3D; 0; k !&#x3D; 20; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(output + k) &#x3D; *(unsigned int *)((char *)v30 + (k &amp; 0xFFFFFFFC)) &gt;&gt; (~(_BYTE)v22 &amp; 0x18);</span><br><span class="line">    v22 +&#x3D; 8;</span><br><span class="line">  &#125;</span><br><span class="line">  return _stack_chk_guard - v35;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204182825242.png" alt="image-20211204182825242"></p><p>一个哈希算法主要流程有数据填充、添加长度、初始化变量、数据处理、输出，我们可以尝试通过hook加密函数，观察入参判断填充部分是否发生改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public void hook_3151C()&#123;</span><br><span class="line">    &#x2F;&#x2F; 获取HookZz对象</span><br><span class="line">    IHookZz hookZz &#x3D; HookZz.getInstance(emulator); &#x2F;&#x2F; 加载HookZz，支持inline hook，文档看https:&#x2F;&#x2F;github.com&#x2F;jmpews&#x2F;HookZz</span><br><span class="line">    &#x2F;&#x2F; enable hook</span><br><span class="line">    hookZz.enable_arm_arm64_b_branch(); &#x2F;&#x2F; 测试enable_arm_arm64_b_branch，可有可无</span><br><span class="line">    &#x2F;&#x2F; hook MDStringOld</span><br><span class="line">    hookZz.wrap(module.base + 0x3151C + 1, new WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; &#x2F;&#x2F; inline wrap导出函数</span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 方法执行前</span><br><span class="line">        public void preCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">            &#x2F;&#x2F; 类似于Frida args[0]</span><br><span class="line">            Pointer input &#x3D; ctx.getPointerArg(0);</span><br><span class="line">            byte[] inputhex &#x3D; input.getByteArray(0, 20);</span><br><span class="line">            Inspector.inspect(inputhex, &quot;IV&quot;);</span><br><span class="line"></span><br><span class="line">            Pointer text &#x3D; ctx.getPointerArg(1);</span><br><span class="line">            byte[] texthex &#x3D; text.getByteArray(0, 64);</span><br><span class="line">            Inspector.inspect(texthex, &quot;block&quot;);</span><br><span class="line">            ctx.push(input);</span><br><span class="line">            ctx.push(text);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 方法执行后</span><br><span class="line">        public void postCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">            Pointer text &#x3D; ctx.pop();</span><br><span class="line">            Pointer IV &#x3D; ctx.pop();</span><br><span class="line"></span><br><span class="line">            byte[] IVhex &#x3D; IV.getByteArray(0, 20);</span><br><span class="line">            Inspector.inspect(IVhex, &quot;IV&quot;);</span><br><span class="line"></span><br><span class="line">            byte[] outputhex &#x3D; text.getByteArray(0, 64);</span><br><span class="line">            Inspector.inspect(outputhex, &quot;block out&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    hookZz.disable_arm_arm64_b_branch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211204184216379.png" alt="image-20211204184216379"></p><p>运算函数入参正常，都是填充的明文，不存在自定义填充或者对明文变换的可能，而出参直接返回结果，所以算法不是在标准流程后魔改，而是修改了算法本身。</p><blockquote><p>SHA1和MD5采用了相同的结构，每512比特分组需要一轮运算，我们的输入长度不超过一个分组的长度，所以只用考虑一轮运算。一轮运算是80步，每隔20步是一种模式。</p></blockquote><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211213162040575.png" alt="image-20211213162040575"></p><p>HookZz实现Inline hook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void hook_315B0()&#123;</span><br><span class="line">    IHookZz hookZz &#x3D; HookZz.getInstance(emulator);</span><br><span class="line">    hookZz.enable_arm_arm64_b_branch();</span><br><span class="line"> </span><br><span class="line">    hookZz.instrument(module.base + 0x315B0 + 1, new InstrumentCallback&lt;Arm32RegisterContext&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void dbiCall(Emulator&lt;?&gt; emulator, Arm32RegisterContext ctx, HookEntryInfo info) &#123; &#x2F;&#x2F; 通过base+offset inline wrap内部函数，在IDA看到为sub_xxx那些</span><br><span class="line">            System.out.println(&quot;R2:&quot;+ctx.getR2Long());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我们整体上需要进行十数次甚至数十次的inline hook，在这种情况下，用HookZz就略有些不方便，不妨试试Unidbg的console debugger。</p><p><img src="/2021/11/25/SO%E9%80%86%E5%90%91%E4%B9%8B%E8%9A%82%E8%9C%82%E7%AA%9Dzzzghostsigh/image-20211213163548154.png" alt="image-20211213163548154"></p><p>样本中80步运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">for t in range(80):</span><br><span class="line">    if t &lt;&#x3D; 15:</span><br><span class="line">        K &#x3D; 0x5a827999</span><br><span class="line">        f &#x3D; (b &amp; c) ^ (~b &amp; d)</span><br><span class="line">    elif t &lt;&#x3D; 19:</span><br><span class="line">        K &#x3D; 0x6ed9eba1</span><br><span class="line">        f &#x3D; b ^ c ^ d</span><br><span class="line">    elif t &lt;&#x3D; 39:</span><br><span class="line">        K &#x3D; 0x8f1bbcdc</span><br><span class="line">        f &#x3D; (b &amp; c) ^ (b &amp; d) ^ (c &amp; d)</span><br><span class="line">    elif t &lt;&#x3D; 59:</span><br><span class="line">        K &#x3D; 0x5a827999</span><br><span class="line">        f &#x3D; (b &amp; c) ^ (~b &amp; d)</span><br><span class="line">    else:</span><br><span class="line">        K &#x3D; 0xca62c1d6</span><br><span class="line">        f &#x3D; b ^ c ^ d</span><br></pre></td></tr></table></figure><p>在标准流程中，20步切换一下K和非线性函数，一共4种模式，在样本中，每16步切换一下K和非线性函数，一种五种模式，但本质上依然是标准流程里的四个模式，因为一个模式用了两次。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> unidbg </tag>
            
            <tag> ida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向之京东sign分析</title>
      <link href="/2021/11/21/SO%E9%80%86%E5%90%91%E4%B9%8B%E4%BA%AC%E4%B8%9Csign%E5%88%86%E6%9E%90/"/>
      <url>/2021/11/21/SO%E9%80%86%E5%90%91%E4%B9%8B%E4%BA%AC%E4%B8%9Csign%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>安装某东9.2.2，启动postern，开启socks抓包</p><p><img src="/2021/11/21/SO%E9%80%86%E5%90%91%E4%B9%8B%E4%BA%AC%E4%B8%9Csign%E5%88%86%E6%9E%90/image-20211123171157406.png" alt="image-20211123171157406"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>jadx反编译搜索<code>sign=</code>，出现地方太多随机挑一个</p><p><img src="/2021/11/21/SO%E9%80%86%E5%90%91%E4%B9%8B%E4%BA%AC%E4%B8%9Csign%E5%88%86%E6%9E%90/image-20211123173546558.png" alt="image-20211123173546558"></p><p>跟进<code>HMACSHA256</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private static String HMACSHA256(byte[] bArr, byte[] bArr2) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        SecretKeySpec secretKeySpec &#x3D; new SecretKeySpec(bArr2, &quot;HmacSHA256&quot;);</span><br><span class="line">        Mac instance &#x3D; Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class="line">        instance.init(secretKeySpec);</span><br><span class="line">        return byte2hex(instance.doFinal(bArr));</span><br><span class="line">    &#125; catch (NoSuchAlgorithmException e2) &#123;</span><br><span class="line">        e2.printStackTrace();</span><br><span class="line">        return null;</span><br><span class="line">    &#125; catch (InvalidKeyException e3) &#123;</span><br><span class="line">        e3.printStackTrace();</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>adb shell dumpsys activity activities|more</code>  查看当前运行app的进程名为<code>com.jingdong.app.mall</code>，尝试使用frida对<code>SecretKeySpec</code>进行hook时<code>SecretKeySpec</code>报错<code>secretKeySpec.$init.overload().implementation</code></p><p><img src="/2021/11/21/SO%E9%80%86%E5%90%91%E4%B9%8B%E4%BA%AC%E4%B8%9Csign%E5%88%86%E6%9E%90/image-20211123192936635.png" alt="image-20211123192936635"></p><p>启动了frida-server，app就进程卡死，被检测到了frida，具体方案查看<a href="https://bbs.pediy.com/thread-217482.htm" target="_blank" rel="noopener">多种特征检测 Frida</a></p><p>尝试修改frida名字为<code>fs1280arm64</code>,不以默认端口27047启动<code>./fs1280arm64 -l 127.0.0.1:8080</code>，转发端口到主机<code>adb forward tcp:8080 tcp:8080</code></p><h2 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h2><p><code>frida -H 127.0.0.1:8080 com.jingdong.app.mall -l jd.js </code>   根据反编译源码判断可能是MAC，结果并没有hook上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function()&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var threadef &#x3D; Java.use(&#39;java.lang.Thread&#39;);</span><br><span class="line">        var threadinstance &#x3D; threadef.$new();</span><br><span class="line"></span><br><span class="line">        var secretKeySpec &#x3D; Java.use(&#39;javax.crypto.spec.SecretKeySpec&#39;);</span><br><span class="line">        secretKeySpec.$init.overload(&#39;[B&#39;,&#39;java.lang.String&#39;).implementation &#x3D; function (a,b) &#123;</span><br><span class="line"></span><br><span class="line">            var result &#x3D; this.$init(a, b);</span><br><span class="line">            console.log(&quot;&gt;&gt;&gt; 算法名&quot; + b);</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var mac &#x3D; Java.use(&#39;javax.crypto.Mac&#39;);</span><br><span class="line">        mac.getInstance.overload(&#39;java.lang.String&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">            &#x2F;&#x2F; showStacks();</span><br><span class="line">            var result &#x3D; this.getInstance(a);</span><br><span class="line">            console.log(&quot;mac &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            console.log(&quot;算法名：&quot; + a);</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        mac.update.overload(&#39;[B&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">            &#x2F;&#x2F; showStacks();</span><br><span class="line">            this.update(a);</span><br><span class="line">            console.log(&quot;mac &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            console.log(&quot;update:&quot; + bytesToString(a))</span><br><span class="line">        &#125;</span><br><span class="line">        mac.update.overload(&#39;[B&#39;,&#39;int&#39;,&#39;int&#39;).implementation &#x3D; function (a,b,c) &#123;</span><br><span class="line">            &#x2F;&#x2F; showStacks();</span><br><span class="line">            this.update(a,b,c)</span><br><span class="line">            console.log(&quot;mac &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            console.log(&quot;update:&quot; + bytesToString(a) + &quot;|&quot; + b + &quot;|&quot; + c);</span><br><span class="line">        &#125;</span><br><span class="line">        mac.doFinal.overload().implementation &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F; showStacks();</span><br><span class="line">            var result &#x3D; this.doFinal();</span><br><span class="line">            console.log(&quot;mac &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            console.log(&quot;doFinal结果(hex):&quot; + bytesToHex(result));</span><br><span class="line">            console.log(&quot;doFinal结果(base64):&quot; + bytesToBase64(result));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        mac.doFinal.overload(&#39;[B&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">            &#x2F;&#x2F; showStacks();</span><br><span class="line">            var result &#x3D; this.doFinal(a);</span><br><span class="line">            console.log(&quot;mac &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            console.log(&quot;doFinal参数:&quot; + bytesToString(a));</span><br><span class="line">            console.log(&quot;doFinal结果(hex):&quot; + bytesToHex(result));</span><br><span class="line">            console.log(&quot;doFinal结果(base):&quot; + bytesToBase64(result));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们尝试通过hook http，打印调用栈获取堆栈信息，或者hook系统时间函数（因为参数中拼装了st的时间戳），找到sign可能存在的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var OkHttpClient &#x3D; Java.use(&quot;okhttp3.OkHttpClient&quot;);</span><br><span class="line"></span><br><span class="line">OkHttpClient.newCall.implementation &#x3D; function (request) &#123;</span><br><span class="line">    var result &#x3D; this.newCall(request);</span><br><span class="line">    console.log(request.toString());</span><br><span class="line"></span><br><span class="line">    var stack &#x3D; threadinstance.currentThread().getStackTrace();</span><br><span class="line">    console.log(&quot;http &gt;&gt;&gt; Full call stack:&quot; + Where(stack));</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var SystemClass &#x3D; Java.use(&#39;java.lang.System&#39;);</span><br><span class="line">SystemClass.currentTimeMillis.implementation &#x3D; function()&#123;</span><br><span class="line">var result &#x3D; this.currentTimeMillis();</span><br><span class="line">console.log(&quot;&#x3D;&#x3D;&#x3D;&#x3D; &quot; + result + &quot; &#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/21/SO%E9%80%86%E5%90%91%E4%B9%8B%E4%BA%AC%E4%B8%9Csign%E5%88%86%E6%9E%90/image-20211230154658576.png" alt="image-20211230154658576"></p><p>在jadx中搜索<code>com.jingdong.sdk.jdupgrade.inner</code>也一无所获，大概率在so里干完了。通过在so中搜索<code>grep &quot;sign&quot; *.so</code>或者<code>strings -f *.so | grep &quot;Sign&quot;</code>批量搜索so中的字符串</p><p><img src="/2021/11/21/SO%E9%80%86%E5%90%91%E4%B9%8B%E4%BA%AC%E4%B8%9Csign%E5%88%86%E6%9E%90/image-20211230162135941.png" alt="image-20211230162135941"></p><p>使用ida打开libjdbitmapkit.so，搜索<code>sign</code>静态绑定函数，尝试hook该方法<code>com.jingdong.common.utils.BitmapkitUtils</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var checkHookG &#x3D; Java.use(&#39;com.jingdong.common.utils.BitmapkitUtils&#39;);</span><br><span class="line">checkHookG.getSignFromJni.implementation &#x3D; function(a,b,c,d,e,f)&#123;</span><br><span class="line">var result &#x3D; this.getSignFromJni(a,b,c,d,e,f);</span><br><span class="line">console.log(&quot;&gt;&gt;&gt; checkHookG &#x3D; &quot; + b + &#39; &#x2F; &#39; + c + &#39; &#x2F; &#39; + d + &#39; &#x2F; &#39; + d + &#39; &#x2F; &#39; + f + &#39; \n rc&#x3D; &#39; + result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; var stack &#x3D; threadinstance.currentThread().getStackTrace();</span><br><span class="line">    &#x2F;&#x2F; console.log(&quot;Full call stack:&quot; + Where(stack));</span><br><span class="line"></span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/21/SO%E9%80%86%E5%90%91%E4%B9%8B%E4%BA%AC%E4%B8%9Csign%E5%88%86%E6%9E%90/image-20211230162530040.png" alt="image-20211230162530040"></p><p>查看<code>BitmapkitUtils</code>类，一共5个参数都是String</p><p><img src="/2021/11/21/SO%E9%80%86%E5%90%91%E4%B9%8B%E4%BA%AC%E4%B8%9Csign%E5%88%86%E6%9E%90/image-20211230164000220.png" alt="image-20211230164000220"></p><h3 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function hookBitmapkitUtils() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var currentApplication &#x3D; Java.use(&#39;android.app.ActivityThread&#39;).currentApplication(); </span><br><span class="line">        var context &#x3D; currentApplication.getApplicationContext();</span><br><span class="line">        Java.choose(&quot;com.jingdong.common.utils.BitmapkitUtils&quot;,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                console.log(&quot;found instance &#x3D;&gt;&quot;,instance);</span><br><span class="line">                var a &#x3D; &quot;search&quot;;</span><br><span class="line">                var b &#x3D; &#39;&#123;&quot;addrFilter&quot;:&quot;1&quot;,&quot;addressId&quot;:&quot;0&quot;,&quot;articleEssay&quot;:&quot;1&quot;,&quot;deviceidTail&quot;:&quot;35&quot;,&quot;exposedCount&quot;:&quot;0&quot;,&quot;gcLat&quot;:&quot;0.0&quot;,&quot;gcLng&quot;:&quot;0.0&quot;,&quot;imagesize&quot;:&#123;&quot;gridImg&quot;:&quot;709x709&quot;,&quot;listImg&quot;:&quot;455x455&quot;,&quot;longImg&quot;:&quot;709x908&quot;&#125;,&quot;insertArticle&quot;:&quot;1&quot;,&quot;insertScene&quot;:&quot;1&quot;,&quot;insertedCount&quot;:&quot;0&quot;,&quot;isCorrect&quot;:&quot;1&quot;,&quot;keyword&quot;:&quot;gg&quot;,&quot;locLat&quot;:&quot;&quot;,&quot;locLng&quot;:&quot;&quot;,&quot;newMiddleTag&quot;:&quot;1&quot;,&quot;newVersion&quot;:&quot;3&quot;,&quot;oneBoxMod&quot;:&quot;1&quot;,&quot;orignalSearch&quot;:&quot;1&quot;,&quot;orignalSelect&quot;:&quot;1&quot;,&quot;page&quot;:&quot;1&quot;,&quot;pageEntrance&quot;:&quot;1&quot;,&quot;pagesize&quot;:&quot;10&quot;,&quot;pvid&quot;:&quot;&quot;,&quot;searchVersionCode&quot;:&quot;9180&quot;,&quot;secondInsedCount&quot;:&quot;0&quot;,&quot;showShopTab&quot;:&quot;yes&quot;,&quot;showStoreTab&quot;:&quot;1&quot;,&quot;stock&quot;:&quot;1&quot;&#125;&#39;</span><br><span class="line">                var c &#x3D; &#39;-accf8528c046&#39;</span><br><span class="line">                var d &#x3D; &#39;-accf8528c046&#39;</span><br><span class="line">                var e &#x3D; &#39;9.2.2&#39;</span><br><span class="line">                var signature &#x3D; instance.getSignFromJni(context, a, b, c, d, e)</span><br><span class="line">                console.log(signature)</span><br><span class="line">                return signature</span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&#39;Search complete&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h2><p>尝试主动调用com.jingdong.common.utils.BitmapkitUtils的getSignFromJni，传入通过frida hook得到的参数信息，暴露http请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">public class HookLoader implements IXposedHookLoadPackage &#123;</span><br><span class="line">    private final static String TAG &#x3D; &quot;onejane&quot;;</span><br><span class="line"></span><br><span class="line">    public static void log(String s) &#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Context applicationContext;</span><br><span class="line"></span><br><span class="line">    public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">        if (loadPackageParam.packageName.equals(&quot;com.jingdong.app.mall&quot;)) &#123;</span><br><span class="line">            log(&quot;Im comming jd 1&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                Class&lt;?&gt; ContextClass &#x3D; XposedHelpers.findClass(&quot;android.content.ContextWrapper&quot;, loadPackageParam.classLoader);</span><br><span class="line">                XposedHelpers.findAndHookMethod(ContextClass, &quot;getApplicationContext&quot;, new XC_MethodHook() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                        super.afterHookedMethod(param);</span><br><span class="line">                        if (applicationContext !&#x3D; null)</span><br><span class="line">                            return;</span><br><span class="line">                        applicationContext &#x3D; (Context) param.getResult();</span><br><span class="line">                        log(&quot;--&gt;得到上下文&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                log(&quot;--&gt;获取上下文出错&quot;);</span><br><span class="line">                &#x2F;&#x2F; XposedBridge.log(t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; http server</span><br><span class="line">            class myHttpServer extends NanoHTTPD &#123;</span><br><span class="line">                private static final String REQUEST_ROOT &#x3D; &quot;&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">                public myHttpServer() throws IOException &#123;</span><br><span class="line">                    &#x2F;&#x2F; 端口是8088，也就是说要通过http:&#x2F;&#x2F;127.0.0.1:8088来访当问</span><br><span class="line">                    super(8888);</span><br><span class="line">                    start(NanoHTTPD.SOCKET_READ_TIMEOUT, true);</span><br><span class="line">                    log(&quot;---fenfei Server---&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public Response serve(IHTTPSession session) &#123;</span><br><span class="line">                    &#x2F;&#x2F; log(&quot;serve&quot;);</span><br><span class="line">                    &#x2F;&#x2F;这个就是之前分析，重写父类的一个参数的方法，</span><br><span class="line">                    &#x2F;&#x2F;这里边已经把所有的解析操作已经在这里执行了</span><br><span class="line">                    return super.serve(session);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public Response serve(String uri, Method method, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; parms, Map&lt;String, String&gt; files) &#123;</span><br><span class="line">                    &#x2F;&#x2F; log(&quot;serve xxx&quot;);</span><br><span class="line">                    &#x2F;&#x2F;这就是上边的serve方法最后一行调用的那个过时的方法，这里简单的做个判断就好了</span><br><span class="line">                    &#x2F;&#x2F; if (!method.equals(Method.POST)) &#123;&#x2F;&#x2F;判断请求方式是否争取</span><br><span class="line">                    &#x2F;&#x2F;    return newFixedLengthResponse(&quot;the request method is incoorect&quot;);</span><br><span class="line">                    &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">                    log(uri);</span><br><span class="line"></span><br><span class="line">                    String strA &#x3D; &quot;&quot;;</span><br><span class="line">                    String strB &#x3D; &quot;&quot;;</span><br><span class="line">                    for (Map.Entry&lt;String, String&gt; entry : parms.entrySet()) &#123;</span><br><span class="line">                        strA +&#x3D; &quot; parms Key &#x3D; &quot; + entry.getKey() + &quot;, Value &#x3D; &quot; + entry.getValue();</span><br><span class="line">                        log(&quot;parms Key &#x3D; &quot; + entry.getKey() + &quot;, Value &#x3D; &quot; + entry.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    for (Map.Entry&lt;String, String&gt; entry : files.entrySet()) &#123;</span><br><span class="line">                        strB +&#x3D; &quot; files Key &#x3D; &quot; + entry.getKey() + &quot;, Value &#x3D; &quot; + entry.getValue();</span><br><span class="line">                        log(&quot;files Key &#x3D; &quot; + entry.getKey() + &quot;, Value &#x3D; &quot; + entry.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Class&lt;?&gt; clazzJDUtils &#x3D; null;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        clazzJDUtils &#x3D; loadPackageParam.classLoader.loadClass(&quot;com.jingdong.common.utils.BitmapkitUtils&quot;);</span><br><span class="line">                        log(&quot;load class:&quot; + clazzJDUtils);</span><br><span class="line">                    &#125; catch (Exception e) &#123;</span><br><span class="line">                        log(&quot;load class err:&quot; + Log.getStackTraceString(e));</span><br><span class="line">                        return newFixedLengthResponse(&quot;BitmapkitUtils load class is null&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (StringUtils.containsIgnoreCase(uri, &quot;getSignFromJni&quot;)) &#123;&#x2F;&#x2F;判断uri是否正确</span><br><span class="line">                        String str &#x3D; parms.get(&quot;str&quot;);</span><br><span class="line">                        String str2 &#x3D; parms.get(&quot;str2&quot;);</span><br><span class="line">                        String str3 &#x3D; parms.get(&quot;str3&quot;);</span><br><span class="line">                        String str4 &#x3D; parms.get(&quot;str4&quot;);</span><br><span class="line">                        String str5 &#x3D; parms.get(&quot;str5&quot;);</span><br><span class="line">                        log(&quot;getSignFromJni:&quot; + str + &quot; &#x2F; &quot; + str2 + &quot; &#x2F; &quot; + str3 + &quot; &#x2F; &quot; + str4 + &quot; &#x2F; &quot; + str5);</span><br><span class="line"></span><br><span class="line">                        if (!StringUtils.isEmpty(str)) &#123;&#x2F;&#x2F;判断post过来的数据是否正确</span><br><span class="line">                            return getSignFromJni(clazzJDUtils, str, str2, str3, str4, str5);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            return newFixedLengthResponse(&quot;getSignFromJni postData is null, &quot; + strA + strB);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;判断完了开始解析数据，如果是你想要的数据，那么你就给返回一个正确的格式就好了</span><br><span class="line">                    &#x2F;&#x2F;举个栗子：return newFixedLengthResponse(&quot;&#123;\&quot;result\&quot;:0,\&quot;success\&quot;:true&#125;&quot;);</span><br><span class="line">                    return super.serve(uri, method, headers, parms, files);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                public Response getSignFromJni(Class&lt;?&gt; clazzUse, String str, String str2, String str3, String str4, String str5) &#123;</span><br><span class="line"></span><br><span class="line">                    if (applicationContext !&#x3D; null) &#123;</span><br><span class="line">                        String rc &#x3D; (String) XposedHelpers.callStaticMethod(clazzUse, &quot;getSignFromJni&quot;, applicationContext, str, str2, str3, str4, str5);</span><br><span class="line">                        log(&quot;getSignFromJni &#x3D; &quot; + rc);</span><br><span class="line">                        return newFixedLengthResponse(rc);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    return newFixedLengthResponse(&quot;getSignFromJni Context is null&quot;);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            new myHttpServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getKey(k1, k2, k3, k4, k5):</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &quot;str&quot;: k1,</span><br><span class="line">        &quot;str2&quot;: k2,</span><br><span class="line">        &quot;str3&quot;: k3,</span><br><span class="line">        &quot;str4&quot;: k4,</span><br><span class="line">        &quot;str5&quot;: k5,</span><br><span class="line">    &#125;</span><br><span class="line">    sign &#x3D; requests.get(&quot;http:&#x2F;&#x2F;172.20.103.239:8888&#x2F;getSignFromJni&quot;, data).text</span><br><span class="line">    return sign</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line"></span><br><span class="line">    body &#x3D; &#39;&#123;&quot;addrFilter&quot;:&quot;1&quot;,&quot;addressId&quot;:&quot;0&quot;,&quot;articleEssay&quot;:&quot;1&quot;,&quot;deviceidTail&quot;:&quot;35&quot;,&quot;exposedCount&quot;:&quot;0&quot;,&quot;gcLat&quot;:&quot;0.0&quot;,&quot;gcLng&quot;:&quot;0.0&quot;,&quot;imagesize&quot;:&#123;&quot;gridImg&quot;:&quot;709x709&quot;,&quot;listImg&quot;:&quot;455x455&quot;,&quot;longImg&quot;:&quot;709x908&quot;&#125;,&quot;insertArticle&quot;:&quot;1&quot;,&quot;insertScene&quot;:&quot;1&quot;,&quot;insertedCount&quot;:&quot;0&quot;,&quot;isCorrect&quot;:&quot;1&quot;,&quot;keyword&quot;:&quot;冰箱&quot;,&quot;localNum&quot;:&quot;0&quot;,&quot;newMiddleTag&quot;:&quot;1&quot;,&quot;newVersion&quot;:&quot;3&quot;,&quot;oneBoxMod&quot;:&quot;1&quot;,&quot;orignalSearch&quot;:&quot;1&quot;,&quot;orignalSelect&quot;:&quot;1&quot;,&quot;page&quot;:&quot;1&quot;,&quot;pageEntrance&quot;:&quot;1&quot;,&quot;pagesize&quot;:&quot;10&quot;,&quot;pvid&quot;:&quot;&quot;,&quot;searchVersionCode&quot;:&quot;9180&quot;,&quot;secondInsedCount&quot;:&quot;0&quot;,&quot;showShopTab&quot;:&quot;yes&quot;,&quot;showStoreTab&quot;:&quot;1&quot;,&quot;stock&quot;:&quot;1&quot;&#125;&#39;</span><br><span class="line">    sign &#x3D; getKey(&quot;search&quot;,</span><br><span class="line">                  body,</span><br><span class="line">                  &quot;-accf8528c046&quot;,</span><br><span class="line">                  &quot;-accf8528c046&quot;,</span><br><span class="line">                  &quot;9.2.2&quot;)</span><br><span class="line">    print(sign)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/21/SO%E9%80%86%E5%90%91%E4%B9%8B%E4%BA%AC%E4%B8%9Csign%E5%88%86%E6%9E%90/image-20211230173844944.png" alt="image-20211230173844944"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> unidbg </tag>
            
            <tag> ida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之腾讯视频wasm的ckey分析</title>
      <link href="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/"/>
      <url>/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近对腾讯视频下手了，因为公众号中的视频来源都是腾讯视频，也就是说通过2分钟阅读本文，腾讯视频下整站视频都可以下载下来，也是大多数在线解析vip等视频网站底层实现逻辑，接下来就是建站接广告接流量接法院传单。。。。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过点击播放抓包发现不停的请求<code>http://btrace.video.qq.com/kvcollect</code>，点击发现没有发现，不过这些请求都是m3u8格式片段，我们大胆猜测这是m3u8，将视频切成无数ts小段，一段一段加载播放，可以根据网络状况自动切换视频清晰度，保障流畅播放。那么这种播放方式前端一定有请求索引文件保存ts文件，保存了网络url链接，这些链接顺序播放就完成了整个视频的播放。而我们数据抓取只需要关注这个文件，m3u8转为mp4格式，具体转换代码见<a href="https://github.com/OneJane/datautil" target="_blank" rel="noopener">https://github.com/OneJane/datautil</a></p><p>废话一堆，开始寻找m3u8请求，通过过滤筛选找到该请求后,<code>http://58.216.106.14/omts.tc.qq.com/AjzDO1DrTOFhSuI4sQa-qkOmtUv8yq9UrejaLeSKpF2M/uwMROfz2r57BIaQXGdGnC2deOm7WRbkbfdWCxMUsemsF2Gfz/svp_50001/NO3RnkZVfa4hKoQCijd2VpXELo5sw-cgX_CMZmI7XeU8ZfKGTirnxL1xJGXvDq2mliBQiL2MqcB6egr3lk7nk3wyBP18yb1lGlcVFNCkQ82kNml8GgGg4BbokC6yjxDcIJIVugQ8OkIG6GOCUijW9a3QpotWcmbZTrCI5kfpcYxax9isGSZL7Q/szg_3772_50001_0bc3hqaciaaameaajrug6rqvcpgdeq6aajca.f304110.ts.m3u8?ver=4</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118104209014.png" alt="image-20211118104209014"></p><p>这个请求除去域名外所有参数都加密了，随便找一段加密参数随便搜搜，找到了目标请求<code>http://vd.l.qq.com/proxyhttp</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118104437433.png" alt="image-20211118104437433"></p><p>通过json格式化<code>vinfo</code>参数可以判断<code>url+pt</code>即可拿到我们想要的m3u8文件</p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118104545519.png" alt="image-20211118104545519"></p><h2 id="好戏开场了"><a href="#好戏开场了" class="headerlink" title="好戏开场了"></a>好戏开场了</h2><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118111328814.png" alt="image-20211118111328814"></p><p>参数做减法，去除<code>adparam</code>和<code>vinfoparam</code>中的<code>logintoken</code>和<code>ehost</code>，重点关注<code>guid</code>，<code>flowid</code>，<code>cKey</code>，<code>tm</code>就是时间戳，<code>vid</code>就是请求中的视频id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">spsrt&#x3D;1</span><br><span class="line">charge&#x3D;0</span><br><span class="line">defaultfmt&#x3D;auto</span><br><span class="line">otype&#x3D;ojson</span><br><span class="line">guid&#x3D;a66e56d20401a21c8a35e92ad94eebde</span><br><span class="line">flowid&#x3D;82a7dcecd17cede6b9dc02a39571c4bc_70201</span><br><span class="line">platform&#x3D;70201</span><br><span class="line">sdtfrom&#x3D;v1104</span><br><span class="line">defnpayver&#x3D;0</span><br><span class="line">appVer&#x3D;3.4.40</span><br><span class="line">host&#x3D;v.qq.com</span><br><span class="line">refer&#x3D;v.qq.com</span><br><span class="line">sphttps&#x3D;0</span><br><span class="line">tm&#x3D;1637204401</span><br><span class="line">spwm&#x3D;4</span><br><span class="line">vid&#x3D;s3306hychob</span><br><span class="line">defn&#x3D;</span><br><span class="line">fhdswitch&#x3D;0</span><br><span class="line">show1080p&#x3D;0</span><br><span class="line">isHLS&#x3D;1</span><br><span class="line">dtype&#x3D;3</span><br><span class="line">sphls&#x3D;1</span><br><span class="line">spgzip&#x3D;</span><br><span class="line">dlver&#x3D;</span><br><span class="line">hdcp&#x3D;0</span><br><span class="line">spau&#x3D;1</span><br><span class="line">spaudio&#x3D;15</span><br><span class="line">defsrc&#x3D;1</span><br><span class="line">encryptVer&#x3D;9.1</span><br><span class="line">cKey&#x3D;doItDoTdYRR79ZEItZs_lpJX5WFNi2CdS8kE1h7qVaqtHEZQ1c_X6m2O8hQenWPBG5hnGM2UODs52vPBr7VR-rE3OCFTLlH3-xN1QMZmGWCleJdQ62v6N6dvhRBy86U5pyEtRx0KHILNluNDEH6IC8EOljLQ2VfW2sTdospNPlD9535CNT9iSo3cLRH93ogtX_OJeYNVWrDYS8btjkFpGl3F3IxmISJc_8dRIBruTik-e4rt0isxZAXexKqWDJGxu2qxHq-QxHER_ek2fB1T6ywJriVO0ksOGo7_XQLdE-FshP9ARvdxQlEJPKWtziEF2xwGBgYGBgY0KhFT</span><br></pre></td></tr></table></figure><p>打上xhr断点<code>vd.l.qq.com/proxyhttp</code>，在调用栈中<code>r.requestPostCgi</code>中参数已经生成，继续向上追溯</p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118111946614.png" alt="image-20211118111946614"></p><p>追溯到<code>requestNewGetinfoImpl</code>，该方法中<code>p.requestPostCgi</code>发起请求参数已经封装完成，手动调用<code>this.getInfoConfig(&quot;vinfoad&quot;, i)</code>时cKey及<code>guid</code>，<code>flowid</code>都已经加密完成。</p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118112638271.png" alt="image-20211118112638271"></p><p>进入<code>getInfoConfig</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118125328128.png" alt="image-20211118125328128"></p><p>在如下这段代码中guid不存在时，<code>guid: this.context.dataset.guid</code>将通过<code>l.getUserId(this.context.config)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.context.dataset.guid || (this.context.config.guid &#x3D; l.getUserId(this.context.config),</span><br><span class="line">this.context.dataset.guid &#x3D; this.context.config.guid);</span><br></pre></td></tr></table></figure><p>由于<code>l = o(436)</code>，进入<code>436: function(e, t, o)</code>找到了<code>getUserId</code>，当从本地或者内存中取不到时调用<code>d.createGUID()</code>，也就是随机32位字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getUserId: function(e) &#123;</span><br><span class="line">    var t &#x3D; e.guid || d.getData(i.localStorageKey.userId);</span><br><span class="line">    return e.guid || !d.browser.pcqqlive &amp;&amp; !d.browser.macqqlive || (t &#x3D; (t &#x3D; d.getPcClientGuid()) || d.getData(i.localStorageKey.userId)),</span><br><span class="line">    t || (t &#x3D; d.createGUID(),</span><br><span class="line">    d.setData(i.localStorageKey.userId, t)),</span><br><span class="line">    t</span><br><span class="line">&#125;,</span><br><span class="line">createGUID: function(e) &#123;</span><br><span class="line">    e &#x3D; e || 32;</span><br><span class="line">    for (var t &#x3D; &quot;&quot;, o &#x3D; 1; o &lt;&#x3D; e; o++) &#123;</span><br><span class="line">        t +&#x3D; Math.floor(16 * Math.random()).toString(16)</span><br><span class="line">    &#125;</span><br><span class="line">    return t</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>至于<code>flowid</code>跟踪代码得知是通过随机32位字符串_70201</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">updatePlayerId: function() &#123;</span><br><span class="line">    this.context.dataset.playerId &#x3D; l.createGUID(),</span><br><span class="line">    this.context.dataset.flowid &#x3D; this.context.dataset.playerId + &quot;_&quot; + this.context.dataset.platform</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在执行<code>m(s)</code>前s中没有<code>cKey</code>的值，执行后<code>cKey</code>生成</p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118131250093.png" alt="image-20211118131250093"></p><h2 id="cKey逆向"><a href="#cKey逆向" class="headerlink" title="cKey逆向"></a>cKey逆向</h2><p>可以将整个js拷贝出来放到vs code中分析。</p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118135005696.png" alt="image-20211118135005696"></p><p>修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var createGUID &#x3D; function(e) &#123;</span><br><span class="line">    e &#x3D; e || 32;</span><br><span class="line">    for (var t &#x3D; &quot;&quot;, o &#x3D; 1; o &lt;&#x3D; e; o++) &#123;</span><br><span class="line">        t +&#x3D; Math.floor(16 * Math.random()).toString(16)</span><br><span class="line">    &#125;</span><br><span class="line">    return t</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; n函数存在走 (e.encryptVer &#x3D; &quot;9.1&quot;,n(e.platform, e.appVer, e.vids || e.vid, &quot;&quot;, e.guid, e.tm))</span><br><span class="line">function m(e) &#123;</span><br><span class="line">    &#x2F;&#x2F; var t &#x3D; n ? (e.encryptVer &#x3D; &quot;9.1&quot;,</span><br><span class="line">    &#x2F;&#x2F; n(e.platform, e.appVer, e.vids || e.vid, &quot;&quot;, e.guid, e.tm)) : (e.encryptVer &#x3D; &quot;8.1&quot;,</span><br><span class="line">    &#x2F;&#x2F; a(e.vids || e.vid, e.tm, e.appVer, e.guid, e.platform));</span><br><span class="line">    var t &#x3D; n(&quot;70201&quot;, &quot;3.4.40&quot;, &quot;s3306hychob&quot;, &quot;&quot;, createGUID(), Date.parse(new Date()).toString().substr(0,10))</span><br><span class="line">    return t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入n函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; r.cwrap(&quot;getckey&quot;, &quot;string&quot;, [&quot;number&quot;, &quot;string&quot;, &quot;string&quot;, &quot;string&quot;, &quot;string&quot;, &quot;number&quot;]),</span><br><span class="line">h.cwrap &#x3D; function(e, t, o, i) &#123;</span><br><span class="line">    return function() &#123;</span><br><span class="line">        return u(e, t, o, arguments)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118140423430.png" alt="image-20211118140423430"></p><p>进入u函数，其中w函数就是判断存在否则异常报错，Ge根据值是否存在校验跑错，没有操作逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; function w(e, t) &#123;</span><br><span class="line">&#x2F;&#x2F;     e || Ge(&quot;Assertion failed: &quot; + t)</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; function Ge(t) &#123;</span><br><span class="line">&#x2F;&#x2F;     h.onAbort &amp;&amp; h.onAbort(t),</span><br><span class="line">&#x2F;&#x2F;     t &#x3D; void 0 !&#x3D;&#x3D; t ? (r(t),</span><br><span class="line">&#x2F;&#x2F;     y(t),</span><br><span class="line">&#x2F;&#x2F;     JSON.stringify(t)) : &quot;&quot;,</span><br><span class="line">&#x2F;&#x2F;     v &#x3D; !0,</span><br><span class="line">&#x2F;&#x2F;     0;</span><br><span class="line">&#x2F;&#x2F;     var o &#x3D; &quot;abort(&quot; + t + &quot;) at &quot; + P();</span><br><span class="line">&#x2F;&#x2F;     throw $e &amp;&amp; $e.forEach(function(e) &#123;</span><br><span class="line">&#x2F;&#x2F;         o &#x3D; e(o, t)</span><br><span class="line">&#x2F;&#x2F;     &#125;),</span><br><span class="line">&#x2F;&#x2F;     o</span><br><span class="line">&#x2F;&#x2F;     return t</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">function w(e, t) &#123;</span><br><span class="line">    return e</span><br><span class="line">&#125;</span><br><span class="line">function u(e, t, o, i, n) &#123;</span><br><span class="line">    var r, a, s &#x3D; (w(a &#x3D; h[&quot;_&quot; + (r &#x3D; e)], &quot;Cannot call unknown function &quot; + r + &quot;, make sure it is exported&quot;),</span><br><span class="line">    a), c &#x3D; [], d &#x3D; 0;</span><br><span class="line">    if (w(&quot;array&quot; !&#x3D;&#x3D; t, &#39;Return type should not be &quot;array&quot;.&#39;),</span><br><span class="line">    i)</span><br><span class="line">        for (var l &#x3D; 0; l &lt; i.length; l++) &#123;</span><br><span class="line">            var u &#x3D; x[o[l]];</span><br><span class="line">            u ? (0 &#x3D;&#x3D;&#x3D; d &amp;&amp; (d &#x3D; je()),</span><br><span class="line">            c[l] &#x3D; u(i[l])) : c[l] &#x3D; i[l]</span><br><span class="line">        &#125;</span><br><span class="line">    var f, p &#x3D; s.apply(null, c);</span><br><span class="line">    return f &#x3D; p,</span><br><span class="line">    p &#x3D; &quot;string&quot; &#x3D;&#x3D;&#x3D; t ? T(f) : &quot;boolean&quot; &#x3D;&#x3D;&#x3D; t ? Boolean(f) : f,</span><br><span class="line">    0 !&#x3D;&#x3D; d &amp;&amp; He(d),</span><br><span class="line">    p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118140842079.png" alt="image-20211118140842079"></p><p>打印出<code>h[&quot;_&quot; + (r = e)]</code>,进入后调用了wasm中的函数，即0005098e中的函数，截止到目前为止如果不手动新建wasm对象，逆向cKey将无法继续进行下去</p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118141158785.png" alt="image-20211118141158785"></p><h2 id="wasm"><a href="#wasm" class="headerlink" title="wasm"></a>wasm</h2><p>搜索wasm请求，下载wasm文件，该文件在web环境中作为体积小且加载快的二进制格式指令集合，我们不关心底层编译实现，直接通过api调用完成逆向分析。</p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118144015762.png" alt="image-20211118144015762"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">var wasm_data &#x3D; fs.readFileSync(&#39;.&#x2F;ckey.wasm&#39;)</span><br><span class="line">var buffer &#x3D; new Uint8Array(wasm_data);</span><br><span class="line">var wasmobject &#x3D; new WebAssembly.Instance(new WebAssembly.Module(buffer));</span><br></pre></td></tr></table></figure><p>报错：<code>WebAssembly.Instance(): Imports argument must be present and must be an object</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var wasm_env &#x3D; &#123;</span><br><span class="line">&#125;;</span><br><span class="line">var wasmobject &#x3D; new WebAssembly.Instance(new WebAssembly.Module(buffer), wasm_env);</span><br></pre></td></tr></table></figure><p>报错：<code>Import #0 module=&quot;env&quot; error: module is not an object or function</code></p><p>重点关注<code>445: function(Ke, e, t)</code>的<code>return WebAssembly.instantiate(e, c)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var s, c &#x3D; &#123;</span><br><span class="line">    global: null,</span><br><span class="line">    env: null,</span><br><span class="line">    asm2wasm: g,</span><br><span class="line">    parent: h</span><br><span class="line">&#125;;</span><br><span class="line">var g &#x3D; &#123;</span><br><span class="line">    &quot;f64-rem&quot;: function(e, t) &#123;</span><br><span class="line">        return e % t</span><br><span class="line">    &#125;,</span><br><span class="line">    debugger: function() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118152608418.png" alt="image-20211118152608418"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 由于h的实现太过复杂，目前只用&#123;&#125;替代</span><br><span class="line">var wasm_env &#x3D; &#123;</span><br><span class="line">    global: &#123;&#125;,</span><br><span class="line">    env: &#123;&#125;,</span><br><span class="line">    asm2wasm: &#123;</span><br><span class="line">        &quot;f64-rem&quot;: function(e, t) &#123;</span><br><span class="line">            return e % t</span><br><span class="line">        &#125;,</span><br><span class="line">        debugger: function() &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    parent: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>报错：<code>Import #0 module=&quot;env&quot; function=&quot;enlargeMemory&quot; error: function import requires a callable</code>。在h.asmLibraryArg中查看环境变量信息，由于Ge函数只校验参数抛错，所以直接用空函数代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enlargeMemory: K</span><br><span class="line">function K() &#123;</span><br><span class="line">    G()</span><br><span class="line">&#125;</span><br><span class="line">function G() &#123;</span><br><span class="line">    Ge(&quot;Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY&#x3D;X  with X higher than the current value &quot; + Q + &quot;, (2) compile with  -s ALLOW_MEMORY_GROWTH&#x3D;1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC&#x3D;0 &quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加环境变量中的env参数enlargeMemory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var fun_ &#x3D; function () &#123; &#125;;</span><br><span class="line">var wasm_env &#x3D; &#123;</span><br><span class="line">    global: &#123;&#125;,</span><br><span class="line">    env: &#123;</span><br><span class="line">        enlargeMemory: fun_,</span><br><span class="line">    &#125;,</span><br><span class="line">    asm2wasm: &#123;</span><br><span class="line">        &quot;f64-rem&quot;: function(e, t) &#123;</span><br><span class="line">            return e % t</span><br><span class="line">        &#125;,</span><br><span class="line">        debugger: function() &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    parent: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>报错：<code>Import #1 module=&quot;env&quot; function=&quot;getTotalMemory&quot; error: function import requires a callable</code>,以上同理，以空函数代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">var wasm_env &#x3D; &#123;</span><br><span class="line">    global: &#123;&#125;,</span><br><span class="line">    env: &#123;</span><br><span class="line">        abort: fun_,</span><br><span class="line">        assert: fun_,</span><br><span class="line">        enlargeMemory: fun_,</span><br><span class="line">        abortOnCannotGrowMemory: fun_,</span><br><span class="line">        abortStackOverflow: fun_,</span><br><span class="line">        nullFunc_ii: fun_,</span><br><span class="line">        nullFunc_iiii: fun_,</span><br><span class="line">        nullFunc_v: fun_,</span><br><span class="line">        nullFunc_vi: fun_,</span><br><span class="line">        nullFunc_viiii: fun_,</span><br><span class="line">        nullFunc_viiiii: fun_,</span><br><span class="line">        nullFunc_viiiiii: fun_,</span><br><span class="line">        invoke_ii: fun_,</span><br><span class="line">        invoke_iiii: fun_,</span><br><span class="line">        invoke_v: fun_,</span><br><span class="line">        invoke_vi: fun_,</span><br><span class="line">        invoke_viiii: fun_,</span><br><span class="line">        invoke_viiiii: fun_,</span><br><span class="line">        invoke_viiiiii: fun_,</span><br><span class="line">        __ZSt18uncaught_exceptionv: fun_,</span><br><span class="line">        ___cxa_find_matching_catch: fun_,</span><br><span class="line">        ___gxx_personality_v0: fun_,</span><br><span class="line">        ___lock: fun_,</span><br><span class="line">        ___resumeException: fun_,</span><br><span class="line">        ___setErrNo: fun_,</span><br><span class="line">        ___syscall140: fun_,</span><br><span class="line">        ___syscall146: fun_,</span><br><span class="line">        ___syscall54: fun_,</span><br><span class="line">        ___syscall6: fun_,</span><br><span class="line">        ___unlock: fun_,</span><br><span class="line">        _abort: fun_,</span><br><span class="line">        _emscripten_memcpy_big: fun_,</span><br><span class="line">        flush_NO_FILESYSTEM: fun_,</span><br><span class="line">    &#125;,</span><br><span class="line">    asm2wasm: &#123;</span><br><span class="line">        &quot;f64-rem&quot;: function(e, t) &#123;</span><br><span class="line">            return e % t</span><br><span class="line">        &#125;,</span><br><span class="line">        debugger: function() &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    parent: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>报错：<code>Import #1 module=&quot;env&quot; function=&quot;getTotalMemory&quot; error: function import requires a callable</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118153835895.png" alt="image-20211118153835895"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var Q &#x3D; 16777216</span><br><span class="line">getTotalMemory: function () &#123; return Q &#125;,</span><br></pre></td></tr></table></figure><p>报错：<code>Import #20 module=&quot;env&quot; function=&quot;_get_unicode_str&quot; error: function import requires a callable</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118154133562.png" alt="image-20211118154133562"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">_get_unicode_str: function () &#123;  </span><br><span class="line">    function a(e) &#123;</span><br><span class="line">        return e ? 48 &lt; e.length ? e.substr(0, 48) : e : &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    var e &#x3D; function () &#123;</span><br><span class="line">        var e &#x3D; document.URL</span><br><span class="line">            , t &#x3D; window.navigator.userAgent.toLowerCase()</span><br><span class="line">            , o &#x3D; &quot;&quot;;</span><br><span class="line">        0 &lt; document.referrer.length &amp;&amp; (o &#x3D; document.referrer);</span><br><span class="line">        try &#123;</span><br><span class="line">            0 &#x3D;&#x3D; o.length &amp;&amp; 0 &lt; opener.location.href.length &amp;&amp; (o &#x3D; opener.location.href)</span><br><span class="line">        &#125; catch (e) &#123; &#125;</span><br><span class="line">        var i &#x3D; window.navigator.appCodeName</span><br><span class="line">            , n &#x3D; window.navigator.appName</span><br><span class="line">            , r &#x3D; window.navigator.platform</span><br><span class="line">            , e &#x3D; a(e)</span><br><span class="line">            , o &#x3D; a(o);</span><br><span class="line">        return e + &quot;|&quot; + (t &#x3D; a(t)) + &quot;|&quot; + o + &quot;|&quot; + i + &quot;|&quot; + n + &quot;|&quot; + r</span><br><span class="line">    &#125;()</span><br><span class="line">        , t &#x3D; q(e) + 1, o &#x3D;Ve(t);&#x2F;&#x2F; 5250872; &#x2F;&#x2F;_malloc(t);</span><br><span class="line">    console.log(&#39;---&#39;,t, o)</span><br><span class="line">    return S(e, o, t + 1),</span><br><span class="line">        o</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>报错：<code>Import #21 module=&quot;env&quot; function=&quot;memoryBase&quot; error: global import must be a number or WebAssembly.Global object</code></p><p>报错：<code>Import #22 module=&quot;env&quot; function=&quot;tableBase&quot; error: global import must be a number or WebAssembly.Global object</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118154320758.png" alt="image-20211118154320758"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memoryBase: 1024,</span><br><span class="line">tableBase: 0,</span><br></pre></td></tr></table></figure><p>报错：<code>Import #23 module=&quot;env&quot; function=&quot;DYNAMICTOP_PTR&quot; error: global import must be a number or WebAssembly.Global object</code></p><p>报错：<code>Import #24 module=&quot;env&quot; function=&quot;tempDoublePtr&quot; error: global import must be a number or WebAssembly.Global object</code></p><p>报错：<code>Import #25 module=&quot;env&quot; function=&quot;STACKTOP&quot; error: global import must be a number or WebAssembly.Global object</code></p><p>报错：<code>Import #26 module=&quot;env&quot; function=&quot;STACK_MAX&quot; error: global import must be a number or WebAssembly.Global object</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118154435477.png" alt="image-20211118154435477"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DYNAMICTOP_PTR: 7968,</span><br><span class="line">tempDoublePtr: 7952,</span><br><span class="line">tempDoublePtr: 7952,</span><br><span class="line">STACK_MAX: 5250864,</span><br></pre></td></tr></table></figure><p>报错：<code>Import #27 module=&quot;global&quot; function=&quot;NaN&quot; error: global import must be a number or WebAssembly.Global object</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118154804296.png" alt="image-20211118154804296"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">global: &#123;</span><br><span class="line">    NaN: NaN,</span><br><span class="line">    Infinity: 1 &#x2F; 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：<code>Import #29 module=&quot;env&quot; function=&quot;memory&quot; error: memory import must be a WebAssembly.Memory object</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118155045578.png" alt="image-20211118155045578"></p><p>搜索<code>WebAssembly.Memory</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118155123169.png" alt="image-20211118155123169"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var Q &#x3D; 16777216, j &#x3D; 65536;</span><br><span class="line">var wasmMemory &#x3D; new WebAssembly.Memory(&#123;  </span><br><span class="line">    initial: Q &#x2F; j,</span><br><span class="line">    maximum: Q &#x2F; j</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>报错：<code>Import #30 module=&quot;env&quot; function=&quot;table&quot; error: table import requires a WebAssembly.Table</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118155247621.png" alt="image-20211118155247621"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table: new WebAssembly.Table(&#123;</span><br><span class="line">    initial: 99,</span><br><span class="line">    maximum: 99,</span><br><span class="line">    element: &quot;anyfunc&quot;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>初始化好wasm后，开始处理<code>function u(e, t, o, i, n)</code></p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118163026567.png" alt="image-20211118163026567"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; h[&quot;_&quot; + (r &#x3D; e)] &#x3D; wasm._getckey</span><br><span class="line">&#x2F;&#x2F; je &#x3D; wasm.stackSave</span><br><span class="line">&#x2F;&#x2F; He &#x3D; wasm.stackRestore</span><br><span class="line">&#x2F;&#x2F; Fe &#x3D; wasm.stackAlloc</span><br><span class="line">&#x2F;&#x2F; Ve &#x3D; wasm._malloc  修改_get_unicode_str中的Ve</span><br><span class="line">function _getckey() &#123;</span><br><span class="line">    return wasmobject.exports._getckey.apply(null, arguments)</span><br><span class="line">&#125;</span><br><span class="line">function stackSave() &#123;   </span><br><span class="line">    return wasmobject.exports.stackSave.apply(null, arguments)</span><br><span class="line">&#125;</span><br><span class="line">function stackRestore() &#123;</span><br><span class="line">    return wasmobject.exports.stackRestore.apply(null, arguments)</span><br><span class="line">&#125;</span><br><span class="line">function stackAlloc() &#123;   </span><br><span class="line">    return wasmobject.exports.stackAlloc.apply(null, arguments)</span><br><span class="line">&#125;</span><br><span class="line">function _malloc() &#123;   </span><br><span class="line">    return wasmobject.exports._malloc.apply(null, arguments)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 函数引用完成n函数 </span><br><span class="line">function S(e, t, o) &#123;  &#x2F;&#x2F; o(a, b, c)</span><br><span class="line">    return w(&quot;number&quot; &#x3D;&#x3D; typeof o, &quot;stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!&quot;),</span><br><span class="line">        E(e, C, t, o)</span><br><span class="line">&#125;</span><br><span class="line">function T(e, t) &#123;</span><br><span class="line">    if (0 &#x3D;&#x3D;&#x3D; t || !e)</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    for (var o, i &#x3D; 0, n &#x3D; 0; w(e + n &lt; Q),</span><br><span class="line">    i |&#x3D; o &#x3D; C[e + n &gt;&gt; 0],</span><br><span class="line">    (0 !&#x3D; o || t) &amp;&amp; (n++,</span><br><span class="line">    !t || n !&#x3D; t); )</span><br><span class="line">        ;</span><br><span class="line">    t &#x3D; t || n;</span><br><span class="line">    var r &#x3D; &quot;&quot;;</span><br><span class="line">    if (i &lt; 128) &#123;</span><br><span class="line">        for (var a; 0 &lt; t; )</span><br><span class="line">            a &#x3D; String.fromCharCode.apply(String, C.subarray(e, e + Math.min(t, 1024))),</span><br><span class="line">            r &#x3D; r ? r + a : a,</span><br><span class="line">            e +&#x3D; 1024,</span><br><span class="line">            t -&#x3D; 1024;</span><br><span class="line">        return r</span><br><span class="line">    &#125;</span><br><span class="line">    return _(C, e)</span><br><span class="line">&#125;</span><br><span class="line">var l &#x3D; &#123;</span><br><span class="line">    stackSave: function() &#123;</span><br><span class="line">        stackSave()</span><br><span class="line">    &#125;,</span><br><span class="line">    stackRestore: function() &#123;</span><br><span class="line">        stackRestore()</span><br><span class="line">    &#125;,</span><br><span class="line">    arrayToC: function(e) &#123;</span><br><span class="line">        var t, o, i &#x3D; stackAlloc(e.length); &#x2F;&#x2F; Fe(e.length);</span><br><span class="line">        return o &#x3D; i,</span><br><span class="line">        w(0 &lt;&#x3D; (t &#x3D; e).length, &quot;writeArrayToMemory array must have a length (should be an array or typed array)&quot;),</span><br><span class="line">        R.set(t, o),</span><br><span class="line">        i</span><br><span class="line">    &#125;,</span><br><span class="line">    stringToC: function(e) &#123;</span><br><span class="line">        var t, o &#x3D; 0;</span><br><span class="line">        return null !&#x3D; e &amp;&amp; 0 !&#x3D;&#x3D; e &amp;&amp; (t &#x3D; 1 + (e.length &lt;&lt; 2),</span><br><span class="line">        S(e, o &#x3D; stackAlloc(t), t)), &#x2F;&#x2F;Fe(e.length);</span><br><span class="line">        o</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var x &#x3D; &#123;</span><br><span class="line">    string: l.stringToC,</span><br><span class="line">    array: l.arrayToC</span><br><span class="line">&#125;</span><br><span class="line">function n(...args) &#123;</span><br><span class="line">    var e &#x3D; &quot;getckey&quot;</span><br><span class="line">    var t &#x3D; &quot;string&quot;</span><br><span class="line">    var o &#x3D; [&quot;number&quot;, &quot;string&quot;, &quot;string&quot;, &quot;string&quot;, &quot;string&quot;, &quot;number&quot;]</span><br><span class="line">    var i &#x3D; args</span><br><span class="line">    var n &#x3D; undefined</span><br><span class="line">    var r, a, s &#x3D; (w(a &#x3D; _getckey, &quot;Cannot call unknown function &quot; + r + &quot;, make sure it is exported&quot;),</span><br><span class="line">    a), c &#x3D; [], d &#x3D; 0;</span><br><span class="line">    &#x2F;&#x2F; var r &#x3D; &quot;getckey&quot;, a &#x3D; _getckey, s &#x3D; _getckey, c &#x3D; [], d &#x3D; 0;</span><br><span class="line">    &#x2F;&#x2F; if (w(&quot;array&quot; !&#x3D;&#x3D; t, &#39;Return type should not be &quot;array&quot;.&#39;),</span><br><span class="line">    &#x2F;&#x2F; i)</span><br><span class="line">    for (var l &#x3D; 0; l &lt; i.length; l++) &#123;</span><br><span class="line">        var u &#x3D; x[o[l]];</span><br><span class="line">        console.log(&quot;uuuu&quot;,u)</span><br><span class="line">        u ? (0 &#x3D;&#x3D;&#x3D; d &amp;&amp; (d &#x3D; stackSave()),  &#x2F;&#x2F; je()</span><br><span class="line">            c[l] &#x3D; u(i[l])) : c[l] &#x3D; i[l]</span><br><span class="line">    &#125;</span><br><span class="line">    var f, p &#x3D; s.apply(null, c);</span><br><span class="line">    return f &#x3D; p,</span><br><span class="line">        p &#x3D; &quot;string&quot; &#x3D;&#x3D;&#x3D; t ? T(f) : &quot;boolean&quot; &#x3D;&#x3D;&#x3D; t ? Boolean(f) : f,</span><br><span class="line">        0 !&#x3D;&#x3D; d &amp;&amp; stackRestore(d), &#x2F;&#x2F; He(d)</span><br><span class="line">        p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：<code>TypeError: Cannot set property &#39;7984&#39; of undefined</code>  说明在内存操作的时候有部分变量我们没有注意到，回到<code>445: function(Ke, e, t)</code>中，抽出部分值操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function X() &#123;</span><br><span class="line">    R &#x3D; new Int8Array(k),</span><br><span class="line">        O &#x3D; new Int16Array(k),</span><br><span class="line">        I &#x3D; new Int32Array(k),</span><br><span class="line">        C &#x3D; new Uint8Array(k),</span><br><span class="line">        M &#x3D; new Uint32Array(k)</span><br><span class="line">&#125;</span><br><span class="line">X()</span><br></pre></td></tr></table></figure><p>报错：<code>document is not defined</code>，<code>window is not defined</code>，<code>Cannot read property &#39;userAgent&#39; of undefined</code>…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var document &#x3D; &#123;</span><br><span class="line">    URL: &quot;&quot;,</span><br><span class="line">    referrer: &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">var window &#x3D; &#123;</span><br><span class="line">    document: document,</span><br><span class="line">    navigator: &#123;</span><br><span class="line">        userAgent: &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;72.0.3626.121 Safari&#x2F;537.36&quot;,</span><br><span class="line">        appCodeName: &quot;Mozilla&quot;,</span><br><span class="line">        appName: &quot;Netscape&quot;,</span><br><span class="line">        platform: &quot;Win32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>node ckey_blog.js</p><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118184610197.png" alt="image-20211118184610197"></p><h1 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h1><p>由于公众号和正常腾讯视频中的部分参数不一致，修改<code>function m(e)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getCKey(plateform,appVer,vid) &#123;</span><br><span class="line">    &#x2F;&#x2F; var t &#x3D; n ? (e.encryptVer &#x3D; &quot;9.1&quot;,</span><br><span class="line">    &#x2F;&#x2F; n(e.platform, e.appVer, e.vids || e.vid, &quot;&quot;, e.guid, e.tm)) : (e.encryptVer &#x3D; &quot;8.1&quot;,</span><br><span class="line">    &#x2F;&#x2F; a(e.vids || e.vid, e.tm, e.appVer, e.guid, e.platform));</span><br><span class="line">    var t &#x3D; n(plateform, appVer, vid, &quot;&quot;, createGUID(), Date.parse(new Date()).toString().substr(0, 10))</span><br><span class="line">    return t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ckey.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import execjs</span><br><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">from m3u8 import M3u8Download</span><br><span class="line"></span><br><span class="line">with open(&quot;ckey_blog.js&quot;, &quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class="line">    js_code &#x3D; f.read()</span><br><span class="line"></span><br><span class="line"># target_url &#x3D; &quot;http:&#x2F;&#x2F;v.qq.com&#x2F;txp&#x2F;iframe&#x2F;player.html?origin&#x3D;https%3A%2F%2Fmp.weixin.qq.com&amp;chid&#x3D;17&amp;vid&#x3D;s3306hychob&amp;autoplay&#x3D;false&amp;full&#x3D;true&amp;show1080p&#x3D;false&amp;isDebugIframe&#x3D;false&quot;</span><br><span class="line">target_url &#x3D; &quot;https:&#x2F;&#x2F;v.qq.com&#x2F;x&#x2F;cover&#x2F;bzfkv5se8qaqel2&#x2F;j002024w2wg.html&quot;</span><br><span class="line">vinfoparam &#x3D; &quot;spsrt&#x3D;1&amp;charge&#x3D;0&amp;defaultfmt&#x3D;auto&amp;otype&#x3D;ojson&amp;guid&#x3D;&#123;&#125;&amp;flowid&#x3D;&#123;&#125;&amp;platform&#x3D;&#123;&#125;&amp;sdtfrom&#x3D;&#123;&#125;&amp;defnpayver&#x3D;0&amp;appVer&#x3D;&#123;&#125;&amp;host&#x3D;v.qq.com&amp;sphttps&#x3D;0&amp;tm&#x3D;1637237951&amp;spwm&#x3D;4&amp;vid&#x3D;&#123;&#125;&amp;defn&#x3D;&amp;fhdswitch&#x3D;0&amp;show1080p&#x3D;0&amp;isHLS&#x3D;1&amp;dtype&#x3D;3&amp;sphls&#x3D;1&amp;spgzip&#x3D;&amp;dlver&#x3D;&amp;hdcp&#x3D;0&amp;spau&#x3D;1&amp;spaudio&#x3D;15&amp;defsrc&#x3D;1&amp;encryptVer&#x3D;9.1&amp;cKey&#x3D;&#123;&#125;&quot;</span><br><span class="line">data &#x3D; &#123;&#125;</span><br><span class="line">data[&quot;buid&quot;] &#x3D; &quot;vinfoad&quot;</span><br><span class="line">guid &#x3D; execjs.compile(js_code).call(&#39;createGUID&#39;)</span><br><span class="line"># 区分腾讯视频还是公众号视频</span><br><span class="line">if &quot;mp.weixin.qq.com&quot; in target_url:</span><br><span class="line">    vid &#x3D; re.compile(r&quot;&amp;vid&#x3D;(.*?)&amp;&quot;).findall(target_url)[0] # ?非贪婪</span><br><span class="line">    plateform &#x3D; &quot;70201&quot;</span><br><span class="line">    flowid &#x3D; execjs.compile(js_code).call(&#39;createGUID&#39;) + &quot;_&quot; + plateform</span><br><span class="line">    sdtfrom &#x3D; &quot;v1104&quot;</span><br><span class="line">    appVer &#x3D; &quot;3.4.40&quot;</span><br><span class="line">    ckey &#x3D; execjs.compile(js_code).call(&#39;getCKey&#39;,plateform,appVer,vid)</span><br><span class="line">else:</span><br><span class="line">    vid &#x3D; target_url.split(&quot;&#x2F;&quot;)[-1].split(&quot;.&quot;)[0]</span><br><span class="line">    plateform &#x3D; &quot;10201&quot;</span><br><span class="line">    flowid &#x3D; execjs.compile(js_code).call(&#39;createGUID&#39;) + &quot;_&quot; + plateform</span><br><span class="line">    sdtfrom &#x3D; &quot;v1010&quot;</span><br><span class="line">    appVer &#x3D; &quot;3.5.57&quot;</span><br><span class="line">    ckey &#x3D; execjs.compile(js_code).call(&#39;getCKey&#39;, plateform, appVer, vid)</span><br><span class="line"></span><br><span class="line">data[&quot;vinfoparam&quot;] &#x3D; vinfoparam.format(guid,flowid,plateform,sdtfrom,appVer,vid,ckey)</span><br><span class="line">result &#x3D; requests.post(&#39;http:&#x2F;&#x2F;vd.l.qq.com&#x2F;proxyhttp&#39;, data&#x3D;json.dumps(data)).json()</span><br><span class="line"># print(result)</span><br><span class="line">if result.get(&quot;errCode&quot;) &#x3D;&#x3D; 0:</span><br><span class="line">    url_data &#x3D; json.loads(result.get(&quot;vinfo&quot;))[&quot;vl&quot;][&quot;vi&quot;][0][&quot;ul&quot;][&quot;ui&quot;][0]</span><br><span class="line">    url &#x3D; url_data[&quot;url&quot;]+url_data[&quot;hls&quot;][&quot;pt&quot;]</span><br><span class="line">    print(url)</span><br><span class="line">    M3u8Download(url,</span><br><span class="line">                 &quot;test1&quot;,</span><br><span class="line">                 max_workers&#x3D;64,</span><br><span class="line">                 num_retries&#x3D;10,</span><br><span class="line">                 )</span><br></pre></td></tr></table></figure><p><img src="/2021/11/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91wasm%E7%9A%84ckey%E5%88%86%E6%9E%90/image-20211118205142983.png" alt="image-20211118205142983"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>针对wasm二进制方式加密的js逆向，类似安卓的so逆向，可以选择硬肛分析汇编代码，当然也可以选择Unidbg主动调用，本文利用js的<code>WebAssembly</code>实例化wasm并完成调用分析cKey，完成腾讯系视频的下载，至于会员视频分析<code>logintoken</code>参数，下次一定，下次一定。。。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> wasm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida常用api大全</title>
      <link href="/2021/11/13/frida%E5%B8%B8%E7%94%A8api%E5%A4%A7%E5%85%A8/"/>
      <url>/2021/11/13/frida%E5%B8%B8%E7%94%A8api%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><table><thead><tr><th align="left">Hook重载</th><th align="left">语法</th></tr></thead><tbody><tr><td align="left">int类型</td><td align="left"><code>int</code></td></tr><tr><td align="left">float类型</td><td align="left"><code>float</code></td></tr><tr><td align="left">boolean类型</td><td align="left"><code>boolean</code></td></tr><tr><td align="left">string类型</td><td align="left"><code>java.lang.String</code></td></tr><tr><td align="left">byte类型</td><td align="left"><code>[B</code></td></tr><tr><td align="left">char类型</td><td align="left"><code>[C</code></td></tr><tr><td align="left">list结构</td><td align="left"><code>java.util.List</code></td></tr><tr><td align="left">安卓上下文</td><td align="left"><code>android.content.Context</code></td></tr></tbody></table><table><thead><tr><th align="left">符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>$init</code></td><td align="left">hook构造函数</td></tr><tr><td align="left"><code>$new()</code></td><td align="left">实例化对象用户主动调用</td></tr></tbody></table><h1 id="动静态函数主动调用"><a href="#动静态函数主动调用" class="headerlink" title="动静态函数主动调用"></a>动静态函数主动调用</h1><p>静态函数 use</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function static() &#123;</span><br><span class="line">    Java.perform(function () &#123;&#x2F;&#x2F;只要是java的代码都要跑在Java.perform里面</span><br><span class="line">        Java.use(&quot;com.example.junior.util.Utils&quot;).dip2px.implementation &#x3D; function (context, float) &#123;</span><br><span class="line">            &#x2F;&#x2F;return null;</span><br><span class="line">            var result &#x3D; this.dip2px(context, 100)</span><br><span class="line">            console.log(&quot;context,float,result  &#x3D;&#x3D;&gt; &quot;, context, float, result);</span><br><span class="line">            &#x2F;&#x2F; 打印log</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">            return 26;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">Java.use(&#39;com.xx.app.ShufferMap&#39;).show.implementation &#x3D; function (map) &#123;</span><br><span class="line">        console.log(JSON.stringify(map));</span><br><span class="line">var hm &#x3D; Java.use(&#39;java.util.HashMap&#39;).$new();</span><br><span class="line">hm.put(&quot;user&quot;,&quot;dajianbang&quot;);</span><br><span class="line">hm.put(&quot;pass&quot;,&quot;87654321&quot;);</span><br><span class="line">hm.put(&quot;code&quot;,&quot;123456&quot;);</span><br><span class="line">return this.show(hm);</span><br><span class="line">&#125;     </span><br><span class="line">        </span><br><span class="line">        var myBytes &#x3D; StringClass.$new(&quot;Hello World&quot;).getBytes();</span><br><span class="line">        var base64Class &#x3D; Java.use(&quot;android.util.Base64&quot;);</span><br><span class="line">        var result &#x3D; Java.use(&quot;com.xiaojianbang.app.RSA&quot;).encrypt(myBytes);</span><br><span class="line">        console.log(&quot;result is :&quot;, result);</span><br><span class="line">        console.log(JSON.stringify(result));</span><br><span class="line">        console.log(&quot;base64 result is :&quot;, base64Class.encodeToString(result,0));        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态函数 choose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function dynamic()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">    &#x2F;&#x2F; hook 函数</span><br><span class="line">        Java.choose(&quot;com.example.junior.CalculatorActivity&quot;,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                console.log(&quot;found instance &#x3D;&gt;&quot;,instance);</span><br><span class="line">                console.log(&quot;instance showText is &#x3D;&gt;&quot;,instance.clear(&quot;666&quot;))</span><br><span class="line">                console.log(&quot;instance showText is &#x3D;&gt;&quot;,instance.showText.value)</span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&#39;Search complete&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; hook 对象</span><br><span class="line">        Java.choose(&quot;com.xiaojianbang.app.Money&quot;,&#123;</span><br><span class="line">            onMatch : function(instance)&#123;</span><br><span class="line">                console.log(&quot;find it!!&quot;, instance.getInfo());</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: function()&#123;</span><br><span class="line">                console.log(&quot;compelete!!!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动静态变量修改"><a href="#动静态变量修改" class="headerlink" title="动静态变量修改"></a>动静态变量修改</h1><p>静态变量 use</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function staticField()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var divscale &#x3D; Java.use(&quot;com.example.junior.util.Arith&quot;).DEF_DIV_SCALE.value;</span><br><span class="line">        console.log(&quot;divscale1 is &#x3D;&gt;&quot;,divscale);</span><br><span class="line">        Java.use(&quot;com.example.junior.util.Arith&quot;).DEF_DIV_SCALE.value&#x3D;20;</span><br><span class="line">        divscale &#x3D; Java.use(&quot;com.example.junior.util.Arith&quot;).DEF_DIV_SCALE.value;</span><br><span class="line">        console.log(&quot;divscale2 is &#x3D;&gt;&quot;,divscale);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态变量 choose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function dynamicField()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.choose(&quot;com.example.junior.CalculatorActivity&quot;,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                console.log(&quot;found instance &#x3D;&gt;&quot;,instance);</span><br><span class="line">                console.log(&quot;instance showText is &#x3D;&gt;&quot;,instance.showText.value)</span><br><span class="line">                instance.showText.value &#x3D; &quot;123&quot;</span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&#39;Search complete&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="有参构造主动调用"><a href="#有参构造主动调用" class="headerlink" title="有参构造主动调用"></a>有参构造主动调用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Utils.test(new Money(200，&quot;美元&quot;))</span><br><span class="line">Java.perform(function () &#123;</span><br><span class="line">    var money &#x3D; Java.use(&#39;com.xx.app.Money&#39;)  &#x2F;&#x2F; 如果要自定义实例化就要获取并重写</span><br><span class="line">    var utils &#x3D; Java.use(&#39;com.xx.app.Utils&#39;);</span><br><span class="line">    utils.test.overload(&quot;com.xx.app.Money&quot;).implementation &#x3D; function (obj) &#123; </span><br><span class="line">        var myBytes &#x3D; StringClass.$new(&quot;Hello World&quot;).getBytes();</span><br><span class="line">        &#x2F;&#x2F; 重新实例化  $new()</span><br><span class="line">        var mon &#x3D; money.$new(999,&#39;我的天&#39;)</span><br><span class="line">        return mon.getInfo();  &#x2F;&#x2F; 根据需求return</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook构造函数"><a href="#Hook构造函数" class="headerlink" title="Hook构造函数"></a>Hook构造函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; We need to replace .$init() instead of .$new(), since .$new() &#x3D; .alloc() + .init()</span><br><span class="line">Java.perform(function () &#123;</span><br><span class="line">    var money &#x3D; Java.use(&#39;com.xx.app.Money&#39;);</span><br><span class="line">    money.$init.implementation &#x3D; function (a, b) &#123;</span><br><span class="line">        console.log(&quot;构造函数Hook中...&quot;, a, b);</span><br><span class="line">        return this.$init(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; hook 构造方法 $init</span><br><span class="line">    var MoneyClass &#x3D; Java.use(&quot;com.kevin.app.Money&quot;);</span><br><span class="line">    MoneyClass.$init.overload().implementation &#x3D; function () &#123;</span><br><span class="line">        console.log(&quot;hook Money $init&quot;);</span><br><span class="line">        this.$init();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var StringClass &#x3D; Java.use(&quot;java.lang.String&quot;);</span><br><span class="line">    var MoneyClass &#x3D; Java.use(&quot;com.xiaojianbang.app.Money&quot;);</span><br><span class="line">    MoneyClass.$init.overload(&#39;java.lang.String&#39;, &#39;int&#39;).implementation &#x3D; function (x, y) &#123;</span><br><span class="line">        console.log(&#39;hook Money init&#39;);</span><br><span class="line">        var myX &#x3D; StringClass.new(&quot;Hello World!&quot;);</span><br><span class="line">        var myY &#x3D; 9999;</span><br><span class="line">        this.$init(myX, myY);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="枚举类所有方法"><a href="#枚举类所有方法" class="headerlink" title="枚举类所有方法"></a>枚举类所有方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Hook类的所有方法</span><br><span class="line">Java.perform(function()&#123;</span><br><span class="line">    var md5 &#x3D; Java.use(&quot;com.xxx.xxx.xxx&quot;);</span><br><span class="line">    var methods &#x3D; md5.class.getDeclaredMethods();</span><br><span class="line">    for(var j &#x3D; 0; j &lt; methods.length; j++)&#123;</span><br><span class="line">        var methodName &#x3D; methods[j].getName();</span><br><span class="line">        console.log(methodName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        &#x2F;&#x2F; return String[] class name</span><br><span class="line">        var classList &#x3D; Java.enumerateLoadedClassesSync();</span><br><span class="line">        for (var i &#x3D; 0; i &lt; classList.length; i++) &#123;</span><br><span class="line">            var targetClass &#x3D; classList[i];</span><br><span class="line">            if (targetClass.indexOf(&quot;com.xiaojianbang.app.Money&quot;) !&#x3D; -1) &#123;</span><br><span class="line">                console.log(&quot;hook the class: &quot;, targetClass);</span><br><span class="line">                var TargetClass &#x3D; Java.use(targetClass);</span><br><span class="line">                &#x2F;&#x2F; 利用反射获取类中的所有方法</span><br><span class="line">                var methodsList &#x3D; TargetClass.class.getDeclaredMethods();</span><br><span class="line">                for (var k &#x3D; 0; k &lt; methodsList.length; k++) &#123;</span><br><span class="line">                    console.log(methodsList[k].getName());</span><br><span class="line">  </span><br><span class="line">                    &#x2F;&#x2F; hook methodName 这个类的所有方法（难点在于每个方法的参数是不同的）</span><br><span class="line">                    for (var k &#x3D; 0; k &lt; TargetClass[methodName].overloads.length; k++) &#123;</span><br><span class="line">                        TargetClass[methodName].overloads[k].implementation &#x3D; function () &#123;</span><br><span class="line">                            &#x2F;&#x2F; 这是 hook 逻辑</span><br><span class="line">                            for (var i &#x3D; 0; i &lt; arguments.length; i++) &#123;</span><br><span class="line">                                console.log(arguments[i]);</span><br><span class="line">                            &#125;</span><br><span class="line">                            return this[methodName].apply(this, arguments);  &#x2F;&#x2F; 重新调用</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch: function(name,handle)&#123;</span><br><span class="line">                if (name.indexOf(&quot;com.xiaojianbang.app.Money&quot;) !&#x3D; -1)&#123;</span><br><span class="line">                    console.log(name,handle);</span><br><span class="line">                    &#x2F;&#x2F; 利用反射 获取类中的所有方法</span><br><span class="line">                    var TargetClass &#x3D; Java.use(name);</span><br><span class="line">                    &#x2F;&#x2F; return Method Object List</span><br><span class="line">                    var methodsList &#x3D; TargetClass.class.getDeclaredMethods(); </span><br><span class="line">                    for (var i &#x3D; 0; i &lt; methodsList.length; i++)&#123;</span><br><span class="line">                        &#x2F;&#x2F; Method Objection getName()</span><br><span class="line">                        console.log(methodsList[i].getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: function()&#123;</span><br><span class="line">                console.log(&quot;complete!!!&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="特殊不可见字符"><a href="#特殊不可见字符" class="headerlink" title="特殊不可见字符"></a>特殊不可见字符</h1><p>当方法名被混淆时֏，打印出来所有的类名<code>%D6%8F</code>,用编码后的字符串hook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">    function x() &#123;</span><br><span class="line"></span><br><span class="line">        var targetClass &#x3D; &quot;com.example.hooktest.MainActivity&quot;;</span><br><span class="line"></span><br><span class="line">        var hookCls &#x3D; Java.use(targetClass);</span><br><span class="line">        var methods &#x3D; hookCls.class.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">        for (var i in methods) &#123;</span><br><span class="line">            console.log(methods[i].toString());</span><br><span class="line">            console.log(encodeURIComponent(methods[i].toString().replace(&#x2F;^.*?\.([^\s\.\(\)]+)\(.*?$&#x2F;, &quot;$1&quot;)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hookCls[decodeURIComponent(&quot;%D6%8F&quot;)].implementation &#x3D; function (x) &#123;</span><br><span class="line">                console.log(&quot;original call: fun(&quot; + x + &quot;)&quot;);</span><br><span class="line">                var result &#x3D; this[decodeURIComponent(&quot;%D6%8F&quot;)](900);</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="wallbreaker"><a href="#wallbreaker" class="headerlink" title="wallbreaker"></a>wallbreaker</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var Class &#x3D; Java.use(&quot;java.lang.Class&quot;);</span><br><span class="line">        </span><br><span class="line">      function inspectObject(obj)&#123;</span><br><span class="line">            var obj_class &#x3D; Java.cast(obj.getClass(), Class);</span><br><span class="line">            var fields &#x3D; obj_class.getDeclaredFields();</span><br><span class="line">            var methods &#x3D; obj_class.getMethods();</span><br><span class="line">            console.log(&quot;Inspectiong &quot; + obj.getClass().toString());</span><br><span class="line">            console.log(&quot;\t Fields:&quot;)</span><br><span class="line">            for (var i in fields)&#123;</span><br><span class="line">                console.log(&quot;\t\t&quot; + fields[i].toString());</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&quot;\t Methods:&quot;)</span><br><span class="line">            for (var i in methods)&#123;</span><br><span class="line">                console.log(&quot;\t\t&quot; + methods[i].toString())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.choose(&quot;com.baidu.lbs.waimai.WaimaiActivity&quot;,&#123;</span><br><span class="line">            onComplete: function()&#123;</span><br><span class="line">                console.log(&quot;complete!&quot;);</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            onMatch: function(instance)&#123;</span><br><span class="line">                console.log(&quot;find instance&quot;, instance);</span><br><span class="line">                inspectObject(instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="枚举所有类"><a href="#枚举所有类" class="headerlink" title="枚举所有类"></a>枚举所有类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function ()&#123;</span><br><span class="line">  console.log(&quot;\n[*] enumerating classes...&quot;);</span><br><span class="line">  Java.enumerateLoadedClasses(&#123;</span><br><span class="line">    onMatch: function(_className)&#123;</span><br><span class="line">      console.log(&quot;[*] found instance of &#39;&quot;+_className+&quot;&#39;&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    onComplete: function()&#123;</span><br><span class="line">      console.log(&quot;[*] class enuemration complete&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="枚举接口实现"><a href="#枚举接口实现" class="headerlink" title="枚举接口实现"></a>枚举接口实现</h1><p>获取指定包下所有类的接口实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function searchInterface()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onComplete: function()&#123;&#125;,</span><br><span class="line">            onMatch: function(name,handle)&#123;</span><br><span class="line">                if (name.indexOf(&quot;com.r0ysue.a0526printout&quot;) &gt; -1) &#123; &#x2F;&#x2F; 使用包名进行过滤</span><br><span class="line">                    console.log(&quot;find class&quot;);</span><br><span class="line">                    var targetClass &#x3D; Java.use(name);</span><br><span class="line">                    var interfaceList &#x3D; targetClass.class.getInterfaces(); &#x2F;&#x2F; 使用反射获取类实现的接口数组</span><br><span class="line">                    if (interfaceList.length &gt; 0) &#123;</span><br><span class="line">                        console.log(name) &#x2F;&#x2F; 打印类名</span><br><span class="line">                        for (var i in interfaceList) &#123;</span><br><span class="line">                            console.log(&quot;\t&quot;, interfaceList[i].toString()); &#x2F;&#x2F; 直接打印接口名称</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个ClassLoader时枚举指定类所有关联的接口实现和父子类关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function () &#123;</span><br><span class="line">    console.log(&quot;start&quot;)</span><br><span class="line">    &#x2F;&#x2F; 枚举classLoader设置含有关键类的classLoader</span><br><span class="line">    Java.enumerateClassLoaders(&#123;</span><br><span class="line">        onMatch: function (loader) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (loader.findClass(&quot;com.jdd.motorfans.modules.detail.RecordFinishListener&quot;)) &#123;</span><br><span class="line">                    console.log(&quot;Successfully found loader&quot;)</span><br><span class="line">                    console.log(loader);</span><br><span class="line">                    Java.classFactory.loader &#x3D; loader;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (error) &#123;</span><br><span class="line">                console.log(&quot;find error:&quot; + error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onComplete: function () &#123;</span><br><span class="line">            console.log(&quot;end1&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; 枚举所有的类</span><br><span class="line">    Java.enumerateLoadedClasses(&#123;</span><br><span class="line">        onMatch: function (className) &#123;</span><br><span class="line">            if (className.toString().indexOf(&quot;RecordFinishListener&quot;) &gt; 0 &amp;&amp;</span><br><span class="line">                className.toString().indexOf(&quot;$&quot;) &gt; 0</span><br><span class="line">            ) &#123;</span><br><span class="line">                console.log(&quot;found &#x3D;&gt; &quot;, className)</span><br><span class="line">                &#x2F;&#x2F; 使用反射获取类实现的接口数组</span><br><span class="line">                var interFaces &#x3D; Java.use(className).class.getInterfaces();</span><br><span class="line">                if(interFaces.length&gt;0)&#123;</span><br><span class="line">                    console.log(&quot;interface is &#x3D;&gt; &quot;);</span><br><span class="line">                    for(var i in interFaces)&#123;</span><br><span class="line">                        console.log(&quot;\t&quot;,interFaces[i].toString())</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 获取该类的父类名包含指定名称</span><br><span class="line">                if (Java.use(className).class.getSuperclass()) &#123;</span><br><span class="line">                    var superClass &#x3D; Java.use(className).class.getSuperclass().getName();</span><br><span class="line">                    &#x2F;&#x2F; console.log(&quot;superClass is &#x3D;&gt; &quot;,superClass);</span><br><span class="line">                    if (superClass.indexOf(&quot;XC_MethodHook&quot;) &gt; 0) &#123;</span><br><span class="line">                        console.log(&quot;found class is &#x3D;&gt; &quot;, className.toString())</span><br><span class="line">                        traceClass(className);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, onComplete: function () &#123;</span><br><span class="line">            console.log(&quot;search completed!&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">    console.log(&quot;end2&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Hook-Char-amp-Byte"><a href="#Hook-Char-amp-Byte" class="headerlink" title="Hook Char&amp;Byte"></a>Hook Char&amp;Byte</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; 调用 自写dex</span><br><span class="line">    Java.openClassFile(&quot;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;r0gson.dex&quot;).load();</span><br><span class="line">    const gson &#x3D; Java.use(&#39;com.r0ysue.gson.Gson&#39;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 打印CharArray数组</span><br><span class="line">    Java.use(&quot;java.util.Arrays&quot;).toString.overload(&#39;[C&#39;).implementation &#x3D; function(charArray)&#123;</span><br><span class="line">        &#x2F;&#x2F; Java.array(&#39;char&#39;, [ &#39;一&#39;,&#39;去&#39;,&#39;二&#39;,&#39;三&#39;,&#39;里&#39; ]);</span><br><span class="line">        &#x2F;&#x2F; Java.use(&#39;java.lang.String&#39;).$new(Java.array(&#39;char&#39;, [ &#39;烟&#39;,&#39;村&#39;,&#39;四&#39;,&#39;五&#39;,&#39;家&#39;])) </span><br><span class="line">        &#x2F;&#x2F; Java.array(&quot;java.lang.String&quot;,[&quot;一&quot;,&quot;二&quot;,&quot;三&quot;]);</span><br><span class="line">        var result &#x3D; this.toString(charArray);</span><br><span class="line">        var result1 &#x3D; JSON.stringify(charArray);</span><br><span class="line">        console.log(&quot;charArray,result:&quot;,charArray,result)</span><br><span class="line">        console.log(ArrayClass.toString(result));</span><br><span class="line">        console.log(&quot;charArray Object Object:&quot;,gson.$new().toJson(charArray));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 打印char字符</span><br><span class="line">    var CharClass &#x3D; Java.use(&quot;java.lang.Character&quot;);</span><br><span class="line">    CharClass.toString.overload(&quot;char&quot;).implementation &#x3D; function(inputChar)&#123;</span><br><span class="line">        var result &#x3D; this.toString(inputChar);</span><br><span class="line">        console.log(&quot;inputChar, result: &quot;, inputChar, result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; byteArray</span><br><span class="line">    Java.use(&quot;java.util.Arrays&quot;).toString.overload(&#39;[B&#39;).implementation &#x3D; function(byteArray)&#123;</span><br><span class="line">        var result &#x3D; this.toString(byteArray);</span><br><span class="line">        var result1 &#x3D; JSON.stringify(byteArray);</span><br><span class="line">        console.log(&quot;byteArray,result):&quot;,byteArray,result)</span><br><span class="line">        console.log(&quot;byteArray Object Object:&quot;,gson.$new().toJson(byteArray));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var StringClass &#x3D; Java.use(&quot;java.lang.String&quot;);</span><br><span class="line">    var byteArray &#x3D; StringClass.$new(&quot;Hello World&quot;).getBytes();</span><br><span class="line">    Java.openClassFile(&quot;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;r0gson.dex&quot;).load();</span><br><span class="line">    var gson &#x3D; Java.use(&quot;com.r0ysue.gson.Gson&quot;);</span><br><span class="line">    console.log(gson.$new().toJson(byteArray));</span><br><span class="line">    &#x2F;&#x2F; &#x2F;&#x2F; console byte[]</span><br><span class="line">    var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">    console.log(ByteString.of(byteArray).hex()); &#x2F;&#x2F; byte转16进制字符串</span><br><span class="line">    &#x2F;&#x2F; &#x2F;&#x2F; 创建自定义Java数组 并打印</span><br><span class="line">    var MyArray &#x3D; Java.array(&quot;byte&quot;,[13,4,4,2]);</span><br><span class="line">    console.log(gson.$new().toJson(MyArray));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-Map"><a href="#Hook-Map" class="headerlink" title="Hook Map"></a>Hook Map</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">遍历打印</span><br><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var targetClass &#x3D; Java.use(&quot;com.xiaojianbang.app.ShufferMap&quot;);</span><br><span class="line">        targetClass.show.implementation &#x3D; function (map) &#123;</span><br><span class="line">            &#x2F;&#x2F; 遍历 map</span><br><span class="line">            var result &#x3D; &quot;&quot;;</span><br><span class="line">            var it &#x3D; map.keySet().iterator();</span><br><span class="line">            while (it.hasNext()) &#123;</span><br><span class="line">                var keyStr &#x3D; it.next();</span><br><span class="line">                var valueStr &#x3D; map.get(keyStr);</span><br><span class="line">                result +&#x3D; valueStr;</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&quot;result :&quot;, result);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 修改 map</span><br><span class="line">            map.put(&quot;pass&quot;, &quot;fxxk&quot;);</span><br><span class="line">            map.put(&quot;code&quot;, &quot;Hello World&quot;);</span><br><span class="line">            console.log(JSON.stringify(map));</span><br><span class="line"></span><br><span class="line">            return this.show(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line">cast打印 HashMap</span><br><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var HashMapNode &#x3D; Java.use(&quot;java.util.HashMap$Node&quot;);</span><br><span class="line">        var targetClass &#x3D; Java.use(&quot;com.xiaojianbang.app.ShufferMap&quot;);</span><br><span class="line"></span><br><span class="line">        var targetClass.show.implementation &#x3D; function (map) &#123;</span><br><span class="line">            var result &#x3D; &quot;&quot;;</span><br><span class="line">            var iterator &#x3D; map.entrySet().iterator();</span><br><span class="line">            while (iterator.hasNext()) &#123;</span><br><span class="line">                console.log(&quot;entry&quot;, iterator.next());</span><br><span class="line">                var entry &#x3D; Java.cast(iterator.next(), HashMapNode);</span><br><span class="line">                console.log(entry.getKey());</span><br><span class="line">                console.log(entry.getValue());</span><br><span class="line">                return +&#x3D; entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            console.log(&quot;result is :&quot;, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var targetClass &#x3D; Java.use(&quot;com.xiaojianbang.app.ShufferMap&quot;);</span><br><span class="line">        var HashMap &#x3D; Java.use(&#39;java.util.HashMap&#39;);</span><br><span class="line">        targetClass.show.implementation &#x3D; function(map)&#123;</span><br><span class="line">            &#x2F;&#x2F; 直接调用 toString()</span><br><span class="line">            var args_map &#x3D; Java.cast(param_hm, HashMap);</span><br><span class="line">            console.log(&quot;打印hashmap: -&gt; &quot; + map.toString() + args_map.toString());</span><br><span class="line">            return this.show.apply(this,arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-重载"><a href="#Hook-重载" class="headerlink" title="Hook 重载"></a>Hook 重载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">function hookdecodeimgkey() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var base64 &#x3D; Java.use(&quot;android.util.Base64&quot;)</span><br><span class="line">        Java.use(&quot;com.ilulutv.fulao2.other.i.b&quot;).b.overload(&#39;[B&#39;, &#39;[B&#39;, &#39;java.lang.String&#39;).implementation &#x3D; function (key, iv, image) &#123;</span><br><span class="line">            var result &#x3D; this.b(key, iv, image);</span><br><span class="line">            console.log(&quot;key&quot;, base64.encodeToString(key, 0));</span><br><span class="line">            console.log(&quot;iv&quot;, base64.encodeToString(iv, 0));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        var UtilsClass &#x3D; Java.use(&quot;com.kevin.app.Utils&quot;);</span><br><span class="line">        &#x2F;&#x2F; 重载无参方法</span><br><span class="line">        UtilsClass.test.overload().implementation &#x3D; function () &#123;</span><br><span class="line">            console.log(&quot;hook overload no args&quot;);</span><br><span class="line">            return this.test();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 重载有参方法 - 基础数据类型</span><br><span class="line">UtilsClass.test.overload(&#39;int&#39;).implementation &#x3D; function(num)&#123;</span><br><span class="line">            console.log(&quot;hook overload int args&quot;);</span><br><span class="line">            var myNum &#x3D; 9999;</span><br><span class="line">            var oriResult &#x3D; this.test(num);</span><br><span class="line">            console.log(&quot;oriResult is :&quot; + oriResult);</span><br><span class="line">            return this.test(myNum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 重载有参方法 - 引用数据类型</span><br><span class="line">        UtilsClass.test.overload(&#39;com.kevin.app.Money&#39;).implementation &#x3D; function(money)&#123;</span><br><span class="line">            console.log(&quot;hook Money args&quot;);</span><br><span class="line">            return this.test(money);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; hook 指定方法的所有重载</span><br><span class="line">        var ClassName &#x3D; Java.use(&quot;com.xiaojianbang.app.Utils&quot;);</span><br><span class="line">        var overloadsLength &#x3D; ClassName.test.overloads.length;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; overloadsLength; i++)&#123;</span><br><span class="line">            ClassName.test.overloads[i].implementation &#x3D; function () &#123;</span><br><span class="line">                &#x2F;&#x2F; 遍历打印 arguments </span><br><span class="line">                for (var a &#x3D; 0; a &lt; arguments.length; a++)&#123;</span><br><span class="line">                    console.log(a + &quot; : &quot; + arguments[a]);</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 调用原方法</span><br><span class="line">                return this.test.apply(this,arguments);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-内部类"><a href="#Hook-内部类" class="headerlink" title="Hook 内部类"></a>Hook 内部类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function main()&#123;</span><br><span class="line">    Java.perfor(function()&#123;</span><br><span class="line">        &#x2F;&#x2F; hook 内部类</span><br><span class="line">        &#x2F;&#x2F; 内部类使用$进行分隔 不使用.</span><br><span class="line">        var InnerClass &#x3D; Java.use(&quot;com.xiaojianbang.app.Money$innerClass&quot;);</span><br><span class="line">        &#x2F;&#x2F; 重写内部类的 $init 方法</span><br><span class="line">        InnerClass.$init.overload(&quot;java.lang.String&quot;,&quot;int&quot;).implementation &#x3D; function(x,y)&#123;</span><br><span class="line">            console.log(&quot;x: &quot;,x);</span><br><span class="line">            console.log(&quot;y: &quot;,y);</span><br><span class="line">            this.$init(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="Hook-匿名类"><a href="#Hook-匿名类" class="headerlink" title="Hook 匿名类"></a>Hook 匿名类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 接口, 抽象类, 不可以被new</span><br><span class="line">&#x2F;&#x2F; 接口, 抽象类 要使用必须要实例化, 实例化不是通过new, 而是通过实现接口方法, 继承抽象类等方式</span><br><span class="line">&#x2F;&#x2F; new __接口__&#123;&#125; 可以理解成 new 了一个实现接口的匿名类, 在匿名类的内部(花括号内),实现了这个接口</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        &#x2F;&#x2F; hook 匿名类</span><br><span class="line">        &#x2F;&#x2F; 匿名类在 smail中以 $1, $2 等方式存在, 需要通过 java 行号去 smail 找到准确的匿名类名称 </span><br><span class="line">        var NiMingClass &#x3D; Java.use(&quot;com.xiaojianbang.app.MainActivity$1&quot;);</span><br><span class="line">        NiMingClass.getInfo.implementation &#x3D; function ()&#123;</span><br><span class="line">            return &quot;kevin change 匿名类&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="Hook-枚举类"><a href="#Hook-枚举类" class="headerlink" title="Hook 枚举类"></a>Hook 枚举类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function enumPrint()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.choose(&quot;com.r0ysue.a0526printout.Signal&quot;,&#123;</span><br><span class="line">            onComplete: function()&#123;&#125;,</span><br><span class="line">            onMatch: function(instance)&#123;</span><br><span class="line">                console.log(&#39;find it ,&#39;,instance);</span><br><span class="line">                console.log(instance.class.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-动态加载dex"><a href="#Hook-动态加载dex" class="headerlink" title="Hook 动态加载dex"></a>Hook 动态加载dex</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch : function(loader)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    &#x2F;&#x2F; loadClass or findClass 并指定classLoader</span><br><span class="line">                    if (loader.loadClass(&quot;com.xiaojianbang.app.Dynamic&quot;))&#123;</span><br><span class="line">                        Java.classFactory.loader &#x3D; loader;</span><br><span class="line">                        var hookClass &#x3D; Java.use(&quot;com.xiaojianbang.app.Dynamic&quot;);</span><br><span class="line">                        console.log(&quot;success hook it :&quot;, hookClass);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (error) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line">                console.log(&quot;complete !!! &quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p>经常在加壳的 app 中, 没办法正确找到正常加载 app 类的 classloader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function hook() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        Java.enumerateClassLoadersSync().forEach(function (classloader) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                console.log(&quot;classloader&quot;, classloader);</span><br><span class="line">                classloader.loadClass(&quot;com.kanxue.encrypt01.MainActivity&quot;);</span><br><span class="line">                Java.classFactory.loader &#x3D; classloader;</span><br><span class="line">                var mainActivityClass &#x3D; Java.use(&quot;com.kanxue.encrypt01.MainActivity&quot;);</span><br><span class="line">                console.log(&quot;mainActivityClass&quot;, mainActivityClass);</span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                console.log(&quot;error&quot;, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="trace类调用栈"><a href="#trace类调用栈" class="headerlink" title="trace类调用栈"></a>trace类调用栈</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">function uniqBy(array, key) &#123;</span><br><span class="line">    var seen &#x3D; &#123;&#125;;</span><br><span class="line">    return array.filter(function (item) &#123;</span><br><span class="line">        var k &#x3D; key(item);</span><br><span class="line">        return seen.hasOwnProperty(k) ? false : (seen[k] &#x3D; true);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; trace a specific Java Method</span><br><span class="line">function traceMethod(targetClassMethod) &#123;</span><br><span class="line">    var delim &#x3D; targetClassMethod.lastIndexOf(&quot;.&quot;);</span><br><span class="line">    if (delim &#x3D;&#x3D;&#x3D; -1) return;</span><br><span class="line"></span><br><span class="line">    var targetClass &#x3D; targetClassMethod.slice(0, delim)</span><br><span class="line">    var targetMethod &#x3D; targetClassMethod.slice(delim + 1, targetClassMethod.length)</span><br><span class="line"></span><br><span class="line">    var hook &#x3D; Java.use(targetClass);</span><br><span class="line">    var overloadCount &#x3D; hook[targetMethod].overloads.length;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Tracing &quot; + targetClassMethod + &quot; [&quot; + overloadCount + &quot; overload(s)]&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; hook all class_method</span><br><span class="line">    for (var i &#x3D; 0; i &lt; overloadCount; i++) &#123;</span><br><span class="line"></span><br><span class="line">        hook[targetMethod].overloads[i].implementation &#x3D; function () &#123;</span><br><span class="line">            console.warn(&quot;\n*** entered &quot; + targetClassMethod);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; print backtrace</span><br><span class="line">            &#x2F;&#x2F; Java.perform(function() &#123;</span><br><span class="line">            &#x2F;&#x2F;var bt &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new());</span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;\nBacktrace:\n&quot; + bt);</span><br><span class="line">            &#x2F;&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; print args</span><br><span class="line">            if (arguments.length) console.log();</span><br><span class="line">            for (var j &#x3D; 0; j &lt; arguments.length; j++) &#123;</span><br><span class="line">                console.log(&quot;arg[&quot; + j + &quot;]: &quot; + arguments[j]);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; print retval</span><br><span class="line">            var retval &#x3D; this[targetMethod].apply(this, arguments); &#x2F;&#x2F; rare crash (Frida bug?)</span><br><span class="line">            console.log(&quot;\nretval: &quot; + retval);</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">            console.warn(&quot;\n*** exiting &quot; + targetClassMethod);</span><br><span class="line">            return retval;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function traceClass(targetClass) &#123;</span><br><span class="line">    &#x2F;&#x2F;Java.use是新建一个对象哈，大家还记得么？</span><br><span class="line">    var hook &#x3D; Java.use(targetClass);</span><br><span class="line">    &#x2F;&#x2F;利用反射的方式，拿到当前类的所有方法</span><br><span class="line">    var methods &#x3D; hook.class.getDeclaredMethods();</span><br><span class="line">    &#x2F;&#x2F; var methods &#x3D; hook.class.getMethods();</span><br><span class="line">    &#x2F;&#x2F;建完对象之后记得将对象释放掉哈</span><br><span class="line">    hook.$dispose;</span><br><span class="line">    &#x2F;&#x2F;将方法名保存到数组中</span><br><span class="line">    var parsedMethods &#x3D; [];</span><br><span class="line">    methods.forEach(function (method) &#123;</span><br><span class="line">        parsedMethods.push(method.toString().replace(targetClass + &quot;.&quot;, &quot;TOKEN&quot;).match(&#x2F;\sTOKEN(.*)\(&#x2F;)[1]);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F;去掉一些重复的值</span><br><span class="line">    var targets &#x3D; uniqBy(parsedMethods, JSON.stringify);</span><br><span class="line">    &#x2F;&#x2F;对数组中所有的方法进行hook，traceMethod也就是第一小节的内容</span><br><span class="line">    targets.forEach(function (targetMethod) &#123;</span><br><span class="line">        traceMethod(targetClass + &quot;.&quot; + targetMethod);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="调用栈打印"><a href="#调用栈打印" class="headerlink" title="调用栈打印"></a>调用栈打印</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function printStacks(name)&#123;</span><br><span class="line">    console.log(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; printStacks start &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &quot; + name + &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; sample 1</span><br><span class="line">    var throwable &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new());</span><br><span class="line">    console.log(throwable);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; sample 2</span><br><span class="line">    var exception &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new());</span><br><span class="line">    console.log(exception);</span><br><span class="line">    </span><br><span class="line">    console.log(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; printStacks end &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &quot; + name + &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="手动注册类"><a href="#手动注册类" class="headerlink" title="手动注册类"></a>手动注册类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">    var Runnable &#x3D; Java.use(&quot;java.lang.Runnable&quot;);</span><br><span class="line">    var saveImg &#x3D; Java.registerClass(&#123;</span><br><span class="line">        name: &quot;com.roysue.runnable&quot;,</span><br><span class="line">        implements: [Runnable],</span><br><span class="line">        fields: &#123;</span><br><span class="line">            bm: &quot;android.graphics.Bitmap&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            $init: [&#123;</span><br><span class="line">                returnType: &quot;void&quot;,</span><br><span class="line">                argumentTypes: [&quot;android.graphics.Bitmap&quot;],</span><br><span class="line">                implementation: function (bitmap) &#123;</span><br><span class="line">                    this.bm.value &#x3D; bitmap;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;],</span><br><span class="line">            run: function () &#123;</span><br><span class="line">                var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&#x2F;&quot; + guid() + &quot;.jpg&quot;</span><br><span class="line">                console.log(&quot;path&#x3D;&gt; &quot;, path)</span><br><span class="line">                var file &#x3D; Java.use(&quot;java.io.File&quot;).$new(path)</span><br><span class="line">                var fos &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(file);</span><br><span class="line"></span><br><span class="line">                this.bm.value.compress(Java.use(&quot;android.graphics.Bitmap$CompressFormat&quot;).JPEG.value, 100, fos)</span><br><span class="line">                fos.flush();</span><br><span class="line">                fos.close();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Java.use(&quot;android.graphics.BitmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;, &#39;android.graphics.BitmapFactory$Options&#39;).implementation &#x3D; function (data, offset, length, opts) &#123;</span><br><span class="line">        var result &#x3D; this.decodeByteArray(data, offset, length, opts);</span><br><span class="line">        var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line"></span><br><span class="line">        var runnable &#x3D; saveImg.$new(result);</span><br><span class="line">        runnable.run()</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line">   &#x2F;&#x2F; https:&#x2F;&#x2F;developer.android.com&#x2F;reference&#x2F;android&#x2F;view&#x2F;WindowManager.LayoutParams.html#FLAG_SECURE</span><br><span class="line">   var FLAG_SECURE &#x3D; 0x2000;</span><br><span class="line">   var Runnable &#x3D; Java.use(&quot;java.lang.Runnable&quot;);</span><br><span class="line">   var DisableSecureRunnable &#x3D; Java.registerClass(&#123;</span><br><span class="line">      name: &quot;me.bhamza.DisableSecureRunnable&quot;,</span><br><span class="line">      implements: [Runnable],</span><br><span class="line">      fields: &#123;</span><br><span class="line">          activity: &quot;android.app.Activity&quot;,</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">          $init: [&#123;</span><br><span class="line">             returnType: &quot;void&quot;,</span><br><span class="line">             argumentTypes: [&quot;android.app.Activity&quot;],</span><br><span class="line">             implementation: function (activity) &#123;</span><br><span class="line">                this.activity.value &#x3D; activity;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;],</span><br><span class="line">          run: function() &#123;</span><br><span class="line">             var flags &#x3D; this.activity.value.getWindow().getAttributes().flags.value; &#x2F;&#x2F; get current value</span><br><span class="line">             flags &amp;&#x3D; ~FLAG_SECURE; &#x2F;&#x2F; toggle it</span><br><span class="line">             this.activity.value.getWindow().setFlags(flags, FLAG_SECURE); &#x2F;&#x2F; disable it!</span><br><span class="line">             console.log(&quot;Done disabling SECURE flag...&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Java.choose(&quot;com.example.app.FlagSecureTestActivity&quot;, &#123;</span><br><span class="line">       &quot;onMatch&quot;: function (instance) &#123;</span><br><span class="line">          var runnable &#x3D; DisableSecureRunnable.$new(instance);</span><br><span class="line">          instance.runOnUiThread(runnable);</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;onComplete&quot;: function () &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-Click"><a href="#Hook-Click" class="headerlink" title="Hook Click"></a>Hook Click</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">var jclazz &#x3D; null;</span><br><span class="line">var jobj &#x3D; null;</span><br><span class="line"></span><br><span class="line">function getObjClassName(obj) &#123;</span><br><span class="line">    if (!jclazz) &#123;</span><br><span class="line">        var jclazz &#x3D; Java.use(&quot;java.lang.Class&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!jobj) &#123;</span><br><span class="line">        var jobj &#x3D; Java.use(&quot;java.lang.Object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return jclazz.getName.call(jobj.getClass.call(obj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function watch(obj, mtdName) &#123;</span><br><span class="line">    var listener_name &#x3D; getObjClassName(obj);</span><br><span class="line">    var target &#x3D; Java.use(listener_name);</span><br><span class="line">    if (!target || !mtdName in target) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; send(&quot;[WatchEvent] hooking &quot; + mtdName + &quot;: &quot; + listener_name);</span><br><span class="line">    target[mtdName].overloads.forEach(function (overload) &#123;</span><br><span class="line">        overload.implementation &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F;send(&quot;[WatchEvent] &quot; + mtdName + &quot;: &quot; + getObjClassName(this));</span><br><span class="line">            console.log(&quot;[WatchEvent] &quot; + mtdName + &quot;: &quot; + getObjClassName(this))</span><br><span class="line">            return this[mtdName].apply(this, arguments);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function OnClickListener() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;以spawn启动进程的模式来attach的话</span><br><span class="line">        Java.use(&quot;android.view.View&quot;).setOnClickListener.implementation &#x3D; function (listener) &#123;</span><br><span class="line">            if (listener !&#x3D; null) &#123;</span><br><span class="line">                watch(listener, &#39;onClick&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">            return this.setOnClickListener(listener);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果frida以attach的模式进行attch的话</span><br><span class="line">        Java.choose(&quot;android.view.View$ListenerInfo&quot;, &#123;</span><br><span class="line">            onMatch: function (instance) &#123;</span><br><span class="line">                instance &#x3D; instance.mOnClickListener.value;</span><br><span class="line">                if (instance) &#123;</span><br><span class="line">                    console.log(&quot;mOnClickListener name is :&quot; + getObjClassName(instance));</span><br><span class="line">                    watch(instance, &#39;onClick&#39;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(OnClickListener);</span><br></pre></td></tr></table></figure><h1 id="Hook-Activity"><a href="#Hook-Activity" class="headerlink" title="Hook Activity"></a>Hook Activity</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function () &#123;</span><br><span class="line">    var Activity &#x3D; Java.use(&quot;android.app.Activity&quot;);</span><br><span class="line">    &#x2F;&#x2F;console.log(Object.getOwnPropertyNames(Activity));</span><br><span class="line">    Activity.startActivity.overload(&#39;android.content.Intent&#39;).implementation&#x3D;function(p1)&#123;</span><br><span class="line">        console.log(&quot;Hooking android.app.Activity.startActivity(p1) successfully,p1&#x3D;&quot;+p1);</span><br><span class="line">        console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">        console.log(decodeURIComponent(p1.toUri(256)));</span><br><span class="line">        this.startActivity(p1);</span><br><span class="line">    &#125;</span><br><span class="line">    Activity.startActivity.overload(&#39;android.content.Intent&#39;, &#39;android.os.Bundle&#39;).implementation&#x3D;function(p1,p2)&#123;</span><br><span class="line">        console.log(&quot;Hooking android.app.Activity.startActivity(p1,p2) successfully,p1&#x3D;&quot;+p1+&quot;,p2&#x3D;&quot;+p2);</span><br><span class="line">        console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">        console.log(decodeURIComponent(p1.toUri(256)));</span><br><span class="line">        this.startActivity(p1,p2);</span><br><span class="line">    &#125;</span><br><span class="line">    Activity.startService.overload(&#39;android.content.Intent&#39;).implementation&#x3D;function(p1)&#123;</span><br><span class="line">        console.log(&quot;Hooking android.app.Activity.startService(p1) successfully,p1&#x3D;&quot;+p1);</span><br><span class="line">        console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">        console.log(decodeURIComponent(p1.toUri(256)));</span><br><span class="line">        this.startService(p1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Hook-绕过root检测"><a href="#Hook-绕过root检测" class="headerlink" title="Hook 绕过root检测"></a>Hook 绕过root检测</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; $ frida -l antiroot.js -U -f com.example.app --no-pause</span><br><span class="line">&#x2F;&#x2F; CHANGELOG by Pichaya Morimoto (p.morimoto@sth.sh): </span><br><span class="line">&#x2F;&#x2F;  - I added extra whitelisted items to deal with the latest versions </span><br><span class="line">&#x2F;&#x2F; of RootBeer&#x2F;Cordova iRoot as of August 6, 2019</span><br><span class="line">&#x2F;&#x2F;  - The original one just fucked up (kill itself) if Magisk is installed lol</span><br><span class="line">&#x2F;&#x2F; Credit &amp; Originally written by: https:&#x2F;&#x2F;codeshare.frida.re&#x2F;@dzonerzy&#x2F;fridantiroot&#x2F;</span><br><span class="line">&#x2F;&#x2F; If this isn&#39;t working in the future, check console logs, rootbeer src, or libtool-checker.so</span><br><span class="line"></span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line"></span><br><span class="line">    var RootPackages &#x3D; [&quot;com.noshufou.android.su&quot;, &quot;com.noshufou.android.su.elite&quot;, &quot;eu.chainfire.supersu&quot;,</span><br><span class="line">        &quot;com.koushikdutta.superuser&quot;, &quot;com.thirdparty.superuser&quot;, &quot;com.yellowes.su&quot;, &quot;com.koushikdutta.rommanager&quot;,</span><br><span class="line">        &quot;com.koushikdutta.rommanager.license&quot;, &quot;com.dimonvideo.luckypatcher&quot;, &quot;com.chelpus.lackypatch&quot;,</span><br><span class="line">        &quot;com.ramdroid.appquarantine&quot;, &quot;com.ramdroid.appquarantinepro&quot;, &quot;com.devadvance.rootcloak&quot;, &quot;com.devadvance.rootcloakplus&quot;,</span><br><span class="line">        &quot;de.robv.android.xposed.installer&quot;, &quot;com.saurik.substrate&quot;, &quot;com.zachspong.temprootremovejb&quot;, &quot;com.amphoras.hidemyroot&quot;,</span><br><span class="line">        &quot;com.amphoras.hidemyrootadfree&quot;, &quot;com.formyhm.hiderootPremium&quot;, &quot;com.formyhm.hideroot&quot;, &quot;me.phh.superuser&quot;,</span><br><span class="line">        &quot;eu.chainfire.supersu.pro&quot;, &quot;com.kingouser.com&quot;, &quot;com.android.vending.billing.InAppBillingService.COIN&quot;,&quot;com.topjohnwu.magisk&quot;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    var RootBinaries &#x3D; [&quot;su&quot;, &quot;busybox&quot;, &quot;supersu&quot;, &quot;Superuser.apk&quot;, &quot;KingoUser.apk&quot;, &quot;SuperSu.apk&quot;,&quot;magisk&quot;];</span><br><span class="line"></span><br><span class="line">    var RootProperties &#x3D; &#123;</span><br><span class="line">        &quot;ro.build.selinux&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;ro.debuggable&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;service.adb.root&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;ro.secure&quot;: &quot;1&quot;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var RootPropertiesKeys &#x3D; [];</span><br><span class="line"></span><br><span class="line">    for (var k in RootProperties) RootPropertiesKeys.push(k);</span><br><span class="line"></span><br><span class="line">    var PackageManager &#x3D; Java.use(&quot;android.app.ApplicationPackageManager&quot;);</span><br><span class="line"></span><br><span class="line">    var Runtime &#x3D; Java.use(&#39;java.lang.Runtime&#39;);</span><br><span class="line"></span><br><span class="line">    var NativeFile &#x3D; Java.use(&#39;java.io.File&#39;);</span><br><span class="line"></span><br><span class="line">    var String &#x3D; Java.use(&#39;java.lang.String&#39;);</span><br><span class="line"></span><br><span class="line">    var SystemProperties &#x3D; Java.use(&#39;android.os.SystemProperties&#39;);</span><br><span class="line"></span><br><span class="line">    var BufferedReader &#x3D; Java.use(&#39;java.io.BufferedReader&#39;);</span><br><span class="line"></span><br><span class="line">    var ProcessBuilder &#x3D; Java.use(&#39;java.lang.ProcessBuilder&#39;);</span><br><span class="line"></span><br><span class="line">    var StringBuffer &#x3D; Java.use(&#39;java.lang.StringBuffer&#39;);</span><br><span class="line"></span><br><span class="line">    var loaded_classes &#x3D; Java.enumerateLoadedClassesSync();</span><br><span class="line"></span><br><span class="line">    send(&quot;Loaded &quot; + loaded_classes.length + &quot; classes!&quot;);</span><br><span class="line"></span><br><span class="line">    var useKeyInfo &#x3D; false;</span><br><span class="line"></span><br><span class="line">    var useProcessManager &#x3D; false;</span><br><span class="line"></span><br><span class="line">    send(&quot;loaded: &quot; + loaded_classes.indexOf(&#39;java.lang.ProcessManager&#39;));</span><br><span class="line"></span><br><span class="line">    if (loaded_classes.indexOf(&#39;java.lang.ProcessManager&#39;) !&#x3D; -1) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;useProcessManager &#x3D; true;</span><br><span class="line">            &#x2F;&#x2F;var ProcessManager &#x3D; Java.use(&#39;java.lang.ProcessManager&#39;);</span><br><span class="line">        &#125; catch (err) &#123;</span><br><span class="line">            send(&quot;ProcessManager Hook failed: &quot; + err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        send(&quot;ProcessManager hook not loaded&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var KeyInfo &#x3D; null;</span><br><span class="line"></span><br><span class="line">    if (loaded_classes.indexOf(&#39;android.security.keystore.KeyInfo&#39;) !&#x3D; -1) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;useKeyInfo &#x3D; true;</span><br><span class="line">            &#x2F;&#x2F;var KeyInfo &#x3D; Java.use(&#39;android.security.keystore.KeyInfo&#39;);</span><br><span class="line">        &#125; catch (err) &#123;</span><br><span class="line">            send(&quot;KeyInfo Hook failed: &quot; + err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        send(&quot;KeyInfo hook not loaded&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PackageManager.getPackageInfo.overload(&#39;java.lang.String&#39;, &#39;int&#39;).implementation &#x3D; function(pname, flags) &#123;</span><br><span class="line">        var shouldFakePackage &#x3D; (RootPackages.indexOf(pname) &gt; -1);</span><br><span class="line">        if (shouldFakePackage) &#123;</span><br><span class="line">            send(&quot;Bypass root check for package: &quot; + pname);</span><br><span class="line">            pname &#x3D; &quot;set.package.name.to.a.fake.one.so.we.can.bypass.it&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return this.getPackageInfo.call(this, pname, flags);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    NativeFile.exists.implementation &#x3D; function() &#123;</span><br><span class="line">        var name &#x3D; NativeFile.getName.call(this);</span><br><span class="line">        var shouldFakeReturn &#x3D; (RootBinaries.indexOf(name) &gt; -1);</span><br><span class="line">        if (shouldFakeReturn) &#123;</span><br><span class="line">            send(&quot;Bypass return value for binary: &quot; + name);</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return this.exists.call(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var exec &#x3D; Runtime.exec.overload(&#39;[Ljava.lang.String;&#39;);</span><br><span class="line">    var exec1 &#x3D; Runtime.exec.overload(&#39;java.lang.String&#39;);</span><br><span class="line">    var exec2 &#x3D; Runtime.exec.overload(&#39;java.lang.String&#39;, &#39;[Ljava.lang.String;&#39;);</span><br><span class="line">    var exec3 &#x3D; Runtime.exec.overload(&#39;[Ljava.lang.String;&#39;, &#39;[Ljava.lang.String;&#39;);</span><br><span class="line">    var exec4 &#x3D; Runtime.exec.overload(&#39;[Ljava.lang.String;&#39;, &#39;[Ljava.lang.String;&#39;, &#39;java.io.File&#39;);</span><br><span class="line">    var exec5 &#x3D; Runtime.exec.overload(&#39;java.lang.String&#39;, &#39;[Ljava.lang.String;&#39;, &#39;java.io.File&#39;);</span><br><span class="line"></span><br><span class="line">    exec5.implementation &#x3D; function(cmd, env, dir) &#123;</span><br><span class="line">        if (cmd.indexOf(&quot;getprop&quot;) !&#x3D; -1 || cmd &#x3D;&#x3D; &quot;mount&quot; || cmd.indexOf(&quot;build.prop&quot;) !&#x3D; -1 || cmd &#x3D;&#x3D; &quot;id&quot; || cmd &#x3D;&#x3D; &quot;sh&quot;) &#123;</span><br><span class="line">            var fakeCmd &#x3D; &quot;grep&quot;;</span><br><span class="line">            send(&quot;Bypass &quot; + cmd + &quot; command&quot;);</span><br><span class="line">            return exec1.call(this, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        if (cmd &#x3D;&#x3D; &quot;su&quot;) &#123;</span><br><span class="line">            var fakeCmd &#x3D; &quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;;</span><br><span class="line">            send(&quot;Bypass &quot; + cmd + &quot; command&quot;);</span><br><span class="line">            return exec1.call(this, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        if (cmd &#x3D;&#x3D; &quot;which&quot;) &#123;</span><br><span class="line">            var fakeCmd &#x3D; &quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;;</span><br><span class="line">            send(&quot;Bypass which command&quot;);</span><br><span class="line">            return exec1.call(this, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        return exec5.call(this, cmd, env, dir);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec4.implementation &#x3D; function(cmdarr, env, file) &#123;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; cmdarr.length; i &#x3D; i + 1) &#123;</span><br><span class="line">            var tmp_cmd &#x3D; cmdarr[i];</span><br><span class="line">            if (tmp_cmd.indexOf(&quot;getprop&quot;) !&#x3D; -1 || tmp_cmd &#x3D;&#x3D; &quot;mount&quot; || tmp_cmd.indexOf(&quot;build.prop&quot;) !&#x3D; -1 || tmp_cmd &#x3D;&#x3D; &quot;id&quot; || tmp_cmd &#x3D;&#x3D; &quot;sh&quot;) &#123;</span><br><span class="line">                var fakeCmd &#x3D; &quot;grep&quot;;</span><br><span class="line">                send(&quot;Bypass &quot; + cmdarr + &quot; command&quot;);</span><br><span class="line">                return exec1.call(this, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (tmp_cmd &#x3D;&#x3D; &quot;su&quot;) &#123;</span><br><span class="line">                var fakeCmd &#x3D; &quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;;</span><br><span class="line">                send(&quot;Bypass &quot; + cmdarr + &quot; command&quot;);</span><br><span class="line">                return exec1.call(this, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return exec4.call(this, cmdarr, env, file);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec3.implementation &#x3D; function(cmdarr, envp) &#123;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; cmdarr.length; i &#x3D; i + 1) &#123;</span><br><span class="line">            var tmp_cmd &#x3D; cmdarr[i];</span><br><span class="line">            if (tmp_cmd.indexOf(&quot;getprop&quot;) !&#x3D; -1 || tmp_cmd &#x3D;&#x3D; &quot;mount&quot; || tmp_cmd.indexOf(&quot;build.prop&quot;) !&#x3D; -1 || tmp_cmd &#x3D;&#x3D; &quot;id&quot; || tmp_cmd &#x3D;&#x3D; &quot;sh&quot;) &#123;</span><br><span class="line">                var fakeCmd &#x3D; &quot;grep&quot;;</span><br><span class="line">                send(&quot;Bypass &quot; + cmdarr + &quot; command&quot;);</span><br><span class="line">                return exec1.call(this, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (tmp_cmd &#x3D;&#x3D; &quot;su&quot;) &#123;</span><br><span class="line">                var fakeCmd &#x3D; &quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;;</span><br><span class="line">                send(&quot;Bypass &quot; + cmdarr + &quot; command&quot;);</span><br><span class="line">                return exec1.call(this, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return exec3.call(this, cmdarr, envp);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec2.implementation &#x3D; function(cmd, env) &#123;</span><br><span class="line">        if (cmd.indexOf(&quot;getprop&quot;) !&#x3D; -1 || cmd &#x3D;&#x3D; &quot;mount&quot; || cmd.indexOf(&quot;build.prop&quot;) !&#x3D; -1 || cmd &#x3D;&#x3D; &quot;id&quot; || cmd &#x3D;&#x3D; &quot;sh&quot;) &#123;</span><br><span class="line">            var fakeCmd &#x3D; &quot;grep&quot;;</span><br><span class="line">            send(&quot;Bypass &quot; + cmd + &quot; command&quot;);</span><br><span class="line">            return exec1.call(this, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        if (cmd &#x3D;&#x3D; &quot;su&quot;) &#123;</span><br><span class="line">            var fakeCmd &#x3D; &quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;;</span><br><span class="line">            send(&quot;Bypass &quot; + cmd + &quot; command&quot;);</span><br><span class="line">            return exec1.call(this, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        return exec2.call(this, cmd, env);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec.implementation &#x3D; function(cmd) &#123;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; cmd.length; i &#x3D; i + 1) &#123;</span><br><span class="line">            var tmp_cmd &#x3D; cmd[i];</span><br><span class="line">            if (tmp_cmd.indexOf(&quot;getprop&quot;) !&#x3D; -1 || tmp_cmd &#x3D;&#x3D; &quot;mount&quot; || tmp_cmd.indexOf(&quot;build.prop&quot;) !&#x3D; -1 || tmp_cmd &#x3D;&#x3D; &quot;id&quot; || tmp_cmd &#x3D;&#x3D; &quot;sh&quot;) &#123;</span><br><span class="line">                var fakeCmd &#x3D; &quot;grep&quot;;</span><br><span class="line">                send(&quot;Bypass &quot; + cmd + &quot; command&quot;);</span><br><span class="line">                return exec1.call(this, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (tmp_cmd &#x3D;&#x3D; &quot;su&quot;) &#123;</span><br><span class="line">                var fakeCmd &#x3D; &quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;;</span><br><span class="line">                send(&quot;Bypass &quot; + cmd + &quot; command&quot;);</span><br><span class="line">                return exec1.call(this, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return exec.call(this, cmd);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec1.implementation &#x3D; function(cmd) &#123;</span><br><span class="line">        if (cmd.indexOf(&quot;getprop&quot;) !&#x3D; -1 || cmd &#x3D;&#x3D; &quot;mount&quot; || cmd.indexOf(&quot;build.prop&quot;) !&#x3D; -1 || cmd &#x3D;&#x3D; &quot;id&quot; || cmd &#x3D;&#x3D; &quot;sh&quot;) &#123;</span><br><span class="line">            var fakeCmd &#x3D; &quot;grep&quot;;</span><br><span class="line">            send(&quot;Bypass &quot; + cmd + &quot; command&quot;);</span><br><span class="line">            return exec1.call(this, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        if (cmd &#x3D;&#x3D; &quot;su&quot;) &#123;</span><br><span class="line">            var fakeCmd &#x3D; &quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;;</span><br><span class="line">            send(&quot;Bypass &quot; + cmd + &quot; command&quot;);</span><br><span class="line">            return exec1.call(this, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        return exec1.call(this, cmd);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    String.contains.implementation &#x3D; function(name) &#123;</span><br><span class="line">        if (name &#x3D;&#x3D; &quot;test-keys&quot;) &#123;</span><br><span class="line">            send(&quot;Bypass test-keys check&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return this.contains.call(this, name);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var get &#x3D; SystemProperties.get.overload(&#39;java.lang.String&#39;);</span><br><span class="line"></span><br><span class="line">    get.implementation &#x3D; function(name) &#123;</span><br><span class="line">        if (RootPropertiesKeys.indexOf(name) !&#x3D; -1) &#123;</span><br><span class="line">            send(&quot;Bypass &quot; + name);</span><br><span class="line">            return RootProperties[name];</span><br><span class="line">        &#125;</span><br><span class="line">        return this.get.call(this, name);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(&quot;libc.so&quot;, &quot;fopen&quot;), &#123;</span><br><span class="line">        onEnter: function(args) &#123;</span><br><span class="line">            var path1 &#x3D; Memory.readCString(args[0]);</span><br><span class="line">            var path &#x3D; path1.split(&quot;&#x2F;&quot;);</span><br><span class="line">            var executable &#x3D; path[path.length - 1];</span><br><span class="line">            var shouldFakeReturn &#x3D; (RootBinaries.indexOf(executable) &gt; -1)</span><br><span class="line">            if (shouldFakeReturn) &#123;</span><br><span class="line">                Memory.writeUtf8String(args[0], &quot;&#x2F;ggezxxx&quot;);</span><br><span class="line">                send(&quot;Bypass native fopen &gt;&gt; &quot;+path1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: function(retval) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(&quot;libc.so&quot;, &quot;fopen&quot;), &#123;</span><br><span class="line">        onEnter: function(args) &#123;</span><br><span class="line">            var path1 &#x3D; Memory.readCString(args[0]);</span><br><span class="line">            var path &#x3D; path1.split(&quot;&#x2F;&quot;);</span><br><span class="line">            var executable &#x3D; path[path.length - 1];</span><br><span class="line">            var shouldFakeReturn &#x3D; (RootBinaries.indexOf(executable) &gt; -1)</span><br><span class="line">            if (shouldFakeReturn) &#123;</span><br><span class="line">                Memory.writeUtf8String(args[0], &quot;&#x2F;ggezxxx&quot;);</span><br><span class="line">                send(&quot;Bypass native fopen &gt;&gt; &quot;+path1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: function(retval) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(&quot;libc.so&quot;, &quot;system&quot;), &#123;</span><br><span class="line">        onEnter: function(args) &#123;</span><br><span class="line">            var cmd &#x3D; Memory.readCString(args[0]);</span><br><span class="line">            send(&quot;SYSTEM CMD: &quot; + cmd);</span><br><span class="line">            if (cmd.indexOf(&quot;getprop&quot;) !&#x3D; -1 || cmd &#x3D;&#x3D; &quot;mount&quot; || cmd.indexOf(&quot;build.prop&quot;) !&#x3D; -1 || cmd &#x3D;&#x3D; &quot;id&quot;) &#123;</span><br><span class="line">                send(&quot;Bypass native system: &quot; + cmd);</span><br><span class="line">                Memory.writeUtf8String(args[0], &quot;grep&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (cmd &#x3D;&#x3D; &quot;su&quot;) &#123;</span><br><span class="line">                send(&quot;Bypass native system: &quot; + cmd);</span><br><span class="line">                Memory.writeUtf8String(args[0], &quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: function(retval) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">    TO IMPLEMENT:</span><br><span class="line">    Exec Family</span><br><span class="line">    int execl(const char *path, const char *arg0, ..., const char *argn, (char *)0);</span><br><span class="line">    int execle(const char *path, const char *arg0, ..., const char *argn, (char *)0, char *const envp[]);</span><br><span class="line">    int execlp(const char *file, const char *arg0, ..., const char *argn, (char *)0);</span><br><span class="line">    int execlpe(const char *file, const char *arg0, ..., const char *argn, (char *)0, char *const envp[]);</span><br><span class="line">    int execv(const char *path, char *const argv[]);</span><br><span class="line">    int execve(const char *path, char *const argv[], char *const envp[]);</span><br><span class="line">    int execvp(const char *file, char *const argv[]);</span><br><span class="line">    int execvpe(const char *file, char *const argv[], char *const envp[]);</span><br><span class="line">    *&#x2F;</span><br><span class="line"></span><br><span class="line">    BufferedReader.readLine.overload().implementation &#x3D; function() &#123;</span><br><span class="line">        var text &#x3D; this.readLine.call(this);</span><br><span class="line">        if (text &#x3D;&#x3D;&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F; just pass , i know it&#39;s ugly as hell but test !&#x3D; null won&#39;t work :(</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            var shouldFakeRead &#x3D; (text.indexOf(&quot;ro.build.tags&#x3D;test-keys&quot;) &gt; -1);</span><br><span class="line">            if (shouldFakeRead) &#123;</span><br><span class="line">                send(&quot;Bypass build.prop file read&quot;);</span><br><span class="line">                text &#x3D; text.replace(&quot;ro.build.tags&#x3D;test-keys&quot;, &quot;ro.build.tags&#x3D;release-keys&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return text;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var executeCommand &#x3D; ProcessBuilder.command.overload(&#39;java.util.List&#39;);</span><br><span class="line"></span><br><span class="line">    ProcessBuilder.start.implementation &#x3D; function() &#123;</span><br><span class="line">        var cmd &#x3D; this.command.call(this);</span><br><span class="line">        var shouldModifyCommand &#x3D; false;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; cmd.size(); i &#x3D; i + 1) &#123;</span><br><span class="line">            var tmp_cmd &#x3D; cmd.get(i).toString();</span><br><span class="line">            if (tmp_cmd.indexOf(&quot;getprop&quot;) !&#x3D; -1 || tmp_cmd.indexOf(&quot;mount&quot;) !&#x3D; -1 || tmp_cmd.indexOf(&quot;build.prop&quot;) !&#x3D; -1 || tmp_cmd.indexOf(&quot;id&quot;) !&#x3D; -1) &#123;</span><br><span class="line">                shouldModifyCommand &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (shouldModifyCommand) &#123;</span><br><span class="line">            send(&quot;Bypass ProcessBuilder &quot; + cmd);</span><br><span class="line">            this.command.call(this, [&quot;grep&quot;]);</span><br><span class="line">            return this.start.call(this);</span><br><span class="line">        &#125;</span><br><span class="line">        if (cmd.indexOf(&quot;su&quot;) !&#x3D; -1) &#123;</span><br><span class="line">            send(&quot;Bypass ProcessBuilder &quot; + cmd);</span><br><span class="line">            this.command.call(this, [&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;]);</span><br><span class="line">            return this.start.call(this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return this.start.call(this);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    if (useProcessManager) &#123;</span><br><span class="line">        var ProcManExec &#x3D; ProcessManager.exec.overload(&#39;[Ljava.lang.String;&#39;, &#39;[Ljava.lang.String;&#39;, &#39;java.io.File&#39;, &#39;boolean&#39;);</span><br><span class="line">        var ProcManExecVariant &#x3D; ProcessManager.exec.overload(&#39;[Ljava.lang.String;&#39;, &#39;[Ljava.lang.String;&#39;, &#39;java.lang.String&#39;, &#39;java.io.FileDescriptor&#39;, &#39;java.io.FileDescriptor&#39;, &#39;java.io.FileDescriptor&#39;, &#39;boolean&#39;);</span><br><span class="line"></span><br><span class="line">        ProcManExec.implementation &#x3D; function(cmd, env, workdir, redirectstderr) &#123;</span><br><span class="line">            var fake_cmd &#x3D; cmd;</span><br><span class="line">            for (var i &#x3D; 0; i &lt; cmd.length; i &#x3D; i + 1) &#123;</span><br><span class="line">                var tmp_cmd &#x3D; cmd[i];</span><br><span class="line">                if (tmp_cmd.indexOf(&quot;getprop&quot;) !&#x3D; -1 || tmp_cmd &#x3D;&#x3D; &quot;mount&quot; || tmp_cmd.indexOf(&quot;build.prop&quot;) !&#x3D; -1 || tmp_cmd &#x3D;&#x3D; &quot;id&quot;) &#123;</span><br><span class="line">                    var fake_cmd &#x3D; [&quot;grep&quot;];</span><br><span class="line">                    send(&quot;Bypass &quot; + cmdarr + &quot; command&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (tmp_cmd &#x3D;&#x3D; &quot;su&quot;) &#123;</span><br><span class="line">                    var fake_cmd &#x3D; [&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;];</span><br><span class="line">                    send(&quot;Bypass &quot; + cmdarr + &quot; command&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return ProcManExec.call(this, fake_cmd, env, workdir, redirectstderr);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ProcManExecVariant.implementation &#x3D; function(cmd, env, directory, stdin, stdout, stderr, redirect) &#123;</span><br><span class="line">            var fake_cmd &#x3D; cmd;</span><br><span class="line">            for (var i &#x3D; 0; i &lt; cmd.length; i &#x3D; i + 1) &#123;</span><br><span class="line">                var tmp_cmd &#x3D; cmd[i];</span><br><span class="line">                if (tmp_cmd.indexOf(&quot;getprop&quot;) !&#x3D; -1 || tmp_cmd &#x3D;&#x3D; &quot;mount&quot; || tmp_cmd.indexOf(&quot;build.prop&quot;) !&#x3D; -1 || tmp_cmd &#x3D;&#x3D; &quot;id&quot;) &#123;</span><br><span class="line">                    var fake_cmd &#x3D; [&quot;grep&quot;];</span><br><span class="line">                    send(&quot;Bypass &quot; + cmdarr + &quot; command&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (tmp_cmd &#x3D;&#x3D; &quot;su&quot;) &#123;</span><br><span class="line">                    var fake_cmd &#x3D; [&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;];</span><br><span class="line">                    send(&quot;Bypass &quot; + cmdarr + &quot; command&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return ProcManExecVariant.call(this, fake_cmd, env, directory, stdin, stdout, stderr, redirect);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (useKeyInfo) &#123;</span><br><span class="line">        KeyInfo.isInsideSecureHardware.implementation &#x3D; function() &#123;</span><br><span class="line">            send(&quot;Bypass isInsideSecureHardware&quot;);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="frida主线程运行"><a href="#frida主线程运行" class="headerlink" title="frida主线程运行"></a>frida主线程运行</h1><p>使用一些方法的时候出现报错 <code>on a thread that has not called Looper.prepare()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function() &#123;</span><br><span class="line">  var Toast &#x3D; Java.use(&#39;android.widget.Toast&#39;);</span><br><span class="line">  var currentApplication &#x3D; Java.use(&#39;android.app.ActivityThread&#39;).currentApplication(); </span><br><span class="line">  var context &#x3D; currentApplication.getApplicationContext();</span><br><span class="line"></span><br><span class="line">  Java.scheduleOnMainThread(function() &#123;</span><br><span class="line">    Toast.makeText(context, &quot;Hello World&quot;, Toast.LENGTH_LONG.value).show();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="过滤打印"><a href="#过滤打印" class="headerlink" title="过滤打印"></a>过滤打印</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function hook_lnf() &#123;</span><br><span class="line">    var activate &#x3D; false;</span><br><span class="line"></span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var hashmapClass &#x3D; Java.use(&quot;java.util.HashMap&quot;);</span><br><span class="line">        hashmapClass.put.implementation &#x3D; function(key,value)&#123;</span><br><span class="line">            if (activate)&#123;</span><br><span class="line">                console.log(&quot;key:&quot;, key, &quot;value:&quot;, value);</span><br><span class="line">            &#125;</span><br><span class="line">            return this.put(key,value);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var lnfClazz &#x3D; Java.use(&quot;tb.lnf&quot;);</span><br><span class="line">        lnfClazz.a.overload(&#39;java.util.HashMap&#39;, &#39;java.util.HashMap&#39;, &#39;java.lang.String&#39;,</span><br><span class="line">            &#39;java.lang.String&#39;, &#39;boolean&#39;).implementation &#x3D; function (hashmap, hashmap2, str, str2, z) &#123;</span><br><span class="line">                printHashMap(&quot;hashmap&quot;, hashmap);</span><br><span class="line">                printHashMap(&quot;hashmap2&quot;, hashmap2);</span><br><span class="line">                console.log(&quot;str&quot;, str);</span><br><span class="line">                console.log(&quot;str2&quot;, str2);</span><br><span class="line">                console.log(&quot;boolean&quot;, z);</span><br><span class="line">                activate &#x3D; true;</span><br><span class="line">                var result &#x3D; this.a(hashmap, hashmap2, str, str2, z);</span><br><span class="line">                activate &#x3D; false</span><br><span class="line">                printHashMap(&quot;result&quot;, result);</span><br><span class="line">                return result;</span><br><span class="line">            &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="禁止退出"><a href="#禁止退出" class="headerlink" title="禁止退出"></a>禁止退出</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function hookExit()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;[*] Starting hook exit&quot;);</span><br><span class="line">        var exitClass &#x3D; Java.use(&quot;java.lang.System&quot;);</span><br><span class="line">        exitClass.exit.implementation &#x3D; function()&#123;</span><br><span class="line">            console.log(&quot;[*] System.exit.called&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&quot;[*] hooking calls to System.exit&quot;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(hookExit);</span><br></pre></td></tr></table></figure><h1 id="修改设备参数"><a href="#修改设备参数" class="headerlink" title="修改设备参数"></a>修改设备参数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; frida hook 修改设备参数</span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line">var TelephonyManager &#x3D; Java.use(&quot;android.telephony.TelephonyManager&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;IMEI hook</span><br><span class="line">    TelephonyManager.getDeviceId.overload().implementation &#x3D; function () &#123;</span><br><span class="line">               console.log(&quot;[*]Called - getDeviceId()&quot;);</span><br><span class="line">               var temp &#x3D; this.getDeviceId();</span><br><span class="line">               console.log(&quot;real IMEI: &quot;+temp);</span><br><span class="line">               return &quot;867979021642856&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F; muti IMEI</span><br><span class="line">    TelephonyManager.getDeviceId.overload(&#39;int&#39;).implementation &#x3D; function (p) &#123;</span><br><span class="line">               console.log(&quot;[*]Called - getDeviceId(int) param is&quot;+p);</span><br><span class="line">               var temp &#x3D; this.getDeviceId(p);</span><br><span class="line">               console.log(&quot;real IMEI &quot;+p+&quot;: &quot;+temp);</span><br><span class="line">               return &quot;867979021642856&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;IMSI hook</span><br><span class="line">TelephonyManager.getSimSerialNumber.overload().implementation &#x3D; function () &#123;</span><br><span class="line">               console.log(&quot;[*]Called - getSimSerialNumber(String)&quot;);</span><br><span class="line">               var temp &#x3D; this.getSimSerialNumber();</span><br><span class="line">               console.log(&quot;real IMSI: &quot;+temp);</span><br><span class="line">               return &quot;123456789&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;ANDOID_ID hook</span><br><span class="line">    var Secure &#x3D; Java.use(&quot;android.provider.Settings$Secure&quot;);</span><br><span class="line">    Secure.getString.implementation &#x3D; function (p1,p2) &#123;</span><br><span class="line">    if(p2.indexOf(&quot;android_id&quot;)&lt;0) return this.getString(p1,p2);</span><br><span class="line">    console.log(&quot;[*]Called - get android_ID, param is:&quot;+p2);</span><br><span class="line">    var temp &#x3D; this.getString(p1,p2);</span><br><span class="line">    console.log(&quot;real Android_ID: &quot;+temp);</span><br><span class="line">    return &quot;844de23bfcf93801&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;android的hidden API，需要通过反射调用</span><br><span class="line">    var SP &#x3D; Java.use(&quot;android.os.SystemProperties&quot;);</span><br><span class="line">    SP.get.overload(&#39;java.lang.String&#39;).implementation &#x3D; function (p1) &#123;</span><br><span class="line">    var tmp &#x3D; this.get(p1);</span><br><span class="line">    console.log(&quot;[*]&quot;+p1+&quot; : &quot;+tmp);</span><br><span class="line"></span><br><span class="line">    return tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    SP.get.overload(&#39;java.lang.String&#39;, &#39;java.lang.String&#39;).implementation &#x3D; function (p1,p2) &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    var tmp &#x3D; this.get(p1,p2)</span><br><span class="line">    console.log(&quot;[*]&quot;+p1+&quot;,&quot;+p2+&quot; : &quot;+tmp);</span><br><span class="line">    return tmp;</span><br><span class="line">    &#125; </span><br><span class="line">    &#x2F;&#x2F; hook MAC</span><br><span class="line">    var wifi &#x3D; Java.use(&quot;android.net.wifi.WifiInfo&quot;);</span><br><span class="line">    wifi.getMacAddress.implementation &#x3D; function () &#123;</span><br><span class="line">    var tmp &#x3D; this.getMacAddress();</span><br><span class="line">    console.log(&quot;[*]real MAC: &quot;+tmp);</span><br><span class="line">    return tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="请求调用栈"><a href="#请求调用栈" class="headerlink" title="请求调用栈"></a>请求调用栈</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var class_Socket &#x3D; Java.use(&quot;java.net.Socket&quot;);</span><br><span class="line">class_Socket.getOutputStream.overload().implementation &#x3D; function()&#123;</span><br><span class="line">    send(&quot;getOutputSteam&quot;);</span><br><span class="line">    var result &#x3D; this.getOutputStream();</span><br><span class="line">    var bt &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(</span><br><span class="line">        Java.use(&quot;java.lang.Exception&quot;).$new();</span><br><span class="line">    )</span><br><span class="line">    console.log(&quot;Backtrace:&quot; + bt);</span><br><span class="line">    send(result);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="上下文Context"><a href="#上下文Context" class="headerlink" title="上下文Context"></a>上下文Context</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function getContext()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var currentApplication &#x3D; Java.use(&quot;android.app.ActivityThread&quot;).currentApplication();</span><br><span class="line">        console.log(currentApplication);</span><br><span class="line">        var context &#x3D; currentApplication.getApplicationContext();</span><br><span class="line">        console.log(context);</span><br><span class="line">        var packageName &#x3D; context.getPackageName();</span><br><span class="line">        console.log(packageName);</span><br><span class="line">        console.log(currentApplication.getPackageName());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">frida 传递参数</span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.log(&quot;enter perform&quot;);</span><br><span class="line">        &#x2F;&#x2F; 获取要hook的类</span><br><span class="line">        var TextViewClass &#x3D; Java.use(&quot;android.widget.TextView&quot;);</span><br><span class="line">        &#x2F;&#x2F; 要hook的方法</span><br><span class="line">        TextViewClass.setText.overload(&#39;java.lang.CharSequence&#39;).implementation &#x3D; function (ori_input) &#123;</span><br><span class="line">            console.log(&#39;enter&#39;, &#39;java.lang.CharSequence&#39;);</span><br><span class="line">            console.log(&#39;ori_input&#39;,ori_input.toString());</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 定义用于接受python传参的data</span><br><span class="line">            var receive_data;</span><br><span class="line">            &#x2F;&#x2F; 将原参数传递给python 在python中进行处理</span><br><span class="line">            send(ori_input.toString());</span><br><span class="line">            &#x2F;&#x2F; recv 从python接收传递的内容 默认传过来的是个json对象</span><br><span class="line">            recv(function (json_data) &#123;</span><br><span class="line">                console.log(&#39;data from python &#39; + json_data.data);</span><br><span class="line">                receive_data &#x3D; json_data.data;</span><br><span class="line">                console.log(typeof (receive_data));</span><br><span class="line">            &#125;).wait(); &#x2F;&#x2F;wait() 等待python处理 阻塞</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 转java字符串</span><br><span class="line">            receive_data &#x3D; Java.use(&quot;java.lang.String&quot;).$new(receive_data);</span><br><span class="line">            this.setText(receive_data);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line">python 处理收到的参数</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">__author__ &#x3D; &quot;K&quot;</span><br><span class="line">__time__ &#x3D; &quot;2020-08-06 09:48&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import base64</span><br><span class="line">import frida</span><br><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">def on_message(message,data):</span><br><span class="line">    logger.info(str(message)) # dict</span><br><span class="line">    logger.info(str(data) if data else &quot;None&quot;)</span><br><span class="line"></span><br><span class="line">    if message[&#39;type&#39;] &#x3D;&#x3D; &#39;error&#39;:</span><br><span class="line">        logger.error(&#39;error:&#39; + str(message[&#39;description&#39;]))</span><br><span class="line">        logger.error(&#39;stack: &#39; + str(message[&#39;stack&#39;]))</span><br><span class="line"></span><br><span class="line">    if message[&#39;type&#39;] &#x3D;&#x3D; &#39;send&#39;:</span><br><span class="line">        logger.info(&#39;get message [*] --&gt; &#39; + message[&#39;payload&#39;])</span><br><span class="line"></span><br><span class="line">        payload &#x3D; message[&#39;payload&#39;]</span><br><span class="line">        # 处理逻辑 sending to the server: YWFhOmJiYg&#x3D;&#x3D;</span><br><span class="line">        tmp &#x3D; payload.split(&#39;:&#39;)</span><br><span class="line">        sts &#x3D; tmp[0]</span><br><span class="line">        need_to_db64 &#x3D; tmp[1]</span><br><span class="line">        user_pass &#x3D; base64.b64decode(need_to_db64.encode()).decode()</span><br><span class="line"></span><br><span class="line">        mine_str &#x3D; &#39;admin&#39; + &#39;:&#39; + user_pass.split(&#39;:&#39;)[-1]</span><br><span class="line">        mine_b64_str &#x3D; base64.b64encode(mine_str.encode()).decode()</span><br><span class="line">        mine_b64_str &#x3D; sts + mine_b64_str</span><br><span class="line">        logger.info(mine_b64_str)</span><br><span class="line"></span><br><span class="line">        # python返回数据给js script.post</span><br><span class="line">        script.post(&#123;&#39;data&#39;:mine_b64_str&#125;)</span><br><span class="line">        logger.info(&#39;python complete&#39;)</span><br><span class="line"></span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line"># pid &#x3D; device.spawn([&#39;com.kevin.demo04&#39;])</span><br><span class="line"># time.sleep(1)</span><br><span class="line">session &#x3D; device.attach(&#39;com.kevin.demo02&#39;)</span><br><span class="line">with open(&#39;.&#x2F;hulianhutong.js&#39;,&#39;r&#39;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line"></span><br><span class="line">script.on(&quot;message&quot;,on_message)</span><br><span class="line">script.load()</span><br><span class="line">input()</span><br></pre></td></tr></table></figure><h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Java.cast() 子类可以强转成父类, 父类不能转成子类</span><br><span class="line">&#x2F;&#x2F; 可以使用Java.cast()将子类强转成父类, 再调用父类的动态方法</span><br><span class="line"></span><br><span class="line">function castDemo()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var JuiceHandle &#x3D; null; &#x2F;&#x2F; 用来存储内存中找到的Juice对象</span><br><span class="line">        var WaterClass &#x3D; Java.use(&quot;com.r0ysue.a0526printout.Water&quot;);</span><br><span class="line">        </span><br><span class="line">        Java.choose(&quot;com.r0ysue.a0526printout.Juice&quot;,&#123;</span><br><span class="line">onComplete: function()&#123;&#125;,</span><br><span class="line">             onMatch: function(instance)&#123;</span><br><span class="line">                JuiceHandle &#x3D; instance;</span><br><span class="line">                console.log(&quot;instance:&quot;, instance);</span><br><span class="line">                &#x2F;&#x2F; 调用Juice对象的方法</span><br><span class="line">                console.log(JuiceHandle.fillEnergy());</span><br><span class="line">                &#x2F;&#x2F; 子类Juice转父类Water 并调用父类的动态方法</span><br><span class="line">                var WaterInstance &#x3D; Java.cast(JuiceHandle,WaterClass);</span><br><span class="line">                console.log(WaterInstance.still(WaterInstance));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常见算法hook"><a href="#常见算法hook" class="headerlink" title="常见算法hook"></a>常见算法hook</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function () &#123;</span><br><span class="line">    var secretKeySpec &#x3D; Java.use(&#39;javax.crypto.spec.SecretKeySpec&#39;);</span><br><span class="line">    secretKeySpec.$init.overload(&#39;[B&#39;, &#39;java.lang.String&#39;).implementation &#x3D; function (a, b) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.$init(a, b);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;算法名：&quot; + b + &quot;|Dec密钥:&quot; + bytesToString(a));</span><br><span class="line">        send(&quot;算法名：&quot; + b + &quot;|Hex密钥:&quot; + bytesToHex(a));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    var mac &#x3D; Java.use(&#39;javax.crypto.Mac&#39;);</span><br><span class="line">    mac.getInstance.overload(&#39;java.lang.String&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.getInstance(a);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;算法名：&quot; + a);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.update.overload(&#39;[B&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        this.update(a);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;update:&quot; + bytesToString(a))</span><br><span class="line">    &#125;</span><br><span class="line">    mac.update.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (a, b, c) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        this.update(a, b, c)</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;update:&quot; + bytesToString(a) + &quot;|&quot; + b + &quot;|&quot; + c);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.doFinal.overload().implementation &#x3D; function () &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.doFinal();</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;doFinal结果:&quot; + bytesToHex(result));</span><br><span class="line">        send(&quot;doFinal结果:&quot; + bytesToBase64(result));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.doFinal.overload(&#39;[B&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.doFinal(a);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;doFinal参数:&quot; + bytesToString(a));</span><br><span class="line">        send(&quot;doFinal结果:&quot; + bytesToHex(result));</span><br><span class="line">        send(&quot;doFinal结果:&quot; + bytesToBase64(result));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    var md &#x3D; Java.use(&#39;java.security.MessageDigest&#39;);</span><br><span class="line">    md.getInstance.overload(&#39;java.lang.String&#39;, &#39;java.lang.String&#39;).implementation &#x3D; function (a, b) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;算法名：&quot; + a);</span><br><span class="line">        return this.getInstance(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    md.getInstance.overload(&#39;java.lang.String&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;算法名：&quot; + a);</span><br><span class="line">        return this.getInstance(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.update.overload(&#39;[B&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;update:&quot; + bytesToString(a))</span><br><span class="line">        return this.update(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.update.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (a, b, c) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;update:&quot; + bytesToString(a) + &quot;|&quot; + b + &quot;|&quot; + c);</span><br><span class="line">        return this.update(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    md.digest.overload().implementation &#x3D; function () &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        var result &#x3D; this.digest();</span><br><span class="line">        send(&quot;digest结果:&quot; + bytesToHex(result));</span><br><span class="line">        send(&quot;digest结果:&quot; + bytesToBase64(result));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    md.digest.overload(&#39;[B&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;digest参数:&quot; + bytesToString(a));</span><br><span class="line">        var result &#x3D; this.digest(a);</span><br><span class="line">        send(&quot;digest结果:&quot; + bytesToHex(result));</span><br><span class="line">        send(&quot;digest结果:&quot; + bytesToBase64(result));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    var ivParameterSpec &#x3D; Java.use(&#39;javax.crypto.spec.IvParameterSpec&#39;);</span><br><span class="line">    ivParameterSpec.$init.overload(&#39;[B&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.$init(a);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;iv向量:&quot; + bytesToString(a));</span><br><span class="line">        send(&quot;iv向量:&quot; + bytesToHex(a));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    var cipher &#x3D; Java.use(&#39;javax.crypto.Cipher&#39;);</span><br><span class="line">    cipher.getInstance.overload(&#39;java.lang.String&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.getInstance(a);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;模式填充:&quot; + a);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.update.overload(&#39;[B&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.update(a);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;update:&quot; + bytesToString(a));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.update.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (a, b, c) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.update(a, b, c);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;update:&quot; + bytesToString(a) + &quot;|&quot; + b + &quot;|&quot; + c);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.doFinal.overload().implementation &#x3D; function () &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.doFinal();</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;doFinal结果:&quot; + bytesToHex(result));</span><br><span class="line">        send(&quot;doFinal结果:&quot; + bytesToBase64(result));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.doFinal.overload(&#39;[B&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.doFinal(a);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;doFinal参数:&quot; + bytesToString(a));</span><br><span class="line">        send(&quot;doFinal结果:&quot; + bytesToHex(result));</span><br><span class="line">        send(&quot;doFinal结果:&quot; + bytesToBase64(result));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    var x509EncodedKeySpec &#x3D; Java.use(&#39;java.security.spec.X509EncodedKeySpec&#39;);</span><br><span class="line">    x509EncodedKeySpec.$init.overload(&#39;[B&#39;).implementation &#x3D; function (a) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.$init(a);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        send(&quot;RSA密钥:&quot; + bytesToBase64(a));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    var rSAPublicKeySpec &#x3D; Java.use(&#39;java.security.spec.RSAPublicKeySpec&#39;);</span><br><span class="line">    rSAPublicKeySpec.$init.overload(&#39;java.math.BigInteger&#39;, &#39;java.math.BigInteger&#39;).implementation &#x3D; function (a, b) &#123;</span><br><span class="line">        showStacks();</span><br><span class="line">        var result &#x3D; this.$init(a, b);</span><br><span class="line">        send(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#x2F;&#x2F;send(&quot;RSA密钥:&quot; + bytesToBase64(a));</span><br><span class="line">        send(&quot;RSA密钥N:&quot; + a.toString(16));</span><br><span class="line">        send(&quot;RSA密钥E:&quot; + b.toString(16));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="base64实现"><a href="#base64实现" class="headerlink" title="base64实现"></a>base64实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">DEFAULT &#x3D; 0  # 默认模式, 每行不超过76个字符</span><br><span class="line">NO_PADDING &#x3D; 1  # 移除最后的&#x3D;</span><br><span class="line">NO_WRAP &#x3D; 2  # 不换行，一行输出</span><br><span class="line">CRLF &#x3D; 4  # 采用win上的换行符</span><br><span class="line">URL_SAVE &#x3D; 8  # 采用urlsafe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def decode(content: str, flag: int) -&gt; bytes:</span><br><span class="line">    missing_padding &#x3D; len(content) % 4</span><br><span class="line">    if missing_padding !&#x3D; 0:</span><br><span class="line">        content &#x3D; content.ljust(len(content) + (4 - missing_padding), &quot;&#x3D;&quot;)</span><br><span class="line"></span><br><span class="line">    if flag &amp; URL_SAVE:</span><br><span class="line">        result &#x3D; base64.urlsafe_b64decode(content.encode(&quot;utf-8&quot;))</span><br><span class="line">    else:</span><br><span class="line">        result &#x3D; base64.b64decode(content.encode(&quot;utf-8&quot;))</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encode(content: bytes, flag: int) -&gt; str:</span><br><span class="line">    need_wrap &#x3D; True</span><br><span class="line">    need_padding &#x3D; True</span><br><span class="line">    lf &#x3D; &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">    if flag &amp; NO_WRAP:</span><br><span class="line">        need_wrap &#x3D; False</span><br><span class="line">    if flag &amp; NO_PADDING:</span><br><span class="line">        need_padding &#x3D; False</span><br><span class="line">    if flag &amp; CRLF:</span><br><span class="line">        lf &#x3D; &quot;\r\n&quot;</span><br><span class="line"></span><br><span class="line">    if flag &amp; URL_SAVE:</span><br><span class="line">        result &#x3D; base64.urlsafe_b64encode(content).decode(&quot;utf-8&quot;)</span><br><span class="line">    else:</span><br><span class="line">        result &#x3D; base64.b64encode(content).decode(&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">    if not need_padding:</span><br><span class="line">        result &#x3D; result.rstrip(&quot;&#x3D;&quot;)</span><br><span class="line"></span><br><span class="line">    if need_wrap:</span><br><span class="line">        n &#x3D; 76</span><br><span class="line">        output &#x3D; lf.join([result[i:i + n] for i in range(0, len(result), n)])</span><br><span class="line">    else:</span><br><span class="line">        output &#x3D; result</span><br><span class="line"></span><br><span class="line">    return output</span><br></pre></td></tr></table></figure><h1 id="常用转换模板"><a href="#常用转换模板" class="headerlink" title="常用转换模板"></a>常用转换模板</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;工具相关函数</span><br><span class="line">var base64EncodeChars &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&#39;,</span><br><span class="line">    base64DecodeChars &#x3D; new Array((-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), 62, (-1), (-1), (-1), 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, (-1), (-1), (-1), (-1), (-1), (-1), (-1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, (-1), (-1), (-1), (-1), (-1), (-1), 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, (-1), (-1), (-1), (-1), (-1));</span><br><span class="line"></span><br><span class="line">function stringToBase64(e) &#123;</span><br><span class="line">    var r, a, c, h, o, t;</span><br><span class="line">    for (c &#x3D; e.length, a &#x3D; 0, r &#x3D; &#39;&#39;; a &lt; c;) &#123;</span><br><span class="line">        if (h &#x3D; 255 &amp; e.charCodeAt(a++), a &#x3D;&#x3D; c) &#123;</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt(h &gt;&gt; 2),</span><br><span class="line">                r +&#x3D; base64EncodeChars.charAt((3 &amp; h) &lt;&lt; 4),</span><br><span class="line">                r +&#x3D; &#39;&#x3D;&#x3D;&#39;;</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">        if (o &#x3D; e.charCodeAt(a++), a &#x3D;&#x3D; c) &#123;</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt(h &gt;&gt; 2),</span><br><span class="line">                r +&#x3D; base64EncodeChars.charAt((3 &amp; h) &lt;&lt; 4 | (240 &amp; o) &gt;&gt; 4),</span><br><span class="line">                r +&#x3D; base64EncodeChars.charAt((15 &amp; o) &lt;&lt; 2),</span><br><span class="line">                r +&#x3D; &#39;&#x3D;&#39;;</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">        t &#x3D; e.charCodeAt(a++),</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt(h &gt;&gt; 2),</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt((3 &amp; h) &lt;&lt; 4 | (240 &amp; o) &gt;&gt; 4),</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt((15 &amp; o) &lt;&lt; 2 | (192 &amp; t) &gt;&gt; 6),</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt(63 &amp; t)</span><br><span class="line">    &#125;</span><br><span class="line">    return r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function base64ToString(e) &#123;</span><br><span class="line">    var r, a, c, h, o, t, d;</span><br><span class="line">    for (t &#x3D; e.length, o &#x3D; 0, d &#x3D; &#39;&#39;; o &lt; t;) &#123;</span><br><span class="line">        do</span><br><span class="line">            r &#x3D; base64DecodeChars[255 &amp; e.charCodeAt(o++)];</span><br><span class="line">        while (o &lt; t &amp;&amp; r &#x3D;&#x3D; -1);</span><br><span class="line">        if (r &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">        do</span><br><span class="line">            a &#x3D; base64DecodeChars[255 &amp; e.charCodeAt(o++)];</span><br><span class="line">        while (o &lt; t &amp;&amp; a &#x3D;&#x3D; -1);</span><br><span class="line">        if (a &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">        d +&#x3D; String.fromCharCode(r &lt;&lt; 2 | (48 &amp; a) &gt;&gt; 4);</span><br><span class="line">        do &#123;</span><br><span class="line">            if (c &#x3D; 255 &amp; e.charCodeAt(o++), 61 &#x3D;&#x3D; c)</span><br><span class="line">                return d;</span><br><span class="line">            c &#x3D; base64DecodeChars[c]</span><br><span class="line">        &#125; while (o &lt; t &amp;&amp; c &#x3D;&#x3D; -1);</span><br><span class="line">        if (c &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">        d +&#x3D; String.fromCharCode((15 &amp; a) &lt;&lt; 4 | (60 &amp; c) &gt;&gt; 2);</span><br><span class="line">        do &#123;</span><br><span class="line">            if (h &#x3D; 255 &amp; e.charCodeAt(o++), 61 &#x3D;&#x3D; h)</span><br><span class="line">                return d;</span><br><span class="line">            h &#x3D; base64DecodeChars[h]</span><br><span class="line">        &#125; while (o &lt; t &amp;&amp; h &#x3D;&#x3D; -1);</span><br><span class="line">        if (h &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">        d +&#x3D; String.fromCharCode((3 &amp; c) &lt;&lt; 6 | h)</span><br><span class="line">    &#125;</span><br><span class="line">    return d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hexToBase64(str) &#123;</span><br><span class="line">    return base64Encode(String.fromCharCode.apply(null, str.replace(&#x2F;\r|\n&#x2F;g, &quot;&quot;).replace(&#x2F;([\da-fA-F]&#123;2&#125;) ?&#x2F;g, &quot;0x$1 &quot;).replace(&#x2F; +$&#x2F;, &quot;&quot;).split(&quot; &quot;)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function base64ToHex(str) &#123;</span><br><span class="line">    for (var i &#x3D; 0, bin &#x3D; base64Decode(str.replace(&#x2F;[ \r\n]+$&#x2F;, &quot;&quot;)), hex &#x3D; []; i &lt; bin.length; ++i) &#123;</span><br><span class="line">        var tmp &#x3D; bin.charCodeAt(i).toString(16);</span><br><span class="line">        if (tmp.length &#x3D;&#x3D;&#x3D; 1)</span><br><span class="line">            tmp &#x3D; &quot;0&quot; + tmp;</span><br><span class="line">        hex[hex.length] &#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    return hex.join(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hexToBytes(str) &#123;</span><br><span class="line">    var pos &#x3D; 0;</span><br><span class="line">    var len &#x3D; str.length;</span><br><span class="line">    if (len % 2 !&#x3D; 0) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    len &#x2F;&#x3D; 2;</span><br><span class="line">    var hexA &#x3D; new Array();</span><br><span class="line">    for (var i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">        var s &#x3D; str.substr(pos, 2);</span><br><span class="line">        var v &#x3D; parseInt(s, 16);</span><br><span class="line">        hexA.push(v);</span><br><span class="line">        pos +&#x3D; 2;</span><br><span class="line">    &#125;</span><br><span class="line">    return hexA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bytesToHex(arr) &#123;</span><br><span class="line">    var str &#x3D; &#39;&#39;;</span><br><span class="line">    var k, j;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        k &#x3D; arr[i];</span><br><span class="line">        j &#x3D; k;</span><br><span class="line">        if (k &lt; 0) &#123;</span><br><span class="line">            j &#x3D; k + 256;</span><br><span class="line">        &#125;</span><br><span class="line">        if (j &lt; 16) &#123;</span><br><span class="line">            str +&#x3D; &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        str +&#x3D; j.toString(16);</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stringToHex(str) &#123;</span><br><span class="line">    var val &#x3D; &quot;&quot;;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class="line">        if (val &#x3D;&#x3D; &quot;&quot;)</span><br><span class="line">            val &#x3D; str.charCodeAt(i).toString(16);</span><br><span class="line">        else</span><br><span class="line">            val +&#x3D; str.charCodeAt(i).toString(16);</span><br><span class="line">    &#125;</span><br><span class="line">    return val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stringToBytes(str) &#123;</span><br><span class="line">    var ch, st, re &#x3D; [];</span><br><span class="line">    for (var i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class="line">        ch &#x3D; str.charCodeAt(i);</span><br><span class="line">        st &#x3D; [];</span><br><span class="line">        do &#123;</span><br><span class="line">            st.push(ch &amp; 0xFF);</span><br><span class="line">            ch &#x3D; ch &gt;&gt; 8;</span><br><span class="line">        &#125;</span><br><span class="line">        while (ch);</span><br><span class="line">        re &#x3D; re.concat(st.reverse());</span><br><span class="line">    &#125;</span><br><span class="line">    return re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将byte[]转成String的方法</span><br><span class="line">function bytesToString(arr) &#123;</span><br><span class="line">    var str &#x3D; &#39;&#39;;</span><br><span class="line">    arr &#x3D; new Uint8Array(arr);</span><br><span class="line">    for (var i in arr) &#123;</span><br><span class="line">        str +&#x3D; String.fromCharCode(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bytesToBase64(e) &#123;</span><br><span class="line">    var r, a, c, h, o, t;</span><br><span class="line">    for (c &#x3D; e.length, a &#x3D; 0, r &#x3D; &#39;&#39;; a &lt; c;) &#123;</span><br><span class="line">        if (h &#x3D; 255 &amp; e[a++], a &#x3D;&#x3D; c) &#123;</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt(h &gt;&gt; 2),</span><br><span class="line">                r +&#x3D; base64EncodeChars.charAt((3 &amp; h) &lt;&lt; 4),</span><br><span class="line">                r +&#x3D; &#39;&#x3D;&#x3D;&#39;;</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">        if (o &#x3D; e[a++], a &#x3D;&#x3D; c) &#123;</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt(h &gt;&gt; 2),</span><br><span class="line">                r +&#x3D; base64EncodeChars.charAt((3 &amp; h) &lt;&lt; 4 | (240 &amp; o) &gt;&gt; 4),</span><br><span class="line">                r +&#x3D; base64EncodeChars.charAt((15 &amp; o) &lt;&lt; 2),</span><br><span class="line">                r +&#x3D; &#39;&#x3D;&#39;;</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">        t &#x3D; e[a++],</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt(h &gt;&gt; 2),</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt((3 &amp; h) &lt;&lt; 4 | (240 &amp; o) &gt;&gt; 4),</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt((15 &amp; o) &lt;&lt; 2 | (192 &amp; t) &gt;&gt; 6),</span><br><span class="line">            r +&#x3D; base64EncodeChars.charAt(63 &amp; t)</span><br><span class="line">    &#125;</span><br><span class="line">    return r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function base64ToBytes(e) &#123;</span><br><span class="line">    var r, a, c, h, o, t, d;</span><br><span class="line">    for (t &#x3D; e.length, o &#x3D; 0, d &#x3D; []; o &lt; t;) &#123;</span><br><span class="line">        do</span><br><span class="line">            r &#x3D; base64DecodeChars[255 &amp; e.charCodeAt(o++)];</span><br><span class="line">        while (o &lt; t &amp;&amp; r &#x3D;&#x3D; -1);</span><br><span class="line">        if (r &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">        do</span><br><span class="line">            a &#x3D; base64DecodeChars[255 &amp; e.charCodeAt(o++)];</span><br><span class="line">        while (o &lt; t &amp;&amp; a &#x3D;&#x3D; -1);</span><br><span class="line">        if (a &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">        d.push(r &lt;&lt; 2 | (48 &amp; a) &gt;&gt; 4);</span><br><span class="line">        do &#123;</span><br><span class="line">            if (c &#x3D; 255 &amp; e.charCodeAt(o++), 61 &#x3D;&#x3D; c)</span><br><span class="line">                return d;</span><br><span class="line">            c &#x3D; base64DecodeChars[c]</span><br><span class="line">        &#125; while (o &lt; t &amp;&amp; c &#x3D;&#x3D; -1);</span><br><span class="line">        if (c &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">        d.push((15 &amp; a) &lt;&lt; 4 | (60 &amp; c) &gt;&gt; 2);</span><br><span class="line">        do &#123;</span><br><span class="line">            if (h &#x3D; 255 &amp; e.charCodeAt(o++), 61 &#x3D;&#x3D; h)</span><br><span class="line">                return d;</span><br><span class="line">            h &#x3D; base64DecodeChars[h]</span><br><span class="line">        &#125; while (o &lt; t &amp;&amp; h &#x3D;&#x3D; -1);</span><br><span class="line">        if (h &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">        d.push((3 &amp; c) &lt;&lt; 6 | h)</span><br><span class="line">    &#125;</span><br><span class="line">    return d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打印log</span><br><span class="line">function showStacks() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        send(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new()));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 字节数组转hex字符串</span><br><span class="line">function bytesToHex(arr) &#123;</span><br><span class="line">    var str &#x3D; &quot;&quot;;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        var tmp &#x3D; arr[i];</span><br><span class="line">        if (tmp &lt; 0) &#123;</span><br><span class="line">            tmp &#x3D; (255 + tmp + 1).toString(16);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            tmp &#x3D; tmp.toString(16);</span><br><span class="line">        &#125;</span><br><span class="line">        if (tmp.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">            tmp &#x3D; &quot;0&quot; + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        str +&#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bytesToBase64(arr) &#123;</span><br><span class="line">    var str &#x3D; &quot;&quot;;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        var tmp &#x3D; arr[i];</span><br><span class="line">        if (tmp &lt; 0) &#123;</span><br><span class="line">            tmp &#x3D; (255 + tmp + 1).toString(16);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            tmp &#x3D; tmp.toString(16);</span><br><span class="line">        &#125;</span><br><span class="line">        if (tmp.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">            tmp &#x3D; &quot;0&quot; + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        str +&#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bytesToString(arr) &#123;</span><br><span class="line">    var str &#x3D; &quot;&quot;;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        var tmp &#x3D; arr[i];</span><br><span class="line">        if (tmp &lt; 0) &#123;</span><br><span class="line">            tmp &#x3D; (255 + tmp + 1).toString(16);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            tmp &#x3D; tmp.toString(16);</span><br><span class="line">        &#125;</span><br><span class="line">        if (tmp.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">            tmp &#x3D; &quot;0&quot; + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        str +&#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line">function byteToHexString(uint8arr) &#123;</span><br><span class="line">    if (!uint8arr) &#123;</span><br><span class="line">        return &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    var hexStr &#x3D; &#39;&#39;;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; uint8arr.length; i++) &#123;</span><br><span class="line">        var hex &#x3D; (uint8arr[i] &amp; 0xff).toString(16);</span><br><span class="line">        hex &#x3D; (hex.length &#x3D;&#x3D;&#x3D; 1) ? &#39;0&#39; + hex : hex;</span><br><span class="line">        hexStr +&#x3D; hex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return hexStr.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function stringToUint8Array(str)&#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line">  for (var i &#x3D; 0, j &#x3D; str.length; i &lt; j; ++i) &#123;</span><br><span class="line">    arr.push(str.charCodeAt(i));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var tmpUint8Array &#x3D; new Uint8Array(arr);</span><br><span class="line">  return tmpUint8Array</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function str2arraybffer(str) &#123;</span><br><span class="line">    var buf &#x3D; new ArrayBuffer(str.length * 2); &#x2F;&#x2F; 每个字符占用2个字节</span><br><span class="line">    var bufView &#x3D; new Uint16Array(buf);</span><br><span class="line">    for (var i &#x3D; 0, strLen &#x3D; str.length; i &lt; strLen; i++) &#123;</span><br><span class="line">        bufView[i] &#x3D; str.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    return buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function printBytes(b)&#123;</span><br><span class="line"></span><br><span class="line">    var hexstr &#x3D; &quot;&quot;;</span><br><span class="line">    for (var i&#x3D;0; i&lt; b.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        var uByte &#x3D; (b[i]&gt;&gt;&gt;0)&amp;0xff;</span><br><span class="line">        var n &#x3D; uByte.toString(16);</span><br><span class="line">        hexstr +&#x3D; &quot;0x&quot; + (&quot;00&quot; + n).slice(-2)+&quot;, &quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">return hexstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字节数组转十六进制字符串，对负值填坑</span><br><span class="line">&#x2F;&#x2F; 二进制数据（包括内存地址）在计算机中一般以16进制的方式表示</span><br><span class="line">function Bytes2HexString(arrBytes) &#123;</span><br><span class="line">    var str &#x3D; &quot;&quot;;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; arrBytes.length; i++) &#123;</span><br><span class="line">        var tmp;</span><br><span class="line">        var num&#x3D;arrBytes[i];</span><br><span class="line">        if (num &lt; 0) &#123;</span><br><span class="line">            &#x2F;&#x2F;此处填坑，当byte因为符合位导致数值为负时候，需要对数据进行处理</span><br><span class="line">            tmp &#x3D;(255+num+1).toString(16);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            tmp &#x3D; num.toString(16);</span><br><span class="line">        &#125;</span><br><span class="line">        if (tmp.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">            tmp &#x3D; &quot;0&quot; + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        str +&#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 会转成有符号的数字  JSON.stringify(bytes)</span><br><span class="line">function HexString2Bytes(str) &#123;</span><br><span class="line">    var pos &#x3D; 0;</span><br><span class="line">    var len &#x3D; str.length;</span><br><span class="line">    if (len % 2 !&#x3D; 0) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    len &#x2F;&#x3D; 2;</span><br><span class="line">    var arrBytes &#x3D; new Array();</span><br><span class="line">    for (var i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">        var s &#x3D; str.substr(pos, 2);</span><br><span class="line">        var v &#x3D; parseInt(s, 16);</span><br><span class="line">&#x2F;&#x2F; 转成有符号的 10进制</span><br><span class="line">if (v &gt; 127) &#123; v &#x3D; v - 256 &#125;</span><br><span class="line">&#x2F;&#x2F; end</span><br><span class="line">        arrBytes.push(v);</span><br><span class="line">        pos +&#x3D; 2;</span><br><span class="line">    &#125;</span><br><span class="line">    return arrBytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function jstring2Str(jstring) &#123;</span><br><span class="line">   var ret;</span><br><span class="line">   Java.perform(function() &#123;</span><br><span class="line">       var String &#x3D; Java.use(&quot;java.lang.String&quot;);</span><br><span class="line">       ret &#x3D; Java.cast(jstring, String);</span><br><span class="line">   &#125;);</span><br><span class="line">   return ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function jbyteArray2Array(jbyteArray) &#123;</span><br><span class="line">   var ret;</span><br><span class="line">   Java.perform(function() &#123;</span><br><span class="line">       var b &#x3D; Java.use(&#39;[B&#39;);</span><br><span class="line">       var buffer &#x3D; Java.cast(jbyteArray, b);</span><br><span class="line">       ret &#x3D; Java.array(&#39;byte&#39;, buffer);</span><br><span class="line">   &#125;);</span><br><span class="line">   return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getParamType(obj) &#123;</span><br><span class="line">    return obj &#x3D;&#x3D; null ? String(obj) : Object.prototype.toString.call(obj).replace(&#x2F;\[object\s+(\w+)\]&#x2F;i, &quot;$1&quot;) || &quot;object&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="打印class"><a href="#打印class" class="headerlink" title="打印class"></a>打印class</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">function printClass(c)&#123;</span><br><span class="line">    var str &#x3D; &quot;-------------------------------\n&quot;;</span><br><span class="line">    str +&#x3D; &quot;|&quot; + JSON.stringify(c) + &quot;\n&quot;;</span><br><span class="line">    var fields &#x3D; c.getClass().getFields();</span><br><span class="line">    for(var index in fields)&#123;</span><br><span class="line">        var field &#x3D; fields[index];</span><br><span class="line">        var fieldName &#x3D; &quot;&quot;;</span><br><span class="line">        var value &#x3D; &quot;&quot;;</span><br><span class="line">        try&#123;</span><br><span class="line">            fieldName &#x3D; field.getName();</span><br><span class="line">            value &#x3D; field.get(c);</span><br><span class="line">        &#125;catch(e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        if(fieldName &#x3D;&#x3D; &quot;&quot;)&#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        str +&#x3D; &quot;|&quot; + fieldName + &quot;:&quot; + printValue(value) + &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    str +&#x3D; &quot;------------------------------\n\n\n&quot;;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function printValue(value)&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        var newValue &#x3D; Java.cast(value, Java.use(&quot;java.lang.Object&quot;))</span><br><span class="line">        switch(newValue.getClass().getName())&#123;</span><br><span class="line">            case &quot;[B&quot;:</span><br><span class="line">                return printBytes(value)</span><br><span class="line">        &#125;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function printBytes(result)&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        var ByteArrayOutputStreamClass &#x3D; Java.use(&quot;java.io.ByteArrayOutputStream&quot;);</span><br><span class="line">        var out &#x3D; ByteArrayOutputStreamClass.$new()</span><br><span class="line">        var ObjectOutputStreamClass &#x3D; Java.use(&quot;java.io.ObjectOutputStream&quot;);</span><br><span class="line">        var sOut &#x3D; ObjectOutputStreamClass.$new(out);</span><br><span class="line">        sOut.writeObject(result);</span><br><span class="line">        sOut.flush();</span><br><span class="line">        var bytes &#x3D; out.toByteArray();</span><br><span class="line">        var argsArray &#x3D; [];</span><br><span class="line">        for(var i &#x3D; 0; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            argsArray.push(bytes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;[&quot;+argsArray.join(&quot;,&quot;)+&quot;]&quot;;</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        console.log(e);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向之最右sign分析</title>
      <link href="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/"/>
      <url>/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>最右5.7.3.apk 启动charles，开始socks抓包</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111144633352.png" alt="image-20211111144633352"></p><p>postern配置代理</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111144533053.png" alt="image-20211111144533053"></p><p>postern配置规则</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111144552678.png" alt="image-20211111144552678"></p><p>开启vpn开始抓包</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111144749349.png" alt="image-20211111144749349"></p><h1 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h1><p>jadx反编译搜索<code>sign=</code></p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111144857121.png" alt="image-20211111144857121"></p><p>主动调用a方法，构造字符串和字节数组参数，打印返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function callSign()&#123;</span><br><span class="line">    Java.perform(function () &#123; </span><br><span class="line">        var plainTextBytes &#x3D; Java.use(&quot;java.lang.String&quot;).$new(&quot;onejane&quot;).getBytes(&quot;UTF-8&quot;);</span><br><span class="line">        var result &#x3D; Java.use(&quot;com.izuiyou.network.NetCrypto&quot;).a(&quot;12345&quot;, plainTextBytes);</span><br><span class="line">        console.log(result);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆栈跟踪"><a href="#堆栈跟踪" class="headerlink" title="堆栈跟踪"></a>堆栈跟踪</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objection -g cn.xiaochuankeji.tieba explore -P ~&#x2F;.objection&#x2F;plugins  </span><br><span class="line">android hooking watch class_method com.izuiyou.network.NetCrypto.a --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111210717876.png" alt="image-20211111210717876"></p><p>除了使用objection，也可以通过frida脚本打印堆栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function()&#123;</span><br><span class="line"></span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var threadef &#x3D; Java.use(&#39;java.lang.Thread&#39;);</span><br><span class="line">        var threadinstance &#x3D; threadef.$new();</span><br><span class="line">        function Where(stack)&#123;</span><br><span class="line">            var at &#x3D; &quot;&quot;</span><br><span class="line">            for(var i &#x3D; 0; i &lt; stack.length; ++i)&#123;</span><br><span class="line">                at +&#x3D; stack[i].toString() + &quot;\n&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            return at</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        var ZYNetCrypto &#x3D; Java.use(&quot;com.izuiyou.network.NetCrypto&quot;);</span><br><span class="line">        ZYNetCrypto.sign.implementation &#x3D; function(arg1, arg2)&#123;</span><br><span class="line">console.log(&quot;\nNetCrypto.sign\n&quot;);</span><br><span class="line">&#x2F;&#x2F; 打印入参信息</span><br><span class="line">&#x2F;&#x2F; console.log(&quot;str&#x3D;&quot; + arg1 + &quot;\nbuf&#x3D;&quot; + printBytes(arg2) + &quot;\nbuf2&#x3D;&quot; + Bytes2HexString(arg2) + &quot;\njson&#x3D;&quot; + JSON.stringify(arg2));</span><br><span class="line"></span><br><span class="line">            var result &#x3D; this.sign(arg1, arg2);</span><br><span class="line">console.log(&quot;\nOut Rc&#x3D;&quot; + result);</span><br><span class="line"></span><br><span class="line">            var stack &#x3D; threadinstance.currentThread().getStackTrace();</span><br><span class="line">            console.log(&quot;Full call stack:&quot; + Where(stack));</span><br><span class="line"></span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111211530402.png" alt="image-20211111211530402"></p><p>通过objection和frida堆栈跟踪，jeb打开搜索<code>k46</code></p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111211843839.png" alt="image-20211111211843839"></p><p><code>byte[] v1_2 = NetCrypto.encodeAES(v3_4.toString().getBytes(Charset.forName(&quot;UTF-8&quot;)));</code></p><p>接下来hook NetCrypto.encodeAES并打印出入参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function () &#123;</span><br><span class="line">    Java.perform(function () &#123; </span><br><span class="line">        var ZYNetCrypto &#x3D; Java.use(&quot;com.izuiyou.network.NetCrypto&quot;);</span><br><span class="line">        ZYNetCrypto.encodeAES.implementation &#x3D; function (arg1) &#123;</span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;\nNetCrypto.encodeAES &quot; + arg1.length + &quot;\n&quot;);</span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;encodeAES &gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + JSON.stringify(arg1));</span><br><span class="line">            var strIn &#x3D; Java.use(&#39;java.lang.String&#39;);</span><br><span class="line">            var outStr &#x3D; strIn.$new(arg1);</span><br><span class="line">            &#x2F;&#x2F; console.log(outStr);</span><br><span class="line">            var result &#x3D; this.encodeAES(arg1);</span><br><span class="line">            console.log(outStr + &quot; &#x3D; &quot; + printBytes(result));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111212255775.png" alt="image-20211111212255775"></p><p>图中圈出的字符串即为<code>V1_2</code>，拿到了协议的明文，主要逻辑就是通过aes加密后的字符串结合请求地址利用so中的sign函数完成签名校验。</p><h2 id="rpc调用"><a href="#rpc调用" class="headerlink" title="rpc调用"></a>rpc调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">byte[] encodeAES &#x3D; NetCrypto.encodeAES(jSONObject.toString().getBytes(Charset.forName(&quot;UTF-8&quot;)));</span><br><span class="line">String a2 &#x3D; NetCrypto.a(build.toString(), encodeAES);</span><br><span class="line">newBuilder.url(a2).addHeader(&quot;X-Xc-Proto-Req&quot;, NetCrypto.getProtocolKey()).post(RequestBody.create(b(), encodeAES));</span><br></pre></td></tr></table></figure><p>以上需要关注的函数有<code>NetCrypto.encodeAES</code>，<code>NetCrypto.a</code>，<code>NetCrypto.getProtocolKey</code>,在<code>NetCrypto.a</code>还有<code>NetCrypto.sign</code>，返回结果是加密的需要<code>NetCrypto.decodeAES</code>解密</p><p>zuiyouSign.js  对<code>NetCrypto.sign</code>进行hook打印出入参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function hookSign() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var ZYNetCrypto &#x3D; Java.use(&quot;com.izuiyou.network.NetCrypto&quot;);</span><br><span class="line"></span><br><span class="line">        ZYNetCrypto.sign.implementation &#x3D; function (arg1, arg2) &#123;</span><br><span class="line">            console.log(&quot;\nNetCrypto.sign\n&quot;);</span><br><span class="line">            console.log(&quot;str&#x3D;&quot; + arg1 + &quot;\nbuf&#x3D;&quot; + printBytes(arg2) + &quot;\nbuf2&#x3D;&quot; + byteToHexString(arg2) + &quot;\njson&#x3D;&quot; + JSON.stringify(arg2));</span><br><span class="line"></span><br><span class="line">            var result &#x3D; this.sign(arg1, arg2);</span><br><span class="line">            console.log(&quot;\nOut Rc&#x3D;&quot; + result);</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(hookSign)</span><br></pre></td></tr></table></figure><p>frida -UF cn.xiaochuankeji.tieba -l zuiyouSign.js  根据返回结果可以得知同一个请求每次返回的sign是一样的，第一个参数为请求地址。</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111192138509.png" alt="image-20211111192138509"></p><p>callSignFunZy.js  主动调用入参中的的byte数组返回sign</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function callSignFunZy(str, buf) &#123;</span><br><span class="line">    var result &#x3D; &#39;null&#39;;</span><br><span class="line"></span><br><span class="line">    console.log(str);</span><br><span class="line">    var arr &#x3D; HexString2Bytes(buf);</span><br><span class="line"></span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var ZYNetCrypto &#x3D; Java.use(&quot;com.izuiyou.network.NetCrypto&quot;);</span><br><span class="line">        var res &#x3D; ZYNetCrypto.sign(str, arr);</span><br><span class="line">        result &#x3D; res;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line">    callzyfun: callSignFunZy,&#x2F;&#x2F; 导出名不可以有大写字母和下划线</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>hookSign.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, jsonify</span><br><span class="line">import frida</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">global gScript</span><br><span class="line"></span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line">pid&#x3D;device.get_frontmost_application().pid  </span><br><span class="line">session &#x3D; device.attach(pid)</span><br><span class="line">with open(&quot;agent&#x2F;zuiyouSign.js&quot;) as f:</span><br><span class="line">    gScript &#x3D; session.create_script(f.read())</span><br><span class="line">gScript.load()</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;sign&#39;)</span><br><span class="line">def zy_test():</span><br><span class="line"></span><br><span class="line">    str &#x3D; &#39;https:&#x2F;&#x2F;api.izuiyou.com&#x2F;my&#x2F;profile&#39;</span><br><span class="line">    buf &#x3D; bytearray([0xf6, 0x01, 0xc4, 0xd4, 0xe3, 0xf3, 0x03, 0x13, 0x13, 0xa2, 0xd1, ...])</span><br><span class="line">    res &#x3D; gScript.exports.callzyfun(str, buf.hex())</span><br><span class="line">    return jsonify(res)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;1234, debug&#x3D;True)</span><br></pre></td></tr></table></figure><p>python hookSign.py 发起请求<code>127.0.0.1:1234/sign</code>获取sign</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211111194557932.png" alt="image-20211111194557932"></p><h3 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h3><blockquote><p>Frida结合 Magisk Hide报错：try disabling Magisk Hide in case it is active</p><p>Magisk Manager &gt; Settings &gt;Magisk &gt; Magisk Hide，用来隐藏ROOT，避免部分app检测ROOT</p></blockquote><p>zuiyouSign.js  实现加密解密签名等函数的定义和导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 加密 encodeAES函数的参数和返回值都是byte数组，转成hex字符串</span><br><span class="line">&#x2F;&#x2F; byte[] encodeAES &#x3D; NetCrypto.encodeAES(jSONObject.toString().getBytes(Charset.forName(&quot;UTF-8&quot;)));</span><br><span class="line">function callEncodeAes(strData)&#123;</span><br><span class="line">var result &#x3D; &#39;null&#39;;</span><br><span class="line"></span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line">var ZYNetCrypto &#x3D; Java.use(&quot;com.izuiyou.network.NetCrypto&quot;);</span><br><span class="line">&#x2F;&#x2F; 入参转成字节数组 jSONObject.toString().getBytes(Charset.forName(&quot;UTF-8&quot;))</span><br><span class="line">        var strIn &#x3D; Java.use(&#39;java.lang.String&#39;);</span><br><span class="line">        var byteIn &#x3D; strIn.$new(strData).getBytes();</span><br><span class="line">&#x2F;&#x2F; 开始加密</span><br><span class="line">var res &#x3D; ZYNetCrypto.encodeAES(byteIn);</span><br><span class="line">        result &#x3D;  Bytes2HexString(res);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 解密</span><br><span class="line">&#x2F;&#x2F; NetCrypto.decodeAES(v7, true)</span><br><span class="line">function callDecodeAes(dataBuf)&#123;</span><br><span class="line">var rc &#x3D; &#39;null&#39;;</span><br><span class="line"></span><br><span class="line">var arr &#x3D; HexString2Bytes(dataBuf);</span><br><span class="line">    Java.perform(function() &#123;</span><br><span class="line">        var ZYNetCrypto &#x3D; Java.use(&quot;com.izuiyou.network.NetCrypto&quot;);</span><br><span class="line">var res &#x3D; ZYNetCrypto.decodeAES(arr,true);</span><br><span class="line">rc &#x3D; Bytes2HexString(res);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">return rc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 签名</span><br><span class="line">function callSignFun(str,buf)&#123;</span><br><span class="line">var result &#x3D; &#39;null&#39;;</span><br><span class="line"></span><br><span class="line">var arr &#x3D; HexString2Bytes(buf);</span><br><span class="line"></span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var ZYNetCrypto &#x3D; Java.use(&quot;com.izuiyou.network.NetCrypto&quot;);</span><br><span class="line">        var res &#x3D; ZYNetCrypto.sign(str,arr) ; </span><br><span class="line">        result &#x3D; res;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当前使用的key</span><br><span class="line">function callGetProtocolKey()&#123;</span><br><span class="line">var result &#x3D; &#39;null&#39;;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var ZYNetCrypto &#x3D; Java.use(&quot;com.izuiyou.network.NetCrypto&quot;);</span><br><span class="line">        var res &#x3D; ZYNetCrypto.getProtocolKey() ; </span><br><span class="line">        result &#x3D; res;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置当前使用的key</span><br><span class="line">function callSetProtocolKey(strKey)&#123;</span><br><span class="line">var result &#x3D; &#39;null&#39;;</span><br><span class="line"></span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var ZYNetCrypto &#x3D; Java.use(&quot;com.izuiyou.network.NetCrypto&quot;);</span><br><span class="line">        ZYNetCrypto.setProtocolKey(strKey) ; </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line">callgetkey : callGetProtocolKey,</span><br><span class="line">callsetkey : callSetProtocolKey,</span><br><span class="line">calldecaes : callDecodeAes,</span><br><span class="line">callencaes : callEncodeAes,</span><br><span class="line">    callsignfun : callSignFun</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>python hookSign.py hook  通过frida rpc方式调用js中的hook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from __future__ import print_function</span><br><span class="line"># Python 2.x &amp; 3.x compatible</span><br><span class="line"># from distutils.log import warn as print</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import frida</span><br><span class="line">import codecs</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">import re</span><br><span class="line">import base64</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">from flask import Flask, jsonify, request</span><br><span class="line"></span><br><span class="line">if sys.version_info &lt; (3, 0):</span><br><span class="line">    reload(sys)</span><br><span class="line">    sys.setdefaultencoding(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">global gScript</span><br><span class="line"></span><br><span class="line">HOOK_JS &#x3D; &#39;.&#x2F;agent&#x2F;zuiyouSign.js&#39;</span><br><span class="line"></span><br><span class="line">ZY_NAME &#x3D; u&#39;最右&#39;</span><br><span class="line">ZY_FRONTBOARD &#x3D; &#39;cn.xiaochuankeji.tieba&#39;</span><br><span class="line">    </span><br><span class="line">def bytesToHexString(bs):</span><br><span class="line">    return &#39;&#39;.join([&#39;%02X &#39; % b for b in bs])</span><br><span class="line"></span><br><span class="line">#系统标准输出，支持grep</span><br><span class="line">def outWrite(text):</span><br><span class="line">    sys.stdout.write((text.encode(&#39;utf8&#39;) + b&#39;\n&#39; ).decode());</span><br><span class="line"></span><br><span class="line">#带颜色打印输出</span><br><span class="line">def colorPrint(color, s):</span><br><span class="line">    return &quot;%s[31;%dm%s%s[0m&quot; % (chr(27), color, s , chr(27))</span><br><span class="line"></span><br><span class="line">#获取第一个USB连接的设备</span><br><span class="line">def get_usb_iphone():</span><br><span class="line">    Type &#x3D; &#39;usb&#39;</span><br><span class="line">    if int(frida.__version__.split(&#39;.&#39;)[0]) &lt; 12:</span><br><span class="line">        Type &#x3D; &#39;tether&#39;</span><br><span class="line">        </span><br><span class="line">    device_manager &#x3D; frida.get_device_manager()</span><br><span class="line">    changed &#x3D; threading.Event()</span><br><span class="line"></span><br><span class="line">    def on_changed():</span><br><span class="line">        changed.set()</span><br><span class="line"></span><br><span class="line">    device_manager.on(&#39;changed&#39;, on_changed)</span><br><span class="line"></span><br><span class="line">    device &#x3D; None</span><br><span class="line">    while device is None:</span><br><span class="line">        devices &#x3D; [dev for dev in device_manager.enumerate_devices() if dev.type &#x3D;&#x3D; Type]</span><br><span class="line">        if len(devices) &#x3D;&#x3D; 0:</span><br><span class="line">            print (&#39;Waiting for USB device...&#39;)</span><br><span class="line">            changed.wait()</span><br><span class="line">        else:</span><br><span class="line">            device &#x3D; devices[0]</span><br><span class="line"></span><br><span class="line">    device_manager.off(&#39;changed&#39;, on_changed)</span><br><span class="line"></span><br><span class="line">    return device</span><br><span class="line"></span><br><span class="line">#枚举运行进程信息</span><br><span class="line">def listRunningProcess():</span><br><span class="line">    device &#x3D; get_usb_iphone();</span><br><span class="line">    processes &#x3D; device.enumerate_processes();</span><br><span class="line">    processes.sort(key &#x3D; lambda item : item.pid)</span><br><span class="line">    outWrite(&#39;%-10s\t%s&#39; % (&#39;pid&#39;, &#39;name&#39;))</span><br><span class="line">    for process in processes:</span><br><span class="line">        outWrite(&#39;%-10s\t%s&#39; % (str(process.pid),process.name))</span><br><span class="line"></span><br><span class="line">#枚举某个进程的所有模块信息</span><br><span class="line">def listModulesoOfProcess(session):</span><br><span class="line">    moduels &#x3D; session.enumerate_modules()</span><br><span class="line">    moduels.sort(key &#x3D; lambda item : item.base_address)</span><br><span class="line">    for module in moduels:</span><br><span class="line">        outWrite(&#39;%-40s\t%-10s\t%-10s\t%s&#39; % (module.name, hex(module.base_address), hex(module.size), module.path))</span><br><span class="line">    session.detach()</span><br><span class="line"></span><br><span class="line">#从JS接受信息</span><br><span class="line">def on_message(message, data):</span><br><span class="line">    print(message)</span><br><span class="line">    if message.has_key(&#39;payload&#39;):</span><br><span class="line">        payload &#x3D; message[&#39;payload&#39;]</span><br><span class="line">        if isinstance(payload, dict):</span><br><span class="line">            deal_message(payload)</span><br><span class="line">        else:</span><br><span class="line">            print (payload)</span><br><span class="line"></span><br><span class="line">#加载JS文件脚本</span><br><span class="line">def loadJsFile(session, filename):</span><br><span class="line">    source &#x3D; &#39;&#39;</span><br><span class="line">    with codecs.open(filename, &#39;r&#39;, &#39;utf-8&#39;) as f:</span><br><span class="line">        source &#x3D; source + f.read()</span><br><span class="line">    script &#x3D; session.create_script(source)</span><br><span class="line">    script.on(&#39;message&#39;, on_message)</span><br><span class="line">    #接收js脚本的消息</span><br><span class="line">    script.load()</span><br><span class="line">    return script</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;aesenc&#39;, methods&#x3D;[&#39;POST&#39;]) # 数据加密</span><br><span class="line">def zy_aesenc():</span><br><span class="line">    global gScript</span><br><span class="line">    data &#x3D; request.get_data()      </span><br><span class="line">    res &#x3D; gScript.exports.callencaes(data.decode(&quot;utf-8&quot;))</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;aesdec&#39;, methods&#x3D;[&#39;POST&#39;]) # 数据解密</span><br><span class="line">def zy_aesdec():</span><br><span class="line">    global gScript</span><br><span class="line"></span><br><span class="line">    data &#x3D; request.get_data()</span><br><span class="line">    res &#x3D; gScript.exports.calldecaes(data.decode(&quot;utf-8&quot;))</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;sign&#39;, methods&#x3D;[&#39;POST&#39;]) # 数据签名</span><br><span class="line">def zy_sign():</span><br><span class="line">    global gScript</span><br><span class="line"></span><br><span class="line">    data &#x3D; request.get_data()</span><br><span class="line">    print(data.decode(&quot;utf-8&quot;))        </span><br><span class="line"></span><br><span class="line">    res &#x3D; gScript.exports.callsignfun(&#39;http:&#x2F;&#x2F;api.izuiyou.com&#x2F;&#39;,data.decode(&quot;utf-8&quot;))</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;setkey&#39;, methods&#x3D;[&#39;POST&#39;]) # 设置key</span><br><span class="line">def zy_setKey():</span><br><span class="line">    global gScript</span><br><span class="line"></span><br><span class="line">    data &#x3D; request.get_data()</span><br><span class="line">    res &#x3D; gScript.exports.callsetkey(data);</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;getkey&#39;)   # 获取当前key</span><br><span class="line">def zy_getKey():</span><br><span class="line">    global gScript</span><br><span class="line"></span><br><span class="line">    res &#x3D; gScript.exports.callgetkey()</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    global session</span><br><span class="line">    global appname</span><br><span class="line">    global gScript</span><br><span class="line">    </span><br><span class="line">    # 1. 获取USB设备</span><br><span class="line">    device &#x3D; get_usb_iphone()</span><br><span class="line">    if len(sys.argv)&gt;2:</span><br><span class="line">        appname &#x3D; sys.argv[2]</span><br><span class="line">    else:</span><br><span class="line">        appname &#x3D; ZY_NAME</span><br><span class="line"></span><br><span class="line">    print(&#39;设备信息:&#39; + str(device))</span><br><span class="line">    if sys.argv[1]&#x3D;&#x3D;&#39;ps&#39;:</span><br><span class="line">        # 枚举运行进程信息</span><br><span class="line">        print (&#39;ps&#39;)</span><br><span class="line">        listRunningProcess()</span><br><span class="line">    elif sys.argv[1]&#x3D;&#x3D;&#39;hook&#39;:</span><br><span class="line">        # 动态Hook</span><br><span class="line">        print (&#39;zyhook&#39;)</span><br><span class="line"></span><br><span class="line">        pid &#x3D; device.spawn(ZY_FRONTBOARD)</span><br><span class="line">        session &#x3D; device.attach(pid)</span><br><span class="line">        print(&quot;[*] Attach Application id:&quot;,pid)</span><br><span class="line"></span><br><span class="line">        device.resume(pid)</span><br><span class="line">        print(&quot;[*] Application onResume&quot;)</span><br><span class="line"></span><br><span class="line">        gScript &#x3D; loadJsFile(session, HOOK_JS)</span><br><span class="line">        # sys.stdin.read()</span><br><span class="line"></span><br><span class="line">    # 启动web服务</span><br><span class="line">    app.run()        </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    try:</span><br><span class="line">        main()</span><br><span class="line">    except KeyboardInterrupt:</span><br><span class="line">        if session:</span><br><span class="line">            session.detach()</span><br><span class="line">        sys.exit()</span><br><span class="line">    else:</span><br><span class="line">        pass</span><br><span class="line">    finally:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211113182156691.png" alt="image-20211113182156691"></p><p>在源码中encodeAES的参数中<code>jSONObject</code>的值由mt8.Z返回，所以我们通过objection内存搜索打印返回即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g cn.xiaochuankeji.tieba explore -P ~&#x2F;.objection&#x2F;plugins </span><br><span class="line">android hooking list class_methods mt8</span><br><span class="line">android hooking watch class_method mt8.Z --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211113182358081.png" alt="image-20211113182358081"></p><p>python run.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line"># Python 2.x &amp; 3.x compatible</span><br><span class="line"># from distutils.log import warn as print</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line">from requests import RequestException</span><br><span class="line">import hashlib</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">if sys.version_info &lt; (3, 0):</span><br><span class="line">    reload(sys)</span><br><span class="line">    sys.setdefaultencoding(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">def get_frida_rpc(url,msg):</span><br><span class="line">    try:</span><br><span class="line">        r &#x3D; requests.post(url,data&#x3D;msg.encode(&#39;utf-8&#39;))</span><br><span class="line">        # 这里可以做一些返回值的错误处理                          </span><br><span class="line">        return r.text</span><br><span class="line">    except RequestException as e:</span><br><span class="line">        print(e)</span><br><span class="line">                          </span><br><span class="line"># 首页推荐内容解析</span><br><span class="line">def dataAesEnc(msg):</span><br><span class="line">    return get_frida_rpc(&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;aesenc&#39;,msg)</span><br><span class="line"></span><br><span class="line">def dataAesDec(msg):</span><br><span class="line">    return get_frida_rpc(&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;aesdec&#39;,msg)</span><br><span class="line"></span><br><span class="line">def dataSign(msg):</span><br><span class="line">    return get_frida_rpc(&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;sign&#39;,msg)</span><br><span class="line"></span><br><span class="line">def dataGetKey():</span><br><span class="line">    r  &#x3D; requests.get(&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;getkey&#39;)</span><br><span class="line">    return r.text</span><br><span class="line"></span><br><span class="line">def dataSetKey(msg):</span><br><span class="line">    return get_frida_rpc(&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;setkey&#39;,msg)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"># 获取数据</span><br><span class="line">def get_data(uri, msg):                          </span><br><span class="line">    postData &#x3D; dataAesEnc(msg)</span><br><span class="line">    # print(postData)    </span><br><span class="line">    sign &#x3D; dataSign(postData)</span><br><span class="line">    # print(sign)</span><br><span class="line">    protocolKey &#x3D; dataGetKey()</span><br><span class="line">    # print(protocolKey)</span><br><span class="line">    </span><br><span class="line">    url &#x3D; uri + str(sign)</span><br><span class="line">    headers &#x3D; &#123; &#39;ZYP&#39;: &#39;mid&#x3D;239631186&#39;,</span><br><span class="line">                &#39;X-Xc-Agent&#39; : &#39;av&#x3D;5.5.11,dt&#x3D;0&#39;,</span><br><span class="line">                &#39;User-Agent&#39;: &#39;okhttp&#x2F;3.12.2 Zuiyou&#x2F;5.5.11 (Android&#x2F;27)&#39;,</span><br><span class="line">                &#39;X-Xc-Proto-Req&#39; : protocolKey,</span><br><span class="line">                &#39;Request-Type&#39; : &#39;text&#x2F;json&#39;,</span><br><span class="line">                &#39;Content-Type&#39; : &#39;application&#x2F;xcp&#39;,</span><br><span class="line">                &#125;</span><br><span class="line">    # 将十六进制字符串转字节数组  b&#39;&#x2F;\x07\xc5\xf4\x143\xc2\xe1\x01...          </span><br><span class="line">    byte_data &#x3D; bytes.fromhex(postData) </span><br><span class="line">    # proxies &#x3D; &#123;&#39;http&#39;: &#39;127.0.0.1:8888&#39;,</span><br><span class="line">    #  &#39;https&#39;: &#39;127.0.0.1:8888&#39;</span><br><span class="line">    #  &#125;</span><br><span class="line">    </span><br><span class="line">    try:</span><br><span class="line">        # ,proxies&#x3D;proxies</span><br><span class="line">        r &#x3D; requests.post(url, headers&#x3D;headers, data&#x3D;byte_data, verify&#x3D;False,stream&#x3D;True,timeout&#x3D;15)</span><br><span class="line"></span><br><span class="line">        # print(r.headers[&#39;X-Xc-Proto-Res&#39;])</span><br><span class="line">        # key是 cat开头的就需要把返回包里面的duck key设置进去， </span><br><span class="line">        if protocolKey.find(&#39;cat&#39;) &#x3D;&#x3D; 0:</span><br><span class="line">            print(protocolKey)</span><br><span class="line">            print(r.headers[&#39;X-Xc-Proto-Res&#39;])</span><br><span class="line">            dataSetKey(r.headers[&#39;X-Xc-Proto-Res&#39;])</span><br><span class="line">        # 这里要做一些错误处理        </span><br><span class="line">        bufRc &#x3D;  r.raw.read();</span><br><span class="line">        rcStr &#x3D; dataAesDec(bufRc.hex())</span><br><span class="line">        rc &#x3D; bytes.fromhex(rcStr).decode(&quot;utf-8&quot;)</span><br><span class="line">        return rc</span><br><span class="line"></span><br><span class="line">    except RequestException as e:</span><br><span class="line">        print(e)</span><br><span class="line">        </span><br><span class="line">def main():</span><br><span class="line">    # 手机端首页推荐地址</span><br><span class="line">    uri &#x3D; &#39;http:&#x2F;&#x2F;api.izuiyou.com&#x2F;index&#x2F;recommend?sign&#x3D;&#39;</span><br><span class="line">    msg &#x3D; &#39;&#123;&quot;filter&quot;:&quot;all&quot;,&quot;auto&quot;:0,&quot;tab&quot;:&quot;推荐&quot;,&quot;direction&quot;:&quot;down&quot;,&quot;c_types&quot;:[1,2,11,15,16,51,17,52,53,40,50,41,22,25,27],&quot;sdk_ver&quot;:&#123;&quot;tt&quot;:&quot;3.1.0.3&quot;,&quot;tx&quot;:&quot;4.211.1081&quot;,&quot;bd&quot;:&quot;5.86&quot;,&quot;mimo&quot;:&quot;5.0.3&quot;,&quot;tt_aid&quot;:&quot;5004095&quot;,&quot;tx_aid&quot;:&quot;1106701465&quot;,&quot;bd_aid&quot;:&quot;c8655095&quot;,&quot;mimo_aid&quot;:&quot;2882303761518470184&quot;&#125;,&quot;ad_wakeup&quot;:1,&quot;h_ua&quot;:&quot;Mozilla\&#x2F;5.0 (Linux; Android 8.1.0; Redmi 6A Build\&#x2F;O11019; wv) AppleWebKit\&#x2F;537.36 (KHTML, like Gecko) Version\&#x2F;4.0 Chrome\&#x2F;62.0.3202.84 Mobile Safari\&#x2F;537.36&quot;,&quot;manufacturer&quot;:&quot;Xiaomi&quot;,&quot;h_av&quot;:&quot;5.5.11&quot;,&quot;h_dt&quot;:0,&quot;h_os&quot;:27,&quot;h_app&quot;:&quot;zuiyou&quot;,&quot;h_model&quot;:&quot;Redmi 6A&quot;,&quot;h_did&quot;:&quot;866655030396869&quot;,&quot;h_nt&quot;:1,&quot;h_m&quot;:239631186,&quot;h_ch&quot;:&quot;xiaomi&quot;,&quot;h_ts&quot;:1603179121590,&quot;token&quot;:&quot;T7K4Nnqg98_aFV9JwkfuiZtvPrRJ02EXxbnm7TXr3qiIWWaT1vjNNNCpcUu112TDw_VXu&quot;,&quot;android_id&quot;:&quot;57b9b8465c2e440b&quot;,&quot;h_ids&quot;:&#123;&quot;imei2&quot;:&quot;878739042239784&quot;,&quot;meid&quot;:&quot;98001184062989&quot;,&quot;imei1&quot;:&quot;878739042239776&quot;,&quot;imei&quot;:&quot;98001184062989&quot;&#125;,&quot;h_os_type&quot;:&quot;miui&quot;&#125;&#39;</span><br><span class="line">    </span><br><span class="line">    items &#x3D; get_data(uri, msg)</span><br><span class="line">    print(items)</span><br><span class="line">    </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    j &#x3D; 1</span><br><span class="line">    while True:</span><br><span class="line">        print(&quot;第&#123;&#125;次加载的段子\n&quot;.format(j))</span><br><span class="line">        main()</span><br><span class="line">        j +&#x3D; 1</span><br><span class="line"></span><br><span class="line">        # 测试程序，加载3次</span><br><span class="line">        if j &gt;1 :</span><br><span class="line">            break</span><br><span class="line">        </span><br><span class="line">    print(&quot;加载完毕&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211113182515066.png" alt="image-20211113182515066"></p><h1 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h1><p>Android Studio新建Empty Activity–OneJaneXposed,删除默认MainActivity和AndroidManifest.xml中的activity</p><p>AndroidManifest.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">    android:name&#x3D;&quot;xposedmodule&quot;</span><br><span class="line">    android:value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name&#x3D;&quot;xposeddescription&quot;</span><br><span class="line">    android:value&#x3D;&quot;zy hook&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name&#x3D;&quot;xposedminversion&quot;</span><br><span class="line">    android:value&#x3D;&quot;53&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>app\build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly &#39;de.robv.android.xposed:api:82&#39;</span><br><span class="line">    compileOnly &#39;de.robv.android.xposed:api:82:sources&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app\src\main\java\com\example\onejanexposed\HookLoader.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class HookLoader implements IXposedHookLoadPackage &#123;</span><br><span class="line">    private final static String TAG &#x3D; &quot;onejane&quot;;</span><br><span class="line">    public static void log(String s) &#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">         log(&quot;Im comming Frist&quot;+loadPackageParam.packageName);</span><br><span class="line">         XposedBridge.log(&quot;zzx zy has Hooked Frist!&quot;);</span><br><span class="line"></span><br><span class="line">        if (loadPackageParam.packageName.equals(&quot;cn.xiaochuankeji.tieba&quot;)) &#123;</span><br><span class="line">            log(TAG+&quot;Im comming zy 3&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app\src\main\assets\xposed_init   配置xposed入口类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.example.onejanexposed.HookLoader</span><br></pre></td></tr></table></figure><p>在xposed中启动该模块即可</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211121125229618.png" alt="image-20211121125229618"></p><p>完整xposed实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">public class HookLoader implements IXposedHookLoadPackage &#123;</span><br><span class="line">    private final static String TAG &#x3D; &quot;onejane&quot;;</span><br><span class="line">    public static void log(String s) &#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">         log(&quot;Im comming &quot;+loadPackageParam.packageName);</span><br><span class="line">         XposedBridge.log(&quot;xposed log Hooked Frist!&quot;);</span><br><span class="line"></span><br><span class="line">        if (loadPackageParam.packageName.equals(&quot;cn.xiaochuankeji.tieba&quot;)) &#123;</span><br><span class="line">            log(&quot;Im comming zy 3&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; http server</span><br><span class="line">            class myHttpServer extends NanoHTTPD &#123;</span><br><span class="line">                private static  final String REQUEST_ROOT &#x3D; &quot;&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">                public myHttpServer() throws IOException &#123;</span><br><span class="line">                    &#x2F;&#x2F; 端口是8088，也就是说要通过http:&#x2F;&#x2F;127.0.0.1:8088来访当问</span><br><span class="line">                    super(8888);</span><br><span class="line">                    start(NanoHTTPD.SOCKET_READ_TIMEOUT, true);</span><br><span class="line">                    log(&quot;---fenfei Server---&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public Response serve(IHTTPSession session) &#123;</span><br><span class="line">                    &#x2F;&#x2F; log(&quot;serve&quot;);</span><br><span class="line">                    &#x2F;&#x2F;这个就是之前分析，重写父类的一个参数的方法，</span><br><span class="line">                    &#x2F;&#x2F;这里边已经把所有的解析操作已经在这里执行了</span><br><span class="line">                    return super.serve(session);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public Response serve(String uri, Method method, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; parms, Map&lt;String, String&gt; files) &#123;</span><br><span class="line">                    &#x2F;&#x2F; log(&quot;serve xxx&quot;);</span><br><span class="line">                    &#x2F;&#x2F;这就是上边的serve方法最后一行调用的那个过时的方法，这里简单的做个判断就好了</span><br><span class="line">                    &#x2F;&#x2F; if (!method.equals(Method.POST)) &#123;&#x2F;&#x2F;判断请求方式是否争取</span><br><span class="line">                    &#x2F;&#x2F;    return newFixedLengthResponse(&quot;the request method is incoorect&quot;);</span><br><span class="line">                    &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">                    log(uri);</span><br><span class="line"></span><br><span class="line">                     for (Map.Entry&lt;String, String&gt; entry : files.entrySet()) &#123;</span><br><span class="line">                         log(&quot;Key &#x3D; &quot; + entry.getKey() + &quot;, Value &#x3D; &quot; + entry.getValue());</span><br><span class="line">                     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    Class&lt;?&gt; clazzZy &#x3D; null;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        clazzZy &#x3D; loadPackageParam.classLoader.loadClass(&quot;com.izuiyou.network.NetCrypto&quot;);</span><br><span class="line">                        log(&quot;load class:&quot; + clazzZy);</span><br><span class="line">                    &#125; catch (Exception e) &#123;</span><br><span class="line">                        log(&quot;load class err:&quot; + Log.getStackTraceString(e));</span><br><span class="line">                        return newFixedLengthResponse(&quot;load class is null&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (StringUtils.containsIgnoreCase(uri, &quot;getkey&quot;)) &#123;&#x2F;&#x2F;判断uri是否正确</span><br><span class="line">                        return getKey(clazzZy);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (StringUtils.containsIgnoreCase(uri, &quot;setkey&quot;)) &#123;&#x2F;&#x2F;判断uri是否正确</span><br><span class="line">                        String postData &#x3D; files.get(&quot;postData&quot;);</span><br><span class="line">                        if (!StringUtils.isEmpty(postData)) &#123;&#x2F;&#x2F;判断post过来的数据是否正确</span><br><span class="line">                            return setkey(clazzZy,postData);</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            return newFixedLengthResponse(&quot;postData is null&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (StringUtils.containsIgnoreCase(uri, &quot;sign&quot;)) &#123;</span><br><span class="line">                        String postData &#x3D; files.get(&quot;postData&quot;);</span><br><span class="line">                        if (!StringUtils.isEmpty(postData)) &#123;</span><br><span class="line">                            return sign(clazzZy,postData);</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            return newFixedLengthResponse(&quot;postData is null&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (StringUtils.containsIgnoreCase(uri, &quot;aesenc&quot;)) &#123;</span><br><span class="line">                        String postData &#x3D; files.get(&quot;postData&quot;);</span><br><span class="line">                        if (!StringUtils.isEmpty(postData)) &#123;</span><br><span class="line">                            return aesenc(clazzZy,postData);</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            return newFixedLengthResponse(&quot;postData is null&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    if (StringUtils.containsIgnoreCase(uri, &quot;aesdec&quot;)) &#123;&#x2F;&#x2F;判断uri是否正确</span><br><span class="line">                        String postData &#x3D; files.get(&quot;postData&quot;);</span><br><span class="line">                        if (!StringUtils.isEmpty(postData)) &#123;&#x2F;&#x2F;判断post过来的数据是否正确</span><br><span class="line">                            return aesdec(clazzZy,postData);</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            return newFixedLengthResponse(&quot;postData is null&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;判断完了开始解析数据，如果是你想要的数据，那么你就给返回一个正确的格式就好了</span><br><span class="line">                    &#x2F;&#x2F;举个栗子：return newFixedLengthResponse(&quot;&#123;\&quot;result\&quot;:0,\&quot;success\&quot;:true&#125;&quot;);</span><br><span class="line">                    return super.serve(uri, method, headers, parms, files);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public Response sign(Class&lt;?&gt; clazzUse,String strData)&#123;</span><br><span class="line">                    byte[] inBuf &#x3D; Hex.hex2Byte(strData);</span><br><span class="line">                    String rc &#x3D; (String) XposedHelpers.callStaticMethod(clazzUse, &quot;sign&quot;,&quot;http:&#x2F;&#x2F;api.izuiyou.com&#x2F;&quot;,inBuf);</span><br><span class="line">                    log(&quot;sign &#x3D; &quot;+rc);</span><br><span class="line">                    return newFixedLengthResponse(rc);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public Response aesenc(Class&lt;?&gt; clazzUse,String strData)&#123;</span><br><span class="line">                    byte[] inBuf &#x3D; strData.getBytes() ;</span><br><span class="line">                    byte[] rc &#x3D; (byte[])XposedHelpers.callStaticMethod(clazzUse, &quot;encodeAES&quot;,inBuf);</span><br><span class="line">                    String rcStr &#x3D; Hex.byte2Hex(rc);</span><br><span class="line">                    log(&quot;aesenc &#x3D; &quot;+  rcStr);</span><br><span class="line">                    return newFixedLengthResponse(rcStr);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public Response aesdec(Class&lt;?&gt; clazzUse,String strData)&#123;</span><br><span class="line">                    byte[] inBuf &#x3D; Hex.hex2Byte(strData);</span><br><span class="line">                    byte[] rc &#x3D; (byte[])XposedHelpers.callStaticMethod(clazzUse, &quot;decodeAES&quot;,inBuf,true);</span><br><span class="line">                    String rcStr &#x3D; Hex.byte2Hex(rc);</span><br><span class="line">                    log(&quot;aesdec &#x3D; &quot;+  rcStr);</span><br><span class="line">                    return newFixedLengthResponse(rcStr);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                public Response setkey(Class&lt;?&gt; clazzUse,String strKey)&#123;</span><br><span class="line">                    XposedHelpers.callStaticMethod(clazzUse, &quot;setProtocolKey&quot;,strKey);</span><br><span class="line">                    log(&quot;setkey &#x3D; &quot;+strKey);</span><br><span class="line">                    return newFixedLengthResponse(&quot;set key ok&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public Response getKey(Class&lt;?&gt; clazzUse)&#123;</span><br><span class="line">                    String rc &#x3D; (String) XposedHelpers.callStaticMethod(clazzUse, &quot;getProtocolKey&quot;);</span><br><span class="line">                    log(&quot;getkey &#x3D; &quot;+rc);</span><br><span class="line">                    return newFixedLengthResponse(rc);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            new myHttpServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;org.apache.commons:commons-lang3:3.7&#39;</span><br><span class="line">implementation &#39;org.nanohttpd:nanohttpd:2.3.1&#39;</span><br></pre></td></tr></table></figure><p>结合run.py修改请求地址为<code>172.20.103.67:8888</code>，以上只是通过objection内存漫游拿到的参数借助xposed或者frida主动调用so层函数，实现在python的rpc调用sign参数的加密。</p><h1 id="Unidbg"><a href="#Unidbg" class="headerlink" title="Unidbg"></a>Unidbg</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class ZuiYouSign extends AbstractJni &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 1、需要调用的Apk文件所在路径</span><br><span class="line">        String apkFilePath &#x3D; &quot;right573.apk&quot;;</span><br><span class="line">        &#x2F;&#x2F; 2、需要调用函数所在的Java类完整路径，比如a&#x2F;b&#x2F;c&#x2F;d等等，注意需要用&#x2F;代替.</span><br><span class="line">        String classPath &#x3D; &quot;com&#x2F;izuiyou&#x2F;network&#x2F;NetCrypto&quot;;</span><br><span class="line">        ZuiYouSign runZyObj &#x3D; new ZuiYouSign(apkFilePath, classPath);</span><br><span class="line">        runZyObj.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ARM模拟器</span><br><span class="line">    private final ARMEmulator emulator;</span><br><span class="line">    &#x2F;&#x2F; vm</span><br><span class="line">    private final VM vm;</span><br><span class="line">    &#x2F;&#x2F; 载入的模块</span><br><span class="line">    private final Module module;</span><br><span class="line"></span><br><span class="line">    private final DvmClass TTEncryptUtils;</span><br><span class="line"> </span><br><span class="line">    public ZuiYouSign(String apkFilePath, String classPath) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建app进程，包名可任意写</span><br><span class="line">        emulator &#x3D; AndroidEmulatorBuilder.for32Bit().setProcessName(&quot;com.onejane.RunZy&quot;).build(); &#x2F;&#x2F; 创建模拟器实例，要模拟32位或者64位，在这里区分</span><br><span class="line">        final Memory memory &#x3D; emulator.getMemory(); &#x2F;&#x2F; 模拟器的内存操作接口</span><br><span class="line">        &#x2F;&#x2F; 作者支持19和23两个sdk</span><br><span class="line">        memory.setLibraryResolver(new AndroidResolver(23));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 创建DalvikVM，利用apk本身，可以为null</span><br><span class="line">        vm &#x3D; ((AndroidARMEmulator) emulator).createDalvikVM(new File(apkFilePath));</span><br><span class="line">        vm.setVerbose(true);</span><br><span class="line">        vm.setJni(this);</span><br><span class="line">        new AndroidModule(emulator, vm).register(memory);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; （关键处1）加载so，填写so的文件路径 或者vm.loadLibrary(new File(&quot;net_crypto.so&quot;), true)</span><br><span class="line">        DalvikModule dm &#x3D; vm.loadLibrary(&quot;net_crypto&quot;, false);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 调用jni</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">        module &#x3D; dm.getModule();</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; （关键处2）加载so文件中的哪个类，填写完整的类路径</span><br><span class="line">        TTEncryptUtils &#x3D; vm.resolveClass(classPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 关闭模拟器</span><br><span class="line">     * @throws IOException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void destroy() throws IOException &#123;</span><br><span class="line">        emulator.close();</span><br><span class="line">        System.out.println(&quot;emulator destroy...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211124174951985.png" alt="image-20211124174951985"></p><p>在JNIOnLoad时对函数进行了动态注册，当loadLibrary时不执行init相关函数，即第二个参数为false时输出结果乱码，因为so对字符串做了混淆加密，一般在Init array节或者JNIOnLoad，总之在字符串使用前的任何一个时机点都有可能。IDA打开libnet_crypto.so，<code>shift+F7</code>找到节区中的init_array，解密逻辑就在图中的函数中，如果模拟执行时加载so不执行init相关函数，导致so字符串没有被解密，输出乱码。</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211124180120859.png" alt="image-20211124180120859"></p><blockquote><pre><code>public static {    we5.a(ContextProvider.get(), &quot;net_crypto&quot;);    NetCrypto.native_init();}</code></pre></blockquote><p>加载完net_crypto后，执行<code>native_init()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">runZyObj.initCall();</span><br><span class="line">private void initCall() &#123;</span><br><span class="line">    &#x2F;&#x2F; jeb反编译的smali指令 .method public static native native_init()V</span><br><span class="line">    TTEncryptUtils.callStaticJniMethod(emulator, &quot;native_init()V&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者通过地址调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DalvikModule dm &#x3D; vm.loadLibrary(new File(&quot;libnet_crypto.so&quot;), true); &#x2F;&#x2F; 加载so到虚拟内存</span><br><span class="line">module &#x3D; dm.getModule(); &#x2F;&#x2F;获取本SO模块的句柄</span><br><span class="line"></span><br><span class="line">public void native_init()&#123;</span><br><span class="line">    &#x2F;&#x2F; 0x4a069  是native_init动态注册的地址</span><br><span class="line">    List&lt;Object&gt; list &#x3D; new ArrayList&lt;&gt;(10);</span><br><span class="line">    list.add(vm.getJNIEnv()); &#x2F;&#x2F; 第一个参数是env</span><br><span class="line">    list.add(0); &#x2F;&#x2F; 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span><br><span class="line">    module.callFunction(emulator, 0x4a069, list.toArray());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下：</p><blockquote><p>java.lang.UnsupportedOperationException: com/izuiyou/common/base/BaseApplication-&gt;getAppContext()Landroid/content/Context;<br>at com.github.unidbg.linux.android.dvm.AbstractJni.callStaticObjectMethodV(AbstractJni.java:426)</p></blockquote><p>补环境重写 <code>callStaticObjectMethodV</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    switch (signature) &#123;</span><br><span class="line">        case &quot;com&#x2F;izuiyou&#x2F;common&#x2F;base&#x2F;BaseApplication-&gt;getAppContext()Landroid&#x2F;content&#x2F;Context;&quot;:</span><br><span class="line">            return vm.resolveClass(&quot;android&#x2F;content&#x2F;Context&quot;, vm.resolveClass(&quot;android&#x2F;content&#x2F;ContextWrapper&quot;, vm.resolveClass(&quot;android&#x2F;content&#x2F;Context&quot;))).newObject(signature);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return super.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211121143238365.png" alt="image-20211121143238365"></p><p>调用sign</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 3、jadx中smali  invoke-static &#123;p0, p1&#125;, Lcom&#x2F;izuiyou&#x2F;network&#x2F;NetCrypto;-&gt;sign(Ljava&#x2F;lang&#x2F;String;[B)Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">String methodSign &#x3D; &quot;sign(Ljava&#x2F;lang&#x2F;String;[B)Ljava&#x2F;lang&#x2F;String;&quot;;</span><br><span class="line">String InBuf &#x3D; &quot;50027f7...&quot;;</span><br><span class="line">&#x2F;&#x2F;输出方法调用结果</span><br><span class="line">String ret &#x3D; runZyObj.getSign(methodSign</span><br><span class="line">        , new StringObject(runZyObj.vm, &quot;https:&#x2F;&#x2F;zyadapi.izuiyou.com&#x2F;ad&#x2F;popup_ad&quot;)   &#x2F;&#x2F;&quot;https:&#x2F;&#x2F;api.izuiyou.com&#x2F;index&#x2F;recommend&quot;)</span><br><span class="line">        , hexStringToBytes(InBuf));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Out Rc&#x3D;v2-1ff7402d2b4fa9a4c39b3853262f18fd</span><br><span class="line">System.out.printf(&quot;ret:%s\n&quot;, ret);</span><br><span class="line"></span><br><span class="line">private String getSign(String methodSign, Object... args) &#123;</span><br><span class="line">    &#x2F;&#x2F; 使用jni调用传入的函数签名对应的方法（）</span><br><span class="line">    Object value &#x3D; TTEncryptUtils.callStaticJniMethodObject(emulator, methodSign, args).getValue();</span><br><span class="line">    return value.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者通过地址调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private String callSign()&#123;</span><br><span class="line">    &#x2F;&#x2F; 准备入参 0x4a28D是sign动态注册的地址</span><br><span class="line">    List&lt;Object&gt; list &#x3D; new ArrayList&lt;&gt;(10);</span><br><span class="line">    list.add(vm.getJNIEnv()); &#x2F;&#x2F; 第一个参数是env</span><br><span class="line">    list.add(0); &#x2F;&#x2F; 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span><br><span class="line">    list.add(vm.addLocalObject(new StringObject(vm, &quot;12345&quot;)));</span><br><span class="line">    ByteArray plainText &#x3D; new ByteArray(vm, &quot;onejane&quot;.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    list.add(vm.addLocalObject(plainText));</span><br><span class="line">    Number number &#x3D; module.callFunction(emulator, 0x4a28D, list.toArray())[0];</span><br><span class="line">    return vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>报错如下：</p><blockquote><p>java.lang.UnsupportedOperationException: android/content/Context-&gt;getClass()Ljava/lang/Class;<br>    at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethodV(AbstractJni.java:373)</p></blockquote><p>补环境重写getClass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    switch (signature) &#123;</span><br><span class="line">        case &quot;android&#x2F;content&#x2F;Context-&gt;getClass()Ljava&#x2F;lang&#x2F;Class;&quot;:</span><br><span class="line">            return vm.resolveClass(&quot;java&#x2F;lang&#x2F;Class&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return super.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下：</p><blockquote><p>java.lang.UnsupportedOperationException: java/lang/Class-&gt;getSimpleName()Ljava/lang/String;<br>    at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethodV(AbstractJni.java:373)</p><p>getSimpleName 是个类名，根据之前的报错逻辑，<code>com/izuiyou/common/base/BaseApplication-&gt;getAppContext()</code>获取到Context后，通过<code>android/content/Context-&gt;getClass()</code>获取到类，最终获取类名，之前补环境虽然只补了类型，只要最终返回的结果正确即可。根据objection内存漫游拿到完整类名就是<code>cn.xiaochaunkeji.tieba.AppController</code>，getSimpleName就是<code>AppController</code></p></blockquote><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211124204039287.png" alt="image-20211124204039287"></p><p>或者通过frida主动调用静态函数获取getSimpleName的返回结果</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var BaseApplication &#x3D; Java.use(&quot;com.izuiyou.common.base.BaseApplication&quot;).getAppContext().getClass();</span><br><span class="line">        var methods &#x3D; BaseApplication.class.getDeclaredMethods();</span><br><span class="line">        for(var j &#x3D; 0; j &lt; methods.length; j++)&#123;</span><br><span class="line">            var methodName &#x3D; methods[j].getName();</span><br><span class="line">            console.log(methodName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>遍历该类中的方法确实存在一个叫getSimpleName()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var BaseApplication &#x3D; Java.use(&quot;com.izuiyou.common.base.BaseApplication&quot;).getAppContext().getClass();</span><br><span class="line">        console.log(BaseApplication.getSimpleName())</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>返回结果就是<code>AppController</code></p></blockquote><p>补环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    switch (signature) &#123;</span><br><span class="line">        case &quot;android&#x2F;content&#x2F;Context-&gt;getClass()Ljava&#x2F;lang&#x2F;Class;&quot;:</span><br><span class="line">            return vm.resolveClass(&quot;java&#x2F;lang&#x2F;Class&quot;);</span><br><span class="line">        case &quot;java&#x2F;lang&#x2F;Class-&gt;getSimpleName()Ljava&#x2F;lang&#x2F;String;&quot;:</span><br><span class="line">            return new StringObject(vm, &quot;AppController&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return super.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下：</p><blockquote><p>java.lang.UnsupportedOperationException: cn/xiaochuankeji/tieba/common/debug/AppLogReporter-&gt;reportAppRuntime(Ljava/lang/String;Ljava/lang/String;)V<br>    at com.github.unidbg.linux.android.dvm.AbstractJni.callStaticVoidMethodV(AbstractJni.java:612)</p><p>reportAppRuntime没有返回值，直接return</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void callStaticVoidMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    switch (signature) &#123;</span><br><span class="line">        case &quot;cn&#x2F;xiaochuankeji&#x2F;tieba&#x2F;common&#x2F;debug&#x2F;AppLogReporter-&gt;reportAppRuntime(Ljava&#x2F;lang&#x2F;String;Ljava&#x2F;lang&#x2F;String;)V&quot;:</span><br><span class="line">            return;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new UnsupportedOperationException(signature);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下：</p><blockquote><p>java.lang.UnsupportedOperationException: android/content/Context-&gt;getFilesDir()Ljava/io/File;<br>    at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethodV(AbstractJni.java:373)</p><p>读取文件直接返回java/io/File</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    switch (signature) &#123;</span><br><span class="line">        case &quot;android&#x2F;content&#x2F;Context-&gt;getClass()Ljava&#x2F;lang&#x2F;Class;&quot;:</span><br><span class="line">            return vm.resolveClass(&quot;java&#x2F;lang&#x2F;Class&quot;);</span><br><span class="line">        case &quot;java&#x2F;lang&#x2F;Class-&gt;getSimpleName()Ljava&#x2F;lang&#x2F;String;&quot;:</span><br><span class="line">            return new StringObject(vm, &quot;AppController&quot;);</span><br><span class="line">        case &quot;android&#x2F;content&#x2F;Context-&gt;getFilesDir()Ljava&#x2F;io&#x2F;File;&quot;:</span><br><span class="line">            return vm.resolveClass(&quot;java&#x2F;io&#x2F;File&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return super.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下：</p><blockquote><p>java.lang.UnsupportedOperationException: java/lang/Class-&gt;getAbsolutePath()Ljava/lang/String;<br>    at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethodV(AbstractJni.java:373)</p><p>获取绝对路径，直接返回/sdcard</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    switch (signature) &#123;</span><br><span class="line">        case &quot;android&#x2F;content&#x2F;Context-&gt;getClass()Ljava&#x2F;lang&#x2F;Class;&quot;:</span><br><span class="line">            return vm.resolveClass(&quot;java&#x2F;lang&#x2F;Class&quot;);</span><br><span class="line">        case &quot;java&#x2F;lang&#x2F;Class-&gt;getSimpleName()Ljava&#x2F;lang&#x2F;String;&quot;:</span><br><span class="line">            return new StringObject(vm, &quot;AppController&quot;);</span><br><span class="line">        case &quot;android&#x2F;content&#x2F;Context-&gt;getFilesDir()Ljava&#x2F;io&#x2F;File;&quot;:</span><br><span class="line">            return vm.resolveClass(&quot;java&#x2F;io&#x2F;File&quot;);</span><br><span class="line">        case &quot;java&#x2F;lang&#x2F;Class-&gt;getAbsolutePath()Ljava&#x2F;lang&#x2F;String;&quot;:</span><br><span class="line">            return new StringObject(vm, &quot;&#x2F;sdcard&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return super.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下：</p><blockquote><p>java.lang.UnsupportedOperationException: android/os/Debug-&gt;isDebuggerConnected()Z<br>    at com.github.unidbg.linux.android.dvm.AbstractJni.callStaticBooleanMethodV(AbstractJni.java:169)</p><p>判断是否调试，直接return false</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean callStaticBooleanMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    switch (signature) &#123;</span><br><span class="line">        case &quot;android&#x2F;os&#x2F;Debug-&gt;isDebuggerConnected()Z&quot;:</span><br><span class="line">            return Boolean.FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    return super.callStaticBooleanMethodV(vm,dvmClass,signature,vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下：</p><blockquote><p>java.lang.UnsupportedOperationException: android/os/Process-&gt;myPid()I<br>    at com.github.unidbg.linux.android.dvm.AbstractJni.callStaticIntMethodV(AbstractJni.java:189)</p><p>需要pid</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int callStaticIntMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    switch (signature) &#123;</span><br><span class="line">        case &quot;android&#x2F;os&#x2F;Process-&gt;myPid()I&quot;:</span><br><span class="line">            &#x2F;&#x2F;return 123;</span><br><span class="line">            return emulator.getPid();</span><br><span class="line">    &#125;</span><br><span class="line">    return super.callStaticIntMethodV(vm,dvmClass,signature,vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211124204809055.png" alt="image-20211124204809055"></p><h1 id="算法还原"><a href="#算法还原" class="headerlink" title="算法还原"></a>算法还原</h1><h2 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h2><p>由于返回值固定为32位，且输入不变输出不变，可能是哈希算法中的md5算法，不过<code>libnet_crypto.so</code>做了一定的OLLVM混淆，借助IDA-Edit-Plugins-FindHash对哈希算法进行正则匹配，对函数逐个反编译。</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211125102427529.png" alt="image-20211125102427529"></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PYTHON_CONFIGURE_OPTS&#x3D;&quot;--disable-ipv6&quot; proxychains pyenv install 3.9.1</span><br><span class="line">pyenv local 3.9.1</span><br><span class="line">proxychains4 pip install objection&#x3D;&#x3D;1.11.0</span><br><span class="line">adb push frida-server-15.1.12-android-arm64 &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">mv frida-server-15.1.12-android-arm64 fs15112arm64</span><br><span class="line">chmod 777 fs15112arm64</span><br><span class="line">.&#x2F;fs15112arm64</span><br></pre></td></tr></table></figure></blockquote><p>frida -UF  cn.xiaochuankeji.tieba  -l libnet_crypto_findhash_1637807043.js  刷新页面触发sign生成</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211125122227065.png" alt="image-20211125122227065"></p><p>IDA快捷键 G 跳转到65540，F5跳转到伪C代码，</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211125122620830.png" alt="image-20211125122620830"></p><p>尝试hook该函数，这三个参数不确定是指针还是数值，所以先全部做为数值处理，作为long类型看待，防止整数溢出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void hook65540()&#123;</span><br><span class="line">    &#x2F;&#x2F; 加载HookZz</span><br><span class="line">    IHookZz hookZz &#x3D; HookZz.getInstance(emulator);</span><br><span class="line"></span><br><span class="line">    hookZz.wrap(module.base + 0x65540 + 1, new WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; &#x2F;&#x2F; inline wrap导出函数</span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 类似于 frida onEnter</span><br><span class="line">        public void preCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">            &#x2F;&#x2F; 类似于Frida args[0]</span><br><span class="line">            System.out.println(ctx.getR0Long());</span><br><span class="line">            System.out.println(ctx.getR1Long());</span><br><span class="line">            System.out.println(ctx.getR2Long());</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 类似于 frida onLeave</span><br><span class="line">        public void postCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    zuiyou test &#x3D; new zuiyou();</span><br><span class="line">    test.hook65540();</span><br><span class="line">    test.native_init();</span><br><span class="line">    System.out.println(test.callSign());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印入参</p><blockquote><p>3221223188<br>7<br>3221223060</p></blockquote><p>参数2应该是数组，参数1和3则像是地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void hook65540()&#123;</span><br><span class="line">    &#x2F;&#x2F; 加载HookZz</span><br><span class="line">    IHookZz hookZz &#x3D; HookZz.getInstance(emulator);</span><br><span class="line"></span><br><span class="line">    hookZz.wrap(module.base + 0x65540 + 1, new WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; &#x2F;&#x2F; inline wrap导出函数</span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 类似于 frida onEnter</span><br><span class="line">        public void preCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">            &#x2F;&#x2F; 类似于Frida args[0]</span><br><span class="line">            Inspector.inspect(ctx.getR0Pointer().getByteArray(0, 0x10), &quot;Arg1&quot;);</span><br><span class="line">            System.out.println(ctx.getR1Long());</span><br><span class="line">            Inspector.inspect(ctx.getR2Pointer().getByteArray(0, 0x10), &quot;Arg3&quot;);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 类似于 frida onLeave</span><br><span class="line">        public void postCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印地址所指向的内存，类似frida中的dexdump，第二个参数总是和入参的长度一致，默认作为长度。</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211125124133542.png" alt="image-20211125124133542"></p><p>第一个参数就是我们传入的<code>onejane</code>,即<code>public static native String sign(String str, byte[] bArr)</code>第二个参数</p><p>HookZz在执行前，push保存参数，在后面再pop取出参数，我们观察下参数3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void hook65540()&#123;</span><br><span class="line">    &#x2F;&#x2F; 加载HookZz</span><br><span class="line">    IHookZz hookZz &#x3D; HookZz.getInstance(emulator);</span><br><span class="line"></span><br><span class="line">    hookZz.wrap(module.base + 0x65540 + 1, new WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; &#x2F;&#x2F; inline wrap导出函数</span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 类似于 frida onEnter</span><br><span class="line">        public void preCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">            &#x2F;&#x2F; 类似于Frida args[0]</span><br><span class="line">            Inspector.inspect(ctx.getR0Pointer().getByteArray(0, 0x10), &quot;Arg1&quot;);</span><br><span class="line">            System.out.println(ctx.getR1Long());</span><br><span class="line">            Inspector.inspect(ctx.getR2Pointer().getByteArray(0, 0x10), &quot;Arg3&quot;);</span><br><span class="line">            &#x2F;&#x2F; push</span><br><span class="line">            ctx.push(ctx.getR2Pointer());</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 类似于 frida onLeave</span><br><span class="line">        public void postCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">            &#x2F;&#x2F; pop 取出</span><br><span class="line">            Pointer output &#x3D; ctx.pop();</span><br><span class="line">            Inspector.inspect(output.getByteArray(0, 0x10), &quot;Arg3 after function&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211125124347564.png" alt="image-20211125124347564"></p><p>md5有四个iv，该函数中确实也有四个数值，通过H键转成十六进制，和默认的iv值不一致，说明md5算法被魔改了。</p><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211125125021958.png" alt="image-20211125125021958"></p><p>将md5.py中的四个iv改成样本中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"># codeing&#x3D;utf-8</span><br><span class="line"># 引入math模块，因为要用到sin函数</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line"># 定义常量，用于初始化128位变量，注意字节顺序，文中的A&#x3D;0x01234567，这里低值存放低字节，即01 23 45 67，所以运算时A&#x3D;0x67452301，其他类似。</span><br><span class="line"># 这里用字符串的形势，是为了和hex函数的输出统一，hex(10)输出为&#39;0xA&#39;,注意结果为字符串。</span><br><span class="line">A &#x3D; &#39;0x67552301&#39; # &#39;0x67452301&#39;</span><br><span class="line">B &#x3D; &#39;0xEDCDAB89&#39; # &#39;0xefcdab89&#39;</span><br><span class="line">C &#x3D; &#39;0x98BADEFE&#39; # &#39;0x98badcfe&#39;</span><br><span class="line">D &#x3D; &#39;0x16325476&#39; # &#39;0x10325476&#39;</span><br><span class="line"># 定义每轮中用到的函数。L为循环左移，注意左移之后可能会超过32位，所以要和0xffffffff做与运算，确保结果为32位。</span><br><span class="line">F &#x3D; lambda x, y, z: ((x &amp; y) | ((~x) &amp; z))</span><br><span class="line">G &#x3D; lambda x, y, z: ((x &amp; z) | (y &amp; (~z)))</span><br><span class="line">H &#x3D; lambda x, y, z: (x ^ y ^ z)</span><br><span class="line">I &#x3D; lambda x, y, z: (y ^ (x | (~z)))</span><br><span class="line">L &#x3D; lambda x, n: (((x &lt;&lt; n) | (x &gt;&gt; (32 - n))) &amp; (0xffffffff))</span><br><span class="line"></span><br><span class="line"># 定义每轮中循环左移的位数，这里用4个元组表示,用元组是因为速度比列表快。</span><br><span class="line">shi_1 &#x3D; (7, 12, 17, 22) * 4</span><br><span class="line">shi_2 &#x3D; (5, 9, 14, 20) * 4</span><br><span class="line">shi_3 &#x3D; (4, 11, 16, 23) * 4</span><br><span class="line">shi_4 &#x3D; (6, 10, 15, 21) * 4</span><br><span class="line"></span><br><span class="line"># 定义每轮中用到的M[i]次序。</span><br><span class="line">m_1 &#x3D; (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)</span><br><span class="line">m_2 &#x3D; (1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12)</span><br><span class="line">m_3 &#x3D; (5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2)</span><br><span class="line">m_4 &#x3D; (0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义函数，用来产生常数T[i]，常数有可能超过32位，同样需要&amp;0xffffffff操作。注意返回的是十进制的数。</span><br><span class="line">def T(i):</span><br><span class="line">    result &#x3D; (int(4294967296 * abs(math.sin(i)))) &amp; 0xffffffff</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义函数，用来将列表中的元素循环右移。原因是在每轮操作中，先运算A的值，然后是D，C，B，16轮之后右恢复原来顺序，所以只要每次操作第一个元素即可。</span><br><span class="line">def shift(shift_list):</span><br><span class="line">    shift_list &#x3D; [shift_list[3], shift_list[0], shift_list[1], shift_list[2]]</span><br><span class="line">    return shift_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义主要的函数，参数为当做种子的列表，每轮用到的F，G，H，I，生成的M[]，以及循环左移的位数。该函数完成一轮运算。</span><br><span class="line">def fun(fun_list, f, m, shi):</span><br><span class="line">    count &#x3D; 0</span><br><span class="line">    global Ti_count</span><br><span class="line">    # 引入全局变量，T(i)是从1到64循环的。</span><br><span class="line">    while count &lt; 16:</span><br><span class="line">        xx &#x3D; int(fun_list[0], 16) + f(int(fun_list[1], 16), int(fun_list[2], 16), int(fun_list[3], 16)) + int(m[count],</span><br><span class="line">                                                                                                              16) + T(</span><br><span class="line">            Ti_count)</span><br><span class="line">        xx &#x3D; xx &amp; 0xffffffff</span><br><span class="line">        ll &#x3D; L(xx, shi[count])</span><br><span class="line">        # fun_list[0] &#x3D; hex((int(fun_list[1],16) + ll)&amp;(0xffffffff))[:-1]</span><br><span class="line">        fun_list[0] &#x3D; hex((int(fun_list[1], 16) + ll) &amp; (0xffffffff))</span><br><span class="line">        # 最后的[:-1]是为了去除类似&#39;0x12345678L&#39;最后的&#39;L&#39;</span><br><span class="line">        fun_list &#x3D; shift(fun_list)</span><br><span class="line">        count +&#x3D; 1</span><br><span class="line">        Ti_count +&#x3D; 1</span><br><span class="line">        # print (fun_list)</span><br><span class="line">    return fun_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 该函数生成每轮需要的M[]，最后的参数是为了当有很多分组时，进行偏移。</span><br><span class="line">def genM16(order, ascii_list, f_offset):</span><br><span class="line">    ii &#x3D; 0</span><br><span class="line">    m16 &#x3D; [0] * 16</span><br><span class="line">    f_offset &#x3D; f_offset * 64</span><br><span class="line">    for i in order:</span><br><span class="line">        i &#x3D; i * 4</span><br><span class="line">        m16[ii] &#x3D; &#39;0x&#39; + &#39;&#39;.join((ascii_list[i + f_offset] + ascii_list[i + 1 + f_offset] + ascii_list[</span><br><span class="line">            i + 2 + f_offset] + ascii_list[i + 3 + f_offset]).split(&#39;0x&#39;))</span><br><span class="line">        ii +&#x3D; 1</span><br><span class="line">    for c in m16:</span><br><span class="line">        ind &#x3D; m16.index(c)</span><br><span class="line">        m16[ind] &#x3D; reverse_hex(c)</span><br><span class="line">    return m16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 翻转十六进制数的顺序：&#39;0x01234567&#39; &#x3D;&gt; &#39;0x67452301&#39;</span><br><span class="line">def reverse_hex(hex_str):</span><br><span class="line">    hex_str &#x3D; hex_str[2:]</span><br><span class="line">    hex_str_list &#x3D; []</span><br><span class="line">    for i in range(0, len(hex_str), 2):</span><br><span class="line">        hex_str_list.append(hex_str[i:i + 2])</span><br><span class="line">    hex_str_list.reverse()</span><br><span class="line">    hex_str_result &#x3D; &#39;0x&#39; + &#39;&#39;.join(hex_str_list)</span><br><span class="line">    return hex_str_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 显示结果函数，将最后运算的结果列表进行翻转，合并成字符串的操作。</span><br><span class="line">def show_result(f_list):</span><br><span class="line">    result &#x3D; &#39;&#39;</span><br><span class="line">    f_list1 &#x3D; [0] * 4</span><br><span class="line">    for i in f_list:</span><br><span class="line">        f_list1[f_list.index(i)] &#x3D; reverse_hex(i)[2:]</span><br><span class="line">        result &#x3D; result + f_list1[f_list.index(i)]</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 程序主循环</span><br><span class="line">while True:</span><br><span class="line">    abcd_list &#x3D; [A, B, C, D]</span><br><span class="line">    Ti_count &#x3D; 1</span><br><span class="line">    # input_m &#x3D; raw_input(&#39;msg&gt;&gt;&gt;&#39;)</span><br><span class="line">    input_m &#x3D; input(&#39;msg&gt;&gt;&gt;&#39;)</span><br><span class="line">    # 对每一个输入先添加一个&#39;0x80&#39;，即&#39;10000000&#39;</span><br><span class="line">    ascii_list &#x3D; list((map(hex, map(ord, input_m))))</span><br><span class="line">    # print(&#39;ascii_list:&#39;,ascii_list)</span><br><span class="line">    msg_lenth &#x3D; len(ascii_list) * 8</span><br><span class="line">    ascii_list.append(&#39;0x80&#39;)</span><br><span class="line"></span><br><span class="line">    # 补充0</span><br><span class="line">    while (len(ascii_list) * 8 + 64) % 512 !&#x3D; 0:</span><br><span class="line">        ascii_list.append(&#39;0x00&#39;)</span><br><span class="line"></span><br><span class="line">    # 最后64为存放消息长度，注意长度存放顺序低位在前。</span><br><span class="line">    # 例如，消息为&#39;a&#39;，则长度为&#39;0x0800000000000000&#39;</span><br><span class="line">    msg_lenth_0x &#x3D; hex(msg_lenth)[2:]</span><br><span class="line">    msg_lenth_0x &#x3D; &#39;0x&#39; + msg_lenth_0x.rjust(16, &#39;0&#39;)</span><br><span class="line">    msg_lenth_0x_big_order &#x3D; reverse_hex(msg_lenth_0x)[2:]</span><br><span class="line">    msg_lenth_0x_list &#x3D; []</span><br><span class="line">    for i in range(0, len(msg_lenth_0x_big_order), 2):</span><br><span class="line">        msg_lenth_0x_list.append(&#39;0x&#39; + msg_lenth_0x_big_order[i:i + 2])</span><br><span class="line">    ascii_list.extend(msg_lenth_0x_list)</span><br><span class="line">    # print  (ascii_list)</span><br><span class="line"></span><br><span class="line">    # 对每个分组进行4轮运算</span><br><span class="line">    for i in range(0, len(ascii_list) &#x2F;&#x2F; 64):</span><br><span class="line">        # 将最初128位种子存放在变量中，</span><br><span class="line">        aa, bb, cc, dd &#x3D; abcd_list</span><br><span class="line">        # 根据顺序产生每轮M[]列表</span><br><span class="line">        order_1 &#x3D; genM16(m_1, ascii_list, i)</span><br><span class="line">        order_2 &#x3D; genM16(m_2, ascii_list, i)</span><br><span class="line">        order_3 &#x3D; genM16(m_3, ascii_list, i)</span><br><span class="line">        order_4 &#x3D; genM16(m_4, ascii_list, i)</span><br><span class="line">        # 主要四轮运算，注意打印结果列表已经被进行过右移操作！</span><br><span class="line">        abcd_list &#x3D; fun(abcd_list, F, order_1, shi_1)</span><br><span class="line">        # print (&#39;--------------------------------------&#39;)</span><br><span class="line">        abcd_list &#x3D; fun(abcd_list, G, order_2, shi_2)</span><br><span class="line">        # print (&#39;--------------------------------------&#39;)</span><br><span class="line">        abcd_list &#x3D; fun(abcd_list, H, order_3, shi_3)</span><br><span class="line">        # print (&#39;--------------------------------------&#39;)</span><br><span class="line">        abcd_list &#x3D; fun(abcd_list, I, order_4, shi_4)</span><br><span class="line">        # print (&#39;--------------------------------------&#39;)</span><br><span class="line">        # 将最后输出与最初128位种子相加，注意，最初种子不能直接使用abcd_list[0]等，因为abcd_list已经被改变</span><br><span class="line">        output_a &#x3D; hex((int(abcd_list[0], 16) + int(aa, 16)) &amp; 0xffffffff)</span><br><span class="line">        output_b &#x3D; hex((int(abcd_list[1], 16) + int(bb, 16)) &amp; 0xffffffff)</span><br><span class="line">        output_c &#x3D; hex((int(abcd_list[2], 16) + int(cc, 16)) &amp; 0xffffffff)</span><br><span class="line">        output_d &#x3D; hex((int(abcd_list[3], 16) + int(dd, 16)) &amp; 0xffffffff)</span><br><span class="line">        # 将输出放到列表中，作为下一次128位种子</span><br><span class="line">        abcd_list &#x3D; [output_a, output_b, output_c, output_d]</span><br><span class="line">        # 将全局变量Ti_count恢复，一遍开始下一个分组的操作。</span><br><span class="line">        Ti_count &#x3D; 1</span><br><span class="line">        # 最后调用函数，格式化输出</span><br><span class="line">    print(&#39;md5&gt;&gt;&gt;&#39; + show_result(abcd_list))</span><br><span class="line">    # 0CC175B9C0F1B6A831C399E269772661</span><br><span class="line">    break</span><br></pre></td></tr></table></figure><blockquote><p>msg&gt;&gt;&gt;onejane<br>md5&gt;&gt;&gt;abb01439f7c91b4a4aa431a4dee8aba0</p></blockquote><p>返回的结果和unidbg中的Arg3的结果一致，<code>AB B0 14 39 F7 C9 1B 4A 4A A4 31 A4 DE E8 AB A0    ...9...JJ.1.....</code>，因此可以断定，此处魔改确实只魔改了IV的md5算法。</p><h2 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h2><h3 id="Unidbg-1"><a href="#Unidbg-1" class="headerlink" title="Unidbg"></a>Unidbg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public void callMd5()&#123;</span><br><span class="line">    List&lt;Object&gt; list &#x3D; new ArrayList&lt;&gt;(10);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; arg1</span><br><span class="line">    String input &#x3D; &quot;onejane&quot;;</span><br><span class="line">    &#x2F;&#x2F; malloc memory</span><br><span class="line">    MemoryBlock memoryBlock1 &#x3D; emulator.getMemory().malloc(16, false);</span><br><span class="line">    &#x2F;&#x2F; get memory pointer</span><br><span class="line">    UnidbgPointer input_ptr&#x3D;memoryBlock1.getPointer();</span><br><span class="line">    &#x2F;&#x2F; write plainText on it</span><br><span class="line">    input_ptr.write(input.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; arg2</span><br><span class="line">    int input_length &#x3D; input.length();</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; arg3 -- buffer</span><br><span class="line">    MemoryBlock memoryBlock2 &#x3D; emulator.getMemory().malloc(16, false);</span><br><span class="line">    UnidbgPointer output_buffer&#x3D;memoryBlock2.getPointer();</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 填入参入</span><br><span class="line">    list.add(input_ptr);</span><br><span class="line">    list.add(input_length);</span><br><span class="line">    list.add(output_buffer);</span><br><span class="line">    &#x2F;&#x2F; run</span><br><span class="line">    module.callFunction(emulator, 0x65540 + 1, list.toArray());</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; print arg3</span><br><span class="line">    Inspector.inspect(output_buffer.getByteArray(0, 0x10), &quot;output&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211125130632061.png" alt="image-20211125130632061"></p><h3 id="Frida-1"><a href="#Frida-1" class="headerlink" title="Frida"></a>Frida</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function call_65540(base_addr)&#123;</span><br><span class="line">    &#x2F;&#x2F; 函数在内存中的地址</span><br><span class="line">    var real_addr &#x3D; base_addr.add(0x65541)</span><br><span class="line">    var md5_function &#x3D; new NativeFunction(real_addr, &quot;int&quot;, [&quot;pointer&quot;, &quot;int&quot;, &quot;pointer&quot;])</span><br><span class="line">    &#x2F;&#x2F; 参数1 明文字符串的指针</span><br><span class="line">    var input &#x3D; &quot;onejane&quot;;</span><br><span class="line">    var arg1 &#x3D; Memory.allocUtf8String(input);</span><br><span class="line">    &#x2F;&#x2F; 参数2 明文长度</span><br><span class="line">    var arg2 &#x3D; input.length;</span><br><span class="line">    &#x2F;&#x2F; 参数3，存放结果的buffer</span><br><span class="line">    var arg3 &#x3D; Memory.alloc(16);</span><br><span class="line">    md5_function(arg1, arg2, arg3);</span><br><span class="line">    console.log(hexdump(arg3,&#123;length:0x10&#125;));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function callMd5()&#123;</span><br><span class="line">    &#x2F;&#x2F; 确定SO 的基地址</span><br><span class="line">    var base_addr &#x3D; Module.findBaseAddress(&quot;libnet_crypto.so&quot;);</span><br><span class="line">    call_65540(base_addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/11/SO%E9%80%86%E5%90%91%E4%B9%8B%E6%9C%80%E5%8F%B3sign%E5%88%86%E6%9E%90/image-20211125130424025.png" alt="image-20211125130424025"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文针对最右app的sign进行抽丝剥茧的分析，利用Frida的Hook及RPC主动调用，Xposed函数调用，Unidbg补环境模拟执行so等手段实现so逆向分析，最终得出核心算法通过魔改md5实现算法还原。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> unidbg </tag>
            
            <tag> ida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向之微博国际版登陆分析</title>
      <link href="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/"/>
      <url>/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><h2 id="Charles本地证书"><a href="#Charles本地证书" class="headerlink" title="Charles本地证书"></a>Charles本地证书</h2><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20220106102345520.png" alt="image-20220106102345520"></p><p>系统证书目录：/system/etc/security/cacerts/ </p><p>其中的每个证书的命名规则如下： <Certificate_Hash>. 文件名是一个Hash值，而后缀是一个数字。 </Certificate_Hash></p><p>文件名可以用下面的命令计算出来： openssl x509 -subject_hash_old -in <Certificate_File> </Certificate_File></p><p>后缀名的数字是为了防止文件名冲突的，比如如果两个证书算出的Hash值是一样的话，那么一个证书的后缀名数字可以设置成0，而另一个证书的后缀名数字可以设置成1</p><p>安卓8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;</span><br><span class="line">mount -o remount,rw &#x2F;</span><br><span class="line">mount -o remount,rw &#x2F;system</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">mount -o remount,ro &#x2F;</span><br><span class="line">mount -o remount,ro &#x2F;system</span><br></pre></td></tr></table></figure><p>安卓7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;</span><br><span class="line">mount -o rw,remount &#x2F;system</span><br><span class="line">mount -o rw,remount &#x2F;</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">mount -o ro,remount &#x2F;system</span><br><span class="line">mount -o ro,remount &#x2F;</span><br></pre></td></tr></table></figure><p>重启</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20220106102744607.png" alt="image-20220106102744607"></p><h2 id="ssl-pinning"><a href="#ssl-pinning" class="headerlink" title="ssl pinning"></a>ssl pinning</h2><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211105204214989.png" alt="image-20211105204214989"></p><p>xposed+justTrustMe.apk破解ssl pinning</p><p>抓包登录<code>http://api.weibo.cn/2/account/login</code>，账户密码为188888888/123456</p><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>c</td><td>weicoabroad</td></tr><tr><td>i</td><td>3655223</td></tr><tr><td>s</td><td>7c5edcf8</td></tr><tr><td>u</td><td>188888888</td></tr><tr><td>p</td><td>bFbQbLlD4PMcp8gOTSxh3NFS4g2VJIh5Vw6k62wAq49BLlQaeeVDAYBL4iqwY7AHup8LZRGrfHsf+/zP246oBg+LV3UqK+3IpZ6qP654NkEUH/YNzg+JP8WbMmxTE4mZsddMReBquawLm1WwN86m7WRiVO0GBxznHvyK/h5uhmk=</td></tr><tr><td>getuser</td><td>1</td></tr><tr><td>getoauth</td><td>1</td></tr><tr><td>getcookie</td><td>1</td></tr><tr><td>lang</td><td>zh_CN_#Hans</td></tr></tbody></table><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>微博1.7.1.apk，多次抓包发现除了p其他值都不变，p看起来像是RSA加密，目标参数i和s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;fs1280arm64</span><br><span class="line">frida -U com.weico.international -l hookEvent.js 事件hook，点击登录后触发点击事件</span><br></pre></td></tr></table></figure><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108155045044.png" alt="image-20211108155045044"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.weico.international.activity.SinaLoginMainActivity --dump-args --dump-backtrace --dump-return  对该类进行hook，重新点击登录</span><br><span class="line">android hooking watch class_method com.weico.international.activity.SinaLoginMainActivity.refreshSinaToken --dump-args --dump-backtrace --dump-return  对refreshSinaToken进行hook</span><br></pre></td></tr></table></figure><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108204950577.png" alt="image-20211108204950577"></p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108205514055.png" alt="image-20211108205514055"></p><p>打开jadx查看refreshSinaToken</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private static void refreshSinaToken(String userName, String password, String sValue, String cpt, String cptcode, WeicoCallbackString callback) &#123;</span><br><span class="line">    Object iValue &#x3D; WeiboSecurityUtils.getIValue(WApplication.cContext);</span><br><span class="line">    Map&lt;String, Object&gt; maps &#x3D; new LinkedHashMap&lt;&gt;();</span><br><span class="line">    maps.put(SinaRetrofitAPI.ParamsKey.c, KeyUtil.WEICO_C_VALUE);</span><br><span class="line">    maps.put(SinaRetrofitAPI.ParamsKey.i, iValue);</span><br><span class="line">    maps.put(SinaRetrofitAPI.ParamsKey.s, sValue);</span><br><span class="line">    maps.put(&quot;u&quot;, userName);</span><br><span class="line">    maps.put(&quot;p&quot;, password);</span><br><span class="line">    maps.put(&quot;getuser&quot;, 1);</span><br><span class="line">    maps.put(&quot;getoauth&quot;, 1);</span><br><span class="line">    maps.put(&quot;getcookie&quot;, 1);</span><br><span class="line">    maps.put(&quot;lang&quot;, Utils.getLocalLanguage());</span><br><span class="line">    if (!TextUtils.isEmpty(cpt)) &#123;</span><br><span class="line">        maps.put(&quot;cpt&quot;, cpt);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!TextUtils.isEmpty(cptcode)) &#123;</span><br><span class="line">        maps.put(&quot;cptcode&quot;, cptcode);</span><br><span class="line">    &#125;</span><br><span class="line">    SinaRetrofitAPI.getWeiboSinaService().login(maps, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上说明在调用<code>refreshSinaToken</code>时加密参数有password，sValue。userName为登录名，cpt为none，cptcode为none。对应请求参数中u对应userName，c=<code>weicoabroad</code>，<code>i=WeiboSecurityUtils.getIValue(WApplication.cContext)</code>，getuser=getoauth=getcookie=1，lang=<code>zh_CN_#Hans</code>，p=password，s=sValue。</p><p>在doLogin中调用了refreshSinaToken，同时也生成了password和sValue的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">private void doLogin(String cpt, String cptcode) &#123;</span><br><span class="line">    this.loadingDialog &#x3D; new EasyDialog.Builder(this.me).progress(true, 0).canceledOnTouchOutside(false).progressColor(Res.getColor(R.color.card_content_text)).show();</span><br><span class="line">    final String userName &#x3D; this.loginNameEditText.getText().toString();</span><br><span class="line">    String password &#x3D; this.loginPasswordEditText.getText().toString();</span><br><span class="line">    final String psd &#x3D; WeicoSecurityUtils.securityPsd(password);</span><br><span class="line">    try &#123;</span><br><span class="line">        String decode &#x3D; WeicoSecurityUtils.decode(KeyUtil.WEICO_PIN);</span><br><span class="line">        LogUtil.d(&quot;decode &quot; + decode + decode.equals(&quot;CypCHG2kSlRkdvr2RG1QF8b2lCWXl7k7&quot;));</span><br><span class="line">        final String sValue &#x3D; WeiboSecurityUtils.calculateSInJava(getApplicationContext(), userName + password, decode);</span><br><span class="line">        refreshSinaToken(userName, psd, sValue, cpt, cptcode, new WeicoCallbackString() &#123;</span><br><span class="line">            &#x2F;* class com.weico.international.activity.SinaLoginMainActivity.AnonymousClass10 *&#x2F;</span><br><span class="line"></span><br><span class="line">            @Override &#x2F;&#x2F; com.weibo.sdk.android.api.WeicoCallbackString</span><br><span class="line">            public void onSuccess(String str, Object bak) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    SinaLoginMainActivity.this.loadingDialog.dismiss();</span><br><span class="line">                    SinaLoginMainActivity.this.parseAccount(SinaLoginMainActivity.this.checkLoginResponseForWeibo(str), userName, psd, sValue);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    SinaLoginMainActivity.this.weibofail();</span><br><span class="line">                    UIManager.showSystemToast(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override &#x2F;&#x2F; com.weibo.sdk.android.api.WeicoCallbackString</span><br><span class="line">            public void onFail(Exception e, Object bak) &#123;</span><br><span class="line">                LogUtil.e(e);</span><br><span class="line">                SinaLoginMainActivity.this.loadingDialog.dismiss();</span><br><span class="line">                SinaLoginMainActivity.this.weibofail();</span><br><span class="line">                UIManager.showSystemToast((int) R.string.Login_failed);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        UIManager.showSystemToast((int) R.string.process_fail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="password"><a href="#password" class="headerlink" title="password"></a>password</h2><p>在<code>WeicoSecurityUtils.securityPsd(password)</code>中将代码拷出来配合<code>android.util.Base64</code>即可完成加密拿到password。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">public class WeiboSecurityUtils &#123;</span><br><span class="line">    &#x2F;&#x2F; password</span><br><span class="line">    private static final String KEY_ALGORITHM &#x3D; &quot;RSA&quot;;</span><br><span class="line">    private static final String KEY_CIPHER_ALGORITHM &#x3D; &quot;RSA&#x2F;ECB&#x2F;PKCS1Padding&quot;;</span><br><span class="line">    private static final int MAX_DECRYPT_BLOCK &#x3D; 128;</span><br><span class="line">    private static final int MAX_ENCRYPT_BLOCK &#x3D; 117;</span><br><span class="line">    private static String publicKeyInner &#x3D; &quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDWcQcgj60fU8fFev9RlvFPg0GcRgHyGFTN9ytE\nLujvfCwGt7n54Q9+k1rDDo+sRQeYdTwA7ZMS8n1RHjZATgmHw9rBBzk&#x2F;cHXAVIgrJrZ5txDdW1i4\n8ZxEarcdSrmlk9ZFSsvGXE8&#x2F;0fZYHM0mr4WaIh2y9E0CNkd0rU9VKAR9RQIDAQAB&quot;;</span><br><span class="line">    private static final String publicKeyString &#x3D; &quot;iMxVDGf9f5Z3P3NsFac7tM7SC6DZDJY+H&#x2F;vXc+xv3HlT2E&#x2F;LUzWf5fct2P0VauekLzNAaNsH93SZ\n2Z3jUc&#x2F;0x81FLThPwI8cexCuRT7P1bdnmcwhjZmW3Lc1FCu2K6iBuVQ9I51TR9eTU2lNcq4AW8WV\nEWtwIj6EpLFzQ3qOm3AY4UNgcGrNYYBbF+SiUkchdXbxYRBNFkguDiayaJzMC&#x2F;5WmTrEnQ0xXwmy\nA2lWpZ6+sUlyDRU&#x2F;HvPh5Oto0xpuLc6bIjfl0b+PSjxh5e&#x2F;7&#x2F;4jXoYoUfdm3r2FtPKJtQ2NeKnsp\nOCdk6HNULtk5WSnkBKjufQqoZblvdrEiixnogQ&quot;;</span><br><span class="line">    public static final String WEICO_PIN &#x3D; &quot;Fp1vyiH7EkHmHl6ixX9RmVYy5ynZDnmDZZgp7s7vNq2wfV5aLrM4dPCQiI6jboMS4zu19F66OucE\n9HTRWsC9ksQxuhhsBeBUWJTNeojX076C9gmOGESKJczQPFx1RxJfUfTGeGYAvoTSExo1wVa98v3z\nE5gl&#x2F;uaAdduDI59yOZI&quot;;</span><br><span class="line">    final static BASE64Encoder encoder &#x3D; new BASE64Encoder();</span><br><span class="line">    final static BASE64Decoder decoder &#x3D; new BASE64Decoder();</span><br><span class="line"></span><br><span class="line">    public static String securityPsd(String password) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return new String(Base64.encode(encryptByPublicKey(password.getBytes(), decode(publicKeyString)), 2));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static byte[] encryptByPublicKey(byte[] data, String publicKey) throws Exception &#123;</span><br><span class="line">        byte[] cache;</span><br><span class="line">        PublicKey publicK &#x3D; KeyFactory.getInstance(KEY_ALGORITHM).generatePublic(new X509EncodedKeySpec(Base64.decode(publicKey.getBytes(), 2)));</span><br><span class="line">        Cipher cipher &#x3D; Cipher.getInstance(KEY_CIPHER_ALGORITHM);</span><br><span class="line">        cipher.init(1, publicK);</span><br><span class="line">        int inputLen &#x3D; data.length;</span><br><span class="line">        ByteArrayOutputStream out &#x3D; new ByteArrayOutputStream();</span><br><span class="line">        int offSet &#x3D; 0;</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        while (inputLen - offSet &gt; 0) &#123;</span><br><span class="line">            if (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;</span><br><span class="line">                cache &#x3D; cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                cache &#x3D; cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(cache, 0, cache.length);</span><br><span class="line">            i++;</span><br><span class="line">            offSet &#x3D; i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">        &#125;</span><br><span class="line">        byte[] encryptedData &#x3D; out.toByteArray();</span><br><span class="line">        out.close();</span><br><span class="line">        return encryptedData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String decode(String encryptedStr) throws Exception &#123;</span><br><span class="line">        return new String(decryptByPublicKey(Base64.decode(encryptedStr, 1), publicKeyInner));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] decryptByPublicKey(byte[] encryptedData, String publicKey) throws Exception &#123;</span><br><span class="line">        byte[] cache;</span><br><span class="line">        Key publicK &#x3D; KeyFactory.getInstance(KEY_ALGORITHM).generatePublic(new X509EncodedKeySpec(Base64.decode(publicKey, 1)));</span><br><span class="line">        Cipher cipher &#x3D; Cipher.getInstance(KEY_CIPHER_ALGORITHM);</span><br><span class="line">        cipher.init(2, publicK);</span><br><span class="line">        int inputLen &#x3D; encryptedData.length;</span><br><span class="line">        ByteArrayOutputStream out &#x3D; new ByteArrayOutputStream();</span><br><span class="line">        int offSet &#x3D; 0;</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        while (inputLen - offSet &gt; 0) &#123;</span><br><span class="line">            if (inputLen - offSet &gt; 128) &#123;</span><br><span class="line">                cache &#x3D; cipher.doFinal(encryptedData, offSet, 128);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                cache &#x3D; cipher.doFinal(encryptedData, offSet, inputLen - offSet);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(cache, 0, cache.length);</span><br><span class="line">            i++;</span><br><span class="line">            offSet &#x3D; i * 128;</span><br><span class="line">        &#125;</span><br><span class="line">        byte[] decryptedData &#x3D; out.toByteArray();</span><br><span class="line">        out.close();</span><br><span class="line">        return decryptedData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sValue"><a href="#sValue" class="headerlink" title="sValue"></a>sValue</h2><p>跟进<code>final String sValue = WeiboSecurityUtils.calculateSInJava(getApplicationContext(), userName + password, decode);</code>参数分别为context，账户+密码，<code>decode = WeicoSecurityUtils.decode(KeyUtil.WEICO_PIN)</code>，直接用上面扣出的加解密逻辑即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static String calculateSInJava(Context context, String srcArray, String pin) &#123;</span><br><span class="line">    String str;</span><br><span class="line">    synchronized (mCalculateSLock) &#123;</span><br><span class="line">        if (srcArray.equals(sSeed) &amp;&amp; !TextUtils.isEmpty(sValue)) &#123;</span><br><span class="line">            str &#x3D; sValue;</span><br><span class="line">        &#125; else if (context !&#x3D; null) &#123;</span><br><span class="line">            sSeed &#x3D; srcArray;</span><br><span class="line">            sValue &#x3D; getInstance().calculateS(context.getApplicationContext(), srcArray, pin);</span><br><span class="line">            str &#x3D; sValue;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            str &#x3D; &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>getInstance().calculateS</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    System.loadLibrary(&quot;utility&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public native String calculateS(Context context, String str, String str2);</span><br></pre></td></tr></table></figure><p>可以知道该方法定义在了libutility.so中，引出今天的分析so，该方法中参数一是Context上下文，参数二是传入的明文，参数三是固定的值，返回值是8位的Sign，且输入不变的情况下，输出也固定不变。</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108161215489.png" alt="image-20211108161215489"></p><p>静态绑定，F5查看C伪代码，y设置type为JNIEnv*</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108161638232.png" alt="image-20211108161638232"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">if ( sub_1C60(a1, a3) )</span><br><span class="line">&#123;</span><br><span class="line">  if ( (*a1)-&gt;PushLocalFrame(a1, 16) &gt;&#x3D; 0 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 &#x3D; (*a1)-&gt;GetStringUTFChars(a1, a5, 0);</span><br><span class="line">    v18 &#x3D; (char *)(*a1)-&gt;GetStringUTFChars(a1, a4, 0);</span><br><span class="line">    v7 &#x3D; j_strlen(v18);</span><br><span class="line">    v8 &#x3D; v7 + j_strlen(v6) + 1;</span><br><span class="line">    v9 &#x3D; j_malloc(v8);</span><br><span class="line">    j_memset(v9, 0, v8);</span><br><span class="line">    j_strcpy((char *)v9, v18);</span><br><span class="line">    j_strcat((char *)v9, v6);</span><br><span class="line">    v10 &#x3D; (_BYTE *)MDStringOld(v9);</span><br><span class="line">    v11 &#x3D; (char *)j_malloc(9u);</span><br><span class="line">    *v11 &#x3D; v10[1];</span><br><span class="line">    v11[1] &#x3D; v10[5];</span><br><span class="line">    v11[2] &#x3D; v10[2];</span><br><span class="line">    v11[3] &#x3D; v10[10];</span><br><span class="line">    v11[4] &#x3D; v10[17];</span><br><span class="line">    v11[5] &#x3D; v10[9];</span><br><span class="line">    v11[6] &#x3D; v10[25];</span><br><span class="line">    v12 &#x3D; v10[27];</span><br><span class="line">    v11[8] &#x3D; 0;</span><br><span class="line">    v11[7] &#x3D; v12;</span><br><span class="line">    v21 &#x3D; (*a1)-&gt;FindClass(a1, &quot;java&#x2F;lang&#x2F;String&quot;);</span><br><span class="line">    v22 &#x3D; (*a1)-&gt;GetMethodID(a1, v21, &quot;&lt;init&gt;&quot;, &quot;([BLjava&#x2F;lang&#x2F;String;)V&quot;);</span><br><span class="line">    v13 &#x3D; j_strlen(v11);</span><br><span class="line">    v19 &#x3D; (*a1)-&gt;NewByteArray(a1, v13);</span><br><span class="line">    v14 &#x3D; j_strlen(v11);</span><br><span class="line">    (*a1)-&gt;SetByteArrayRegion(a1, v19, 0, v14, v11);</span><br><span class="line">    v15 &#x3D; (*a1)-&gt;NewStringUTF(a1, &quot;utf-8&quot;);</span><br><span class="line">    v16 &#x3D; (*a1)-&gt;NewObject(a1, v21, v22, v19, v15);</span><br><span class="line">    j_free(v11);</span><br><span class="line">    j_free(v9);</span><br><span class="line">    (*a1)-&gt;ReleaseStringUTFChars(a1, (jstring)a4, v18);</span><br><span class="line">    a4 &#x3D; (int)(*a1)-&gt;PopLocalFrame(a1, v16);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    a4 &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">return a4;</span><br></pre></td></tr></table></figure><p>sub_1C60如果返回0，直接返回0，挂了，想必整个if逻辑才是实现加密的流程。</p><h3 id="Unidbg"><a href="#Unidbg" class="headerlink" title="Unidbg"></a>Unidbg</h3><p>搭建<strong>Unidbg</strong>框架，不过没有JNI OnLoad</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class sina extends AbstractJni&#123;</span><br><span class="line">    private final AndroidEmulator emulator;</span><br><span class="line">    private final VM vm;</span><br><span class="line">    private final Module module;</span><br><span class="line"> </span><br><span class="line">    sina() &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span><br><span class="line">        emulator &#x3D; AndroidEmulatorBuilder.for32Bit().setProcessName(&quot;com.sina.International&quot;).build();</span><br><span class="line">        &#x2F;&#x2F; 获取模拟器的内存操作接口</span><br><span class="line">        final Memory memory &#x3D; emulator.getMemory();</span><br><span class="line">        &#x2F;&#x2F; 设置系统类库解析</span><br><span class="line">        memory.setLibraryResolver(new AndroidResolver(23));</span><br><span class="line">        &#x2F;&#x2F; 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span><br><span class="line">        vm &#x3D; emulator.createDalvikVM(new File(&quot;sinaInternational.apk&quot;));</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 加载目标SO</span><br><span class="line">        DalvikModule dm &#x3D; vm.loadLibrary(new File(&quot;libutility.so&quot;), true); &#x2F;&#x2F; 加载so到虚拟内存</span><br><span class="line">        &#x2F;&#x2F;获取本SO模块的句柄,后续需要用它</span><br><span class="line">        module &#x3D; dm.getModule();</span><br><span class="line">        vm.setJni(this); &#x2F;&#x2F; 设置JNI</span><br><span class="line">        vm.setVerbose(true); &#x2F;&#x2F; 打印日志</span><br><span class="line">        &#x2F;&#x2F; 样本连JNI OnLoad都没有</span><br><span class="line">        &#x2F;&#x2F; dm.callJNI_OnLoad(emulator); &#x2F;&#x2F; 调用JNI OnLoad</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        sina test &#x3D; new sina();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alt+g 查看修改当前指令模式，1是Thumb，0是Arm模式，Thumb 指令看作ARM指令压缩形式的子集，添加一个calculateS函数，依然是地址方式调用，ARM32有Thumb和ARM两种指令模式，此处是thumb模式，所以hook的时候地址要在start基础上+1。</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108162945580.png" alt="image-20211108162945580"></p><blockquote><p>ARM模式指令总是4字节长度，Thumb指令长度多数为2字节，少部分指令是4字节。右键查看Text view，IDA-Options-General</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108163426798.png" alt="image-20211108163426798"></p><p>指令大多为两个字节长度，那就是Thumb</p></blockquote><p>除了基本类型，比如int，long等，其他的对象类型一律要手动 addLocalObject。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public String calculateS() throws Exception &#123;</span><br><span class="line">    List&lt;Object&gt; list &#x3D; new ArrayList&lt;&gt;(10);</span><br><span class="line">    list.add(vm.getJNIEnv()); &#x2F;&#x2F; 第一个参数是env</span><br><span class="line">    list.add(0); &#x2F;&#x2F; 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span><br><span class="line">    DvmObject&lt;?&gt; context &#x3D; vm.resolveClass(&quot;android&#x2F;content&#x2F;Context&quot;).newObject(null);&#x2F;&#x2F; context</span><br><span class="line">    list.add(vm.addLocalObject(context));</span><br><span class="line">    list.add(vm.addLocalObject(new StringObject(vm, &quot;188888888123456&quot;)));</span><br><span class="line">    list.add(vm.addLocalObject(new StringObject(vm, WeiboSecurityUtils.decode(WeiboSecurityUtils.WEICO_PIN))));</span><br><span class="line">    Number number &#x3D; module.callFunction(emulator, 0x1E7C + 1, list.toArray())[0];</span><br><span class="line">    String result &#x3D; vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    sina test &#x3D; new sina();</span><br><span class="line">    System.out.println(test.calculateS());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行报错如下，显示的报错所处地址0x2c8d</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108163602626.png" alt="image-20211108163602626"></p><p>g跳转到0x2c8d，F5查看C伪代码，将a1使用快捷键y转成JNI Env，所属函数<code>jbyte *__fastcall sub_2C3C(JNIEnv *a1, int a2)</code></p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108164550912.png" alt="image-20211108164550912"></p><p>这地方出现Signature一定是签名校验了</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108165757993.png" alt="image-20211108165757993"></p><p>x交叉引用</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108170909203.png" alt="image-20211108170909203"></p><p>进入第一条后发现之前的函数sub_1C60，该函数一旦返回0，直接gg，校验成功返回1，继续x交叉引用</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108171144032.png" alt="image-20211108171144032"></p><p>跳转到了一开始的函数<code>Java_com_sina_weibo_security_WeiboSecurityUtils_calculateS</code></p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108171251713.png" alt="image-20211108171251713"></p><p>Tab查看Text View，sub_1C60地址为<code>FF F7 EB FE</code></p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108171340198.png" alt="image-20211108171340198"></p><p>ARM参数传递规则</p><ul><li>r0:参数1，返回时作为返回值1用，通用寄存器1</li><li>r1:参数2，返回值，通用寄存器2</li><li>r2:参数3，通用寄存器</li><li>r3:参数4，通用寄存器</li><li>r4 ~ r8:变量寄存器1，2，3，4，5</li><li>r9:平台寄存器，该寄存器的意义由平台标准定义</li><li>r10,r11:变量寄存器</li><li>r12:内部过程调用寄存器</li><li>r13:栈寄存器SP</li><li>r14:link寄存器</li><li>r15:PC</li></ul><p>我们可以通过<code>mov r0,1</code>实现不执行这个函数，并给出正确的返回值。且这个函数并没有产生一些之后需要使用的值或者中间变量，所以这让我们不需要管别的寄存器。</p><p><a href="https://armconverter.com/" target="_blank" rel="noopener">arm转hex</a>，可以讲hex和arm互相转换</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108172439486.png" alt="image-20211108172439486"></p><p>将<code>sub_1C60</code>地址<code>FF F7 EB FE</code>改为<code>4F F0 01 00</code>，我们可以调用Unicorn对虚拟内存进行patch，Thumb的+1只在运行和Hook时需要考虑，patch不用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void patchVerify()&#123;</span><br><span class="line">    int patchCode &#x3D; 0x4FF00100;</span><br><span class="line">    emulator.getMemory().pointer(module.base + 0x1E86).setInt(0,patchCode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    sina test &#x3D; new sina();</span><br><span class="line">    test.patchVerify();</span><br><span class="line">    System.out.println(test.calculateS()); &#x2F;&#x2F; 7c5edcf8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211109202049242.png" alt="image-20211109202049242"></p><p>当需要动态patch的时候就不能以来网站转换arm来拿到hex了，可以使用Unidbg给我们封装的Patch方法。找到<code>FF F7 EB FE</code>，再用Keystone 把patch代码”mov r0,1”转成机器码，填进去，校验一下长度是否相等即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public void patchVerifyS()&#123;</span><br><span class="line">    &#x2F;&#x2F; 0x1E86为sub_1C60的地址</span><br><span class="line">    Pointer pointer &#x3D; UnidbgPointer.pointer(emulator, module.base + 0x1E86);</span><br><span class="line">    assert pointer !&#x3D; null;</span><br><span class="line">    byte[] code &#x3D; pointer.getByteArray(0, 4);</span><br><span class="line">    if (!Arrays.equals(code, new byte[]&#123; (byte)0xFF, (byte) 0xF7, (byte) 0xEB, (byte) 0xFE &#125;)) &#123; &#x2F;&#x2F; FF F7 EB FE  BL sub_1C60</span><br><span class="line">        throw new IllegalStateException(Inspector.inspectString(code, &quot;patch32 code&#x3D;&quot; + Arrays.toString(code)));</span><br><span class="line">    &#125;</span><br><span class="line">    try (Keystone keystone &#x3D; new Keystone(KeystoneArchitecture.Arm, KeystoneMode.ArmThumb)) &#123;</span><br><span class="line">        KeystoneEncoded encoded &#x3D; keystone.assemble(&quot;mov r0,1&quot;);</span><br><span class="line">        byte[] patch &#x3D; encoded.getMachineCode();</span><br><span class="line">        if (patch.length !&#x3D; code.length) &#123;</span><br><span class="line">            throw new IllegalStateException(Inspector.inspectString(patch, &quot;patch32 length&#x3D;&quot; + patch.length));</span><br><span class="line">        &#125;</span><br><span class="line">        pointer.write(0, patch, 0, patch.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据伪C代码分析，利用Unidbg实现算法，将text和key拼接起来，然后放到<code>MDStringOld</code>函数中，出来的结果，从中分别抽出第1，5，2，10，17，9，25，27位就是结果了。</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108174300477.png" alt="image-20211108174300477"></p><p>双击进入<code>MDStringOld</code>,tab进入Text View，hook地址为0x1BD0+1</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211108174846870.png" alt="image-20211108174846870"></p><blockquote><p>Unidbg内嵌了多种Hook工具，目前主要是四种，Dobby，HookZz，xHook，Whale</p><ul><li>xHook 是爱奇艺开源的基于PLT HOOK的Hook框架，它无法Hook不在符号表里的函数，也不支持inline hook，这在我们的逆向分析中是无法忍受的，所以在这里不去理会它。</li><li>Whale 在Unidbg的测试用例中只有对符号表函数的Hook，没看到Inline Hook 或者 非导出函数的Hook，所以也不去考虑。</li><li>HookZz是Dobby的前身，两者都可以Hook 非导出表中的函数，即IDA中显示为sub_xxx的函数，也都可以进行inline hook，所以二选一就行了。我喜欢HookZz这个名字，所以就HookZz了。使用HookZz hook MDStringOld函数，MDStringOld是导出函数，可以传入符号名，解析地址，但管他什么findsymbol，findExport呢，我就认准地址，地址，yyds。</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public void HookMDStringold()&#123;</span><br><span class="line">    &#x2F;&#x2F; 加载HookZz</span><br><span class="line">    IHookZz hookZz &#x3D; HookZz.getInstance(emulator);</span><br><span class="line"> </span><br><span class="line">    hookZz.wrap(module.base + 0x1BD0 + 1, new WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; &#x2F;&#x2F; inline wrap导出函数</span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 类似于 frida onEnter</span><br><span class="line">        public void preCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">            &#x2F;&#x2F; 类似于Frida args[0]</span><br><span class="line">            Pointer input &#x3D; ctx.getPointerArg(0);</span><br><span class="line">            System.out.println(&quot;input:&quot; + input.getString(0));</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        @Override</span><br><span class="line">        &#x2F;&#x2F; 类似于 frida onLeave</span><br><span class="line">        public void postCall(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123;</span><br><span class="line">            Pointer result &#x3D; ctx.getPointerArg(0);</span><br><span class="line">            System.out.println(&quot;input:&quot; + result.getString(0));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    sina test &#x3D; new sina();</span><br><span class="line">    test.patchVerify1();</span><br><span class="line">    test.HookMDStringold();</span><br><span class="line">    System.out.println(test.calculateS());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211109202250718.png" alt="image-20211109202250718"></p><h3 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h3><p>打印<code>MDStringOld</code>的参数和返回值，其中0x1BD0为<code>MDStringOld</code>起始地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function hookMDStringOld() &#123;</span><br><span class="line">    var baseAddr &#x3D; Module.findBaseAddress(&quot;libutility.so&quot;)</span><br><span class="line">    var MDStringOld &#x3D; baseAddr.add(0x1BD0).add(0x1)</span><br><span class="line">    Interceptor.attach(MDStringOld, &#123;</span><br><span class="line">        onEnter: function (args) &#123;</span><br><span class="line">            console.log(&quot;input:\n&quot;, hexdump(this.arg0))</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: function (retval) &#123;</span><br><span class="line">            console.log(&quot;result:\n&quot;, hexdump(retval))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iValue"><a href="#iValue" class="headerlink" title="iValue"></a>iValue</h2><p>跟进<code>Object iValue = WeiboSecurityUtils.getIValue(WApplication.cContext);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static String getIValue(Context context) &#123;</span><br><span class="line">    if (!TextUtils.isEmpty(sIValue)) &#123;</span><br><span class="line">        return sIValue;</span><br><span class="line">    &#125;</span><br><span class="line">    String deviceSerial &#x3D; getImei(context);</span><br><span class="line">    if (TextUtils.isEmpty(deviceSerial)) &#123;</span><br><span class="line">        deviceSerial &#x3D; getWifiMac(context);</span><br><span class="line">    &#125;</span><br><span class="line">    if (TextUtils.isEmpty(deviceSerial)) &#123;</span><br><span class="line">        deviceSerial &#x3D; &quot;000000000000000&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (context &#x3D;&#x3D; null || TextUtils.isEmpty(deviceSerial)) &#123;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    String iValue &#x3D; getInstance().getIValue(context.getApplicationContext(), deviceSerial);</span><br><span class="line">    sIValue &#x3D; iValue;</span><br><span class="line">    return iValue;</span><br><span class="line">&#125;</span><br><span class="line">public native String getIValue(Context context, String str);</span><br></pre></td></tr></table></figure><p>以上逻辑中参数<code>deviceSerial</code>通过getWifiMac或者getImei获取，使用Frida<strong>主动调用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function getDeviceSerial()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.choose(&quot;com.sina.weibo.security.WeiboSecurityUtils&quot;,&#123;</span><br><span class="line">            onMatch:function(ins)&#123;</span><br><span class="line">                &#x2F;&#x2F; 获取context</span><br><span class="line">                var current_application &#x3D; Java.use(&#39;android.app.ActivityThread&#39;).currentApplication();</span><br><span class="line">                var context &#x3D; current_application.getApplicationContext();</span><br><span class="line">&#x2F;&#x2F; 动态方法choose onMatch找到实例进行调用</span><br><span class="line">                console.log(&quot;found ins &#x3D;&gt; &quot;,ins);</span><br><span class="line">&#x2F;&#x2F; smali或objection看真实方法名</span><br><span class="line">                console.log(&quot;imei&quot;,ins.getImei(context))</span><br><span class="line">                console.log(&quot;getWifiMac&quot;,ins.getWifiMac(context))</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete:function()&#123;</span><br><span class="line">                console.log(&quot;Search completed!&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(&quot;Start hook&quot;)</span><br><span class="line">    getDeviceSerial()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211110101058565.png" alt="image-20211110101058565"></p><p>拿到了imei作为deviceSerial，IDA中该搜索getIValue，1EF4为起始地址</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211110101308515.png" alt="image-20211110101308515"></p><p>设置type为JNIEnv*</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211109204732446.png" alt="image-20211109204732446"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public String calculateI()&#123;</span><br><span class="line">    List&lt;Object&gt; list &#x3D; new ArrayList&lt;&gt;(10);</span><br><span class="line">    list.add(vm.getJNIEnv()); &#x2F;&#x2F; 第一个参数是env</span><br><span class="line">    list.add(0); &#x2F;&#x2F; 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span><br><span class="line">    DvmObject&lt;?&gt; context &#x3D; vm.resolveClass(&quot;android&#x2F;content&#x2F;Context&quot;).newObject(null);&#x2F;&#x2F; context</span><br><span class="line">    list.add(vm.addLocalObject(context));</span><br><span class="line">    &#x2F;&#x2F; imei</span><br><span class="line">    list.add(vm.addLocalObject(new StringObject(vm, &quot;352530084364850&quot;)));</span><br><span class="line">    Number number &#x3D; module.callFunction(emulator, 0x1FE4 + 1, list.toArray())[0];</span><br><span class="line">    String result &#x3D; vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    sina test &#x3D; new sina();</span><br><span class="line">    System.out.println(test.calculateI());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错位置在0x2c8d</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211110101527159.png" alt="image-20211110101527159"></p><p>g跳转过去</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211110101647241.png" alt="image-20211110101647241"></p><p>F5查看源码在方法<code>jbyte *__fastcall sub_2C3C(JNIEnv *a1, int a2)</code>中，x交叉引用</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211110101730772.png" alt="image-20211110101730772"></p><p>看到熟悉的sub_1C60，继续x交叉引用，找到getIValue中的sub_1C60</p><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211110101758622.png" alt="image-20211110101758622"></p><p>​    <img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211110101902313.png" alt="image-20211110101902313"></p><p>tab进入汇编模式<code>.text:00001FFE FF F7 2F FE                 BL      sub_1C60</code>，降sub_1C60改为1即可，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void patchVerifyI()&#123;</span><br><span class="line">    &#x2F;&#x2F; Java_com_sina_weibo_security_WeiboSecurityUtils_getIValue中的sub_1C60</span><br><span class="line">    &#x2F;&#x2F; 00001FFE FF F7 2F FE                 BL      sub_1C60</span><br><span class="line">    Pointer pointer &#x3D; UnidbgPointer.pointer(emulator, module.base + 0x1FFE);</span><br><span class="line">    assert pointer !&#x3D; null;</span><br><span class="line">    byte[] code &#x3D; pointer.getByteArray(0, 4);</span><br><span class="line">    if (!Arrays.equals(code, new byte[]&#123; (byte)0xFF, (byte) 0xF7, (byte) 0x2F, (byte) 0xFE &#125;)) &#123;</span><br><span class="line">        throw new IllegalStateException(Inspector.inspectString(code, &quot;patch32 code&#x3D;&quot; + Arrays.toString(code)));</span><br><span class="line">    &#125;</span><br><span class="line">    try (Keystone keystone &#x3D; new Keystone(KeystoneArchitecture.Arm, KeystoneMode.ArmThumb)) &#123;</span><br><span class="line">        KeystoneEncoded encoded &#x3D; keystone.assemble(&quot;mov r0,1&quot;);</span><br><span class="line">        byte[] patch &#x3D; encoded.getMachineCode();</span><br><span class="line">        if (patch.length !&#x3D; code.length) &#123;</span><br><span class="line">            throw new IllegalStateException(Inspector.inspectString(patch, &quot;patch32 length&#x3D;&quot; + patch.length));</span><br><span class="line">        &#125;</span><br><span class="line">        pointer.write(0, patch, 0, patch.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211110103843824.png" alt="image-20211110103843824"></p><p>接下来双击dword_7068找到地址00007068，修改为0x0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public void patchVerifyI()&#123;</span><br><span class="line">    &#x2F;&#x2F; Java_com_sina_weibo_security_WeiboSecurityUtils_getIValue中的sub_1C60</span><br><span class="line">    &#x2F;&#x2F; 00001FFE FF F7 2F FE                 BL      sub_1C60</span><br><span class="line">    Pointer pointer &#x3D; UnidbgPointer.pointer(emulator, module.base + 0x1FFE);</span><br><span class="line">    assert pointer !&#x3D; null;</span><br><span class="line">    byte[] code &#x3D; pointer.getByteArray(0, 4);</span><br><span class="line">    if (!Arrays.equals(code, new byte[]&#123; (byte)0xFF, (byte) 0xF7, (byte) 0x2F, (byte) 0xFE &#125;)) &#123;</span><br><span class="line">        throw new IllegalStateException(Inspector.inspectString(code, &quot;patch32 code&#x3D;&quot; + Arrays.toString(code)));</span><br><span class="line">    &#125;</span><br><span class="line">    try (Keystone keystone &#x3D; new Keystone(KeystoneArchitecture.Arm, KeystoneMode.ArmThumb)) &#123;</span><br><span class="line">        KeystoneEncoded encoded &#x3D; keystone.assemble(&quot;mov r0,1&quot;);</span><br><span class="line">        byte[] patch &#x3D; encoded.getMachineCode();</span><br><span class="line">        if (patch.length !&#x3D; code.length) &#123;</span><br><span class="line">            throw new IllegalStateException(Inspector.inspectString(patch, &quot;patch32 length&#x3D;&quot; + patch.length));</span><br><span class="line">        &#125;</span><br><span class="line">        pointer.write(0, patch, 0, patch.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UnidbgPointer basePoint &#x3D; new UnidbgPointer(emulator,(module.base)+0x7068,4);</span><br><span class="line">    int[] javmarr &#x3D; &#123;(int)(0x0)&#125;;</span><br><span class="line">    basePoint.write(0,javmarr,0,1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    Map&lt;String, Object&gt; param &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">    sina test &#x3D; new sina();</span><br><span class="line">    test.patchVerifyI();</span><br><span class="line">    test.HookMDStringold();</span><br><span class="line">    test.patchVerifyS();</span><br><span class="line">    param.put(&quot;c&quot;, &quot;weicoabroad&quot;);</span><br><span class="line">    param.put(&quot;i&quot;, test.calculateI());</span><br><span class="line">    param.put(&quot;s&quot;, test.calculateS());</span><br><span class="line">    param.put(&quot;u&quot;, &quot;188888888&quot;);</span><br><span class="line">    param.put(&quot;p&quot;, WeiboSecurityUtils.securityPsd(&quot;123456&quot;));</span><br><span class="line">    param.put(&quot;getuser&quot;, &quot;1&quot;);</span><br><span class="line">    param.put(&quot;getoauth&quot;, &quot;1&quot;);</span><br><span class="line">    param.put(&quot;getcookie&quot;, &quot;1&quot;);</span><br><span class="line">    param.put(&quot;lang&quot;, &quot;zh_CN_#Hans&quot;);</span><br><span class="line">    for (Map.Entry&lt;String, Object&gt; entry : param.entrySet()) &#123;</span><br><span class="line">        System.out.println(entry.getKey() + &quot;---&gt;&quot; + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    String result &#x3D; HttpUtils.postRequest(&quot;http:&#x2F;&#x2F;api.weibo.cn&#x2F;2&#x2F;account&#x2F;login&quot;, param);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/09/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%BE%AE%E5%8D%9A%E5%9B%BD%E9%99%85%E7%89%88%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/image-20211110105140167.png" alt="image-20211110105140167"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次案例中使用xposed破解ssl pinning反抓包，结合objection，frida和unidbg针对so层修改opcode，完成参数的逆向分析和主动调用。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> unidbg </tag>
            
            <tag> ida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向之Unidbg模拟执行入门</title>
      <link href="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/"/>
      <url>/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><h2 id="Charles本地证书"><a href="#Charles本地证书" class="headerlink" title="Charles本地证书"></a>Charles本地证书</h2><p>安卓8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;</span><br><span class="line">mount -o remount,rw &#x2F;</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">mount -o remount,ro &#x2F;</span><br></pre></td></tr></table></figure><p>安卓7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;</span><br><span class="line">mount -o rw,remount &#x2F;system</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">mount -o ro,remount &#x2F;system</span><br></pre></td></tr></table></figure><h2 id="ssl-pinning"><a href="#ssl-pinning" class="headerlink" title="ssl pinning"></a>ssl pinning</h2><p><img src="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/image-20211105204214989.png" alt="image-20211105204214989"></p><p>xposed+justTrustMe.apk破解ssl pinning</p><h1 id="绿洲3-5-8"><a href="#绿洲3-5-8" class="headerlink" title="绿洲3.5.8"></a>绿洲3.5.8</h1><h2 id="com-weibo-xvideo-NativeApi-s"><a href="#com-weibo-xvideo-NativeApi-s" class="headerlink" title="com.weibo.xvideo.NativeApi.s"></a>com.weibo.xvideo.NativeApi.s</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>根据<a href="https://blog.csdn.net/qq_38851536/article/details/117418582" target="_blank" rel="noopener">白龙大佬</a>的博客，绿洲app脱壳后拿到target.dex</p><p><img src="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/image-20211103173220627.png" alt="image-20211103173220627"></p><p>该函数位于 <code>oasiscore</code>即<code>liboasiscore.so</code>中，ida打开该so，搜索不到函数，说明非静态绑定，因为静态绑定的函数需要以固定格式明明。该目标方法是以动态绑定的方式，所以需要先找到so中动态绑定目标的地址，才能定位目标方法的实现。</p><p><img src="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/image-20211103174750071.png" alt="image-20211103174750071"></p><p>native方法动态绑定的实现都放在<code>JNI_OnLoad</code>方法中，首先定位到<code>JNI_OnLoad</code>方法，再去找动态绑定的实现，搜索JNI进入后F5反会汇编发现已经被OLLVM混淆的亲妈都不认识了</p><p><img src="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/image-20211103175405096.png" alt="image-20211103175405096"></p><p>通常使用<a href="https://github.com/lasting-yang/frida_hook_libart/blob/master/hook_RegisterNatives.js" target="_blank" rel="noopener">hook_RegisterNatives</a>获取动态绑定的地址，本文使用<a href="https://github.com/zhkl0228/unidbg" target="_blank" rel="noopener">Unidbg</a>方法，项目中的<code>src/test/java/com/bytedance/frameworks/core/encrypt</code>路径中有一个<code>TTEncrypt</code>测试用例，直接执行其中的<code>main</code>方法，说明项目导入成功。<img src="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/image-20211103174547409.png" alt="image-20211103174547409"></p><h3 id="Unidbg"><a href="#Unidbg" class="headerlink" title="Unidbg"></a>Unidbg</h3><p>搭建模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line">import com.github.unidbg.AndroidEmulator;</span><br><span class="line">import com.github.unidbg.Module;</span><br><span class="line">import com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line">import com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line">import com.github.unidbg.linux.android.dvm.*;</span><br><span class="line">import com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line">import com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 继承AbstractJni类</span><br><span class="line">public class LvZhou extends AbstractJni&#123;</span><br><span class="line">    private final AndroidEmulator emulator;</span><br><span class="line">    private final VM vm;</span><br><span class="line">    private final Module module;</span><br><span class="line"></span><br><span class="line">    LvZhou() &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span><br><span class="line">        emulator &#x3D; AndroidEmulatorBuilder.for32Bit().setProcessName(&quot;com.sina.oasis&quot;).build();</span><br><span class="line">        &#x2F;&#x2F; 获取模拟器的内存操作接口</span><br><span class="line">        final Memory memory &#x3D; emulator.getMemory();</span><br><span class="line">        &#x2F;&#x2F; 设置系统类库解析</span><br><span class="line">        memory.setLibraryResolver(new AndroidResolver(23));</span><br><span class="line">        &#x2F;&#x2F; 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span><br><span class="line">        vm &#x3D; emulator.createDalvikVM(new File(&quot;unidbg-android\\src\\test\\resources\\demo\\lvzhou\\lvzhou.apk&quot;));</span><br><span class="line">        &#x2F;&#x2F; 加载目标SO</span><br><span class="line">        DalvikModule dm &#x3D; vm.loadLibrary(new File(&quot;unidbg-android\\src\\test\\resources\\demo\\lvzhou\\liboasiscore.so&quot;), true); &#x2F;&#x2F; 加载so到虚拟内存</span><br><span class="line">        &#x2F;&#x2F;获取本SO模块的句柄,后续需要用它</span><br><span class="line">        module &#x3D; dm.getModule();</span><br><span class="line">        vm.setJni(this); &#x2F;&#x2F; 设置JNI</span><br><span class="line">        vm.setVerbose(true); &#x2F;&#x2F; 打印日志</span><br><span class="line"></span><br><span class="line">        dm.callJNI_OnLoad(emulator); &#x2F;&#x2F; 调用JNI OnLoad</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        LvZhou test &#x3D; new LvZhou();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/image-20211103175949709.png" alt="image-20211103175949709"></p><p>运行LvZhou.main后打印log中发现JNI OnLoad中主要做了签名校验和动态绑定。在<code>emulator.createDalvikVM</code>不传入apk时填入null，样本在JNI OnLoad中所做的签名校验，就需要我们手动补环境校验了。</p><p>Unidbg封装了相关方法执行JNI函数以及有符号函数等，但需要区分类方法和实例方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    LvZhou test &#x3D; new LvZhou();</span><br><span class="line">    System.out.println(&quot;Native方法返回值：&quot; + test.call_native_s());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * public final native String s(@NotNull byte[] bArr, boolean z)</span><br><span class="line"> * 字节数组需要裹上unidbg的包装类，并加到本地变量里</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">public String call_native_s()&#123;</span><br><span class="line">    &#x2F;&#x2F; 构造jni方法的参数</span><br><span class="line">    List&lt;Object&gt; arg_list &#x3D; new ArrayList&lt;&gt;(10);</span><br><span class="line">    &#x2F;&#x2F; 参数1：JNIEnv *env</span><br><span class="line">    arg_list.add(vm.getJNIEnv());</span><br><span class="line">    &#x2F;&#x2F; 参数2：jobject或jclass 一般用不到,直接填0即可</span><br><span class="line">    arg_list.add(0);</span><br><span class="line">    &#x2F;&#x2F; 参数3：bytes</span><br><span class="line">    String input &#x3D; &quot;aid&#x3D;01A-khBWIm48A079Pz_DMW6PyZR8&quot; +</span><br><span class="line">            &quot;uyTumcCNm4e8awxyC2ANU.&amp;cfrom&#x3D;28B529501&quot; +</span><br><span class="line">            &quot;0&amp;cuid&#x3D;5999578300&amp;noncestr&#x3D;46274W9279Hr1&quot; +</span><br><span class="line">            &quot;X49A5X058z7ZVz024&amp;platform&#x3D;ANDROID&amp;timestamp&quot; +</span><br><span class="line">            &quot;&#x3D;1621437643609&amp;ua&#x3D;Xiaomi-MIX2S__oasis__3.5.8_&quot; +</span><br><span class="line">            &quot;_Android__Android10&amp;version&#x3D;3.5.8&amp;vid&#x3D;10190135&quot; +</span><br><span class="line">            &quot;94003&amp;wm&#x3D;20004_90024&quot;;</span><br><span class="line">    byte[] input_bytes &#x3D; input.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">    ByteArray input_byte_array &#x3D; new ByteArray(vm,input_bytes);</span><br><span class="line">    arg_list.add(vm.addLocalObject(input_byte_array));</span><br><span class="line">    &#x2F;&#x2F; 参数4：boolean  false 填入0</span><br><span class="line">    arg_list.add(0);</span><br><span class="line">    &#x2F;&#x2F; 参数准备完毕 调用目标方法</span><br><span class="line">    Number number &#x3D; module.callFunction(emulator,0xc365,arg_list.toArray())[0];</span><br><span class="line">    return vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试</p><p><img src="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/image-20211105113357770.png" alt="image-20211105113357770"></p><h3 id="ExAndroidNativeEmu"><a href="#ExAndroidNativeEmu" class="headerlink" title="ExAndroidNativeEmu"></a>ExAndroidNativeEmu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:maiyao1988&#x2F;ExAndroidNativeEmu.git</span><br><span class="line">set https_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">set http_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>lvzhou.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import posixpath</span><br><span class="line">from androidemu.emulator import Emulator, logger</span><br><span class="line">from androidemu.java.classes.string import String</span><br><span class="line"></span><br><span class="line"># Initialize emulator</span><br><span class="line">emulator &#x3D; Emulator(</span><br><span class="line">    vfp_inst_set&#x3D;True,</span><br><span class="line">    vfs_root&#x3D;posixpath.join(posixpath.dirname(__file__), &quot;vfs&quot;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 加载SO</span><br><span class="line">lib_module &#x3D; emulator.load_library(&quot;lib\\liboasiscore.so&quot;)</span><br><span class="line"></span><br><span class="line"># find My module</span><br><span class="line">for module in emulator.modules:</span><br><span class="line">    if &quot;liboasiscore&quot; in module.filename:</span><br><span class="line">        base_address &#x3D; module.base</span><br><span class="line">        logger.info(&quot;base_address&#x3D;&gt; 0x%08x - %s&quot; % (module.base, module.filename))</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line"># run jni onload</span><br><span class="line">emulator.call_symbol(lib_module, &#39;JNI_OnLoad&#39;, emulator.java_vm.address_ptr, 0x00)</span><br><span class="line"># 准备参数</span><br><span class="line">a1 &#x3D; &quot;aid&#x3D;01A-khBWIm48A079Pz_DMW6PyZR8uyTumcCNm4e8awxyC2ANU.&amp;cfrom&#x3D;28B5295010&amp;cuid&#x3D;5999578300&amp;noncestr&#x3D;46274W9279Hr1X49A5X058z7ZVz024&amp;platform&#x3D;ANDROID&amp;timestamp&#x3D;1621437643609&amp;ua&#x3D;Xiaomi-MIX2S__oasis__3.5.8__Android__Android10&amp;version&#x3D;3.5.8&amp;vid&#x3D;1019013594003&amp;wm&#x3D;20004_90024&quot;</span><br><span class="line"># 通过地址直接调用</span><br><span class="line">result &#x3D; emulator.call_native(module.base + 0xC365, emulator.java_vm.jni_env.address_ptr, 0x00, String(a1).getBytes(emulator, String(&quot;utf-8&quot;)), 0)</span><br><span class="line"># 打印结果</span><br><span class="line">print(&quot;result:&quot;+ result._String__str)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/image-20211105153307550.png" alt="image-20211105153307550"></p><p>结果和Unidbg一致。</p><h3 id="FindHash"><a href="#FindHash" class="headerlink" title="FindHash"></a><a href="https://github.com/Pr0214/findhash" target="_blank" rel="noopener">FindHash</a></h3><p>输出为32位字符串，可能是哈希算法。</p><p>将findhash.xml和findhash.py放到IDA的plugins目录下，使用IDA7.5加载完so后，在IDA工具栏依次点击edit-&gt;plugin-&gt;findhash即可运行</p><p><img src="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/image-20211105163103136.png" alt="image-20211105163103136"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity top  查看包名为com.sina.oasis</span><br><span class="line">frida -U -f com.sina.oasis -l liboasiscore_findhash_1636100950.js --no-pause</span><br></pre></td></tr></table></figure><blockquote><p>修改frida脚本中<code>setImmediate(main,5000);</code>由于刚启动时，此时目标so还没有加载到内存中，修改后在目标so加载完成后进行hook。根据输出找到对应的函数并分析，很快就定位到0x8AB2这个函数，并且它是MD5_Update函数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function hook_md5_update()&#123;</span><br><span class="line">    var targetSo &#x3D; Module.findBaseAddress(&quot;liboasiscore.so&quot;);</span><br><span class="line">    let relativePtr &#x3D; 0x8AB2 + 1;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Enter&quot;);</span><br><span class="line">    let funcPtr &#x3D; targetSo.add(relativePtr);</span><br><span class="line">    Interceptor.attach(funcPtr,&#123;</span><br><span class="line">        onEnter:function (args) &#123;</span><br><span class="line">            &#x2F;&#x2F; console.log(args[0]);</span><br><span class="line">            console.log(args[2]);</span><br><span class="line">            console.log(hexdump(args[1],&#123;length:args[2].toInt32()&#125;));</span><br><span class="line"></span><br><span class="line">        &#125;,onLeave:function (retval)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">frida -UF -l hookComputeMd5.js</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">b2fa5800  59 50 31 56 74 79 26 24 58 6d 2a 6b 4a 6b 6f 52  YP1Vty&amp;$Xm*kJkoR</span><br><span class="line">b2fa5810  2c 4f 70 6b 26 61 69 64 3d 30 31 41 2d 6b 68 42  ,Opk&amp;aid&#x3D;01A-khB</span><br><span class="line">b2fa5820  57 49 6d 34 38 41 30 37 39 50 7a 5f 44 4d 57 36  WIm48A079Pz_DMW6</span><br><span class="line">b2fa5830  50 79 5a 52 38 75 79 54 75 6d 63 43 4e 6d 34 65  PyZR8uyTumcCNm4e</span><br><span class="line">b2fa5840  38 61 77 78 79 43 32 41 4e 55 2e 26 63 66 72 6f  8awxyC2ANU.&amp;cfro</span><br><span class="line">b2fa5850  6d 3d 32 38 42 35 32 39 35 30 31 30 26 63 75 69  m&#x3D;28B5295010&amp;cui</span><br><span class="line">b2fa5860  64 3d 35 39 39 39 35 37 38 33 30 30 26 6e 6f 6e  d&#x3D;5999578300&amp;non</span><br><span class="line">b2fa5870  63 65 73 74 72 3d 4a 32 33 33 39 67 41 43 79 30  cestr&#x3D;J2339gACy0</span><br><span class="line">b2fa5880  44 35 6b 33 32 39 35 33 71 30 31 67 74 66 36 78  D5k32953q01gtf6x</span><br><span class="line">b2fa5890  30 38 31 39 26 70 6c 61 74 66 6f 72 6d 3d 41 4e  0819&amp;platform&#x3D;AN</span><br><span class="line">b2fa58a0  44 52 4f 49 44 26 74 69 6d 65 73 74 61 6d 70 3d  DROID&amp;timestamp&#x3D;</span><br><span class="line">b2fa58b0  31 36 32 31 35 32 36 32 39 38 31 32 37 26 75 61  1621526298127&amp;ua</span><br><span class="line">b2fa58c0  3d 58 69 61 6f 6d 69 2d 4d 49 58 32 53 5f 5f 6f  &#x3D;Xiaomi-MIX2S__o</span><br><span class="line">b2fa58d0  61 73 69 73 5f 5f 33 2e 35 2e 38 5f 5f 41 6e 64  asis__3.5.8__And</span><br><span class="line">b2fa58e0  72 6f 69 64 5f 5f 41 6e 64 72 6f 69 64 31 30 26  roid__Android10&amp;</span><br><span class="line">b2fa58f0  76 65 72 73 69 6f 6e 3d 33 2e 35 2e 38 26 76 69  version&#x3D;3.5.8&amp;vi</span><br><span class="line">b2fa5900  64 3d 31 30 31 39 30 31 33 35 39 34 30 30 33 26  d&#x3D;1019013594003&amp;</span><br><span class="line">b2fa5910  77 6d 3d 32 30 30 30 34 5f 39 30 30 32 34        wm&#x3D;20004_90024</span><br><span class="line">0x1a</span><br><span class="line">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">bbe3c322  80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">bbe3c332  00 00 00 00 00 00 00 00 00 00                    ..........</span><br><span class="line">0x8</span><br><span class="line">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">bae15ed8  f0 08 00 00 00 00 00 00</span><br></pre></td></tr></table></figure><p>明文是从aid开始的，前面多了一块，这一块每次运行都不变，所以猜测它是盐，使用逆向之友<a href="https://gchq.github.io/CyberChef/#recipe=MD5()&input=WVAxVnR5JiRYbSprSmtvUixPcGsmYWlkPTAxQS1raEJXSW00OEEwNzlQel9ETVc2UHlaUjh1eVR1bWNDTm00ZThhd3h5QzJBTlUuJmNmcm9tPTI4QjUyOTUwMTAmY3VpZD01OTk5NTc4MzAwJm5vbmNlc3RyPTQ2Mjc0VzkyNzlIcjFYNDlBNVgwNTh6N1pWejAyNCZwbGF0Zm9ybT1BTkRST0lEJnRpbWVzdGFtcD0xNjIxNDM3NjQzNjA5JnVhPVhpYW9taS1NSVgyU19fb2FzaXNfXzMuNS44X19BbmRyb2lkX19BbmRyb2lkMTAmdmVyc2lvbj0zLjUuOCZ2aWQ9MTAxOTAxMzU5NDAwMyZ3bT0yMDAwNF85MDAyNA" target="_blank" rel="noopener">Cyberchef</a>测试一下</p><p><img src="/2021/11/03/SO%E9%80%86%E5%90%91%E4%B9%8BUnidbg%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8/1220802944.png" alt="img"></p><h3 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function hookSign()&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var NativeApi &#x3D; Java.use(&#39;com.weibo.xvideo.NativeApi&#39;);</span><br><span class="line">        &#x2F;&#x2F; 使用系统工具类将byte数组转成hex、utf8.</span><br><span class="line">        var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">        NativeApi.s.implementation &#x3D; function (str1, str2)&#123;</span><br><span class="line">            var result &#x3D; this.s(str1, str2);</span><br><span class="line">            console.log(&quot;str:&quot;+ByteString.of(str1).utf8())</span><br><span class="line">            console.log(&quot;hex:&quot;+ByteString.of(str1).hex())</span><br><span class="line">            console.log(result);</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">frida -UF -l hookAndCallLvzhou.js</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> unidbg </tag>
            
            <tag> ida </tag>
            
            <tag> ExAndroidNativeEmu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向之IDA过CrackMe反调试</title>
      <link href="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
      <url>/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h1><p>来自阿里聚安全的Crackme，自毁程序密码_1.0原版.apk</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028131854661.png" alt="image-20211028131854661"></p><p>随机输入密码后报错<code>验证码校验失败</code>，通过jadx-1.2.0搜索后发现调用了校验逻辑在SO层的<code>securityCheck</code>中</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028132440308.png" alt="image-20211028132440308"></p><h1 id="SO分析"><a href="#SO分析" class="headerlink" title="SO分析"></a>SO分析</h1><p>解压该apk后IDA打开<code>自毁程序密码_1.0原版\lib\armeabi\libcrackme.so</code>，搜索java找到<code>securityCheck</code>导出函数</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028132706851.png" alt="image-20211028132706851"></p><p>通过F5将<strong>汇编</strong>转成<strong>伪C代码</strong>，分析大致逻辑后点击v3通过<code>JNIEnv*</code>还原指令</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028132828843.png" alt="image-20211028132828843"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028133142558.png" alt="image-20211028133142558"></p><p>或者通过<strong>Y</strong>修改参数类型</p><p><code>int __fastcall Java_com_yaotong_crackme_MainActivity_securityCheck(JNIEnv *a1, jobject a2, jstring a3)</code></p><p>还原后使用<code>/</code>添加注释，<code>n</code>修改别名为易读变量，输入的字符串和密码逐位对比，</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028133850230.png" alt="image-20211028133850230"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028134025191.png" alt="image-20211028134025191"></p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>将IDA中的<code>D:\IDA 7.0\dbgsrv\android_server</code>拷贝到真机<code>/data/local/tmp</code>下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb push android_server &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">cd &#x2F;data&#x2F;local&#x2F;tmp&#x2F;</span><br><span class="line">mv android_server as7.0</span><br><span class="line">chmod 777 as7.0</span><br><span class="line">.&#x2F;as7.0  在23946端口启动</span><br><span class="line">adb forward tcp:23946 tcp:23946  端口转发</span><br></pre></td></tr></table></figure><p>新建IDA的Instance，打开该app后以attach附加调试</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028140819383.png" alt="image-20211028140819383"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028140843111.png" alt="image-20211028140843111"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028140859678.png" alt="image-20211028140859678"></p><p><code>ctrl+s</code>找到需要调试的so，<code>ctrl+f</code>搜索so名，找到第一个带x权限的so文件双击进入</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028141506740.png" alt="image-20211028141506740"></p><p>函数在内存中绝对地址=so文件基地址+函数地址偏移量，即<code>EF0DD000+11A8=EF0DE1A8</code></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028150803420.png" alt="image-20211028150803420"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028150856645.png" alt="image-20211028150856645"></p><p><code>g</code>跳转到该函数的内存地址中<code>EF0DE1A8</code>，进入该函数中右键加上断点，<code>F8单步不进入函数调试，F7单步进入函数调试</code></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028151440946.png" alt="image-20211028151440946"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028151848042.png" alt="image-20211028151848042"></p><p>F8单步调试或者点击左上角绿色三角按钮，闪退并报错<code>FFFFFFFF</code>，目测加了反调试。</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028152841350.png" alt="image-20211028152841350"></p><p>一般检测是否可调试的技术方案是通过linux系统的ptrace实现，当当应用被调试时应用内存里的TracerPid字段就不为0，只要是不为0的时候，就会直接的退出程序，达到反调试的目的。端点调试报错<code>FFFFFFFF</code>后该TracerPid变成了0。</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028152236652.png" alt="image-20211028152236652"></p><h2 id="反反调试"><a href="#反反调试" class="headerlink" title="反反调试"></a>反反调试</h2><h3 id="附加调试"><a href="#附加调试" class="headerlink" title="附加调试"></a>附加调试</h3><p>程序的so文件在加载阶段会先执行<code>JNI_OnLoad</code>，之后就不再执行，在程序的so文件加载阶段才能给<code>JNI_OnLoad</code>打断点调试即可，首先需要将app回编译添加可调试权限。</p><p>配置Android Killer</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028185542576.png" alt="image-20211028185542576"></p><p>在application中添加**android:debuggable=”true”**，保存后编译生成新apk，卸载原apk后重新安装</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028185825928.png" alt="image-20211028185825928"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">cd &#x2F;data&#x2F;local&#x2F;tmp&#x2F;</span><br><span class="line">.&#x2F;as7.0</span><br><span class="line">adb forward tcp:23946 tcp:23946</span><br><span class="line">adb shell am start -D -n com.yaotong.crackme&#x2F;.MainActivity   以debug方式启动</span><br></pre></td></tr></table></figure><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211027105256522.png" alt="image-20211027105256522"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211027153817469.png" alt="image-20211027153817469"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028190325441.png" alt="image-20211028190325441"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps | findstr com.yaotong.crackme  找到进程id为14383</span><br><span class="line">u0_a72    14383 589   1619304 37312 futex_wait 00f263141c S com.yaotong.crackme</span><br><span class="line">adb forward tcp:8700 jdwp:14383  端口转发</span><br></pre></td></tr></table></figure><p>Debugger-Debugger options</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211027155851356.png" alt="image-20211027155851356"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdb -connect com.sun.jdi.SocketAttach:hostname&#x3D;127.0.0.1,port&#x3D;8700  继续运行程序</span><br><span class="line">设置未捕获的java.lang.Throwable</span><br><span class="line">设置延迟的未捕获的java.lang.Throwable</span><br><span class="line">正在初始化jdb...</span><br></pre></td></tr></table></figure><h3 id="寻找JNI-Onload"><a href="#寻找JNI-Onload" class="headerlink" title="寻找JNI_Onload"></a>寻找JNI_Onload</h3><h4 id="内存计算"><a href="#内存计算" class="headerlink" title="内存计算"></a>内存计算</h4><p>点击左上角运行，直到<code>ctrl+s</code>找到so被加载的时候，找到crackme.so的第一个可执行时机，双击进入找到该so的偏移量</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028191814413.png" alt="image-20211028191814413"></p><p>通过静态分析的JNI_OnLoad地址，相加得到JNI_Onload的内存地址=EF09AB9C</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028192039413.png" alt="image-20211028192039413"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028192144366.png" alt="image-20211028192144366"></p><p><code>g</code>跳转到该地址<code>EF09AB9C</code></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028192238589.png" alt="image-20211028192238589"></p><h4 id="IDA搜索"><a href="#IDA搜索" class="headerlink" title="IDA搜索"></a>IDA搜索</h4><p>Modules中搜索crack，进入so后搜索JNI找到<code>EF09AB9C</code></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028193250882.png" alt="image-20211028193250882"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028193329058.png" alt="image-20211028193329058"></p><h3 id="SO修复"><a href="#SO修复" class="headerlink" title="SO修复"></a>SO修复</h3><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028193555880.png" alt="image-20211028193555880"></p><p>通过反复调试发现在图中断点出BLX R7的位置跳出报错<code>FFFFFFFF</code>，此处应该就是就是反调试检测位置了</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028194259087.png" alt="image-20211028194259087"></p><p>双击或者右侧打开R7寄存器，出现<code>pthread_create</code>新建一个线程不停的检测TracerPid这个字段是否不为0， 不为0，就立即退出程序。</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028194338042.png" alt="image-20211028194338042"></p><p>我们可以通过修改R7为<code>00 00 00 00</code>直接nop掉该指令，因为删除的话so文件有固定格式，多段内容的偏移值容易发生错乱。</p><p>在静态调试页面中找到BLX R7位置，进入Hex View-1，修改指令</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028195314108.png" alt="image-20211028195314108"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028195020110.png" alt="image-20211028195020110"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028195044816.png" alt="image-20211028195044816"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028195131350.png" alt="image-20211028195131350"></p><p>将修改后的so替换原Android Killer中的so，并重新签名打包安装。</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028195315218.png" alt="image-20211028195315218"></p><h2 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;as7.0</span><br><span class="line">adb forward tcp:23946 tcp:23946</span><br></pre></td></tr></table></figure><p>启动好该app后，获取该app的进程id并进程转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps | findstr com.yaotong.crackme</span><br><span class="line">adb forward tcp:8700 jdwp:8741</span><br><span class="line">jdb -connect com.sun.jdi.SocketAttach:hostname&#x3D;127.0.0.1,port&#x3D;8700</span><br></pre></td></tr></table></figure><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028195809434.png" alt="image-20211028195809434"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028202136860.png" alt="image-20211028202136860"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028195904582.png" alt="image-20211028195904582"></p><p>进入断点后，在Modules中搜索crack，直接找到securityCheck函数并<code>g</code>定位到该函数的具体地址<code>EF0DF1A8</code></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028202239022.png" alt="image-20211028202239022"></p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028202400928.png" alt="image-20211028202400928"></p><p>结合静态分析，找到判断的位置并打上断点，这个R3相比就是真实的密码了</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028202625267.png" alt="image-20211028202625267"></p><p>点击左上角启动，输入<code>onejane</code>确认后R0就是我们输入的密码</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028203134231.png" alt="image-20211028203134231"></p><p>F5进入C伪代码后查看<code>v6 = off_EF0E428C</code>密码为<code>aiyou,bucuoo</code>。</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028203231959.png" alt="image-20211028203231959"></p><p>重新输入密码完成So层的逆向。</p><p><img src="/2021/10/28/SO%E9%80%86%E5%90%91%E4%B9%8BIDA%E8%BF%87CrackMe%E5%8F%8D%E8%B0%83%E8%AF%95/image-20211028203444152.png" alt="image-20211028203444152"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>利用Android Killer回编译，IDA逆向SO层转汇编为伪C代码进行动静态分析调试，SO修复反反调试等手段完成该Crackme的逆向。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SO </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猿人学之雪碧图样式干扰</title>
      <link href="/2021/09/17/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E9%9B%AA%E7%A2%A7%E5%9B%BE%E6%A0%B7%E5%BC%8F%E5%B9%B2%E6%89%B0/"/>
      <url>/2021/09/17/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E9%9B%AA%E7%A2%A7%E5%9B%BE%E6%A0%B7%E5%BC%8F%E5%B9%B2%E6%89%B0/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://match.yuanrenxue.com/match/4" target="_blank" rel="noopener">https://match.yuanrenxue.com/match/4</a></p><p><img src="/2021/09/17/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E9%9B%AA%E7%A2%A7%E5%9B%BE%E6%A0%B7%E5%BC%8F%E5%B9%B2%E6%89%B0/image-20210917162428942.png" alt="image-20210917162428942"></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p><a href="https://match.yuanrenxue.com/api/match/4" target="_blank" rel="noopener">https://match.yuanrenxue.com/api/match/4</a></p><p><img src="/2021/09/17/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E9%9B%AA%E7%A2%A7%E5%9B%BE%E6%A0%B7%E5%BC%8F%E5%B9%B2%E6%89%B0/image-20210917162624937.png" alt="image-20210917162624937"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><img src="/2021/09/17/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E9%9B%AA%E7%A2%A7%E5%9B%BE%E6%A0%B7%E5%BC%8F%E5%B9%B2%E6%89%B0/image-20210917162856315.png" alt="image-20210917162856315"></p><p>该页面每个td中img个数和实际展示个数不一致，且部分img被<code>display: none;</code>属性隐藏后个数一致，但img排列组合顺序和实际展示不一致，目测和style中的left属性有关。</p><p>通过抓包分析以上请求中返回的info属性，通过<a href="http://tool.chinaz.com/Tools/jsformat.aspx" target="_blank" rel="noopener">html格式化</a>后，发现是多个td中包裹多个img标签，不过个数和展示的个数不一致，且src中的内容是<code>data:image/png;base64,</code>开头的图片转为base64形式。通过分析将对应的图片转为数字字典如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">image_dict &#x3D; &#123;</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUh...&#39;: 0,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABUAAAAd...&#39;: 6,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAdCAY...&#39;: 8,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABUAAAAcCAYAAAC...&#39;: 1,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABQA...&#39;: 9,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABUAAAAbC...&#39;: 4,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAdCA...&#39;: 2,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABQA...&#39;: 3,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAeCAYAAAAsEj5...&#39;: 7,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABUAAAAcCAY...&#39;: 5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将格式化后的html中的base64图片转为数字</p><p><img src="/2021/09/17/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E9%9B%AA%E7%A2%A7%E5%9B%BE%E6%A0%B7%E5%BC%8F%E5%B9%B2%E6%89%B0/image-20210917164659843.png" alt="image-20210917164659843"></p><p>对比得到两个结论，首先class中去除一个加密字符串的属性，且style中部分标签加上了<code>display: none;</code>属性。说明拿到服务端返回结果后，js中为style加上了display为none的属性。</p><p>全局搜索<code>&#39;display&#39;,&#39;none&#39;</code>或者<code>&#39;display&#39;, &#39;none&#39;</code></p><p><img src="/2021/09/17/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E9%9B%AA%E7%A2%A7%E5%9B%BE%E6%A0%B7%E5%BC%8F%E5%B9%B2%E6%89%B0/image-20210917173431738.png" alt="image-20210917173431738"></p><p>其中data.info就是获取返回内容中info的部分,也就是<code>&lt;td&gt;</code>标签里面的内容，通过JQuery的选择器,选择标签中有number的元素,并将<code>&lt;td&gt;</code>标签的内容添加进去，通过获取data中key和value中的值,并替换一些字符,最后经过md5算法加密,得到一串密文，在密文前面加上一个<code>.</code>,并赋值给变量j_key，通过选择器,选择有密文这个属性的标签,并将其样式设置成<code>display:none</code>,最终再删除属性中的密文</p><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">image_dict &#x3D; &#123;</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUh...&#39;: 0,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABUAAAAd...&#39;: 6,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAdCAY...&#39;: 8,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABUAAAAcCAYAAAC...&#39;: 1,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABQA...&#39;: 9,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABUAAAAbC...&#39;: 4,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAdCA...&#39;: 2,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABQA...&#39;: 3,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAeCAYAAAAsEj5...&#39;: 7,</span><br><span class="line">    &#39;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAABUAAAAcCAY...&#39;: 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">answer_num_list &#x3D; []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_base64_data(page_num):</span><br><span class="line">    url &#x3D; &#39;http:&#x2F;&#x2F;match.yuanrenxue.com&#x2F;api&#x2F;match&#x2F;4?page&#x3D;&#123;&#125;&#39;.format(page_num)</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;Host&#39;: &#39;match.yuanrenxue.com&#39;,</span><br><span class="line">        &#39;Pragma&#39;: &#39;no-cache&#39;,</span><br><span class="line">        &#39;Referer&#39;: &#39;http:&#x2F;&#x2F;match.yuanrenxue.com&#x2F;match&#x2F;4&#39;,</span><br><span class="line">        &#39;User-Agent&#39;: &#39;yuanrenxue.project&#39;,</span><br><span class="line">        &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    res &#x3D; requests.get(url&#x3D;url, headers&#x3D;headers)</span><br><span class="line">    # print(res.text)</span><br><span class="line">    return res.json()[&#39;info&#39;], res.json()[&#39;key&#39;], res.json()[&#39;value&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def b642jpg(b64str, name):</span><br><span class="line">    data &#x3D; base64.b64decode(b64str)</span><br><span class="line">    with open(&#39;&#123;&#125;.jpg&#39;.format(name), &#39;wb&#39;) as f:</span><br><span class="line">        f.write(data)</span><br><span class="line">        print(&#39;打印完毕&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># var j_key &#x3D; &#39;.&#39; + hex_md5(btoa(data.key + data.value).replace(&#x2F;&#x3D;&#x2F;g, &#39;&#39;));</span><br><span class="line"># 利用key和value计算出属性为display&#x3D;none的md5索引值</span><br><span class="line">def get_j_key(key, value):</span><br><span class="line">    return hashlib.md5(base64.b64encode((key + value).encode()).replace(b&#39;&#x3D;&#39;, b&#39;&#39;)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取td中4个图片</span><br><span class="line">def parse_every_group_nums(info_data):</span><br><span class="line">    pattern &#x3D; re.compile(r&#39;&lt;td&gt;(.*?)&lt;&#x2F;td&gt;&#39;)</span><br><span class="line">    every_group_nums_list &#x3D; pattern.findall(info_data)</span><br><span class="line">    return every_group_nums_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 利用j_key和每个图片对应的hash值,确定出要被用的所有数字子图片,及其相对位置偏移值</span><br><span class="line">def parse_real_use_num_info(every_group_nums, j_key):</span><br><span class="line">    # 找到base64</span><br><span class="line">    pattern &#x3D; re.compile(r&#39;img_number (.*?)&quot;&#39;)</span><br><span class="line">    img_number_list &#x3D; pattern.findall(every_group_nums)</span><br><span class="line">    # 找到图片</span><br><span class="line">    pattern &#x3D; re.compile(r&#39;base64,(.*?)&quot;&#39;)</span><br><span class="line">    ba64_str_list &#x3D; pattern.findall(every_group_nums)</span><br><span class="line">    # 找到样式</span><br><span class="line">    pattern &#x3D; re.compile(r&#39;style&#x3D;&quot;(.*?)&quot;&#39;)</span><br><span class="line">    number_style_list &#x3D; pattern.findall(every_group_nums)</span><br><span class="line"></span><br><span class="line">    # 寻找所有要用的子图</span><br><span class="line">    ba64_str_list &#x3D; [ba64_str_list[index] for index, img_number in enumerate(img_number_list) if img_number !&#x3D; j_key]</span><br><span class="line">    num_list &#x3D; [image_dict[&#39;data:image&#x2F;png;base64,&#39; + __] for __ in ba64_str_list]</span><br><span class="line"></span><br><span class="line">    # 匹配每个子图实际对应的偏移量 6801 -&gt; [&#39;0&#39;, &#39;11.5&#39;, &#39;-11.5&#39;, &#39;0.0&#39;]</span><br><span class="line">    number_style_list &#x3D; [number_style_list[index].replace(&#39;left:&#39;, &#39;&#39;).replace(&#39;px&#39;, &#39;&#39;) for index, img_number in</span><br><span class="line">    enumerate(img_number_list) if img_number !&#x3D; j_key]</span><br><span class="line"></span><br><span class="line">    # 根据偏移值，计算真实的数字顺序</span><br><span class="line">    ture_order_list &#x3D; caculate_css_left(number_style_list, num_list)</span><br><span class="line"></span><br><span class="line">    # 将每小组数字拼接并保存</span><br><span class="line">    temp_num &#x3D; 0</span><br><span class="line">    for index, num in enumerate(ture_order_list[::-1]):</span><br><span class="line">        temp_num +&#x3D; num * 10 ** index</span><br><span class="line">    answer_num_list.append(temp_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 根据图片映射的数字和图片的偏移值，计算出数字的真实顺序，列表排序返回</span><br><span class="line">def caculate_css_left(number_style_list, num_list):</span><br><span class="line">    # [0, 1, -1, 0]</span><br><span class="line">    number_style_list &#x3D; [round(float(__) &#x2F; 11) for __ in number_style_list]</span><br><span class="line">    # 定义数组</span><br><span class="line">    ture_order_list &#x3D; [&#39;&#39;]*len(number_style_list)</span><br><span class="line">    for index, number_style in enumerate(number_style_list):</span><br><span class="line">        ture_order_list[int(index + number_style)] &#x3D; num_list[index]</span><br><span class="line">    return ture_order_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    # info, _, __ &#x3D; get_base64_data(1)</span><br><span class="line">    # # &lt;td&gt;有10组  left有63个 display有0个，需要md5计算进行拼接base64  ed501a5e229d41330bee8399441bfbfb有39次  57feebf056bfb527e9ad8561e0694b0a有24次</span><br><span class="line">    # &#39;&#39;&#39;</span><br><span class="line">    # b642jpg(b64str, &#39;test&#39;)</span><br><span class="line">    for page_num in range(1, 6):</span><br><span class="line">        info_data, key, value &#x3D; get_base64_data(page_num)</span><br><span class="line">        j_key &#x3D; get_j_key(key, value)</span><br><span class="line">        every_group_nums_list &#x3D; parse_every_group_nums(info_data)</span><br><span class="line">        for every_group_nums in every_group_nums_list:</span><br><span class="line">            parse_real_use_num_info(every_group_nums, j_key)</span><br><span class="line">    print(sum(answer_num_list))</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猿人学之乱码增强</title>
      <link href="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/"/>
      <url>/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://match.yuanrenxue.com/match/5" target="_blank" rel="noopener">https://match.yuanrenxue.com/match/5</a></p><p><img src="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/image-20210911101359005.png" alt="image-20210911101359005"></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>cookie有两种获取方式，一种是服务器返回，一种是本地js生成。</p><p>60秒后点击下一页弹窗cookie已失效，并刷新网页，导致之前设置的断点或者hook被清掉，重新发起请求。</p><p><a href="https://match.yuanrenxue.com/api/match/5?m=1631326686273&amp;f=1631326686000" target="_blank" rel="noopener">https://match.yuanrenxue.com/api/match/5?m=1631326686273&amp;f=1631326686000</a></p><p>m和f明显就是时间戳，cookie中Hm开头的是浏览器设置的，主要关注<code>m</code>和<code>RM4hZBv0dDon443M</code>的内容。通过搜索m的值发现从一开始没有返回突然就出现了该cookie，即本地js生成的cookie，也有可能chrome看不到某些请求的preview返回的数据，<code>RM4hZBv0dDon443M</code>同理。</p><p><img src="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/image-20210911102141645.png" alt="image-20210911102141645"></p><p>题目中表明了cookie只有50秒的有效期，不会再次生成了，因为如果每次请求都重新生成， 肯定是一直有效的了，大概是失效之后，带着该cookie重新reload网页请求时计算cookie才重新生成。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>每次刷新后只会刷新到第一页，搜索<code>cookie已失效</code>,发现<code>location.reload()</code>不论本地是否缓存js或css都会重新请求，彻底刷新。</p><p><img src="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/image-20210911102853827.png" alt="image-20210911102853827"></p><p>搜索RM4hZBv0dDon443M又搜不到，有可能字符串拼接或混淆了，搜索<code>m =</code>，<code>m=</code>，<code>m:</code>匹配条数太多，搜索<code>cookie</code>出现位置也很多，再通过回溯定位request方法</p><p><img src="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/image-20210911104926661.png" alt="image-20210911104926661"></p><p>该调用栈中只有m和f的定义，未出现cookie的定义位置</p><p><img src="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/image-20210911105152584.png" alt="image-20210911105152584"></p><p>只好再次通过hook找到document.cookie在赋值前注入进去我们的js，直接注入是无法注入的，因为网页刷新会清除cookie，所以需要先找到在网页已经刷新但是还没有加载cookie发送请求之前的断点。</p><p>清除页面cookie，刷新页面后，进入该断点</p><p><img src="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/image-20210914082221949.png" alt="image-20210914082221949"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    &#x2F;&#x2F;严谨模式 检查所有错误</span><br><span class="line">    &#39;use strict&#39;;</span><br><span class="line">    &#x2F;&#x2F;document 为要hook的对象   这里是hook的cookie</span><br><span class="line">    Object.defineProperty(document, &#39;cookie&#39;, &#123;</span><br><span class="line">        &#x2F;&#x2F;hook set方法也就是赋值的方法</span><br><span class="line">        &#x2F;&#x2F;当前也可以hook get方法</span><br><span class="line">        set: function (val) &#123;</span><br><span class="line">            &#x2F;&#x2F;这样就可以快速给下面这个代码行下断点</span><br><span class="line">            &#x2F;&#x2F;从而快速定位设置cookie的代码</span><br><span class="line">            if (val.indexOf(&#39;RM4hZBv0dDon443M&#39;) !&#x3D; -1) &#123;</span><br><span class="line">                debugger;</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&#39;Hook捕获到cookie设置-&gt;&#39;, val);</span><br><span class="line">            return val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>如果找不到该断点的时候，即部分请求一开始就加载了该cookie，可以通过fd正则匹配地址添加hook<img src="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/image-20210914083703255.png" alt="image-20210914083703255"></p></blockquote><p>过了多次debugger后直到遇到val有值的时候，根据右侧调用栈回溯</p><p><img src="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/image-20210914084016194.png" alt="image-20210914084016194"></p><p>第二层时发现该js是动态生成的虚拟js，且<code>RM4hZBv0dDon443M</code>被分割成一个一个字母，所以搜不到，而<code>_0x4e96b4</code>就是window对象，</p><p><img src="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/image-20210914085057539.png" alt="image-20210914085057539"></p><p>接下来再通过hook找到<code>window._$ss</code>赋值的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    &#x2F;&#x2F;严谨模式 检查所有错误</span><br><span class="line">    &#39;use strict&#39;;</span><br><span class="line">    &#x2F;&#x2F;document 为要hook的对象   这里是hook的cookie</span><br><span class="line">    Object.defineProperty(window, &#39;_$ss&#39;, &#123;</span><br><span class="line">        &#x2F;&#x2F;hook set方法也就是赋值的方法</span><br><span class="line">        &#x2F;&#x2F;当前也可以hook get方法</span><br><span class="line">        set: function (val) &#123;</span><br><span class="line">            &#x2F;&#x2F;这样就可以快速给下面这个代码行下断点</span><br><span class="line">            &#x2F;&#x2F;从而快速定位设置cookie的代码 </span><br><span class="line">            debugger;</span><br><span class="line">            console.log(&#39;Hook捕获到cookie设置-&gt;&#39;, val);</span><br><span class="line">            return val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="/2021/09/11/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA/image-20210914090334061.png" alt="image-20210914090334061"></p><p>看到<code>mode</code>，<code>padding</code></p><p>31:04</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之反调试入门</title>
      <link href="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/"/>
      <url>/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="反爬对抗"><a href="#反爬对抗" class="headerlink" title="反爬对抗"></a>反爬对抗</h1><h2 id="过debugger"><a href="#过debugger" class="headerlink" title="过debugger"></a>过debugger</h2><ul><li><del>debugger行右键Edit breakpoint修改为false</del></li><li>动态调试时，循环debugger可能有setInterval定时器，<ul><li>根据调用栈找到第一次循环调用debugger的方法=function(){}</li><li>直接到栈底就是定时器中调用处的入参=function(){}</li><li>在定时器运行前打上断点，将setInterval=function(){}</li><li>拷贝到本地后，格式化并删除debugger，再运行如果卡死说明做了防格式化，可以在<strong>头部加上debugger</strong>，重新到浏览器运行，单步跟踪判断哪里利用防格式化卡死代码(toString后通过正则RegExp防止代码格式化)，尝试在每个正则位置校验换行断点，返回值改为true。或者手动在<strong>RegExp下添加debugger</strong>检查对哪个函数做换行校验，将该函数还原一行即可。<ul><li>while(true)</li><li>function x(){xx()}  function xx(){x()}</li></ul></li></ul></li></ul><h2 id="反反混淆"><a href="#反反混淆" class="headerlink" title="反反混淆"></a>反反混淆</h2><p>判断<code>window.info</code>在哪里设置的值时，可以通过在js顶部加上hook实现，根据堆栈找到设置info时的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    &#39;use strict&#39;;</span><br><span class="line">    var a;</span><br><span class="line">    Object.defineProperty(window, &#39;info&#39;, &#123;</span><br><span class="line">        set: function (val) &#123;</span><br><span class="line">            console.log(&#39;Hook捕获到setinfo设置-&gt;&#39;, val);</span><br><span class="line">            debugger;</span><br><span class="line">            a &#x3D; val;</span><br><span class="line">            return val;</span><br><span class="line">        &#125;,</span><br><span class="line">        get: function (val) &#123;</span><br><span class="line">            console.log(&#39;Hook捕获到getinfo设置-&gt;&#39;, val);</span><br><span class="line">            return a;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>常规结构是<code>参数+方法名+加密后数据</code>-&gt;<code>垃圾代码</code>-&gt;<code>解密代码+检测</code>-&gt;<code>真实代码</code>-&gt;<code>计时器检测</code>-&gt;<code>死代码注入+初始化相关</code></p><p>抓包优先清空所有cookie</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210901213744851.png" alt="image-20210901213744851"></p><h2 id="防DDOS"><a href="#防DDOS" class="headerlink" title="防DDOS"></a>防DDOS</h2><p>服务端返回503资源受限，浏览器为了提高响应速度自动清理缓存，被服务端状态码欺骗，导致所有参数都不会被搜索到，浏览器拿不到源码可以通过fiddler追寻历史发包记录，找到503、521记录大多返回包含混淆后的fuckjs中即可找到参数内容，逐段fuckjs(避免脱机)只可以通过<strong>浏览器自动运行解密识别</strong>，还原替换到原js中。</p><h3 id="5s防护加头"><a href="#5s防护加头" class="headerlink" title="5s防护加头"></a>5s防护加头</h3><p>从fiddler中的503、521请求返回中获取未直接返回的加密参数生成逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">var ja_ &#x3D; &#123;</span><br><span class="line">    value: &quot;&quot; &#x2F;&#x2F;这个是取值用的</span><br><span class="line">&#125;;</span><br><span class="line">var location &#x3D; &#123;</span><br><span class="line">    hash:&quot;&quot; &#x2F;&#x2F;这个不用管，取值用的</span><br><span class="line">&#125;;</span><br><span class="line">var k_ &#x3D; &#123;</span><br><span class="line">    innerHTML:&quot;[k的那串fuck代码]&quot; &#x2F;&#x2F;k的那串fuck代码，带k值的5s防护</span><br><span class="line">&#125;;</span><br><span class="line">var document &#x3D; &#123;</span><br><span class="line">    createElement: function(xd) &#123;</span><br><span class="line">        if (xd &#x3D;&#x3D; &#39;div&#39;) &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                innerHTML: &quot;&quot;,</span><br><span class="line">                firstChild: &#123;</span><br><span class="line">                    href: &quot;http:&#x2F;&#x2F;www.itorrents.org&#x2F;&quot; &#x2F;&#x2F;这个链接根据需要修改</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getElementById: function(x) &#123;</span><br><span class="line">        if (x &#x3D;&#x3D; &#39;jschl-answer&#39;) &#123; &#x2F;&#x2F;这个名字根据需要修改</span><br><span class="line">            return ja_;</span><br><span class="line">        &#125;</span><br><span class="line">        if (x &#x3D;&#x3D; &#39;challenge-form&#39;) &#123;&#x2F;&#x2F;这个名字根据需要修改</span><br><span class="line">            return &#123; &#x2F;&#x2F;这里是个form表单，根据需要修改</span><br><span class="line">                action: &quot;&quot;,</span><br><span class="line">                submit: function() &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            return k_ &#x2F;&#x2F;这里就是多出来的k的值,带k值的5s防护</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 补头</span><br><span class="line">function getno5s()&#123;</span><br><span class="line">!function() &#123;</span><br><span class="line">&#x2F;&#x2F;setTimeout 里的代码</span><br><span class="line">&#125;()</span><br><span class="line">return ja_.value &#x2F;&#x2F;这里取值用的</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;自执行</span><br><span class="line">!(function()&#123;</span><br><span class="line">...</span><br><span class="line">t &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">t.innerHTML&#x3D;&#39;&lt;a href&#x3D;&#39;&#x2F;&#39;&gt;x&lt;&#x2F;a&gt;;</span><br><span class="line">t &#x3D; t.firstChild.href;r&#x3D;t.match(&#x2F;https?:\&#x2F;\&#x2F;&#x2F;)[0]</span><br><span class="line">t &#x3D; t.substr(r.length); t &#x3D; t.substr(0,t.length-1);k&#x3D;&#39;cf-dn-tPaJV&#39;;</span><br><span class="line">a &#x3D; document.getElementById(&#39;jschl-answer&#39;);</span><br><span class="line">f &#x3D; document.getElementById(&#39;challenge-form&#39;);</span><br><span class="line">...</span><br><span class="line">a.value &#x3D; ...</span><br><span class="line">f.action +&#x3D; location.hash;</span><br><span class="line">f.submit();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="加速乐"><a href="#加速乐" class="headerlink" title="加速乐"></a>加速乐</h3><p><code>localtion.href</code>改为<code>a.b</code>，<code>eval</code>改为<code>console.log</code>将解密后的代码拷贝出来补头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var window &#x3D; &#123;</span><br><span class="line">    addEventListener: function()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">var document &#x3D; &#123;</span><br><span class="line">    addEventListener:function(x,x1,x2)&#123;</span><br><span class="line">        if(x &#x3D;&#x3D; &quot;DOMContentLoaded&quot;) &#123;</span><br><span class="line">            x1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    addEventListener:function(x,x1,x2)&#123;</span><br><span class="line">        if(x &#x3D;&#x3D; &quot;onreadystatechange&quot;) &#123;</span><br><span class="line">            x1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    cookie:&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">var setTimeout &#x3D; function(x,x1)&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 补头</span><br><span class="line">var _9 &#x3D; function() &#123;</span><br><span class="line">    setTimeout(&#39;location.href&#x3D;...&#39;,1500);</span><br><span class="line">    document.cookie &#x3D; &#39;__jsl_clearance...&#39;</span><br><span class="line">&#125;</span><br><span class="line">if((function()&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        return !!window.addEventListener;</span><br><span class="line">    &#125; catch(e)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()) &#123;</span><br><span class="line">    document.addEventListener(&#39;DOMContentLoaded&#39;, _9, false)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    document.attachEvent(&#39;onreadystatechange&#39;, _9)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>document.cookie即可拿到加密后的值</p><h1 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h1><p><a href="https://dun.163.com/trial/sense" target="_blank" rel="noopener">网易易盾</a>， <a href="https://007.qq.com/online.html" target="_blank" rel="noopener">腾讯防水墙</a>，<a href="https://www.geetest.com/adaptive-captcha" target="_blank" rel="noopener">极验</a>，本文以网易易盾为例，实现验证码加密的逆向分析。</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210904094222693.png" alt="image-20210904094222693"></p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>通过抓包<code>https://c.dun.163.com/api/v2/get</code>生成验证码入参对比，token可有可无</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210904103515874.png" alt="image-20210904103515874"></p><p>返回值为携带token的json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"bg"</span>: [</span><br><span class="line">            <span class="string">"https://necaptcha.nosdn.127.net/92790c370aaa4e83ab122927096375d1.jpg"</span>,</span><br><span class="line">            <span class="string">"https://nos.netease.com/necaptcha/92790c370aaa4e83ab122927096375d1.jpg"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"front"</span>: [</span><br><span class="line">            <span class="string">"https://necaptcha.nosdn.127.net/d040ca01b02c4d5493b90cf50f066213.png"</span>,</span><br><span class="line">            <span class="string">"https://nos.netease.com/necaptcha/d040ca01b02c4d5493b90cf50f066213.png"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"token"</span>: <span class="string">"fa17e8710a7f40beb760d2398f3890a5"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"zoneId"</span>: <span class="string">"CN31"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"ok"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过抓包滑动验证码<code>https://c.dun.163.com/api/v2/check</code>，其中的token参数为get包返回的<code>fa17e8710a7f40beb760d2398f3890a5</code></p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210904105233073.png" alt="image-20210904105233073"></p><p>滑动成功后将返回validate字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;result&quot;: true,</span><br><span class="line">        &quot;zoneId&quot;: &quot;CN31&quot;,</span><br><span class="line">        &quot;token&quot;: &quot;2ce6fe0684804245a795d584395487b5&quot;,</span><br><span class="line">        &quot;validate&quot;: &quot;8gxMgwjCs36ABQyKiWXApPYj4qmeePZtNacdk+33&#x2F;pWyyVk9xmp6Fe6etQ75HC&#x2F;G&#x2F;p4SqUksSPlt8+SstaDC3Eve43eTujSRtRjRkjwxQHpQ&#x2F;lDjwKTb2VfYqnObIYge5b29Di6sbOKMlDTLiDqVGcyrENpDdPSiOkrTu3zS30w&#x3D;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;error&quot;: 0,</span><br><span class="line">    &quot;msg&quot;: &quot;ok&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>c.dun.163.com/api/v2</code>过滤<strong>生成</strong>和<strong>滑动</strong>验证码的包。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="fp"><a href="#fp" class="headerlink" title="fp"></a>fp</h3><p>进入Initiator调用栈并打上断点，，滑动滑块进行check后重新获取图。该js动态生成因为追加时间戳可以通过xhr断点跟踪~~</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210904105614374.png" alt="image-20210904105614374"></p><p>在t参数中找到了fp已经被加密，根据右侧调用栈</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210904105751525.png" alt="image-20210904105751525"></p><p>逐步向上追溯到fp定义的位置，即n.fingerprint</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210904110128098.png" alt="image-20210904110128098"></p><p>在当前页面中搜索<code>fingerprint</code>，找到该参数赋值的地方，即 <code>window.gdxidpyhxde</code></p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210904110418447.png" alt="image-20210904110418447"></p><p>由于cookie中有<code>gdxidpyhxdE</code>的值，清除缓存后，利用hook实现<code>window.gdxidpyhxde</code>的定位</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210904110848762.png" alt="image-20210904110848762"></p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210906073928073.png" alt="image-20210906073928073"></p><p>控制台打印be的值正是gdxidpyhxde，接下来判断be是在哪里塞入fp的值，由于core.v2.15.2.min.js每次动态生成，所以每次都需要重新下断点跟踪。</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210906074857909.png" alt="image-20210906074857909"></p><p>单步跟踪到h赋值时，重新回到了hook函数，再观察h的值，有加密串:时间戳组成。找到了加密的大致流程，追溯上层调用栈后，以上的function都包含于于一个大自执行的多层自执行function，接下来就是把大外层的function扣出来了。</p><p>![GIF 2021-9-6 8-06-35](JS逆向之反调试入门/GIF 2021-9-6 8-06-35.gif)</p><p>去除自执行函数，将W()中的h结果返回出来就是我们所需要的的fp，接下来将代码拷贝到js引擎中运行。报错<code>引用错误: window 未定义</code>，补头<code>var window = this;</code>，报错<code>类型错误: 无法读取属性 &#39;cookie&#39; of undefined</code>，直接干掉<code>G[u[160]] ||</code></p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210906081026001.png" alt="image-20210906081026001"></p><p>报错<code>类型错误: Cannot set property &#39;cookie&#39; of undefined</code>，由于在加载滑块过程中没有被调用，直接干掉该方法，同理引用到的函数也一并干掉</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210906081713001.png" alt="image-20210906081713001"></p><p>重新运行getfp()</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210906082001239.png" alt="image-20210906082001239"></p><p>虽然有了结果，不过该值是不正确的，以下位置取的指纹信息，而v8执行是拿不到指纹的，所以直接把该值输出后替换到扣出的js中，<code>var w = [&quot;6762186695653&quot;, &quot;39753334585035&quot;];</code>。</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210906082059495.png" alt="image-20210906082059495"></p><p>针对不同的站，host不一样，在W()中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var _host &#x3D; &quot;dun.163.com&quot;;</span><br><span class="line">i[u[61]] &#x3D; _host;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210906083710504.png" alt="image-20210906083710504"></p><p>接下来通过Initiator栈中f.src的fp的值由undefined改为上面的加密值编码后的结果</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210906084125778.png" alt="image-20210906084125778"></p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210906084333277.png" alt="image-20210906084333277"></p><h3 id="cb"><a href="#cb" class="headerlink" title="cb"></a>cb</h3><p>Initiator断点，滑动滑块触发check后，再次调用get</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210907081958465.png" alt="image-20210907081958465"></p><p>当滑动滑块时，第一次check完成，获取第二次get的调用栈中找到了cb的定义位置</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210907082548882.png" alt="image-20210907082548882"></p><p>跟进s()后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function s() &#123;</span><br><span class="line">    var e &#x3D; X.uuid(32);</span><br><span class="line">    return P(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中uuid抠出来可以直接运行调用</p><p><img src="/2021/08/30/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%8F%8D%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210907083823230.png" alt="image-20210907083823230"></p><p>其中P函数所在大function抠出来</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之调试反爬hook加密技巧</title>
      <link href="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="js语法"><a href="#js语法" class="headerlink" title="js语法"></a>js语法</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>局部变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function jb()&#123;</span><br><span class="line">var a &#x3D; &quot;局部变量&quot;</span><br><span class="line">return a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; &quot;全局变量&quot;</span><br><span class="line">function qj()&#123;</span><br><span class="line">console.log(a)</span><br><span class="line">&#125;</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure><h2 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h2><p>js加载自动运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!(function()&#123;</span><br><span class="line">console.log(2)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>外部调用内部函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var _hex_md5;</span><br><span class="line">function xx()&#123;</span><br><span class="line">var hex_md5 &#x3D; function()&#123;</span><br><span class="line">console.log(&quot;111&quot;)</span><br><span class="line">&#125;</span><br><span class="line">_hex_md5 &#x3D; hex_md5</span><br><span class="line">&#125;</span><br><span class="line">xx()</span><br><span class="line">_hex_md5()</span><br></pre></td></tr></table></figure><p>改成自执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var _hex_md5;</span><br><span class="line">!(function xx()&#123;</span><br><span class="line">var hex_md5 &#x3D; function()&#123;</span><br><span class="line">console.log(&quot;111&quot;)</span><br><span class="line">&#125;</span><br><span class="line">c &#x3D; hex_md5</span><br><span class="line">&#125;)()</span><br><span class="line">_hex_md5()</span><br></pre></td></tr></table></figure><p>很多情况函数定义在对象中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var _hex_md5;</span><br><span class="line">function xx()&#123;</span><br><span class="line">var j &#x3D; &#123;</span><br><span class="line">hex_md5: function()&#123;</span><br><span class="line">console.log(&quot;111&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_hex_md5&#x3D;j;</span><br><span class="line">&#125;</span><br><span class="line">想要调用时需要先调用外部方法赋值再调用j中的hex_md5</span><br></pre></td></tr></table></figure><p>改成自执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var _hex_md5;</span><br><span class="line">!(function xx()&#123;</span><br><span class="line">var j &#x3D; &#123;</span><br><span class="line">hex_md5: function()&#123;</span><br><span class="line">console.log(&quot;111&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_hex_md5&#x3D;j;</span><br><span class="line">&#125;)()</span><br><span class="line">_hex_md5.hex_md5()</span><br></pre></td></tr></table></figure><p>define函数自动创建执行，但是纯js环境没有该函数。该函数调用jquery定义函数<code>md5</code>的js将后面的内容函数命名为<code>md5</code>。扣代码时创建对象变量<code>var md5;</code>，原define改成自执行函数<code>!(function(){})()</code>，其中<code>j</code>对象中包含需要调用的<code>md5:function(s)</code>，修改导出语法<code>module.exports=j</code>为<code>md5=j</code>赋值为新定义的对象，即可使用<code>md5.md5(&quot;123&quot;)</code>调用扣出想要的js函数。</p><h2 id="浏览器环境BOM"><a href="#浏览器环境BOM" class="headerlink" title="浏览器环境BOM"></a>浏览器环境BOM</h2><p>补头，脱离浏览器在外部不可被直接调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window &#x3D; &#123;  &#x2F;&#x2F; window是全局变量</span><br><span class="line">    location:&#123;</span><br><span class="line">        href: &quot;chrome:&#x2F;&#x2F;newtab&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="html渲染环境DOM"><a href="#html渲染环境DOM" class="headerlink" title="html渲染环境DOM"></a>html渲染环境DOM</h2><p>js引擎自带(v8)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">document &#x3D; &#123; &#x2F;&#x2F; document是全局变量，hook掉原有方法</span><br><span class="line">    write:function()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">document.write.toString &#x3D; function()&#123;return &quot;function write()&#123; [native code] &#125;&quot;&#125;]</span><br></pre></td></tr></table></figure><ul><li>点击鼠标        登录</li><li>网页加载        浏览器指纹（检测是否同一用户），收集是否为浏览器环境</li><li>图像加载        浏览器指纹 滑块图片还原</li><li>鼠标移动        浏览器指纹 无感验证</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var p &#x3D; document.createElement(&quot;p&quot;)</span><br><span class="line">p.className &#x3D; &quot;onejane&quot;</span><br><span class="line">document.body.appendChild(p)</span><br></pre></td></tr></table></figure><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>Preserve log  禁止清除缓存<br>Disable cache  禁止缓存<br>ctrl+shift+f  搜索password找到对应js，左下角format格式化，排除vue，axios，jquery</p><p>16位 32位加密串   md5</p><p>40位加密串   sha1</p><p>通过乐易编程助手实现各种加密方案</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210803213139247.png" alt="image-20210803213139247"></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ul><li><p>搜索关键参数<code>password:</code>,<code>password=</code>,<code>password = </code>请求url，搜索方法<code>var submit</code>或者<code>function submit</code>或者<code>submit:</code></p></li><li><p>dom元素事件监听，Remove准确定位触发js位置</p></li><li><p>xhr断点，定位发包函数跟栈，复制网址请求路径到Sources下的XHR/fetch Breakpoints，支持正则。</p></li><li><p>Network下的发包请求的Initiator，如jquery堆栈的顶层断点(可能会请求多次，找到发包请求时进入的断点)，重新请求找到堆栈中属于目标网站的js格式化断点。</p></li><li><p>fiddler 版本必须 &gt;= v4.6.3，复制<code>Fiddler 编程猫专用插件</code>到fiddler程序目录下的Scripts目录中示例:  <code>C:\Program Files (x86)\Fiddler2\Scripts</code></p></li></ul><ol><li>覆盖原函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function xxx()&#123;</span><br><span class="line">    console.log(&quot;1111&quot;)</span><br><span class="line">&#125;</span><br><span class="line">var xxx_ &#x3D; xxx;</span><br><span class="line">xxx &#x3D; function()&#123;</span><br><span class="line">    console.log(&quot;2222&quot;)</span><br><span class="line">&#125;</span><br><span class="line">window.alert &#x3D; function()&#123;console.log(&quot;?&quot;)&#125;</span><br><span class="line">console.clear &#x3D; function()&#123;console.log(&quot;?&quot;)&#125;</span><br><span class="line">setInterval &#x3D; function()&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Object.defineProperty替换对象属性(getter.setter)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    var a &#x3D; &quot;&quot;;</span><br><span class="line">    Object.defineProperty(document, &#39;cookie&#39;, &#123;</span><br><span class="line">        set: function (val) &#123;</span><br><span class="line">            console.log(&#39;Hook捕获到cookie设置-&gt;&#39;, val);</span><br><span class="line">            a &#x3D; val;</span><br><span class="line">            return val;</span><br><span class="line">        &#125;,</span><br><span class="line">        get: function()&#123;</span><br><span class="line">            return a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line">document.cookie &#x3D; &quot;1&quot;  &#x2F;&#x2F; 设置</span><br><span class="line">document.cookie  &#x2F;&#x2F; 获取</span><br></pre></td></tr></table></figure><ol start="3"><li>hook的时机在控制台注入的hook，刷新网页就失效了，过滤Network的js找到第一个加载的js，右键Open in Sources panel格式化，第一行断点，不过有些cookie可能异步可能在html中js生成，在控制台中注入以上hook，清除cookie，手动注入hook，控制台中找到VM虚拟机找到我们的hook的js打上断点，，每次hook都会经过set，右侧就可以查看调用栈，追溯cookie的来源与加密方式。(有可能注入hook的时机会晚于部分异步请求或者html中的js)</li></ol><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210804080959449.png" alt="image-20210804080959449"></p><ol start="4"><li>利用fiddler代理所有请求替换响应,编程猫专用工具注入hook</li></ol><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210804083128963.png" alt="image-20210804083128963"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    &#39;use strict&#39;;</span><br><span class="line">    Object.defineProperty(document, &#39;cookie&#39;, &#123;</span><br><span class="line">        set: function (val) &#123;</span><br><span class="line">            if (val.indexOf(&quot;__dfp&quot;) !&#x3D; -1) &#123;</span><br><span class="line">                debugger;</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&#39;Hook捕获到cookie设置-&gt;&#39;, val);</span><br><span class="line">            return val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210804083140943.png" alt="image-20210804083140943"></p><p>接下来查看调用栈，最终保存到window.name中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    &#39;use strict&#39;;</span><br><span class="line">    var a &#x3D; &quot;&quot;;</span><br><span class="line">    Object.defineProperty(window, &#39;name&#39;, &#123;</span><br><span class="line">        set: function (val) &#123;</span><br><span class="line">            debugger;</span><br><span class="line">            a &#x3D; val;</span><br><span class="line">            console.log(&#39;Hook捕获到cookie设置-&gt;&#39;, val);</span><br><span class="line">            return val;</span><br><span class="line">        &#125;, </span><br><span class="line">        get: function()&#123;</span><br><span class="line">            return a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>重新进入iqiyi，断点完成hook定位。</p><h2 id="中烟新商盟"><a href="#中烟新商盟" class="headerlink" title="中烟新商盟"></a><a href="https://xinshangmeng.com/xsm2/?Version=2021073100" target="_blank" rel="noopener">中烟新商盟</a></h2><p>元素监听定位，如果出现多个js，尝试Remove再点击看是否报错触发登录定位到事件最终触发的js，尽可能将多个地方打上断点</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210803083951861.png" alt="image-20210803083951861"></p><p>直接找到对应js位置，先左下角format格式化，ctrl+shift+f打开js页面的控制台，在js页面ctrl查看所有变量值</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210803084857034.png" alt="image-20210803084857034"></p><p>鼠标悬停，或者控制台打印出来，点击进入方法声明时打上断点，为同一行中的函数打上断点，F8单步调试</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210803085611483.png" alt="image-20210803085611483"></p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210803085804754.png" alt="image-20210803085804754"></p><h2 id="to8to"><a href="#to8to" class="headerlink" title="to8to"></a><a href="https://www.to8to.com/new_login.php" target="_blank" rel="noopener">to8to</a></h2><p>抓包<code>https://www.to8to.com/new_login.php</code>，在Element面板中搜索<code>new_login.php</code></p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210804085008500.png" alt="image-20210804085008500"></p><p>ctrl+shift+f 搜索<code>loginCheck</code></p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210804085123921.png" alt="image-20210804085123921"></p><p>该方法中<code>jq(&#39;#rsa_userNum&#39;).val(rsaString(password));</code>，调用rsaString方法加密密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function rsaString(str) &#123;</span><br><span class="line">    return encodeURIComponent(RSAUtilszb.encryptfun(str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>encryptfun</code>定义的js中，rsa加密最少2000行，该方法不过163行，拷贝该js通过编程猫专用工具中的JS调试工具，加载代码，报错<code>引用错误: window 未定义</code>，添加<code>var window = this;</code>,报错<code>引用错误: JSEncrypt 未定义</code>,添加原js中<code>var JSEncrypt = JSEncryptExports.JSEncrypt;</code>，报错<code>引用错误: JSEncryptExports 未定义</code>,搜索<code>var JSEncryptExports</code>，将<code>var JSEncryptExports = {}; </code>添加到JS调试工具，报错<code>类型错误: JSEncrypt is not a constructor</code></p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210804144205977.png" alt="image-20210804144205977"></p><p>尝试打上断点，但是每次都不能进入断点，说明肯定是动态加载的js，且每次刷新js后缀会有时间戳。勾选Disable cache,打开fiddler抓包，将js拷贝到本地实现http欺骗，选中该请求点击AutoResponder-Add Rule下拉选择Find a File,找到本地保存的js并开启规则</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805091834690.png" alt="image-20210805091834690"></p><p>由于每次js请求地址不一样，使用正则匹配<code>regex:https://static\.to8to\.com/gb_js/to8torsaszb\.js\?_=\d+</code>并保存规则重新发起请求<code>https://static.to8to.com/gb_js/to8torsaszb.js?_=1628128571412</code>，使用本地js欺骗网络请求js</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805100020494.png" alt="image-20210805100020494"></p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805100413163.png" alt="image-20210805100413163"></p><p>将整个js格式化找到之前报错<code>JSEncrypt is not a constructor</code>是从上面的压缩的js中export出来的</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805133854931.png" alt="image-20210805133854931"></p><p>将上面压缩的代码添加到编程猫的JS调试工具中加载代码，报错<code>引用错误: navigator 未定义</code>，添加<code>var navigator = {}</code>，报错<code>引用错误: window 未定义</code>，添加<code>var window =this</code>,因为如果用<code>window ={}</code>报错<code>ASN1 未定义</code>,而用this则可以拿到当前js中所有的变量函数。</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805150052429.png" alt="image-20210805150052429"></p><h2 id="升学e网通"><a href="#升学e网通" class="headerlink" title="升学e网通"></a><a href="https://www.ewt360.com/" target="_blank" rel="noopener">升学e网通</a></h2><p>登录抓包，打开Initiator，进入堆栈顶层定位的代码行</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805161322607.png" alt="image-20210805161322607"></p><p>打上断点，查看右侧调用栈，逐个方法往底层去调用，直到react库js找到了preLogin，找到出现password的位置，打上断点</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805162037531.png" alt="image-20210805162037531"></p><p>再次登录时，进入断点，找到password</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805190251645.png" alt="image-20210805190251645"></p><p>进入加密方法中，aes加密</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805190344051.png" alt="image-20210805190344051"></p><p>打开WT-JS中的Crypto类复制key和iv，输出以HEX的十六进制格式，对比结果是标准的AES加密。</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805191253856.png" alt="image-20210805191253856"></p><p>基于base64或十六进制的AES加解密实现见aes.js</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210805225410622.png" alt="image-20210805225410622"></p><h2 id="长房集团"><a href="#长房集团" class="headerlink" title="长房集团"></a><a href="http://eip.chanfine.com/login.jsp" target="_blank" rel="noopener">长房集团</a></h2><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210806082118227.png" alt="image-20210806082118227"></p><p>搜索<code>j_password</code>后打断点，重新登录</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210806082341365.png" alt="image-20210806082341365"></p><p>进入<code>desEncrypt</code>中，大致加密完成逻辑就在该函数中</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210806082652167.png" alt="image-20210806082652167"></p><p>加密逻辑中首先根据<code>SECURITYKEY.get()</code>获取到key，首先通过请求后端拿到str，判断加密类型是否为aes后截取字符串通过<code>toHexString</code>转成十六进制拿到key和iv和security</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210806083259472.png" alt="image-20210806083259472"></p><p>整理完逻辑扣出js报错<code>CryptoJS is not defined</code>,点击进入<code> CryptoJS.AES.encrypt</code>扣出来源码，完整见changfang.js</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210806085244757.png" alt="image-20210806085244757"></p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>遇到webpack的RSA站无脑搜<code>setPublicKey</code>,遇到定义变量时n(“…”)，无脑跳到n的js中把RSA的头部拷贝出来</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210825200108200.png" alt="image-20210825200108200"></p><p>拼装成如下模板，将含有setPublicKey的js最外层的{}包括起来的函数拷贝到上面的函数定义中，并导出函数名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _c; <span class="comment">// 定义变量</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// if (i[t]) return i[t].exports;</span></span><br><span class="line">        <span class="keyword">var</span> n = <span class="comment">/*i[t] = */</span> &#123;</span><br><span class="line">            i: t,</span><br><span class="line">            l: !<span class="number">1</span>,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> e[t].call(n.exports, n, n.exports, c),</span><br><span class="line">            n.l = !<span class="number">0</span>,</span><br><span class="line">            n.exports</span><br><span class="line">    &#125;</span><br><span class="line">    _c = c;  <span class="comment">// 导出函数</span></span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    <span class="string">"0022"</span> : <span class="function"><span class="keyword">function</span>(<span class="params">t,e,n</span>)</span>&#123;...&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>拷贝到Sources中的Snippets中自动加载</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210825201017211.png" alt="image-20210825201017211"></p><p>获取publickey的时候，打上断点，在setPublicKey时使用</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210825201231729.png" alt="image-20210825201231729"></p><p>添加换行后，完成解密</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210825201402072.png" alt="image-20210825201402072"></p><h3 id="G妹游戏"><a href="#G妹游戏" class="headerlink" title="G妹游戏"></a><a href="https://www.gm99.com/" target="_blank" rel="noopener">G妹游戏</a></h3><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210808212024464.png" alt="image-20210808212024464"></p><p>首先搜索<code>password</code>发现出现的点太多，尝试使用initiator的第一个js位置</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210808212118312.png" alt="image-20210808212118312"></p><p>格式化后直接下断点，直接过滤掉jquery库，查看网站自己的js代码并打上断点，在第二次时才进入真实的发送登录请求的send方法</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210808214442530.png" alt="image-20210808214442530"></p><p>webpack特征格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function(x) &#123;</span><br><span class="line">function xx(yy)&#123; </span><br><span class="line">x[yy].call(xxx,xxx,xxx); &#x2F;&#x2F; 必有一个加载模块的方法 call apply</span><br><span class="line">&#125;</span><br><span class="line">&#125;([    &#x2F;&#x2F; 数组 &#125;([     对象 &#125;(&#123;</span><br><span class="line">function(x1,x2,x3)&#123;&#125;,</span><br><span class="line">function(x1,x2,x3)&#123;&#125;,</span><br><span class="line">function(x1,x2,x3)&#123;&#125;,</span><br><span class="line">function(x1,x2,x3)&#123;&#125;,</span><br><span class="line">function(x1,x2,x3)&#123;&#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>上面选择方法，下面定义方法。解决webpack框架可以先找到加载模块的方法，找到调用的模块，构造一个自执行方法</p><p>![GIF 2021-8-14 21-37-22](JS逆向之调试反爬hook加密技巧/GIF 2021-8-14 21-37-22.gif)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">!function(i) &#123;</span><br><span class="line">    var s &#x3D; &#123;&#125;;</span><br><span class="line">    function n(t) &#123;</span><br><span class="line">        if (s[t])</span><br><span class="line">            return s[t].exports;</span><br><span class="line">        var e &#x3D; s[t] &#x3D; &#123;</span><br><span class="line">            i: t,</span><br><span class="line">            l: !1,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        return i[t].call(e.exports, e, e.exports, n),</span><br><span class="line">        e.l &#x3D; !0,</span><br><span class="line">        e.exports</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>以上完成了找到加载模块的方法，构造一个自执行方法。接下来查看加密<code>password</code>的地方</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210814214034849.png" alt="image-20210814214034849"></p><p>进入g.encode方法中，想必完整的加密逻辑存在<code>this.jsencrypt.encrypt(i)</code>中</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210814214058116.png" alt="image-20210814214058116"></p><p>打上断点后重新登录，进入该断点时，进入<code>jsencrypt.encrypt</code>,发现存在于<code>function(t, e, i)</code>中</p><p>![GIF 2021-8-14 21-49-44](JS逆向之调试反爬hook加密技巧/GIF 2021-8-14 21-49-44.gif)</p><p>将整个<code>function(t, e, i)</code>(包含<code>qe.prototype.encrypt = function(t) {</code>的password加密方法)拷贝下来，并定义函数名为<code>jsencrypt</code>，完成调用模块的扣取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">!function(i) &#123;</span><br><span class="line">    var s &#x3D; &#123;&#125;;</span><br><span class="line">    function n(t) &#123;</span><br><span class="line">        if (s[t])</span><br><span class="line">            return s[t].exports;</span><br><span class="line">        var e &#x3D; s[t] &#x3D; &#123;</span><br><span class="line">            i: t,</span><br><span class="line">            l: !1,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        return i[t].call(e.exports, e, e.exports, n),</span><br><span class="line">        e.l &#x3D; !0,</span><br><span class="line">        e.exports</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(</span><br><span class="line">    &#123;</span><br><span class="line">        jsencrypt: function(t, e, i) &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>该加密函数在外层被调用，需要在webpack模板中引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">!function(i) &#123;</span><br><span class="line">    var s &#x3D; &#123;&#125;;</span><br><span class="line">    function n(t) &#123;</span><br><span class="line">        if (s[t])</span><br><span class="line">            return s[t].exports;</span><br><span class="line">        var e &#x3D; s[t] &#x3D; &#123;</span><br><span class="line">            i: t,</span><br><span class="line">            l: !1,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        return i[t].call(e.exports, e, e.exports, n),</span><br><span class="line">        e.l &#x3D; !0,</span><br><span class="line">        e.exports</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(</span><br><span class="line">    &#123;</span><br><span class="line">        jsencrypt: function(t, e, i) &#123;...&#125;,</span><br><span class="line">jiami: function(t, e, r) &#123;  &#x2F;&#x2F; 其中调用了jsencrypt</span><br><span class="line">var i;</span><br><span class="line">(i &#x3D; function(t, e, i) &#123;</span><br><span class="line">var s &#x3D; r(3);</span><br><span class="line">function n() &#123;</span><br><span class="line">void 0 !&#x3D;&#x3D; s &amp;&amp; (this.jsencrypt &#x3D; new s.JSEncrypt,</span><br><span class="line">this.jsencrypt.setPublicKey(&quot;-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDq04c6My441Gj0UFKgrqUhAUg+kQZeUeWSPlAU9fr4HBPDldAeqzx1UR92KJHuQh&#x2F;zs1HOamE2dgX9z&#x2F;2oXcJaqoRIA&#x2F;FXysx+z2YlJkSk8XQLcQ8EBOkp&#x2F;&#x2F;MZrixam7lCYpNOjadQBb2Ot0U&#x2F;Ky+jF2p+Ie8gSZ7&#x2F;u+Wnr5grywIDAQAB-----END PUBLIC KEY-----&quot;))</span><br><span class="line">&#125;</span><br><span class="line">n.prototype.encode &#x3D; function(t, e) &#123;</span><br><span class="line">var i &#x3D; e ? e + &quot;|&quot; + t : t;</span><br><span class="line">return encodeURIComponent(this.jsencrypt.encrypt(i))</span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">i.exports &#x3D; n</span><br><span class="line">&#125;</span><br><span class="line">.call(e, r, e, t)) &#x3D;&#x3D;&#x3D; undefined || (t.exports &#x3D; i)</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>var s = r(3);</code>中的r是function模块传入的第三个参数，由于模块在加载器加载call时调用，不论e.exports，e都不是方法，n是方法且只有一个参数，所以r=n，将加载函数传给了模块，让模块也有了加载的功能。将<code>r(3)</code>改为<code>r(&quot;jsencrypt&quot;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var _n;  &#x2F;&#x2F; 导出n加载器</span><br><span class="line">!function(i) &#123;</span><br><span class="line">    var s &#x3D; &#123;&#125;;</span><br><span class="line">    function n(t) &#123;</span><br><span class="line">        if (s[t])</span><br><span class="line">            return s[t].exports;</span><br><span class="line">        var e &#x3D; s[t] &#x3D; &#123;</span><br><span class="line">            i: t,</span><br><span class="line">            l: !1,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        return i[t].call(e.exports, e, e.exports, n),</span><br><span class="line">        e.l &#x3D; !0,</span><br><span class="line">        e.exports</span><br><span class="line">    &#125;</span><br><span class="line">    _n &#x3D; n;</span><br><span class="line">&#125;(</span><br><span class="line">    &#123;</span><br><span class="line">        jsencrypt: function(t, e, i) &#123;...&#125;,</span><br><span class="line">jiami: function(t, e, r) &#123;  &#x2F;&#x2F; 其中调用了jsencrypt</span><br><span class="line">var i;</span><br><span class="line">(i &#x3D; function(t, e, i) &#123;</span><br><span class="line">var s &#x3D; r(&quot;jsencrypt&quot;);</span><br><span class="line">function n() &#123;</span><br><span class="line">void 0 !&#x3D;&#x3D; s &amp;&amp; (this.jsencrypt &#x3D; new s.JSEncrypt,</span><br><span class="line">this.jsencrypt.setPublicKey(&quot;-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDq04c6My441Gj0UFKgrqUhAUg+kQZeUeWSPlAU9fr4HBPDldAeqzx1UR92KJHuQh&#x2F;zs1HOamE2dgX9z&#x2F;2oXcJaqoRIA&#x2F;FXysx+z2YlJkSk8XQLcQ8EBOkp&#x2F;&#x2F;MZrixam7lCYpNOjadQBb2Ot0U&#x2F;Ky+jF2p+Ie8gSZ7&#x2F;u+Wnr5grywIDAQAB-----END PUBLIC KEY-----&quot;))</span><br><span class="line">&#125;</span><br><span class="line">n.prototype.encode &#x3D; function(t, e) &#123;</span><br><span class="line">var i &#x3D; e ? e + &quot;|&quot; + t : t;</span><br><span class="line">return encodeURIComponent(this.jsencrypt.encrypt(i))</span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">i.exports &#x3D; n</span><br><span class="line">&#125;</span><br><span class="line">.call(e, r, e, t)) &#x3D;&#x3D;&#x3D; undefined || (t.exports &#x3D; i)</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>调用<code>_n(&quot;jiami&quot;)</code>返回一个对象，<code>prototype</code>为对象新增方法属性，所以<code>var a = (new _n(&quot;jiami&quot;))</code>,a对象可以调用encode方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function getKey(pass,time) &#123;</span><br><span class="line">  var jiami_ &#x3D; _n(&quot;jiami&quot;)</span><br><span class="line">  var _jiami &#x3D; (new jiami_);</span><br><span class="line">  return _jiami.encode(pass,time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放到fd中运行报错<code>navigator未定义</code>,定义<code>var navigator={}</code>，报错<code>windows未定义</code>，定义<code>var window=this</code>，开始运行<code>getKey(&quot;123456&quot;,&quot;1628957324&quot;)</code>完成password加密逻辑</p><h3 id="极电竞比分网"><a href="#极电竞比分网" class="headerlink" title="极电竞比分网"></a><a href="https://www.jdj007.com/" target="_blank" rel="noopener">极电竞比分网</a></h3><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210815102936925.png" alt="image-20210815102936925"></p><p>看起来被URL编码过，解码后<code>2N1SAJY4LOPJc8gB4WeLYBVD/iB905uUz3VuZjOHMeo=</code>,看着像base64，在base64的js原生实现中<code>var base64hash = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;</code>，可以在整个网站搜该特征码</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210815103351898.png" alt="image-20210815103351898"></p><p>Base64是以下(AES DES RSA)算法的实现，这几个算法都和base64有关，定位到base64后可以逐步确认关键算法。</p><p>利用XHR定位法，格式化该js后打上断点</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210819081833996.png" alt="image-20210819081833996"></p><p>逐个调用栈查看参数信息，判断sign生成的具体位置</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210819082005121.png" alt="image-20210819082005121"></p><p>直到追溯到异步调用栈时最后一步，参数中都没有出现sign的值，点击单步进入逐步调试，找到出现sign值的时机的上一调用栈</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210819083200540.png" alt="image-20210819083200540"></p><p>回过头来关注<code>n = n.then(e.shift(), e.shift())</code>,异步执行e中的方法并删除，尝试通过e数组逐个方法进入js的实现</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210829170243059.png" alt="image-20210829170243059"></p><p>e数组的第一个js方法中找到了sign的赋值位置</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210819084149988.png" alt="image-20210819084149988"></p><blockquote><p>一般then前明文，结束后密文，需要格外关注then异步调用时的函数做了什么处理。</p></blockquote><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822070517372.png" alt="image-20210822070517372"></p><p>观察n字符串的<code>words</code>数组表示已经加密完成，sigBytes为32位，一个int占4字节，长度是8位，4*8=32，有可能是md5。<code> n = i()(t)</code>观察该js源码中i定义为<code>i = n.n(a)</code>，而<code>a = n(156)</code>，上面再也找不到n的定义点了，打上断点。</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822070908891.png" alt="image-20210822070908891"></p><p>进入n的函数定义，webpack格式雏形出现</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822071025882.png" alt="image-20210822071025882"></p><p>将整个js拷贝下来扣除无用代码并整理成如下格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">!function(e) &#123;</span><br><span class="line">    var n &#x3D; &#123;&#125;</span><br><span class="line">    function d(t) &#123;</span><br><span class="line">        if (n[t])</span><br><span class="line">            return n[t].exports;</span><br><span class="line">        var r &#x3D; n[t] &#x3D; &#123;</span><br><span class="line">            i: t,</span><br><span class="line">            l: !1,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        return e[t].call(r.exports, r, r.exports, d),</span><br><span class="line">        r.l &#x3D; !0,</span><br><span class="line">        r.exports</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(&#123;&#125;);</span><br></pre></td></tr></table></figure><p>回到网页，继续在<code>return e[t].call(r.exports, r, r.exports, d)</code>打上断点，通过控制台打印获取<code>a = n(156)</code>方法</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822071633798.png" alt="image-20210822071633798"></p><p>点击进去<code>e[156]</code>,将该方法拷贝出来到webpack模板中</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822071728633.png" alt="image-20210822071728633"></p><p>由于其中有<code>n(148)</code>，修改为<code>n(&quot;_148&quot;)</code>，n就是webpack定义的函数自己d，通过正则匹配该js中是否有其他n调用的函数，<code>n\(\d+)</code>，不存在其他调用处。在控制台中输入<code>e[148]</code>，将该方法拷贝出来到webpack模板中</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822072551724.png" alt="image-20210822072551724"></p><p>回到上面<code>i = n.n(a)</code>,断点进入发现就是返回参数a自己，脱裤子放屁</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822072726472.png" alt="image-20210822072726472"></p><p>导出webpack模板的方法</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822073219072.png" alt="image-20210822073219072"></p><p>将该js复制到浏览器中运行</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822073138659.png" alt="image-20210822073138659"></p><p>接下来就是扣取<code>encodeURIComponent(s.a.stringify(n)))</code></p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822073649573.png" alt="image-20210822073649573"></p><p>同理，再去<code>return e[t].call(r.exports, r, r.exports, d)</code>寻找157方法,将代码拷贝到webpack模板中</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822074050159.png" alt="image-20210822074050159"></p><p>对比之前的加密逻辑</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822075207657.png" alt="image-20210822075207657"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getSign(param)&#123;</span><br><span class="line">&#x2F;&#x2F; param &#x3D; timestamp&#x3D;1629589453737&amp;secret&#x3D;aHVheWluZ19zZWNyZXRfYXBp</span><br><span class="line">var i &#x3D; fff(&quot;_156&quot;)   &#x2F;&#x2F;a &#x3D; n(156), i &#x3D; n.n(a)  获取到了i变量</span><br><span class="line">var n &#x3D; i(param)  &#x2F;&#x2F; i()(t)</span><br><span class="line">var s &#x3D; fff(&quot;_157&quot;)  &#x2F;&#x2F; c &#x3D; n(157), s &#x3D; n.n(c)</span><br><span class="line">return s.stringify(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结<code>s.a.stringify(n))</code>,就是就是上面脱裤子放屁的方法，s.a就是s自己。</p><h3 id="推推99"><a href="#推推99" class="headerlink" title="推推99"></a><a href="https://beijing.tuitui99.com/denglu.html" target="_blank" rel="noopener">推推99</a></h3><p>方法定义一般分成三种</p><ol><li>var JSEncrypt = function(a){}  搜索 <code>var JSEncrypt </code></li><li>JSEncrypt: funtion(a){}   搜索<code>JSEncrypt:</code></li><li>JSEncrypt.prototype.encrypt = function(a) {}  搜索 <code>.JSEncrypt</code></li></ol><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822153348785.png" alt="image-20210822153348785"></p><p>该登录将跳出滑块，最终请求<code>check_login.html?c=0&amp;random=234</code>,获取该请求的<code>initiator</code>调用栈，打上断点后重新登录找到上两层调用栈中<code>l_submit</code></p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822153954411.png" alt="image-20210822153954411"></p><p>进入该加密方法,并将<code>jsencrypt.min.js:formatted</code>该加密文件拷贝到fd中运行，报错<code>navigator 未定义</code>,添加<code>var navigator = {}</code>，报错<code>window 未定义</code>,添加<code>var window = this</code>,添加调用方法</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822162200737.png" alt="image-20210822162200737"></p><p>通过断点debug获取setPublicKey时塞入的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 由于该js通过exports.JSEncrypt &#x3D; JSEncrypt;导出了该函数，通过new的方式调用该对象中的方法</span><br><span class="line">function getP(password)&#123;</span><br><span class="line">    var encrypt &#x3D; new JSEncrypt()</span><br><span class="line">    encrypt.setPublicKey(...)</span><br><span class="line">    return encrypt.encrypt(password)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于该自执行函数<code>exports</code>=<code>JSEncryptExports</code>,所以通过<code>JSEncryptExports.name</code>  即可拿到aa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var JSEncryptExports &#x3D; &#123;&#125;</span><br><span class="line">!(function(exports) &#123;</span><br><span class="line">exports.name &#x3D; &#39;aa&#39;</span><br><span class="line">&#125;)(JSEncryptExports);</span><br></pre></td></tr></table></figure><p>故而可以在最上面定义<code>var jiami;</code>，在<code>var JSEncrypt = function(a)</code>之后加入<code>jiami = JSEncrypt</code>导出对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function getP(password)&#123;</span><br><span class="line">    var encrypt &#x3D; new jiami()</span><br><span class="line">    encrypt.setPublicKey(...)    </span><br><span class="line">    return encrypt.encrypt(password)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拍拍贷"><a href="#拍拍贷" class="headerlink" title="拍拍贷"></a><a href="https://account.ppdai.com/pc/login" target="_blank" rel="noopener">拍拍贷</a></h3><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822163235139.png" alt="image-20210822163235139"></p><p>看起来像是RSA，所以搜索<code>setpublicKey</code>,混淆的话可能搜不到。</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822163923945.png" alt="image-20210822163923945"></p><p>图中一个加密方法，一个解密方法，在<strong>加密方法的地方断点</strong>，找到调用栈上一层<code>checkImgValidateCode</code>,定位到加密位置</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822164022300.png" alt="image-20210822164022300"></p><p>可以找到该段js最上面把加载器拷贝出来，按照之前的解决webpack模板方案解决或者通过<code>系统网页js环境模板.txt</code>拼接js解决。</p><p>本文将通过最原始的方案，首先将<code>.prototype.decrypt = function</code>所在js全部抠出来，在notepad++中语言选择JavaScript，视图中选择折叠所有层次，搜索加密代码<code>return u(this.getKey().encrypt(t))</code>,将本段function扣取出来</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210822220414389.png" alt="image-20210822220414389"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var jsss &#x3D; function(t, e, n) &#123;</span><br><span class="line">    &quot;use strict&quot;;</span><br><span class="line">    function r(t) &#123;</span><br><span class="line">        return t &amp;&amp; t.__esModule ? t : &#123;</span><br><span class="line">            default: t</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var i, o, a, s &#x3D; n(65), c &#x3D; r(s), u &#x3D; n(110), l &#x3D; r(u), d &#x3D; n(111), p &#x3D; r(d), f &#x3D; n(114), h &#x3D; r(f);</span><br><span class="line">    !function(n, r) &#123;</span><br><span class="line">        &quot;object&quot; &#x3D;&#x3D; (0,</span><br><span class="line">        h.default)(e) &amp;&amp; void 0 !&#x3D;&#x3D; t ? r(e) : (o &#x3D; [e],</span><br><span class="line">        i &#x3D; r,</span><br><span class="line">        void 0 !&#x3D;&#x3D; (a &#x3D; &quot;function&quot; &#x3D;&#x3D; typeof i ? i.apply(e, o) : i) &amp;&amp; (t.exports &#x3D; a))</span><br><span class="line">    &#125;(0, </span><br><span class="line">function(t) &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">var e &#x3D; [jsss]</span><br><span class="line">function t(r) &#123;</span><br><span class="line">var o &#x3D; &#123;</span><br><span class="line">exports: &#123;&#125;,</span><br><span class="line">id: r,</span><br><span class="line">loaded: !1</span><br><span class="line">&#125;;</span><br><span class="line">return e[r].call(o.exports,o,o.exports,t),</span><br><span class="line">o.loaded &#x3D; !0,</span><br><span class="line">o.exports</span><br><span class="line">&#125;</span><br><span class="line">t(0)</span><br></pre></td></tr></table></figure><p>报错<code>Cannot read property &#39;call&#39; of undefined</code>,查看报错的位置</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210823082351227.png" alt="image-20210823082351227"></p><p>在追究n(65),n(110)之前，下面是一个自执行函数，n=0,r=function(t){…}，而<code>r(e)</code>中的e作为参数传到<code>var jsss = function(t, e, n)</code> 中交给<code>e[r].call(o.exports,o,o.exports,t),</code>调用e[0].call传参数，其中的e作为第二个参数，即o.exports，即{}</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210823083734114.png" alt="image-20210823083734114"></p><p>所以上面代码无效，自执行函数主要执行<code>function(t) {...}</code>并把e传入处理。</p><p>接下来将function(e){…}抠出来并修改为自执行并传入e<code>!(function(t) {...})({})</code>，放到控制台中运行报错<code>Uncaught ReferenceError: p is not defined</code></p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210823084758664.png" alt="image-20210823084758664"></p><p>去掉<code>p.default ||</code>重新运行</p><p><img src="/2021/08/02/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%83%E8%AF%95%E5%8F%8D%E7%88%AChook%E5%8A%A0%E5%AF%86%E6%8A%80%E5%B7%A7/image-20210823085154409.png" alt="image-20210823085154409"></p><p>断点debug获取到publicKey后开启加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var aaa &#x3D; new window.JSEncrypt</span><br><span class="line">aaa.setPublicKey(&quot;...&quot;)</span><br><span class="line">aaa.encrypt(&quot;123456&quot;)</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某摩托的逆向分析</title>
      <link href="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
      <url>/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p>apk放入jadx-1.2.0中很明显被奇虎360加固了</p><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210727192532494.png" alt="image-20210727192532494"></p><p>使用PKiD再次确认</p><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210727192630567.png" alt="image-20210727192630567"></p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>安卓8.1+fs128arm64+pyenv local 3.8.2</p><p>adb install 摩托邦4.8.0.2021070601.apk</p><h2 id="FRIDA-DEXDump"><a href="#FRIDA-DEXDump" class="headerlink" title="FRIDA-DEXDump"></a><a href="https://github.com/hluwa/FRIDA-DEXDump.git" target="_blank" rel="noopener"><strong>FRIDA-DEXDump</strong></a></h2><p>对于完整的 dex，采用暴力搜索 DEX.035 即可找到。而对于抹头的 dex，通过匹配一些特征来找到。FRIDA-DEXDump纯粹的利用特征从内存中检索已经加载的 <code>DEX</code> 文件，而不需要拦截任何的函数得到一些结构体，并从中获取 <code>DEX</code> 的内存地址或其他相关信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;FRIDA-DEXDump.git  支持搜索没有文件头的 DEX 文件</span><br><span class="line">python main.py  前台运行需要脱壳的app，将dump下的dex放到jadx-1.2.0中反编译</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210727192238333.png" alt="image-20210727192238333"></p><h2 id="FART"><a href="#FART" class="headerlink" title="FART"></a><a href="https://github.com/hanbinglengyue/FART" target="_blank" rel="noopener">FART</a></h2><p>在设置中找到需要脱壳的应用配置sdcard存储空间权限，否则只能存到<code>var savepath = &quot;/data/data/com.motoband&quot;;</code>首先拷贝fart.so和fart64.so到/data/app目录下(权限不足就先放到/data/local/tmp再转移目录)，并使用chmod 777 设置好权限</p><p>frida_fart_reflection.js  </p><blockquote><p>用反射的方式实现的函数粒度的脱壳，与使用hook方式实现的方法不同,可以使用spawn和attach两种方式使用</p><p>调用dump(classname),传入要处理的类名，只完成对某一个类下的所有函数的CodeItem完成dump，效率更高，dump下来的类函数的所有CodeItem在含有类名的bin文件中</p></blockquote><p>frida_fart_hook.js</p><blockquote><p>使用hook的方式实现的函数粒度的脱壳，仅仅是对类中的所有函数进行了加载，但依然可以解决绝大多数的抽取保护,需要以spawn方式启动app，等待app进入Activity界面后，执行fart()函数即可</p><p>如果发现某个类中的函数的CodeItem没有dump下来，可以调用dump(classname),传入要处理的类名，完成对该类下的所有函数体的dump,dump下来的函数体会追加到bin文件当中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hanbinglengyue&#x2F;FART.git</span><br><span class="line">frida -UF -l frida_fart_reflection.js</span><br><span class="line">frida -U -f com.motoband -l frida_fart_reflection.js --no-pause</span><br><span class="line">frida -U -f com.motoband -l frida_fart_hook.js --no-pause</span><br><span class="line">mv dex &#x2F;sdcard&#x2F;com.motoband&#x2F;   在使用爱莫助手下载</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210727195632734.png" alt="image-20210727195632734"></p><h2 id="Youpk"><a href="#Youpk" class="headerlink" title="Youpk"></a>Youpk</h2><p>仅限机型pixel 1代，<strong>效果最好，脱的裤衩都没了</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7z x Youpk_sailfish.zip </span><br><span class="line">adb reboot bootloader</span><br><span class="line">cd sailfish-nzh54d &amp;&amp; sh flash-all.sh</span><br></pre></td></tr></table></figure><p>安装apk后在Settings-Apps-摩托邦-Permissions启动存储权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb shell &quot;echo com.motoband &gt;&gt; &#x2F;data&#x2F;local&#x2F;tmp&#x2F;unpacker.config&quot;  启动apk等待脱壳,每隔10秒将自动重新脱壳(已完全dump的dex将被忽略), 当日志打印unpack end时脱壳完成</span><br><span class="line">adb pull &#x2F;data&#x2F;data&#x2F;com.motoband&#x2F;unpacker  pull出dump文件, dump文件路径为 &#x2F;data&#x2F;data&#x2F;包名&#x2F;unpacker</span><br><span class="line">java -jar dexfixer.jar &#x2F;data&#x2F;data&#x2F;com.motoband&#x2F;unpacker &#x2F;data&#x2F;data&#x2F;com.motoband&#x2F;output   调用修复工具 dexfixer.jar, 两个参数, 第一个为dump文件目录(必须为有效路径), 第二个为重组后的DEX目录(不存在将会创建)</span><br><span class="line"></span><br><span class="line">adb install wifiadb.apk</span><br><span class="line">adb tcpip 5555   免root执行tcpip调试模式</span><br><span class="line">adb connect 172.20.103.254:5555</span><br></pre></td></tr></table></figure><p><strong>适用场景</strong></p><ol><li>整体加固</li><li>抽取:<ul><li>nop占坑型(类似某加密)</li><li>naitve化, 在&lt;clinit&gt;中解密(类似早期阿里)</li><li>goto解密型(类似新版某加密?najia)</li></ul></li></ol><h2 id="AUPK"><a href="#AUPK" class="headerlink" title="AUPK"></a><a href="https://github.com/FeJQ/AUPK" target="_blank" rel="noopener">AUPK</a></h2><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><h2 id="charles-postern"><a href="#charles-postern" class="headerlink" title="charles+postern"></a>charles+postern</h2><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728113500752.png" alt="image-20210728113500752"></p><blockquote><p>SSL handshake with client failed: An unknown issue occurred processing the certificate (certificate_unknown)看起来做了证书绑定，使用r0capture开启dump证书也未dump下来，无法正常抓包</p></blockquote><p>./fs1280arm64   启动frida，<code>netstat -tnlp|grep 27042</code> 查看占用端口</p><h2 id="frida-ssl-logger"><a href="#frida-ssl-logger" class="headerlink" title="frida_ssl_logger"></a><a href="https://github.com/BigFaceCat2017/frida_ssl_logger.git" target="_blank" rel="noopener">frida_ssl_logger</a></h2><p>核心原理就是对<code>SSL_read</code>和<code>SSL_write</code>进行<code>hook</code>，得到其收发包的明文数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python ssl_logger.py -U -f com.motoband</span><br><span class="line">python ssl_logger.py -U -f com.motoband -p motoband.pcap  生成的pcap通过wireshark打开</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728101147025.png" alt="image-20210728101147025"></p><h2 id="OkHttpLogger-Frida"><a href="#OkHttpLogger-Frida" class="headerlink" title="OkHttpLogger-Frida"></a><a href="https://github.com/siyujie/OkHttpLogger-Frida.git" target="_blank" rel="noopener">OkHttpLogger-Frida</a></h2><p>由于所有使用的okhttp框架的App发出的请求都是通过RealCall.java发出的，那么我们可以hook此类拿到request和response,也可以缓存下来每一个请求的call对象，进行再次请求，所以选择了此处进行hook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push okhttpfind.dex &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">frida -U -l okhttp_poker.js -f com.motoband --no-pause  可追加 -o [output filepath]保存到文件</span><br></pre></td></tr></table></figure><p>判断是否混淆，如果混淆需要修改okhttp_poker.js中的混淆后的变量</p><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728102421848.png" alt="image-20210728102421848"></p><p>开启抓包</p><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728102752197.png" alt="image-20210728102752197"></p><h2 id="r0capture"><a href="#r0capture" class="headerlink" title="r0capture"></a><a href="https://github.com/r0ysue/r0capture.git" target="_blank" rel="noopener">r0capture</a></h2><p>./fs14216arm64<br>pyenv local 3.9.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity activities  查看前台app包名</span><br><span class="line">python r0capture.py -U -f  com.motoband -v</span><br><span class="line">python r0capture.py -U -f  com.motoband -v -p motoband.pcap</span><br><span class="line">python r0capture.py -U -f com.motoband -v &gt;&gt;motoband.txt</span><br><span class="line">frida -U -f com.motoband -l script.js --no-pause -o motoband.txt</span><br></pre></td></tr></table></figure><p>ctrl+shift+o获取请求与请求头</p><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728111350099.png" alt="image-20210728111350099"></p><p>ctrl+shift+o获取请求参数</p><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728111453906.png" alt="image-20210728111453906"></p><p>拼装到postman中</p><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728111914921.png" alt="image-20210728111914921"></p><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728111831220.png" alt="image-20210728111831220"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过Youpk脱下的dex一起放到jdax-1.2.0中，搜索<code>seriesinfo</code></p><pre><code>@POST(&quot;car/seriesinfo&quot;)Observable&lt;ResponseBody&gt; motoInfo(@Body RequestBody requestBody);</code></pre><p>查找用例位于<code>com.motoband.core.manager.ChooseCarManager</code></p><pre><code>public Observable&lt;MotorbikeSeriesModel&gt; requestMotorInfo(String str, int i) {    HashMap hashMap = new HashMap();    hashMap.put(IntentConstants.MODELID, str);    hashMap.put(&quot;source&quot;, Integer.valueOf(i));    return RetrofitHelper.getObjectObservable(((ChooseCarService) RetrofitHelper.getRetrofit().create(ChooseCarService.class)).motoInfo(RetrofitHelper.getRequestBody(hashMap)), MotorbikeSeriesModel.class).observeOn(AndroidSchedulers.mainThread()).doOnNext($$Lambda$ChooseCarManager$XcbjKQVeNSK4TPlk0mzi1vIv6Z0.INSTANCE);}</code></pre><p>显然<code>getRequestBody</code>就是生成众多加密参数的方法，位于<code>com.motoband.core.http.RetrofitHelper</code></p><pre><code>public static RequestBody getRequestBody(Map&lt;String, Object&gt; map) {    if (map == null) {        map = new HashMap&lt;&gt;();    }    long currentTimeMillis = System.currentTimeMillis();    map.put(&quot;token&quot;, UserInfo.getInstance().getToken());    map.put(MBRequestConstants.REQUEST_REQUESTID, CommonUtil.getRequestId(currentTimeMillis));    map.put(MBRequestConstants.REQUEST_CTYPE, &quot;2&quot;);    map.put(MBRequestConstants.REQUEST_CVERSION, AppUtils.getAppVersionName());    map.put(&quot;citycode&quot;, UserInfo.getInstance().getCitycode());    if (!map.containsKey(&quot;userid&quot;)) {        map.put(&quot;userid&quot;, UserInfo.getInstance().getUserid());    }    if (!map.containsKey(MBRequestConstants.REQUEST_LONLAT)) {        map.put(MBRequestConstants.REQUEST_LONLAT, UserInfo.getInstance().getLonlatStr());    }    map.put(MBRequestConstants.REQUEST_PUSH_ID, JPushInterface.getRegistrationID(MBUtil.getContext()));    ArrayList&lt;String&gt; arrayList = new ArrayList();    for (String str : map.keySet()) {        if (map.get(str) == null) {            arrayList.add(str);        }    }    for (String str2 : arrayList) {        map.remove(str2);    }    String str3 = null;    try {        str3 = RSAUtil.rsaSign(EncryptUtils.encryptMD5ToString(RSAUtil.getSignContent(map)).toLowerCase(), Constants.CLIENT_PRIVATE_KEY);    } catch (Exception e) {        e.printStackTrace();        System.out.println(MBResponseCode.RSA_SIGN_ERROR);    }    map.put(&quot;sign&quot;, str3);    return RequestBody.create(MediaType.parse(HttpConstants.MediaType_Json), JSON.toJSONString(map));}</code></pre><h2 id="多进程保护"><a href="#多进程保护" class="headerlink" title="多进程保护"></a>多进程保护</h2><p>由于摩托邦存在多进程保护，基于信号的发送和接收，实现相互的保护防止被动态攻击。简单的双进程保护就是从原进程再fork一个空进程出来,让逆向分析的时候附加到空进程中导致hook不上。</p><blockquote><p>双进程进程保护主要功能： 1、保护父进程，ptrace所有线程，防止被附加、调试、暂停； 2、保护子进程，防止被暂停、异常退出；</p></blockquote><p>objection附加双进程保护的app的时候报错,一般双进程保护,先把app关掉直接用spwan模式就能附加上。</p><p>查看frida源码和objection源码：</p><p>frida附加的顺序:spawn-&gt;resume-&gt;attach<br>objection附加的顺序:spawn-&gt;attach-&gt;resume</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;root&#x2F;.pyenv&#x2F;versions&#x2F;3.8.2&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;objection&#x2F;utils&#x2F;agent.py   添加如下代码</span><br><span class="line">        debug_print(&#39;Resuming PID test &#96;&#123;pid&#125;&#96;&#39;.format(pid&#x3D;self.spawned_pid))</span><br><span class="line">        self.device.resume(self.spawned_pid)</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728160806491.png" alt="image-20210728160806491"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注释如下代码</span><br><span class="line">        #if not self.exports().ping():</span><br><span class="line">        #    click.secho(&#39;Failed to ping the agent&#39;, fg&#x3D;&#39;red&#39;)</span><br><span class="line">        #    raise Exception(&#39;Failed to communicate with agent&#39;)</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728160856891.png" alt="image-20210728160856891"></p><p>实际就是把resume放到步骤的中间,如果不行的话适当加个sleep就能附加上了</p><h2 id="内存漫游"><a href="#内存漫游" class="headerlink" title="内存漫游"></a>内存漫游</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.motoband explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">android hooking search classes com.motoband.core.manager.ChooseCarManager  搜索类</span><br><span class="line">android hooking list class_methods com.motoband.core.manager.ChooseCarManager  列出类方法</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728150824474.png" alt="image-20210728150824474"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker classdump com.motoband.core.http.RetrofitHelper  根据指定类dump类结构</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x3576  查看类的值</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728165336743.png" alt="image-20210728165336743"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker classsearch com.motoband.core.http.RetrofitHelper   搜索所有相关类</span><br><span class="line">plugin wallbreaker objectsearch com.motoband.core.http.RetrofitHelper$1$1  搜索内存中指定类返回地址</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x2d9a   根据地址dump类所有方法</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728164831881.png" alt="image-20210728164831881"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method com.motoband.core.manager.ChooseCarManager.requestMotorInfo --dump-backtrace --dump-args --dump-return   hook指定方法requestMotorInfo，打印参数返回值调用栈</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728152259851.png" alt="image-20210728152259851"></p><p>以上hook说明在requestMotorInfo中传入品牌型号<code>3334</code>后进入getRequestBody函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobs list  查看进程中的任务</span><br><span class="line">jobs kill id  杀死hook任务</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728152113382.png" alt="image-20210728152113382"></p><h2 id="参数分析"><a href="#参数分析" class="headerlink" title="参数分析"></a>参数分析</h2><p>根据以上Jadx中的分析，App在请求<code>car/seriesinfo</code>时调用了<code>RetrofitHelper.getRequestBody(hashMap))</code>，在函数<code>getRequestBody</code>中对不同参数包括token,sign等进行了加密，并<code>RequestBody.create(MediaType.parse(HttpConstants.MediaType_Json), JSON.toJSONString(map));</code>最终将请求参数的HashMap转成JSONString作为create传递参数。</p><p>那么即可通过主动调用<code>getRequestBody</code>的同时hook函数<code>RequestBody.create</code>拿到第二个参数作为请求参数，由于headers中数据一致，加上请求url即可完成数据抓取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function hook_RequestBody_create()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;okhttp3.RequestBody&quot;).create.overload(&#39;okhttp3.MediaType&#39;, &#39;java.lang.String&#39;).implementation &#x3D; function(mediaType,str)&#123;</span><br><span class="line">            var result &#x3D; this.create(mediaType,str)</span><br><span class="line">            console.log(&quot;params&#x3D;&#x3D;&#x3D;&#x3D;&quot;,str)</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function Initiative_getRequestBody()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var map &#x3D; Java.use(&#39;java.util.HashMap&#39;).$new();</span><br><span class="line">        var StringClass &#x3D; Java.use(&quot;java.lang.String&quot;);</span><br><span class="line">        map.put(&quot;modelid&quot;, StringClass.$new(&quot;3334&quot;));</span><br><span class="line">        var RetrofitHelper &#x3D; Java.use(&quot;com.motoband.core.http.RetrofitHelper&quot;);</span><br><span class="line">        RetrofitHelper.getRequestBody(map);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(&quot;Main&quot;)</span><br><span class="line">    hook_RequestBody_create(); </span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728175304412.png" alt="image-20210728175304412"></p><p>以上完成绕过so层通过主动调用和hook的方式获取请求参数，接下来就是完成爬虫的具体逻辑。</p><h2 id="抓包-1"><a href="#抓包-1" class="headerlink" title="抓包"></a>抓包</h2><p>通过<code>python r0capture.py -U com.motoband -v -p moto.pcap</code>抓包分析各个页面请求并使用python实现，headers可以通过<code>请求头加引号.py</code>自动生成</p><h3 id="选车列表"><a href="#选车列表" class="headerlink" title="选车列表"></a>选车列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;Source&#39;: &#39;source&#39;,</span><br><span class="line">    &#39;Date&#39;: &#39;Wed, 28 Jul 2021 10:42:37 GMT&#39;,</span><br><span class="line">    &#39;Authorization&#39;: &#39;hmac id&#x3D;&quot;AKIDKpo6me25b14nzcNefQeoqR95syh2ayx97s0g&quot;, algorithm&#x3D;&quot;hmac-sha1&quot;, headers&#x3D;&quot;date source&quot;, signature&#x3D;&quot;LueIYYQhihnHza8ZIzzH3X1J6xM&#x3D;&quot;&#39;,</span><br><span class="line">    &#39;Content-Type&#39;: &#39;application&#x2F;json; charset&#x3D;utf-8&#39;,</span><br><span class="line">    &#39;Content-Length&#39;: &#39;396&#39;,</span><br><span class="line">    &#39;Host&#39;: &#39;api.motuobang.com&#39;,</span><br><span class="line">    &#39;Connection&#39;: &#39;Keep-Alive&#39;,</span><br><span class="line">    &#39;Accept-Encoding&#39;: &#39;gzip&#39;,</span><br><span class="line">    &#39;User-Agent&#39;: &#39;okhttp&#x2F;3.14.9&#39;</span><br><span class="line">&#125;</span><br><span class="line">param_str &#x3D; &#39;&#123;&quot;jpushregistrationid&quot;:&quot;18071adc03d4364a59f&quot;,&quot;ctype&quot;:&quot;2&quot;,&quot;citycode&quot;:&quot;0512&quot;,&quot;requestid&quot;:&quot;10120210728184237309B6FABE44946F25C3&quot;,&quot;brandid&quot;:0,&quot;sign&quot;:&quot;Un9ld6EYErQmE2ab0CgGP4pbqGKz8taTYlT2d4vgJlR1e6N3vp2Ld&#x2F;YHpZVHLAYQgdYxmHDPDmdPiapY&#x2F;Irewg&#x3D;&#x3D;&quot;,&quot;type&quot;:0,&quot;cversion&quot;:&quot;4.8.0.2021070601&quot;,&quot;userid&quot;:&quot;53AEB07289854E91A74DA4718D86617F&quot;,&quot;token&quot;:&quot;6A057F7AB0654DEBA3A9BAFE51A17D62&quot;,&quot;lonlat&quot;:&quot;[120.670592,31.295319]&quot;&#125;&#39;</span><br><span class="line"></span><br><span class="line">data &#x3D; requests.post(&#39;http:&#x2F;&#x2F;api.motuobang.com&#x2F;release&#x2F;car&#x2F;brandinfo&#39;, data&#x3D;param_str,</span><br><span class="line">                     headers&#x3D;headers).json()[&quot;data&quot;]</span><br><span class="line">brandlist &#x3D; json.loads(data)[&quot;brandlist&quot;]</span><br></pre></td></tr></table></figure><h3 id="品牌列表"><a href="#品牌列表" class="headerlink" title="品牌列表"></a>品牌列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;Source&#39;: &#39;source&#39;,</span><br><span class="line">    &#39;Date&#39;: &#39;Wed, 28 Jul 2021 11:02:48 GMT&#39;,</span><br><span class="line">    &#39;Authorization&#39;: &#39;hmac id&#x3D;&quot;AKIDKpo6me25b14nzcNefQeoqR95syh2ayx97s0g&quot;, algorithm&#x3D;&quot;hmac-sha1&quot;, headers&#x3D;&quot;date source&quot;, signature&#x3D;&quot;xUe79aim7V1Nur4J8DfN9KSDU0Q&#x3D;&quot;&#39;,</span><br><span class="line">    &#39;Content-Type&#39;: &#39;application&#x2F;json; charset&#x3D;utf-8&#39;,</span><br><span class="line">    &#39;Content-Length&#39;: &#39;396&#39;,</span><br><span class="line">    &#39;Host&#39;: &#39;api.motuobang.com&#39;,</span><br><span class="line">    &#39;Connection&#39;: &#39;Keep-Alive&#39;,</span><br><span class="line">    &#39;Accept-Encoding&#39;: &#39;gzip&#39;,</span><br><span class="line">    &#39;User-Agent&#39;: &#39;okhttp&#x2F;3.14.9&#39;</span><br><span class="line">&#125;</span><br><span class="line">param_str &#x3D; &#39;&#123;&quot;jpushregistrationid&quot;:&quot;18071adc03d4364a59f&quot;,&quot;searchcar&quot;:&quot;&#123;\\&quot;brandids\\&quot;:[28],\\&quot;haveabs\\&quot;:0,\\&quot;maxcc\\&quot;:0.0,\\&quot;maxmaxpower\\&quot;:0.0,\\&quot;maxprice\\&quot;:0,\\&quot;maxsitheight\\&quot;:0,\\&quot;maxxuhanglicheng\\&quot;:0,\\&quot;maxzuigaochesu\\&quot;:0,\\&quot;mincc\\&quot;:0.0,\\&quot;minmaxpower\\&quot;:0.0,\\&quot;minprice\\&quot;:0,\\&quot;minsitheight\\&quot;:0,\\&quot;minxuhanglicheng\\&quot;:0,\\&quot;minzuigaochesu\\&quot;:0,\\&quot;modelid\\&quot;:-1,\\&quot;month\\&quot;:0,\\&quot;pagenum\\&quot;:0,\\&quot;pagesize\\&quot;:200,\\&quot;searchtype\\&quot;:0,\\&quot;source\\&quot;:0,\\&quot;store\\&quot;:0,\\&quot;year\\&quot;:0&#125;&quot;,&quot;ctype&quot;:&quot;2&quot;,&quot;citycode&quot;:&quot;0512&quot;,&quot;requestid&quot;:&quot;10120210728190247800B530F6E7211E0724&quot;,&quot;sign&quot;:&quot;BeHwJ+uZ0BK7bR9z6Q4XifFqp0crBtwDouA3BxYYU7br2XQvwehJPrkfnn9MV&#x2F;PezYqMawUZI6zEDiplwJ49ug&#x3D;&#x3D;&quot;,&quot;cversion&quot;:&quot;4.8.0.2021070601&quot;,&quot;userid&quot;:&quot;53AEB07289854E91A74DA4718D86617F&quot;,&quot;token&quot;:&quot;5100BF109300497C83A51614C58314FD&quot;,&quot;lonlat&quot;:&quot;[120.67073,31.295348]&quot;&#125;&#39;</span><br><span class="line"></span><br><span class="line">data &#x3D; requests.post(&#39;http:&#x2F;&#x2F;api.motuobang.com&#x2F;release&#x2F;car&#x2F;searchv2&#39;, data&#x3D;param_str,</span><br><span class="line">                     headers&#x3D;headers).json()[&quot;data&quot;]</span><br><span class="line">print(json.loads(data)[&quot;serieslist&quot;])</span><br></pre></td></tr></table></figure><h3 id="品牌详情"><a href="#品牌详情" class="headerlink" title="品牌详情"></a>品牌详情</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;Source&#39;: &#39;source&#39;,</span><br><span class="line">    &#39;Date&#39;: &#39;Mon, 26 Jul 2021 05:47:06 GMT&#39;,</span><br><span class="line">    &#39;Authorization&#39;: &#39;hmac id&#x3D;&quot;AKIDKpo6me25b14nzcNefQeoqR95syh2ayx97s0g&quot;, algorithm&#x3D;&quot;hmac-sha1&quot;, headers&#x3D;&quot;date source&quot;, signature&#x3D;&quot;jmwgtLvjj06A&#x2F;M&#x2F;TNcCqL72GRsk&#x3D;&quot;&#39;,</span><br><span class="line">    &#39;Content-Type&#39;: &#39;application&#x2F;json; charset&#x3D;utf-8 &#39;,</span><br><span class="line">    &#39;Content-Length&#39;: &#39;403&#39;,</span><br><span class="line">    &#39;Host&#39;: &#39;api.motuobang.com&#39;,</span><br><span class="line">    &#39;Connection&#39;: &#39;Keep-Alive&#39;,</span><br><span class="line">    &#39;Accept-Encoding&#39;: &#39;gzip&#39;,</span><br><span class="line">    &#39;User-Agent&#39;: &#39;okhttp&#x2F;3.14.&#39;</span><br><span class="line">&#125;</span><br><span class="line">param_str &#x3D; &#39;&#123;&quot;jpushregistrationid&quot;:&quot;1104a89792736fd015f&quot;,&quot;lonlat&quot;:&quot;[120.670593,31.295318]&quot;,&quot;ctype&quot;:&quot;2&quot;,&quot;sign&quot;:&quot;SJxFIJSEi7BwlnPLC&#x2F;6j3RfyxsR2EEEC2uWGpfC3&#x2F;MQl&#x2F;8gSCS5GcqSbre&#x2F;S3Jrrws+&#x2F;LYQzGE08T+Gv+tIIAg&#x3D;&#x3D;&quot;,&quot;source&quot;:0,&quot;token&quot;:&quot;89DFF7721007455D806E282F8195B0EF&quot;,&quot;requestid&quot;:&quot;10120210726134706717A11599A619EBCF39&quot;,&quot;citycode&quot;:&quot;0512&quot;,&quot;cversion&quot;:&quot;4.8.0.2021070601&quot;,&quot;userid&quot;:&quot;53AEB07289854E91A74DA4718D86617F&quot;,&quot;modelid&quot;:&quot;3387&quot;&#125;&#39;</span><br><span class="line"></span><br><span class="line">data &#x3D; requests.post(&#39;http:&#x2F;&#x2F;api.motuobang.com&#x2F;release&#x2F;car&#x2F;seriesinfo&#39;, data&#x3D;param_str,</span><br><span class="line">                     headers&#x3D;headers).json()[&quot;data&quot;]</span><br><span class="line">print(json.loads(data)[&quot;seriesinfo&quot;])</span><br></pre></td></tr></table></figure><h2 id="frida-rpc-数据传递"><a href="#frida-rpc-数据传递" class="headerlink" title="frida rpc 数据传递"></a>frida rpc 数据传递</h2><h3 id="hook-RequestBody-create"><a href="#hook-RequestBody-create" class="headerlink" title="hook RequestBody.create"></a>hook RequestBody.create</h3><p>由于<code>RequestBody.create(MediaType.parse(HttpConstants.MediaType_Json), JSON.toJSONString(map));</code>，hook create即可拿到入参=请求头加密参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function hook_body_create()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;okhttp3.RequestBody&quot;).create.overload(&#39;okhttp3.MediaType&#39;, &#39;java.lang.String&#39;).implementation &#x3D; function(mediaType,str)&#123;</span><br><span class="line">            var result &#x3D; this.create(mediaType,str)</span><br><span class="line">            send(str)</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(&quot;Main&quot;)</span><br><span class="line">    hook_body_create(); </span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h3 id="主动调用searchv2"><a href="#主动调用searchv2" class="headerlink" title="主动调用searchv2"></a>主动调用searchv2</h3><p>查看选车列表时，搜索<code>brandinfo</code></p><pre><code>@POST(&quot;car/brandinfo&quot;)Observable&lt;ResponseBody&gt; refreshBrandInfo(@Body RequestBody requestBody);</code></pre><p>查找用例<code>com.motoband.core.manager.MotoBrandManager</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.motoband.core.manager.MotoBrandManager --dump-args --dump-backtrace --dump-return   将整个类hook，点击触发类实现</span><br><span class="line">android hooking watch class_method com.motoband.core.manager.MotoBrandManager.requestBrandDetail --dump-args --dump-backtrace --dump-return  hook触发的类方法并拿到参数为brandid</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210728211005543.png" alt="image-20210728211005543"></p><p>查看品牌列表时，搜索<code>searchv2</code></p><pre><code>@POST(&quot;car/searchv2&quot;)Observable&lt;ResponseBody&gt; searchNewMotoModelsV2(@Body RequestBody requestBody);</code></pre><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210729084834395.png" alt="image-20210729084834395"></p><p>查找用例时有多个方法中调用，不过只有两个类，接下来通过objection hook上这两个类中的所有方法，点击指定品牌，触发<code>car/searchv2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.motoband.core.manager.ChooseCarManager --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method com.motoband.core.manager.ChooseCarManager.brandSeries --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210729085320595.png" alt="image-20210729085320595"></p><p>以上分析得知触发了<code>com.motoband.core.manager.ChooseCarManager.brandSeries</code>方法，传递第一个参数为brandid，结合jadx分析</p><pre><code>public Observable&lt;CarFilterSearchModel&gt; brandSeries(String str, boolean z) {    HashMap hashMap = new HashMap();    hashMap.put(&quot;searchcar&quot;, SearchMotoFilterModel.toBrandSeriesJson(Integer.parseInt(str), z));    return RetrofitHelper.getObjectObservable(((ChooseCarService) RetrofitHelper.getRetrofit().create(ChooseCarService.class)).searchNewMotoModelsV2(RetrofitHelper.getRequestBody(hashMap)), CarFilterSearchModel.class).observeOn(AndroidSchedulers.mainThread());}</code></pre><p>拼接<code>searchcar</code>到map中，通过<code>getRequestBody</code>获取加密请求参数。接下来尝试hook <code>SearchMotoFilterModel.toBrandSeriesJson</code> 拿到入参，利用frida实现主动调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function hook_searchv2(id)&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var search_map &#x3D; Java.use(&#39;java.util.HashMap&#39;).$new();</span><br><span class="line">        var StringClass &#x3D; Java.use(&quot;java.lang.String&quot;);</span><br><span class="line">        var IntegerClass &#x3D; Java.use(&quot;java.lang.Integer&quot;);</span><br><span class="line">        var BooleanClass &#x3D; Java.use(&quot;java.lang.Boolean&quot;);</span><br><span class="line">        var SearchMotoFilterModel &#x3D; Java.use(&#39;com.motoband.core.model.SearchMotoFilterModel&#39;).$new();</span><br><span class="line">        &#x2F;&#x2F; for brandinfo</span><br><span class="line">        &#x2F;&#x2F; search_map.put(&quot;type&quot;, IntegerClass.$new(1));</span><br><span class="line">        &#x2F;&#x2F; search_map.put(&quot;brandid&quot;, StringClass.$new(id));</span><br><span class="line">        search_map.put(&quot;searchcar&quot;,SearchMotoFilterModel.toBrandSeriesJson(id,false));</span><br><span class="line">        var RetrofitHelper &#x3D; Java.use(&quot;com.motoband.core.http.RetrofitHelper&quot;);</span><br><span class="line">        RetrofitHelper.getRequestBody(search_map);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主动调用serials-info"><a href="#主动调用serials-info" class="headerlink" title="主动调用serials_info"></a>主动调用serials_info</h3><p>查看品牌详情时，搜索<code>seriesinfo</code></p><pre><code>@POST(&quot;car/seriesinfo&quot;)Observable&lt;ResponseBody&gt; motoInfo(@Body RequestBody requestBody);</code></pre><p>查找用例</p><pre><code>public Observable&lt;MotorbikeSeriesModel&gt; requestMotorInfo(String str, int i) {    HashMap hashMap = new HashMap();    hashMap.put(IntentConstants.MODELID, str);    hashMap.put(&quot;source&quot;, Integer.valueOf(i));    return RetrofitHelper.getObjectObservable(((ChooseCarService) RetrofitHelper.getRetrofit().create(ChooseCarService.class)).motoInfo(RetrofitHelper.getRequestBody(hashMap)), MotorbikeSeriesModel.class).observeOn(AndroidSchedulers.mainThread()).doOnNext($$Lambda$ChooseCarManager$XcbjKQVeNSK4TPlk0mzi1vIv6Z0.INSTANCE);}</code></pre><p>hook实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function hook_seriesinfo(id)&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var map &#x3D; Java.use(&#39;java.util.HashMap&#39;).$new();</span><br><span class="line">        var StringClass &#x3D; Java.use(&quot;java.lang.String&quot;);</span><br><span class="line">        map.put(&quot;modelid&quot;, StringClass.$new(id));</span><br><span class="line">        var RetrofitHelper &#x3D; Java.use(&quot;com.motoband.core.http.RetrofitHelper&quot;);</span><br><span class="line">        RetrofitHelper.getRequestBody(map);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rpc调用"><a href="#rpc调用" class="headerlink" title="rpc调用"></a>rpc调用</h3><p>frida主动调用各个方法时，同时间hook RequestBody.create方法，拿到关键加密参数，rpc发送给python，完成爬虫数据拼装，实现数据抓取。</p><p>js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line">    hookseriesinfo: hook_seriesinfo,</span><br><span class="line">    hooksearchv2: hook_searchv2,</span><br><span class="line">    hookbodybreate: hook_body_create</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">import time </span><br><span class="line">import frida</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">def my_message_handler(message, payload):</span><br><span class="line">    if message[&quot;type&quot;] &#x3D;&#x3D; &quot;send&quot;:  </span><br><span class="line">        # print(&quot;payload如下:&quot;,message[&quot;payload&quot;])</span><br><span class="line">        payload &#x3D; json.loads(message[&quot;payload&quot;])</span><br><span class="line">        if &quot;searchcar&quot; in payload:</span><br><span class="line">            # searchv2</span><br><span class="line">            print(&quot;searchv2&quot;)</span><br><span class="line">            serials &#x3D; searchv2(payload)</span><br><span class="line">            for s in serials:</span><br><span class="line">                brandname &#x3D; s[&#39;brandname&#39;]</span><br><span class="line">                name &#x3D; s[&#39;name&#39;]</span><br><span class="line">                modelid &#x3D; s[&#39;modelid&#39;]</span><br><span class="line">                name_model_dict[brandname+&quot;_&quot;+name] &#x3D; modelid</span><br><span class="line">        else:</span><br><span class="line">            # seriesinfo</span><br><span class="line">            print(&quot;seriesinfo&quot;)</span><br><span class="line">            serialsinfo &#x3D; seriesinfo(payload)</span><br><span class="line">            pdfurl &#x3D; serialsinfo[&quot;pdfurl&quot;]</span><br><span class="line">            name &#x3D; serialsinfo[&quot;name&quot;]</span><br><span class="line">            brandname &#x3D; serialsinfo[&quot;brandname&quot;]</span><br><span class="line">            print(&quot;pdfurl:&quot;,pdfurl)</span><br><span class="line">            if not pdfurl.isspace():</span><br><span class="line">                down_res &#x3D; requests.get(url&#x3D;pdfurl)</span><br><span class="line">                with open(brandname+&quot;_&quot;+name+&quot;.pdf&quot;,&quot;wb&quot;) as f:</span><br><span class="line">                    f.write(down_res.content)</span><br><span class="line">            # input()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line"># pid &#x3D; device.spawn([&quot;com.motoband&quot;])</span><br><span class="line"># device.resume(pid)</span><br><span class="line"># time.sleep(10)</span><br><span class="line">session &#x3D; device.attach(&quot;com.motoband&quot;)</span><br><span class="line">with open(&quot;motoband.js&quot;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line">script.on(&quot;message&quot;, my_message_handler) </span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line"># request for brandinfo </span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;Source&#39;: &#39;source&#39;,</span><br><span class="line">    &#39;Date&#39;: &#39;Wed, 28 Jul 2021 10:42:37 GMT&#39;,</span><br><span class="line">    &#39;Authorization&#39;: &#39;hmac id&#x3D;&quot;AKIDKpo6me25b14nzcNefQeoqR95syh2ayx97s0g&quot;, algorithm&#x3D;&quot;hmac-sha1&quot;, headers&#x3D;&quot;date source&quot;, signature&#x3D;&quot;LueIYYQhihnHza8ZIzzH3X1J6xM&#x3D;&quot;&#39;,</span><br><span class="line">    &#39;Content-Type&#39;: &#39;application&#x2F;json;*&#x2F;jg charset&#x3D;utf-8&#39;,</span><br><span class="line">    &#39;Content-Length&#39;: &#39;396&#39;,</span><br><span class="line">    &#39;Host&#39;: &#39;api.motuobang.com&#39;,</span><br><span class="line">    &#39;Connection&#39;: &#39;Keep-Alive&#39;,</span><br><span class="line">    &#39;Accept-Encoding&#39;: &#39;gzip&#39;,</span><br><span class="line">    &#39;User-Agent&#39;: &#39;okhttp&#x2F;3.14.9&#39;</span><br><span class="line">&#125;</span><br><span class="line">param_str &#x3D; &#39;&#123;&quot;jpushregistrationid&quot;:&quot;18071adc03d4364a59f&quot;,&quot;ctype&quot;:&quot;2&quot;,&quot;citycode&quot;:&quot;0512&quot;,&quot;requestid&quot;:&quot;10120210728184237309B6FABE44946F25C3&quot;,&quot;brandid&quot;:0,&quot;sign&quot;:&quot;Un9ld6EYErQmE2ab0CgGP4pbqGKz8taTYlT2d4vgJlR1e6N3vp2Ld&#x2F;YHpZVHLAYQgdYxmHDPDmdPiapY&#x2F;Irewg&#x3D;&#x3D;&quot;,&quot;type&quot;:0,&quot;cversion&quot;:&quot;4.8.0.2021070601&quot;,&quot;userid&quot;:&quot;53AEB07289854E91A74DA4718D86617F&quot;,&quot;token&quot;:&quot;6A057F7AB0654DEBA3A9BAFE51A17D62&quot;,&quot;lonlat&quot;:&quot;[120.670592,31.295319]&quot;&#125;&#39;</span><br><span class="line">data &#x3D; requests.post(&#39;http:&#x2F;&#x2F;api.motuobang.com&#x2F;release&#x2F;car&#x2F;brandinfo&#39;, data&#x3D;param_str,headers&#x3D;headers).json()[&quot;data&quot;]</span><br><span class="line">brandlist &#x3D; json.loads(data)[&quot;brandlist&quot;]</span><br><span class="line"></span><br><span class="line">for brand in brandlist:</span><br><span class="line">    brandname &#x3D; brand[&quot;name&quot;]</span><br><span class="line">    brandid &#x3D; str(brand[&quot;brandid&quot;])</span><br><span class="line">    # 1.创建文件夹</span><br><span class="line">    # 2.request for searchv2</span><br><span class="line">    script.exports.hooksearchv2(brandid)</span><br><span class="line">    # print(name_model_dict)</span><br><span class="line">    # 3.request for seriesinfo</span><br><span class="line">    for (key,value) in name_model_dict.items():</span><br><span class="line">        # print(key+&quot;:&quot;+str(value))</span><br><span class="line">        script.exports.hookseriesinfo(str(value))</span><br><span class="line">    # input()</span><br></pre></td></tr></table></figure><p><img src="/2021/07/27/%E6%9F%90%E6%91%A9%E6%89%98%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20210729111227782.png" alt="image-20210729111227782"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objection </tag>
            
            <tag> frida </tag>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NDK开发详解之NDK开发简介</title>
      <link href="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="JNI简述"><a href="#JNI简述" class="headerlink" title="JNI简述"></a>JNI简述</h1><p>JNI：Java Native Interface的缩写，通常翻译为JAVA本地 接口。从Java1.1开始，Java Native Interface(JNI)标准成为java平台的一部分，它允许Java代码和其他语言写的代码进行交互。JNI一开始是为本地已编译语言，尤其是 C和C++而设计的，但是它并不妨碍你使用其他语言，只要调用约定受支持就可以了。 </p><p>JNI不是Android特有，windows、linux等凡是有JVM的地方都支持JNI。Android的Dalvik/ART虚拟机同样支持JNI标准。通过JNI，便可以打通Android里的两个世界：JAVA世界和Native世界。可以说，JNI是Java和Native世界的桥梁。而背后的一切都由Dalvik/ART虚拟机来驱动。</p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210725212710380.png" alt="image-20210725212710380"></p><h1 id="JAVA特点"><a href="#JAVA特点" class="headerlink" title="JAVA特点"></a>JAVA特点</h1><p>特性：简单、面向对象、分布式、编译和解释性、健壮性、跨平台性（Write Once，Run Anywhere）、多线程、动态性等等 </p><p>但是：性能较低、易于逆向分析等问题。</p><p>因此，如何能够提高java程序的性能以及如何能够实现对海量已有C/C++代码库的复用问题？</p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210725212824225.png" alt="image-20210725212824225"></p><h1 id="NDK简述"><a href="#NDK简述" class="headerlink" title="NDK简述"></a>NDK简述</h1><p>NDK 即Native Development Kit，因此称为“NDK”。 </p><ul><li><p>NDK是一系列工具的集合。 </p><ul><li>NDK提供了工具链，帮助开发者快速开发以及调试C（或C++）的动态库。 </li></ul></li><li><p>NDK提供了一份稳定、功能有限的API库。 </p><ul><li>不同于linux的glibc，Android采用的是Google Bionic Libc，大部分api是一致的。 </li></ul></li><li><p>一些重要逻辑、算法可以采用C/C++、甚至是汇编的形式通过NDK的工具链最终编译生成动态库，最后通过JNI完成和Dalvik/ART虚拟机环境中的Java代码的交互</p></li></ul><p>使用NDK开发的so不再具有跨平台特性，需要编译提供不同平台支持。<a href="https://developer.android.com/ndk/guides/abis" target="_blank" rel="noopener">ABI</a>：ApplicationBinary Interface</p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210725213404656.png" alt="image-20210725213404656"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>运行效率高：Android开发的原生代码不需要在Dalvik/ART虚拟机下运行，直接运行的汇编代码</li><li>代码安全性高：Java层代码很容易被反编译，而C/C++反编译难度较大，代码混淆比如使用ollvm，字符串加密等保护汇编代码。同时，相对于针对Java代码的混淆保护来说，可以运用当前一切C/C++代码保护技术，如控制流混淆，加壳等；</li><li>易于移植，可复用海量代码库：当时用第三方 C/C++开源库时便于移植，可以充分复用C/C++海量代码库</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>开发效率低：和Android的Java世界(Dalvik/ART)交互繁琐，无法直接使用Android系统框架提供的丰富API</li><li>开发难度大：对于当前市面的APP开发人员来说掌握JNI开发存在一定困难</li><li>稳定性难以保证：对开发人员要求较高，如存在内存泄漏出现的频率搞，修正bug困难。</li></ul><p>对于Android中的java函数，在Dalvik时代分为解释模式和JIT模式，JIT根据代码运行过程中的频度进行编译提升运行效率，4.4后的art中新增dex2oat流程，直接对dex中所有的函数进行编译，而不是像4.4在运行过程中JIT对热点代码编译。在app在运行前将字节码编译成汇编代码，能够提升app运行效率，必然在安装时需要对dex中函数编译很耗时，耗电，因此生成代码量很大，占用很大的内存，安装耗时，如在dexclassloader动态加载时dex2oat编译过程很耗时，很耗电，很占存储。在7.0后结合AOT和AIT混合编译。</p><p><a href="https://source.android.com/devices/tech/dalvik/configure" target="_blank" rel="noopener">ART 的运作方式</a></p><ol><li>最初安装应用时不进行任何 AOT 编译。应用前几次运行时，系统会对其进行解译，并对经常执行的方法进行 JIT 编译。</li><li>当设备闲置和充电时，编译守护程序会运行，以便根据在应用前几次运行期间生成的配置文件对常用代码进行 AOT 编译。</li><li>下一次重新启动应用时将会使用配置文件引导型代码，并避免在运行时对已经过编译的方法进行 JIT 编译。在应用后续运行期间经过 JIT 编译的方法将会添加到配置文件中，然后编译守护程序将会对这些方法进行 AOT 编译。</li></ol><h2 id="Java函数运行模式"><a href="#Java函数运行模式" class="headerlink" title="Java函数运行模式"></a>Java函数运行模式</h2><ol><li>纯解释模式下执行</li><li>JIT模式</li><li>经过dex2oat编译后在quick模式下运行</li></ol><p>注意：Android 7.0（代号Nougat，简称N）开始结合用AOT，即时（JIT编译和配置文件引导型编译）。因此一个java函数可能运行在解释模式，JIT或者quick模式</p><h2 id="JNI与NDK的关系"><a href="#JNI与NDK的关系" class="headerlink" title="JNI与NDK的关系"></a>JNI与NDK的关系</h2><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210725214057952.png" alt="image-20210725214057952"></p><h1 id="NDK开发1"><a href="#NDK开发1" class="headerlink" title="NDK开发1"></a>NDK开发1</h1><p>as新建项目类型选择Native C++，项目名为ndk01</p><ul><li>extern C : 由于C++支持重载，C++类中的函数会有name mangling</li><li>jni函数的参数问题：JNIEnv* 和jobject以及JNIEnv*和jclass</li><li>JNICALL: 空宏</li><li>JNIEXPORT: __attribute__((visibility(“default”)))，代表当前函数符号需要导出，与之对应的为hidden隐藏符号信息</li><li>AndroidStudio默认生成函数名很长，如：Java_com_kanxue_ndk01_MainActivity_stringFromJN</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;system&#x2F;lib&#x2F;libc.so &#x2F;sdcard</span><br><span class="line">adb pull &#x2F;sdcard&#x2F;libc.so  使用ida打开后查看fopen</span><br></pre></td></tr></table></figure><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210731173859419.png" alt="image-20210731173859419"></p><p>MainActivity.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int result &#x3D; this.myfirstjni(10);  在onCreate中调用</span><br><span class="line">public native String stringFromJNI();</span><br><span class="line">public native int myfirstjni(int a);</span><br></pre></td></tr></table></figure><h2 id="一般函数"><a href="#一般函数" class="headerlink" title="一般函数"></a>一般函数</h2><p>修改native-lib.cpp.cpp编译后打开libnative-lib.so</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 对函数名称按照c++的name mangling编译后修改函数名</span><br><span class="line">int add(int a, int b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;  按照c风格保留函数符号名</span><br><span class="line">extern &quot;C&quot; int add1(int a, int b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 以C函数形式编译，JNIEXPORT告知编译器编译后导出函数名保留，IDA打开so后显示相同的静态注册的函数名，在IDA中左侧搜索Java检索到该方法</span><br><span class="line">&#x2F;&#x2F; 该函数静态注册，art中对jni函数查询过程决定以下划线拼接这么长的函数名</span><br><span class="line">extern &quot;C&quot; JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_kanxue_ndk01_MainActivity_stringFromJNI(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject &#x2F;* this *&#x2F;) &#123;</span><br><span class="line">    std::string hello &#x3D; &quot;Hello from C++&quot;;</span><br><span class="line">    return env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210731175441986.png" alt="image-20210731175441986"></p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210731175522935.png" alt="image-20210731175522935"></p><p>JNIEnv: 是一个JNI接口指针，指向了本地方法的函数表，该函数表中每一个成员指向了一个JNI函数。</p><h2 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h2><p>testc.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifndef NDK01_TESTC_H</span><br><span class="line">#define NDK01_TESTC_H</span><br><span class="line"></span><br><span class="line">#endif &#x2F;&#x2F;NDK01_TESTC_H</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int add_c(int a,int b);</span><br></pre></td></tr></table></figure><p>testc.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line">#include &quot;testc.h&quot;</span><br><span class="line">#include &quot;jni.h&quot;</span><br><span class="line">int add_c(int a,int b)&#123;</span><br><span class="line">    return a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jboolean testc(JNIEnv* env,jobject obj,jstring c)&#123;</span><br><span class="line">    (*env)-&gt;GetStringUTFChars(env,c,NULL);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>native-lib.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#include &quot;testc.h&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; JNIEXPORT void JNICALL</span><br><span class="line">Java_com_kanxue_ndk01_MainActivity_staticfunc(JNIEnv *env, jclass &#x2F;* this *&#x2F;) &#123;</span><br><span class="line">&#x2F;&#x2F; __android_log_print(int prio, const char* tag, const char* fmt, ...)</span><br><span class="line"></span><br><span class="line">    int result &#x3D; add_c(4, 6);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, &quot;JNI&quot;, &quot;JNI-&gt;%d&quot;, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String gbkStr &#x3D; &quot;中国人民&quot;; &#x2F;&#x2F;源码文件是GBK格式，或者这个字符串是从GBK文件中读取出来的, 转换为string 变成unicode格式</span><br><span class="line">&#x2F;&#x2F;利用getBytes将unicode字符串转成UTF-8格式的字节数组</span><br><span class="line">byte[] utf8Bytes &#x3D; gbkStr.getBytes(&quot;UTF-8&quot;);</span><br><span class="line">&#x2F;&#x2F;然后用utf-8 对这个字节数组解码成新的字符串</span><br><span class="line">String utf8Str &#x3D; new String(utf8Bytes, &quot;UTF-8&quot;);</span><br><span class="line">MainActivity.testString(utf8Str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static native void staticfunc();</span><br></pre></td></tr></table></figure><h2 id="JNI类型映射"><a href="#JNI类型映射" class="headerlink" title="JNI类型映射"></a>JNI类型映射</h2><h3 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h3><p>Native Type这8种数据类型可以C/C++中直接使用</p><table><thead><tr><th>Java类型</th><th>本地类型（Native Type）</th><th>描述</th></tr></thead><tbody><tr><td>boolean</td><td>jboolean</td><td>C/C++无符号8位整型(unsigned char)</td></tr><tr><td>byte</td><td>jbyte</td><td>C/C++带符号8位整型(char)</td></tr><tr><td>char</td><td>jchar</td><td>C/C++无符号8位整型(unsigned short)</td></tr><tr><td>short</td><td>jshort</td><td>C/C++带符号8位整型(short)</td></tr><tr><td>int</td><td>jint</td><td>C/C++带符号8位整型(int)</td></tr><tr><td>long</td><td>jlong</td><td>C/C++带符号8位整型(long)</td></tr><tr><td>float</td><td>jfloat</td><td>C/C++32位浮点型(float)</td></tr><tr><td>double</td><td>jdouble</td><td>C/C++64位浮点型(double)</td></tr></tbody></table><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><table><thead><tr><th>JNI数据类型</th><th>java数据类型</th></tr></thead><tbody><tr><td>jobject</td><td>java.lang.Object</td></tr><tr><td>jclass</td><td>java.lang.Class</td></tr><tr><td>jstring</td><td>java.lang.String</td></tr><tr><td>jthrowable</td><td>java.lang.Throwable</td></tr></tbody></table><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801185420830.png" alt="image-20210801185420830"></p><p>MainActivity.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public native int myfirstjni(int a);</span><br><span class="line"></span><br><span class="line">public native boolean booleantest(boolean a);</span><br></pre></td></tr></table></figure><p>native-lib.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_kanxue_ndk01_MainActivity_myfirstjni(JNIEnv *env, jobject &#x2F;* this *&#x2F;, jint a) &#123;</span><br><span class="line">    int result &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 1; i &lt; a; i++) &#123;</span><br><span class="line">        result &#x3D; result + i;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">extern &quot;C&quot; JNIEXPORT jboolean JNICALL</span><br><span class="line">Java_com_kanxue_ndk01_MainActivity_booleantest(JNIEnv *env, jobject &#x2F;* this *&#x2F;, jboolean a) &#123;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JNI其他类型"><a href="#JNI其他类型" class="headerlink" title="JNI其他类型"></a>JNI其他类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>05:48</p><h3 id="jni字符串操作"><a href="#jni字符串操作" class="headerlink" title="jni字符串操作"></a>jni字符串操作</h3><p>jstring NewStringUTF( const char* bytes)):函数使用给定的C字符串创建一个新的JNI字符串( jstring),不能为构造的 java. lang String分配足够的内存, NewStringUTF会抛出一个 OutOfMemoryError异常,并返回一个NULL</p><p>const char* GetStringUTFChars(jstring string, boolean* is Copy):函数可用于从给定的Java的 jstring创建新的C字符串(char*)。如果无法分配内存,则该函数返回NULL。检査NULL是一个好习惯。不要忘记检查。因为该函数需要为新诞生的UTF8字符串分配内存,这个操作有可能因为内存太少而失败。失败时, GetStringUTFChars会返回NULL,并抛出一个 OutofMemoryError异常,在不使用 GetStringUTFChars()返回的字符串时,需要来释放内存和引用以便可以对其进行垃圾回收,因此之后应始终调用 ReleaseStringUTFChars()</p><p>jsize GetStringUTFLength(jstring string):用于获取 jstring的长度</p><p>MainActivity.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String resultString&#x3D;testjstringapis(&quot;hello from java&quot;);  在onCreate中调用</span><br><span class="line">Log.i(&quot;kanxue&quot;, &quot;result:&quot; + resultString);</span><br><span class="line"></span><br><span class="line">public native String testjstringapis(String content);</span><br></pre></td></tr></table></figure><p>native-lib.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_kanxue_performancetest01_MainActivity_testjstringapis(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject &#x2F;* this *&#x2F;,jstring content) &#123;</span><br><span class="line"></span><br><span class="line">     const char* a&#x3D;env-&gt;GetStringUTFChars(content,nullptr); &#x2F;&#x2F; 将java中字符串转成c&#x2F;c++使用的char *</span><br><span class="line">     int jstring_size&#x3D;env-&gt;GetStringUTFLength(content);  &#x2F;&#x2F; 获取jstring长度</span><br><span class="line">     if(a!&#x3D; nullptr)&#123;</span><br><span class="line">         __android_log_print(ANDROID_LOG_INFO,&quot;kanxue&quot;, &quot;char content:%s,size:%d&quot;, a,jstring_size);</span><br><span class="line">     &#125;</span><br><span class="line">     env-&gt;ReleaseStringUTFChars(content,a);  &#x2F;&#x2F; 不使用该字符串手动释放内存</span><br><span class="line">     jstring result&#x3D;env-&gt;NewStringUTF(&quot;Hello from jni&quot;);  &#x2F;&#x2F; 创建新字符串</span><br><span class="line">     return result;  &#x2F;&#x2F; 返回给java层</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jstring(* NewString)(JNIEnv*, const char*,jsize);&#x2F;&#x2F;新建一个 unicode编码字符串</span><br><span class="line">jsize(* GetStringLength)(JNIEnv*, jstring);&#x2F;)回 unicode编码的字符串的长度</span><br><span class="line">const jchar*(* GetStringChars)(JNIEnv*, jstring, jboolean*);&#x2F;&#x2F;返回一个 unicode编码的 jstring的 char指针</span><br><span class="line">void(* Release String Chars)(JNIEnv*, jstring, const jchar*):&#x2F;释放使用 Newstring时分配的内存</span><br><span class="line">string(* NewStringUTF)(JNIEnv*, const char*);&#x2F;&#x2F;char为1个字节,ut8编码字符串</span><br><span class="line">jsize(* GetStringUTFLength)(JNIEnv*, jstring);&#x2F;返回utf8编码的字符串的字节长度,字符个数</span><br><span class="line">const char*(*GetStringUTFChars)(JNIEnv*, jstring, jboolean*);</span><br><span class="line">void (*ReleaseStringUTFChars( JNIEnv*, jstring, const char*);&#x2F;释放使用 NewStringUTFChars时分配的内存</span><br></pre></td></tr></table></figure><h1 id="NDK开发2"><a href="#NDK开发2" class="headerlink" title="NDK开发2"></a>NDK开发2</h1><p><a href="https://www.brobwind.com/archives/813" target="_blank" rel="noopener">ANDROID: 使用OATDUMP反编译OAT文件</a>：用来对dex2oat编译生成oat文件进行反汇编，看到dex2oat编译的结果</p><p>as新建项目类型选择Native C++，项目名为PerformanceTest01</p><p>MainActivity.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int result &#x3D; java_add(1000000);  &#x2F;&#x2F; 在onCreate中调用</span><br><span class="line">public int java_add(int num) &#123;</span><br><span class="line"></span><br><span class="line">    int result &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; num; i++) &#123;</span><br><span class="line">        result &#x3D; result + i;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译好后安装到手机上，<code>ls /data/app/com.kanxue.performancetest01-*/oat/arm64</code>可以看到base.dex和base.vdex</p><p>ART 包括一个编译器（<code>dex2oat</code> 工具）和一个为启动 Zygote 而加载的运行时 (<code>libart.so</code>)。<code>dex2oat</code> 工具接受一个 APK 文件，并生成一个或多个编译工件文件，然后运行时将会加载这些文件。文件的个数、扩展名和名称因版本而异，但在 Android O 版本中，将会生成以下文件：</p><ul><li><code>.vdex</code>：其中包含 APK 的未压缩 DEX 代码，以及一些旨在加快验证速度的元数据。</li><li><code>.odex</code>：其中包含 APK 中已经过 AOT 编译的方法代码。</li><li><code>.art (optional)</code>：其中包含 APK 中列出的某些字符串和类的 ART 内部表示，用于加快应用启动速度。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb pull &#x2F;sdcard&#x2F;base.dex</span><br><span class="line">010Editor base.vdex   删除dex.035.前面的内容,保存为dex文件解析并可以查看函数列表，改名vdex为dex使用jadx打开</span><br></pre></td></tr></table></figure><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801132658638.png" alt="image-20210801132658638"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">oatdump --oat-file&#x3D;base.dex &gt;&gt; &#x2F;sdcard&#x2F;oatdump1.txt</span><br><span class="line">adb pull &#x2F;sdcard&#x2F;oatdump1.txt</span><br><span class="line">010Editor oatdump1.txt  输出函数的smali指令，编译函数后的偏移，dex2oat生成的汇编指令</span><br></pre></td></tr></table></figure><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801141651486.png" alt="image-20210801141651486"></p><p>说明还没有被dex2oat编译。nexus 6p默认Android7.0在最初安装时不进行AOT编译，通过查看7.0以前nexus 5的ART来对比编译后的汇编代码，安装完直接编译。编译好后安装到手机上，<code>ls /data/app/com.kanxue.performancetest01-*/oat/arm</code>可以看到base.odex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">oatdump --oat-file&#x3D;base.dex &gt;&gt; &#x2F;sdcard&#x2F;6.0oatdump.txt</span><br><span class="line">adb pull &#x2F;sdcard&#x2F;0oatdump.txt</span><br><span class="line">010Editor 0oatdump.txt  输出函数的smali指令，编译函数后的偏移，dex2oat生成的汇编</span><br></pre></td></tr></table></figure><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801181213830.png" alt="image-20210801181213830"></p><p>说明6.0时smali正常显示，CODE部分已经编译生成汇编代码，当6.0安装完该函数必然运行在quick下，并不会解释执行原有的java代码。</p><h2 id="解释模式"><a href="#解释模式" class="headerlink" title="解释模式"></a>解释模式</h2><p>MainActivity.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在onCreate中调用两个函数对比时间效率</span><br><span class="line">long start &#x3D; System.nanoTime();</span><br><span class="line">int result &#x3D; java_add(1000000);</span><br><span class="line">long end &#x3D; System.nanoTime();</span><br><span class="line">Log.i(&quot;kanxue&quot;, &quot;result:&quot; + result + &quot;--&quot; + (end - start));</span><br><span class="line">start &#x3D; System.nanoTime();</span><br><span class="line">result &#x3D; jni_add(1000000);</span><br><span class="line">end &#x3D; System.nanoTime();</span><br><span class="line">Log.i(&quot;kanxue&quot;, &quot;result:&quot; + result + &quot;--&quot; + (end - start));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public native int jni_add(int num);</span><br></pre></td></tr></table></figure><p>native-lib.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_kanxue_performancetest01_MainActivity_jni_1add(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject obj&#x2F;* this *&#x2F;, jint num) &#123;</span><br><span class="line"></span><br><span class="line">    jclass thisclazz&#x3D;env-&gt;GetObjectClass(obj);</span><br><span class="line">    jmethodID add_mid&#x3D;env-&gt;GetMethodID(thisclazz,&quot;add&quot;,&quot;()V&quot;);</span><br><span class="line"></span><br><span class="line">    jint result &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; num; i++) &#123;</span><br><span class="line"></span><br><span class="line">        result &#x3D; result + i;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先比较在纯解释模式下运行java函数和jni函数花销，自然不能让art下的dex2oat的编译流程完成对java函数的编译。在8.0后app安装完后的函数还是没有被编译，运行在解释模式下的。运行了一定时间后，某些函数就已经被编译了。自然导致在7.0以后函数运行在不同模式下都有可能。首先要让函数运行在解释模式下，可以通过禁用art下的dex2oat的编译流程， 或者使用4.4之前的dalvik的执行环境，必然是在一个解释模式下的。那么使用4.4的hammerhead安装该app，自然默认运行在dalvik下。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result:1784293664--23747499   smali指令在纯解释模式，jni大致是java函数的5倍</span><br><span class="line">result:1784293664--4924895</span><br></pre></td></tr></table></figure></blockquote><h2 id="quick模式"><a href="#quick模式" class="headerlink" title="quick模式"></a>quick模式</h2><p>接下来对比art下经过dex2oat编译后的quick模式下java函数执行的时间花销和jni函数的时间花销，首先保证java函数被dex2oat编译，且函数运行在quick模式下，也就是编译后的汇编代码。7.0以后一开始是没有编译，是在解释模式下，只有在运行一段时间后，调用频率比较高时在充电或者闲置时会被编译。自然确保确实被编译运行在dex2oat的quick模式下，可以使用7.0以前的art测试，可以使用6.0的hammerhead，安装好app后这个时候运行的java函数就会被编译成了汇编了。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result:1784293664--5778594   java函数经过dex2oat编译以后运行在quick模式下时花销是jni花销的一倍多一点</span><br><span class="line">result:1784293664--3798072</span><br></pre></td></tr></table></figure></blockquote><h2 id="性能提升总结"><a href="#性能提升总结" class="headerlink" title="性能提升总结"></a>性能提升总结</h2><p>以上分别比较相同代码逻辑的java函数和jni函数的时间代价。</p><h3 id="java函数运行模式"><a href="#java函数运行模式" class="headerlink" title="java函数运行模式"></a>java函数运行模式</h3><ul><li>在4.4以前的dalvik下运行或者art下利用hook禁用掉dex2oat过程强制让其运行在解释模式</li><li>使用Android6.0测试java函数在quick模式（运行dex2oat编译以后的汇编代码）</li></ul><h3 id="jni函数实现"><a href="#jni函数实现" class="headerlink" title="jni函数实现"></a>jni函数实现</h3><ul><li>和java函数相同的逻辑，纯C/C++实现</li><li>和java函数相同的逻辑，经过JNI提供的接口频繁调用java函数</li></ul><h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>java反射:java反射机制是在运行状态中,对于任意类,都能够知道这个类的所有属性和方法;对于任意类的静态属性和方法,都能够完成对静态属性的获取和设置以及静态方法的调用;对于任意个对象,都能够调用它的任意方法和属性;这种动态获取信息以及动态调用对象方法的功能称为ava语言的反射机制。</p><p>在日常的第三方应用开发过程中,经常会遇到某类的某个成员变量、方法或是属性是私有的或是只对系统应用开放,这时候就可以利用Java的反射机制通过反射来获取所需的私有成员或是方法。而对于public类型的成员变量和方法和属性都可以使用反射来进行访问。</p><table><thead><tr><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>Class类</td><td>代表类的实体，在运行的Java应用程序中表示类和接口</td></tr><tr><td>Field类</td><td>代表类的成员变量（成员变量也成为了类的属性）</td></tr><tr><td>Method类</td><td>代表类的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr></tbody></table><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>代表类的实体，在运行的Java应用程序中表示类和接口。在类中提供了很多有用的方法。</p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801221112872.png" alt="image-20210801221112872"></p><p>获取类中属性相关方法</p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801221225452.png" alt="image-20210801221225452"></p><p>获取类中注解相关方法</p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801221409618.png" alt="image-20210801221409618"></p><p>获取类中构造器相关方法</p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801221429821.png" alt="image-20210801221429821"></p><p>获取类中方法的相关方法</p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801221528188.png" alt="image-20210801221528188"></p><p>获取类中其他重要的方法</p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801222015525.png" alt="image-20210801222015525"></p><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><p>Field代表类的成员变量（成员变量也称为类的属性）</p><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801222219772.png" alt="image-20210801222219772"></p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801222414308.png" alt="image-20210801222414308"></p><h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><p><img src="/2021/07/25/NDK%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%E4%B9%8BNDK%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/image-20210801222548458.png" alt="image-20210801222548458"></p><p>破坏本身的封装性和安全性,访问 private域和方法类 AccessibleObject中有函数 public void setAccessible( boolean flag),该函数在传入tue作为参数后,让访问 private修饰的域和函数成为可能。而Method、Feld和 Constructot类共同继承了 AccessibleObject类,该基类有两个 setAccessible方法能在运行时压制Java语言访问控制检查(Javalanguage access control checks),从而能任意调用被私有化保护的方法域和构造方法</p><p>新建C++项目ReflectionTest3</p><p>Test.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public String flag &#x3D; null;</span><br><span class="line">    public int[] intarray &#x3D; null;</span><br><span class="line"></span><br><span class="line">    public Test() &#123;</span><br><span class="line"></span><br><span class="line">        flag &#x3D; &quot;Test()&quot;;</span><br><span class="line">        intarray &#x3D; new int[10];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            intarray[i] &#x3D; i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Test(String arg) &#123;</span><br><span class="line"></span><br><span class="line">        flag &#x3D; &quot;Test(String arg)&quot;;</span><br><span class="line">        intarray &#x3D; new int[10];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            intarray[i] &#x3D; i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Test(String arg, int arg2) &#123;</span><br><span class="line"></span><br><span class="line">        flag &#x3D; &quot;Test(String arg,int arg2)&quot;;</span><br><span class="line">        intarray &#x3D; new int[10];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            intarray[i] &#x3D; i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String publicStaticField &#x3D; &quot;i am a publicStaticField&quot;;</span><br><span class="line">    public static int publicStaticField_int &#x3D; 100;</span><br><span class="line">    public String publicField &#x3D; &quot;i am a publicField&quot;;</span><br><span class="line">    private static String privateStaticField &#x3D; &quot;i am a privateStaticField&quot;;</span><br><span class="line">    private String privateField &#x3D; &quot;i am a privateField&quot;;</span><br><span class="line">    private int privateField_int &#x3D; 200;</span><br><span class="line"></span><br><span class="line">    public static void publicStaticFunc() &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;i am from publicStaticFunc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int publicStaticFunc_int(int a) &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;i am from publicStaticFunc_int&quot;);</span><br><span class="line">        return 100 + a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String publicStaticFunc_string(String arg) &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;i am from publicStaticFunc_int&quot;);</span><br><span class="line">        return &quot;publicStaticFunc_string-&gt;&quot; + arg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void publicFunc() &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;i am from publicFunc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;add</span><br><span class="line">    private String privatetest(int a, String b) &#123;</span><br><span class="line"></span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;privatetest func is called:&quot; + a + &quot;---&quot; + b);</span><br><span class="line">        return b + a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void privateStaticFunc() &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;i am from privateStaticFunc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int[] privateFunc_array(int num) &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;i am from privateStaticFunc&quot;);</span><br><span class="line"></span><br><span class="line">        int array[] &#x3D; new int[num];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class="line">            array[i] &#x3D; i;</span><br><span class="line">        &#125;</span><br><span class="line">        return array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void privateFunc() &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;i am from privateStaticFunc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">testField();  在onCreate中调用</span><br><span class="line">testMethod();</span><br><span class="line"></span><br><span class="line">public void testField() &#123;</span><br><span class="line">    Test a_obj &#x3D; new Test();</span><br><span class="line">    Test b_obj &#x3D; new Test(&quot;test&quot;);</span><br><span class="line">    Test c_obj &#x3D; new Test(&quot;test&quot;, 2);</span><br><span class="line">    Class testClazz &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        testClazz &#x3D; MainActivity.class.getClassLoader().loadClass(&quot;com.kanxue.reflectiontest.Test&quot;);</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;ClassLoader.loadClass-&gt;&quot; + testClazz);</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Class testClazz2;</span><br><span class="line">    try &#123;</span><br><span class="line">        testClazz2 &#x3D; Class.forName(&quot;com.kanxue.reflectiontest.Test&quot;);</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;Class.forName-&gt;&quot; + testClazz2);</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Class testClazz3 &#x3D; Test.class;</span><br><span class="line">    Log.i(&quot;kanxue&quot;, &quot;Test.class-&gt;&quot; + testClazz);</span><br><span class="line">    try &#123;</span><br><span class="line">        Field publicStaticField_field &#x3D; testClazz3.getDeclaredField(&quot;publicStaticField&quot;);</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;getDeclaredField-&gt;&quot; + publicStaticField_field);</span><br><span class="line">        String content &#x3D; (String) publicStaticField_field.get(null);</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;publicStaticField-&gt;&quot; + content);</span><br><span class="line">        content &#x3D; (String) publicStaticField_field.get(a_obj);</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;publicStaticField-&gt;a_obj&quot; + content);</span><br><span class="line"></span><br><span class="line">    &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;privateField</span><br><span class="line">    try &#123;</span><br><span class="line">        Field privateStaticField_field &#x3D; testClazz3.getDeclaredField(&quot;privateStaticField&quot;);</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;getDeclaredField-&gt;&quot; + privateStaticField_field);</span><br><span class="line">        privateStaticField_field.setAccessible(true);</span><br><span class="line">        privateStaticField_field.set(null, &quot;modified&quot;);</span><br><span class="line">        String content &#x3D; (String) privateStaticField_field.get(null);</span><br><span class="line"></span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;privateStaticField_field-&gt;&quot; + content);</span><br><span class="line"></span><br><span class="line">    &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        Field privateField_field &#x3D; testClazz3.getField(&quot;privateField&quot;);</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;getField-&gt;&quot; + privateField_field);</span><br><span class="line">    &#125; catch (Error | NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Field[] fields &#x3D; testClazz3.getDeclaredFields();</span><br><span class="line">    for (Field i : fields) &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;getDeclaredFields-&gt;&quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Field[] fields_1 &#x3D; testClazz3.getFields();</span><br><span class="line">    for (Field i : fields_1) &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;getFields-&gt;&quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void testMethod() &#123;</span><br><span class="line">    Class testClazz &#x3D; Test.class;</span><br><span class="line">    Method publicStaticFunc_method &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        publicStaticFunc_method &#x3D; testClazz.getDeclaredMethod(&quot;publicStaticFunc&quot;);</span><br><span class="line">        publicStaticFunc_method.invoke(null);</span><br><span class="line">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Log.i(&quot;kanxue&quot;, &quot;getDeclaredMethod-&gt;&quot; + publicStaticFunc_method);</span><br><span class="line"></span><br><span class="line">    Method privateStaticFunc_method &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        privateStaticFunc_method &#x3D; testClazz.getDeclaredMethod(&quot;privateStaticFunc&quot;);</span><br><span class="line">        privateStaticFunc_method.setAccessible(true);</span><br><span class="line">        privateStaticFunc_method.invoke(null);</span><br><span class="line">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Log.i(&quot;kanxue&quot;, &quot;getDeclaredMethod-&gt;&quot; + privateStaticFunc_method);</span><br><span class="line"></span><br><span class="line">    Method[] methods &#x3D; testClazz.getDeclaredMethods();</span><br><span class="line">    for (Method i : methods) &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;getDeclaredMethods-&gt;&quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">    Method[] methods_1 &#x3D; testClazz.getMethods();</span><br><span class="line">    for (Method i : methods_1) &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;getMethods-&gt;&quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">    Constructor[] constructors &#x3D; testClazz.getDeclaredConstructors();</span><br><span class="line">    for (Constructor i : constructors) &#123;</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;getDeclaredConstructors-&gt;&quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        Constructor constructor &#x3D; testClazz.getDeclaredConstructor(String.class, int.class);</span><br><span class="line">        Object testobj &#x3D; constructor.newInstance(&quot;test&quot;, 666);</span><br><span class="line">        Field privateField_field &#x3D; testClazz.getDeclaredField(&quot;privateField&quot;);</span><br><span class="line">        privateField_field.setAccessible(true);</span><br><span class="line">        String privateField_String &#x3D; (String) privateField_field.get(testobj);</span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;privateField-&gt;&quot; + privateField_String);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Log.i(&quot;kanxue&quot;, &quot;getDeclaredConstructor-&gt;&quot; + constructor);</span><br><span class="line">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public native String stringFromJNI();</span><br></pre></td></tr></table></figure><p>native-lib.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_kanxue_reflectiontest_MainActivity_stringFromJNI(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject &#x2F;* this *&#x2F;) &#123;</span><br><span class="line"></span><br><span class="line">    __android_log_print(4, &quot;kanxue-&gt;jni&quot;,</span><br><span class="line">                        &quot;Java_com_kanxue_reflectiontest_MainActivity_stringFromJNI-&gt;%p&quot;, env);</span><br><span class="line"></span><br><span class="line">    std::string hello &#x3D; &quot;Hello from C++&quot;;</span><br><span class="line">    jclass TestJclass &#x3D; env-&gt;FindClass(&quot;com&#x2F;kanxue&#x2F;reflectiontest&#x2F;Test&quot;);</span><br><span class="line">    jfieldID publicStaticField_jfieldID &#x3D; env-&gt;GetStaticFieldID(TestJclass, &quot;publicStaticField&quot;,&quot;Ljava&#x2F;lang&#x2F;String;&quot;);</span><br><span class="line">    jstring publicStaticField_content &#x3D; (jstring) env-&gt;GetStaticObjectField(TestJclass,publicStaticField_jfieldID);</span><br><span class="line">    const char *content_ptr &#x3D; env-&gt;GetStringUTFChars(publicStaticField_content, nullptr);</span><br><span class="line">    __android_log_print(4, &quot;kanxue-&gt;jni&quot;, &quot;jni-&gt;%s&quot;, content_ptr);</span><br><span class="line"></span><br><span class="line">    return env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
          <category> NDK开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>业务开发记录</title>
      <link href="/2021/07/19/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/07/19/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h1><h2 id="单号列表查询所有流水信息"><a href="#单号列表查询所有流水信息" class="headerlink" title="单号列表查询所有流水信息"></a>单号列表查询所有流水信息</h2><p>支付单信息表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;motor_payment_transfer_serials&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;order_num&#96; varchar(50) NOT NULL COMMENT &#39;订单号&#39;,</span><br><span class="line">  &#96;transfer_serials_no&#96; varchar(50) NOT NULL COMMENT &#39;流水号&#39;,</span><br><span class="line">  &#96;third_type&#96; tinyint(4) NOT NULL COMMENT &#39;第三方平台，1:一麻袋，2:杰税帮&#39;,</span><br><span class="line">  &#96;create_time&#96; timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  &#96;update_time&#96; timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2936 DEFAULT CHARSET&#x3D;utf8mb4;</span><br></pre></td></tr></table></figure><p>流水信息表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;motor_payment_transfer&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;mchid&#96; varchar(50) NOT NULL COMMENT &#39;商户号&#39;,</span><br><span class="line">  &#96;partner_trade_no&#96; varchar(50) NOT NULL COMMENT &#39;商户订单号&#39;,</span><br><span class="line">  &#96;amount&#96; decimal(10,2) NOT NULL COMMENT &#39;收款金额，单位元&#39;,</span><br><span class="line">  &#96;enc_bank_no&#96; varchar(64) NOT NULL COMMENT &#39;收款方银行卡号&#39;,</span><br><span class="line">  &#96;enc_true_name&#96; varchar(64) NOT NULL COMMENT &#39;收款方用户名&#39;,</span><br><span class="line">  &#96;bank_code&#96; varchar(64) DEFAULT NULL COMMENT &#39;收款方开户行&#39;,</span><br><span class="line">  &#96;remark&#96; varchar(255) DEFAULT NULL COMMENT &#39;备注&#39;,</span><br><span class="line">  &#96;create_time&#96; timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  &#96;update_time&#96; timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  &#96;payment_no&#96; varchar(50) DEFAULT &#39;&#39; COMMENT &#39;微信企业付款单号，代付成功后，返回的内部业务单号&#39;,</span><br><span class="line">  &#96;cmms_amt&#96; int(11) DEFAULT &#39;0&#39; COMMENT &#39;手续费金额，单位分&#39;,</span><br><span class="line">  &#96;status&#96; tinyint(1) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;状态，0:待转账，1:已转账，2:转账出错，3：已申请&#39;,</span><br><span class="line">  &#96;uid&#96; int(11) DEFAULT NULL COMMENT &#39;用户id&#39;,</span><br><span class="line">  &#96;bill_no&#96; varchar(255) DEFAULT NULL COMMENT &#39;一麻袋平台流水号&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;udx_partner_trade_no&#96; (&#96;partner_trade_no&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2465 DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;企业转账记录&#39;;</span><br></pre></td></tr></table></figure><p>两张表根据流水号进行关联，一个支付单号关联多个流水号。</p><p>首先根据实现根据支付单号查询流水，返回Map。其中key为流水号，value为订单号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public Map&lt;String, String&gt; querySerialsEntByOrderNum(List&lt;String&gt; orderNum) &#123;</span><br><span class="line">    QueryWrapper&lt;MotorPaymentTransferSerialsENT&gt; ew &#x3D; new QueryWrapper&lt;&gt;();</span><br><span class="line">    ew.in(&quot;order_num&quot;, orderNum);</span><br><span class="line">    List&lt;MotorPaymentTransferSerialsENT&gt; serialsENTS &#x3D; MotorPaymentTransferSerialsMapper.selectList(ew);</span><br><span class="line">    if(HelperUtil.collectionNotEmpty(serialsENTS)) &#123;</span><br><span class="line">        return serialsENTS.stream().collect(Collectors.toMap(MotorPaymentTransferSerialsENT::getTransferSerialsNo, MotorPaymentTransferSerialsENT::getOrderNum));</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>根据订单号列表查询返回Map，其中key流水号，value订单号</li><li>根据所有的key转成list后查询所有流水信息返回list</li><li>遍历流水信息，根据流水中的流水号和之前返回的Map拿到订单号，定义一个新Map，key为订单号，value为流水信息列表，该Map利用computeIfAbsent将订单号作为key返回一个list，并将流水信息赋值到dto填入value中，完成根据单号列表查询返回所有流水信息，并以单号为key，流水列表为value的map返回结果。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public Map&lt;String, List&lt;RpcTransferSerialsDTO&gt;&gt; queryTransferSerialsByOrderNum(List&lt;String&gt; orderNum) &#123;</span><br><span class="line">    Map&lt;String, String&gt; serialsOrderNumMap &#x3D; paymentTransferSerialsService.querySerialsEntByOrderNum(orderNum);</span><br><span class="line">    Set&lt;String&gt; serialsNumSet &#x3D; serialsOrderNumMap.keySet();</span><br><span class="line">    List&lt;MotorPaymentTransferENT&gt; paymentTransferENTS &#x3D; transferService.queryTransferEntByOrderNum(new ArrayList&lt;&gt;(serialsNumSet));</span><br><span class="line"></span><br><span class="line">    Map&lt;String, List&lt;RpcTransferSerialsDTO&gt;&gt; orderSerialdataMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">    for (MotorPaymentTransferENT motorPaymentTransferENT : paymentTransferENTS) &#123;</span><br><span class="line">        String ordertNum &#x3D; serialsOrderNumMap.get(motorPaymentTransferENT.getPartnerTradeNo());</span><br><span class="line">        List&lt;RpcTransferSerialsDTO&gt; paymentTransferENTList &#x3D; orderSerialdataMap.computeIfAbsent(ordertNum, t -&gt; new ArrayList&lt;RpcTransferSerialsDTO&gt;());</span><br><span class="line">        RpcTransferSerialsDTO serialsDTO &#x3D; new RpcTransferSerialsDTO() &#123;&#123;</span><br><span class="line">            setTransferSerialsNo(motorPaymentTransferENT.getPartnerTradeNo());</span><br><span class="line">            setStatus(motorPaymentTransferENT.getStatus());</span><br><span class="line">            setExceptionCause(motorPaymentTransferENT.getRemark());</span><br><span class="line">            setCreateTime(motorPaymentTransferENT.getCreateTime());</span><br><span class="line">            setUpdateTime(motorPaymentTransferENT.getUpdateTime());</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        paymentTransferENTList.add(serialsDTO);</span><br><span class="line">    &#125;</span><br><span class="line">    return orderSerialdataMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 开发技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向之动态调试入门</title>
      <link href="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/"/>
      <url>/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h1><p>as-create new project-Native C++,Language选择Java引入easyso1自动安装ndk  frida启动hook native方法<code>demo.js</code></p><p><code>frida -U -f com.roysue.easyso1 -l demo.js --no-pause</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;com.roysue.easyso1.MainActivity&quot;).onCreate.implementation &#x3D; function(x)&#123;</span><br><span class="line">            console.log(&quot;Entering onCreate!&quot;);</span><br><span class="line">            return this.onCreate(x);</span><br><span class="line">        &#125;</span><br><span class="line">        Java.use(&quot;com.roysue.easyso1.MainActivity&quot;).stringFromJNI.implementation &#x3D; function()&#123;</span><br><span class="line">            var result &#x3D; this.stringFromJNI();</span><br><span class="line">            console.log(&quot;return value of stringFromJNI is &#x3D;&gt; &quot;,result);</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://ghidra-sre.org/" target="_blank" rel="noopener">ghidra</a> jeb  反编译工具<br>build.gradle中android.defaultConfig.ndk配置abiFilters的cpu为’arm64-v8a’,’x86_64’,’armeabi-v7a’ 多个版本时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.android.settings explore  获取系统版本</span><br><span class="line">frida</span><br><span class="line">plugin load &#x2F;root&#x2F;Desktop&#x2F;Wallbreaker</span><br><span class="line">plugin wallbreaker classdump </span><br><span class="line">plugin wallbreaker classdump android.os.Build</span><br></pre></td></tr></table></figure><p><code>adb install -r -t --abi arm-v7a app-debug.apk</code>  强制指定安装测试版本</p><p><a href="https://github.com/android/ndk-samples.git" target="_blank" rel="noopener">https://github.com/android/ndk-samples.git</a>  打开hello-jni加上defaultConfig中添加ndk的abiFilters无效，被productFlavors中ndk的abiFilters覆盖成v8a</p><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><h3 id="编译md5"><a href="#编译md5" class="headerlink" title="编译md5"></a>编译md5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pod32g&#x2F;MD5.git</span><br><span class="line">gcc -o md5 md5.c</span><br><span class="line">.&#x2F;md5 onejane</span><br><span class="line">file md5  查看编译生成后的文件格式</span><br></pre></td></tr></table></figure><p>搜索 <a href="https://developer.android.com/ndk/guides/other_build_systems" target="_blank" rel="noopener">ndk cross compile</a> 安卓交叉编译,源码编译成机器码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Android/Sdk/ndk/22.0.7026061/toolchains/llvm/prebuilt/linux-x86_64/bin/clang -target aarch64-linux-android21 md5.c  生成a.out</span><br><span class="line">file a.out  是ELF 64-bit,arm aarch64  </span><br><span class="line">adb push a.out /data/<span class="built_in">local</span>/tmp &amp;&amp; chmod 777</span><br><span class="line">./a.out onejane</span><br></pre></td></tr></table></figure><h3 id="整合md5"><a href="#整合md5" class="headerlink" title="整合md5"></a>整合md5</h3><p>ndk开发以32位为主</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ndk &#123;</span><br><span class="line">    abiFilters &#39;armeabi-v7a&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle中引入的cmake为CMakeLists.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">    cmake &#123;</span><br><span class="line">        path &quot;src&#x2F;main&#x2F;cpp&#x2F;CMakeLists.txt&quot;</span><br><span class="line">        version &quot;3.10.2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改CMakeLists.txt配置so库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 配置so库</span><br><span class="line">add_library( # Sets the name of the library.</span><br><span class="line">             roysue</span><br><span class="line"></span><br><span class="line">             # Sets the library as a shared library.</span><br><span class="line">             SHARED</span><br><span class="line"></span><br><span class="line">             # Provides a relative path to your source file(s).</span><br><span class="line">             roysue.c )</span><br></pre></td></tr></table></figure><p>修改MainActivity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    System.loadLibrary(&quot;roysue&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建roysue.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">#include &lt;android&#x2F;log.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_roysue_easyso1_MainActivity_stringFromJNI( JNIEnv* env, jobject thiz )</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">#if defined(__arm__)</span><br><span class="line">    #if defined(__ARM_ARCH_7A__)</span><br><span class="line">    #if defined(__ARM_NEON__)</span><br><span class="line">      #if defined(__ARM_PCS_VFP)</span><br><span class="line">        #define ABI &quot;armeabi-v7a&#x2F;NEON (hard-float)&quot;</span><br><span class="line">      #else</span><br><span class="line">        #define ABI &quot;armeabi-v7a&#x2F;NEON&quot;</span><br><span class="line">      #endif</span><br><span class="line">    #else</span><br><span class="line">      #if defined(__ARM_PCS_VFP)</span><br><span class="line">        #define ABI &quot;armeabi-v7a (hard-float)&quot;</span><br><span class="line">      #else</span><br><span class="line">        #define ABI &quot;armeabi-v7a&quot;</span><br><span class="line">      #endif</span><br><span class="line">    #endif</span><br><span class="line">  #else</span><br><span class="line">   #define ABI &quot;armeabi&quot;</span><br><span class="line">  #endif</span><br><span class="line">#elif defined(__i386__)</span><br><span class="line">#define ABI &quot;x86&quot;</span><br><span class="line">#elif defined(__x86_64__)</span><br><span class="line">#define ABI &quot;x86_64&quot;</span><br><span class="line">#elif defined(__mips64)  &#x2F;* mips64el-* toolchain defines __mips__ too *&#x2F;</span><br><span class="line">#define ABI &quot;mips64&quot;</span><br><span class="line">#elif defined(__mips__)</span><br><span class="line">#define ABI &quot;mips&quot;</span><br><span class="line">#elif defined(__aarch64__)</span><br><span class="line">#define ABI &quot;arm64-v8a&quot;</span><br><span class="line">#else</span><br><span class="line">#define ABI &quot;unknown&quot;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    int i, sum&#x3D;0;</span><br><span class="line">    i &#x3D; 1;  &#x2F;&#x2F;语句①</span><br><span class="line">    while(i&lt;&#x3D;10 &#x2F;*语句②*&#x2F; )&#123;</span><br><span class="line">        sum+&#x3D;i;</span><br><span class="line">        i++;  &#x2F;&#x2F;语句③</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;r0ysue&quot;, &quot;now sum is %d&quot;, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;    return (*env)-&gt;NewStringUTF(env, &quot;Hello from JNI&quot; ABI &quot;.&quot;);</span><br><span class="line">    char* msg &#x3D; &quot;r0ysue&quot;;</span><br><span class="line">    size_t len &#x3D; strlen(msg);</span><br><span class="line">    uint8_t result[16];</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;    md5((uint8_t*)msg, len, result);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;    char* tmp &#x3D; (char*)malloc(16);</span><br><span class="line">&#x2F;&#x2F;    &#x2F;&#x2F;字符串置空</span><br><span class="line">&#x2F;&#x2F;    memset(tmp,0x00,sizeof(char)*16);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;    char* final &#x3D; (char*)malloc(16);</span><br><span class="line">&#x2F;&#x2F;    &#x2F;&#x2F;字符串置空</span><br><span class="line">&#x2F;&#x2F;    memset(final,0x00,sizeof(char)*16);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;    &#x2F;&#x2F; display result</span><br><span class="line">&#x2F;&#x2F;    for (i &#x3D; 0; i &lt; 16; i++)&#123;</span><br><span class="line">&#x2F;&#x2F;        sprintf(tmp,&quot;%2.2x&quot;, result[i]);</span><br><span class="line">&#x2F;&#x2F;        __android_log_print(ANDROID_LOG_INFO, &quot;r0ysue&quot;, &quot;now tmp is %s&quot;, tmp);</span><br><span class="line">&#x2F;&#x2F;        sprintf(final, &quot;%s%s&quot;, final, tmp);</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">&#x2F;&#x2F;    __android_log_print(ANDROID_LOG_INFO, &quot;r0ysue&quot;, &quot;now final is %s&quot;, final);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    return (*env)-&gt;NewStringUTF(env, final);</span><br><span class="line"></span><br><span class="line">    char *r &#x3D; (char *) malloc(16);</span><br><span class="line">    memset(r,0x00,sizeof(char)*16);</span><br><span class="line"></span><br><span class="line">    char *final &#x3D; (char *) malloc(16);</span><br><span class="line">    memset(final,0x00,sizeof(char)*16);</span><br><span class="line"></span><br><span class="line">    md5((uint8_t*)msg,len,result);</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; 16; i++)&#123;</span><br><span class="line">        sprintf(r, &quot;%2.2x&quot;, result[i]);</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;r0ysue&quot;,  &quot;Hi,now i is %s\n&quot;,r);</span><br><span class="line">        sprintf(final, &quot;%s%s&quot;, final, r);</span><br><span class="line">    &#125;</span><br><span class="line">    jstring jresult &#x3D; (*env)-&gt;NewStringUTF(env,final);</span><br><span class="line">    return jresult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lldb"><a href="#lldb" class="headerlink" title="lldb"></a>lldb</h2><p>调试第三方app有一下两种方案</p><ol><li>app以debug模式启动，apk保重debuggable==true（重打包或xposed/frida去hook）</li><li>aosp系统编译成userdebug模式（n5x/sailfish）</li></ol><p>具体见<a href="https://blog.csdn.net/wangyiyungw/article/details/81069631" target="_blank" rel="noopener">Android调试利器之LLDB</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;Android&#x2F;Sdk&#x2F;ndk&#x2F;22.0.7026061</span><br><span class="line">tree -NCfhl | grep -i lldb-server</span><br><span class="line">cp toolchains&#x2F;llvm&#x2F;prebuilt&#x2F;linux-x86_64&#x2F;lib64&#x2F;clang&#x2F;11.0.5&#x2F;lib&#x2F;linux&#x2F;aarch64&#x2F;lldb-server ~&#x2F;Desktop&#x2F;ls64</span><br><span class="line">cp toolchains&#x2F;llvm&#x2F;prebuilt&#x2F;linux-x86_64&#x2F;lib64&#x2F;clang&#x2F;11.0.5&#x2F;lib&#x2F;linux&#x2F;arm&#x2F;lldb-server ~&#x2F;Desktop&#x2F;ls</span><br><span class="line">adb push ls* &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">.&#x2F;ls64 platform --listen &quot;0.0.0.0:10086&quot; --server</span><br><span class="line">将&#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;ndk&#x2F;22.0.7026061&#x2F;toolchains&#x2F;llvm&#x2F;prebuilt&#x2F;linux-x96_64&#x2F;bin加入path,并source ~&#x2F;.zshrc</span><br><span class="line">lldb </span><br><span class="line">platform select remote-android</span><br><span class="line">platform connect connect:&#x2F;&#x2F;192.168.0.183:10086</span><br><span class="line">adb shell</span><br><span class="line">ps -e|grep easy  拿到进程后</span><br><span class="line">attach -p 23171   机器码llvm反汇编成16进制</span><br><span class="line">thread list  当前线程</span><br><span class="line">dis  当前执行函数</span><br><span class="line">register read x0</span><br></pre></td></tr></table></figure><p>as调试模式Debug时也可以看到LLDB反汇编的结果</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210710184308921.png" alt="image-20210710184308921"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install neofetch</span><br><span class="line">neofetch</span><br></pre></td></tr></table></figure><p>Capstone/Keystone跨平台反汇编器，硬编码直接修改so</p><p>frida调试native通过<a href="https://igio90.github.io/DwarfWebsite/" target="_blank" rel="noopener">dwarf</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iGio90&#x2F;Dwarf.git</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">python dwarf.py  启动frida和dwarf,debug启动easyso</span><br></pre></td></tr></table></figure><h2 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h2><p>objection -g com.roysue.easyso1 explore</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memory list modules  找到libroysue.so</span><br><span class="line">memory list exports libroysue.so</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210710205512944.png" alt="image-20210710205512944"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function dis(address, number) &#123;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; number; i++) &#123;</span><br><span class="line">        var ins &#x3D; Instruction.parse(address);</span><br><span class="line">        console.log(&quot;address:&quot; + address + &quot;--dis:&quot; + ins.toString());</span><br><span class="line">        address &#x3D; ins.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(function()&#123;</span><br><span class="line">    var stringFromJniaddr &#x3D; Module.findExportByName(&quot;libroysue.so&quot;,&quot;Java_com_roysue_easyso1_MainActivity_stringFromJNI&quot;)</span><br><span class="line">    dis(stringFromJniaddr,10);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>frida -UF -l Intruction.js  打印地址</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20210710210702658.png" alt="image-20210710210702658"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arm-linux-androidabi-objdump -i  libroysue.so</span><br><span class="line">objdump -t libroysue.so   反汇编目标文件显示基本信息，如果显示 no symbols说明符号被抽掉了</span><br><span class="line">objdump -tT libroysue.so  查看导出表</span><br><span class="line">arm-linux-androidabi-objdump -tT libroysue.so    查看动态导出表</span><br><span class="line">arm-linux-androidabi-objdump --all-headers libroysue.so  显示所有可用头信息包括符号表，重定位入口</span><br><span class="line">arm-linux-androidabi-objdump -D libroysue.so  反汇编section</span><br><span class="line">arm-linux-androidabi-objdump -D libroysue.so | grep -100 0c44 </span><br><span class="line">arm-linux-androidabi-objdump -g libroysue.so</span><br><span class="line">strings libroysue.so  打印符号表</span><br><span class="line">nm -D libroysue.so</span><br><span class="line">readelf -s libroysue.so  查看符号表</span><br><span class="line">readelf -A libroysue.so  查看支持的CPU和ABI架构信息</span><br><span class="line">size libroysue.so</span><br></pre></td></tr></table></figure><p>具体工具查看<a href="https://www.gnu.org/software/binutils/" target="_blank" rel="noopener">GNU Binutils</a></p><h2 id="patch-so"><a href="#patch-so" class="headerlink" title="patch so"></a>patch so</h2><p>010Editor安装插件，Templates-Template Repository-ELF.bt，修改so中的值保存，</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211030232733752.png" alt="image-20211030232733752"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb push libroysue.so &#x2F;sdcard&#x2F;Download</span><br><span class="line">ps -e|grep -i easyso</span><br><span class="line">cat &#x2F;proc&#x2F;17518&#x2F;maps | grep -i libroysue  找到so存储位置并进入后</span><br><span class="line">cp &#x2F;sdcard&#x2F;Download&#x2F;libroysue.so .&#x2F;  调整权限后再次运行app，启动后打印logcat | grep -i roysue确实由now改为ooo</span><br></pre></td></tr></table></figure><h2 id="反汇编器"><a href="#反汇编器" class="headerlink" title="反汇编器"></a>反汇编器</h2><h3 id="ghidra"><a href="#ghidra" class="headerlink" title="ghidra"></a><a href="https://ghidra-sre.org/" target="_blank" rel="noopener">ghidra</a></h3><p>rm -rf ~/.cache/vmware</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt search openjdk|grep openjdk</span><br><span class="line">apt --fix-broken install</span><br><span class="line">apt install openjdk-14-jdk</span><br><span class="line">update-alternatives --config java  查看本机java版本并选择主版本</span><br><span class="line">cd ghidra_9.2.1_PUBLIC</span><br><span class="line">.&#x2F;ghidraRun  将roysue.so加入分析</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211030235427918.png" alt="image-20211030235427918"></p><h3 id="jeb"><a href="#jeb" class="headerlink" title="jeb"></a>jeb</h3><p><a href="https://bbs.pediy.com/thread-259895.html" target="_blank" rel="noopener">JEB Decompiler PRO 3.19.1</a>，<code>./jeb_linux.sh</code>，首次输入密码<code>pwd_ilbtcdnwiuypbzeo_</code>，License data使用python2 jebKeygen.py激活</p><p>打开roysue</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211030234603046.png" alt="image-20211030234603046"></p><h3 id="ida"><a href="#ida" class="headerlink" title="ida"></a>ida</h3><h3 id="binary-ninja"><a href="#binary-ninja" class="headerlink" title="binary ninja"></a>binary ninja</h3><p> <img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211031000930951.png" alt="image-20211031000930951"></p><h3 id="radare2"><a href="#radare2" class="headerlink" title="radare2"></a><a href="https://mp.weixin.qq.com/s/yFlj_joc-tO78EB5SENvaA" target="_blank" rel="noopener">radare2</a></h3><h3 id="Cutter"><a href="#Cutter" class="headerlink" title="Cutter"></a><a href="https://cutter.re/" target="_blank" rel="noopener">Cutter</a></h3><h1 id="C算法"><a href="#C算法" class="headerlink" title="C算法"></a>C算法</h1><h2 id="WjCryptLib"><a href="#WjCryptLib" class="headerlink" title="WjCryptLib"></a>WjCryptLib</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;WaterJuice&#x2F;WjCryptLib</span><br><span class="line">apt install cmake</span><br><span class="line">cmake .&#x2F;</span><br><span class="line">make</span><br><span class="line">cd projects&#x2F;Md5String</span><br><span class="line">.&#x2F;Md5String r0ysue  本身是8e2b0b38f557578f578ef21b33e4df0d，得到0x8e,0x2b,0x0b,0x38,...</span><br><span class="line">cd projects&#x2F;Sha256String</span><br><span class="line">.&#x2F;Sha256String r0ysue</span><br></pre></td></tr></table></figure><h2 id="AntiFrida"><a href="#AntiFrida" class="headerlink" title="AntiFrida"></a><a href="https://github.com/qtfreet00/AntiFrida" target="_blank" rel="noopener">AntiFrida</a></h2><p>通过Frida内存特征对maps中elf文件进行扫描匹配特征，支持frida-gadget和frida-server</p><h2 id="easyso1"><a href="#easyso1" class="headerlink" title="easyso1"></a>easyso1</h2><p><a href="https://blogz.gitee.io/cyberchef/" target="_blank" rel="noopener">cyberchef加解密</a>，<a href="https://gtoad.github.io/2018/07/13/Android-Inline-Hook-Fix/" target="_blank" rel="noopener">Android Inline Hook中的指令修复详解</a>，<a href="https://gtoad.github.io/2019/10/29/Android-APP-Analyse-Base/" target="_blank" rel="noopener">Android APP逆向分析基础</a>，<a href="https://www.jianshu.com/p/0390f598c34c" target="_blank" rel="noopener">Android NDK AES 加解密</a>，**<a href="https://github.com/luck-apple/aesTool" target="_blank" rel="noopener">aesTool实现aes加解密</a>**</p><p>CMakeLists.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">add_library( # Sets the name of the library.</span><br><span class="line">        roysue</span><br><span class="line"></span><br><span class="line">        # Sets the library as a shared library.</span><br><span class="line">        SHARED</span><br><span class="line"></span><br><span class="line">        # Provides a relative path to your source file(s).</span><br><span class="line">        aes.h</span><br><span class="line">        aes.c</span><br><span class="line">        hex_utils.h</span><br><span class="line">        hex_utils.c</span><br><span class="line">        tools.h</span><br><span class="line">        tools.cpp</span><br><span class="line">        aes_utils.h</span><br><span class="line">        aes_utils.c</span><br><span class="line">        roysue.c)</span><br></pre></td></tr></table></figure><p>首先，我们要创建一个 Android 工程，还有一个 MainActivity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Used to load the &#39;native-lib&#39; library on application startup.</span><br><span class="line">    static &#123;</span><br><span class="line">        System.loadLibrary(&quot;roysue&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Example of a call to a native method</span><br><span class="line">        TextView tv &#x3D; findViewById(R.id.sample_text);</span><br><span class="line">        tv.setText(method02( method01(&quot;r0ysue&quot;)));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        Runnable mRunnable &#x3D; new Runnable() &#123;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void run() &#123;</span><br><span class="line">&#x2F;&#x2F;                while (true) &#123;</span><br><span class="line">&#x2F;&#x2F;                    try &#123;</span><br><span class="line">&#x2F;&#x2F;                        Thread.sleep(2000);</span><br><span class="line">&#x2F;&#x2F;                    &#125; catch (InterruptedException e)&#123;</span><br><span class="line">&#x2F;&#x2F;                        e.printStackTrace();</span><br><span class="line">&#x2F;&#x2F;                    &#125;</span><br><span class="line">&#x2F;&#x2F;                    Log.i(&quot;roysue&quot;,method01(&quot;roysue&quot;));</span><br><span class="line">&#x2F;&#x2F;                &#125;</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;;</span><br><span class="line">&#x2F;&#x2F;        mRunnable.run();</span><br><span class="line">        new Thread()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                &#x2F;&#x2F;需要在子线程中处理的逻辑</span><br><span class="line">                while(true)&#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(2000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Log.i(&quot;roysueeasyso1&quot;,method01(&quot;r0syue&quot;));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * A native method that is implemented by the &#39;native-lib&#39; native library,</span><br><span class="line">     * which is packaged with this application.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public native String stringFromJNI();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * AES加密, CBC, PKCS5Padding</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static native String method01(String str);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * AES解密, CBC, PKCS5Padding</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static native String method02(String str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 c 文件 roysue.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">#include &lt;android&#x2F;log.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;aes_utils.h&quot;</span><br><span class="line">#include &quot;tools.h&quot;</span><br><span class="line">#include &quot;junk.h&quot;</span><br><span class="line"></span><br><span class="line">#define NELEM(x) ((int) (sizeof(x) &#x2F; sizeof((x)[0])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* This is a trivial JNI example where we use a native method</span><br><span class="line"> * to return a new VM String. See the corresponding Java source</span><br><span class="line"> * file located at:</span><br><span class="line"> *</span><br><span class="line"> *   hello-jni&#x2F;app&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;hellojni&#x2F;HelloJni.java</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F; Constants are the integer part of the sines of integers (in radians) * 2^32.</span><br><span class="line">const uint32_t k[64] &#x3D; &#123;</span><br><span class="line">        0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee ,</span><br><span class="line">        0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501 ,</span><br><span class="line">        0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be ,</span><br><span class="line">        0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821 ,</span><br><span class="line">        0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa ,</span><br><span class="line">        0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8 ,</span><br><span class="line">        0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed ,</span><br><span class="line">        0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a ,</span><br><span class="line">        0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c ,</span><br><span class="line">        0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70 ,</span><br><span class="line">        0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05 ,</span><br><span class="line">        0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665 ,</span><br><span class="line">        0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039 ,</span><br><span class="line">        0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1 ,</span><br><span class="line">        0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1 ,</span><br><span class="line">        0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391 &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; r specifies the per-round shift amounts</span><br><span class="line">const uint32_t r[] &#x3D; &#123;7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,</span><br><span class="line">                      5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,</span><br><span class="line">                      4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,</span><br><span class="line">                      6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; leftrotate function definition</span><br><span class="line">#define LEFTROTATE(x, c) (((x) &lt;&lt; (c)) | ((x) &gt;&gt; (32 - (c))))</span><br><span class="line"></span><br><span class="line">void to_bytes(uint32_t val, uint8_t *bytes)</span><br><span class="line">&#123;</span><br><span class="line">    bytes[0] &#x3D; (uint8_t) val;</span><br><span class="line">    bytes[1] &#x3D; (uint8_t) (val &gt;&gt; 8);</span><br><span class="line">    bytes[2] &#x3D; (uint8_t) (val &gt;&gt; 16);</span><br><span class="line">    bytes[3] &#x3D; (uint8_t) (val &gt;&gt; 24);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint32_t to_int32(const uint8_t *bytes)</span><br><span class="line">&#123;</span><br><span class="line">    return (uint32_t) bytes[0]</span><br><span class="line">           | ((uint32_t) bytes[1] &lt;&lt; 8)</span><br><span class="line">           | ((uint32_t) bytes[2] &lt;&lt; 16)</span><br><span class="line">           | ((uint32_t) bytes[3] &lt;&lt; 24);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void md5(const uint8_t *initial_msg, size_t initial_len, uint8_t *digest) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; These vars will contain the hash</span><br><span class="line">    uint32_t h0, h1, h2, h3;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Message (to prepare)</span><br><span class="line">    uint8_t *msg &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    size_t new_len, offset;</span><br><span class="line">    uint32_t w[16];</span><br><span class="line">    uint32_t a, b, c, d, i, f, g, temp;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Initialize variables - simple count in nibbles:</span><br><span class="line">    h0 &#x3D; 0x67452301;</span><br><span class="line">    h1 &#x3D; 0xefcdab89;</span><br><span class="line">    h2 &#x3D; 0x98badcfe;</span><br><span class="line">    h3 &#x3D; 0x10325476;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Pre-processing:</span><br><span class="line">    &#x2F;&#x2F;append &quot;1&quot; bit to message</span><br><span class="line">    &#x2F;&#x2F;append &quot;0&quot; bits until message length in bits ≡ 448 (mod 512)</span><br><span class="line">    &#x2F;&#x2F;append length mod (2^64) to message</span><br><span class="line"></span><br><span class="line">    for (new_len &#x3D; initial_len + 1; new_len % (512&#x2F;8) !&#x3D; 448&#x2F;8; new_len++)</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    msg &#x3D; (uint8_t*)malloc(new_len + 8);</span><br><span class="line">    memcpy(msg, initial_msg, initial_len);</span><br><span class="line">    msg[initial_len] &#x3D; 0x80; &#x2F;&#x2F; append the &quot;1&quot; bit; most significant bit is &quot;first&quot;</span><br><span class="line">    for (offset &#x3D; initial_len + 1; offset &lt; new_len; offset++)</span><br><span class="line">        msg[offset] &#x3D; 0; &#x2F;&#x2F; append &quot;0&quot; bits</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; append the len in bits at the end of the buffer.</span><br><span class="line">    to_bytes(initial_len*8, msg + new_len);</span><br><span class="line">    &#x2F;&#x2F; initial_len&gt;&gt;29 &#x3D;&#x3D; initial_len*8&gt;&gt;32, but avoids overflow.</span><br><span class="line">    to_bytes(initial_len&gt;&gt;29, msg + new_len + 4);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Process the message in successive 512-bit chunks:</span><br><span class="line">    &#x2F;&#x2F;for each 512-bit chunk of message:</span><br><span class="line">    for(offset&#x3D;0; offset&lt;new_len; offset +&#x3D; (512&#x2F;8)) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; break chunk into sixteen 32-bit words w[j], 0 ≤ j ≤ 15</span><br><span class="line">        for (i &#x3D; 0; i &lt; 16; i++)</span><br><span class="line">            w[i] &#x3D; to_int32(msg + offset + i*4);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Initialize hash value for this chunk:</span><br><span class="line">        a &#x3D; h0;</span><br><span class="line">        b &#x3D; h1;</span><br><span class="line">        c &#x3D; h2;</span><br><span class="line">        d &#x3D; h3;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Main loop:</span><br><span class="line">        for(i &#x3D; 0; i&lt;64; i++) &#123;</span><br><span class="line"></span><br><span class="line">            if (i &lt; 16) &#123;</span><br><span class="line">                f &#x3D; (b &amp; c) | ((~b) &amp; d);</span><br><span class="line">                g &#x3D; i;</span><br><span class="line">            &#125; else if (i &lt; 32) &#123;</span><br><span class="line">                f &#x3D; (d &amp; b) | ((~d) &amp; c);</span><br><span class="line">                g &#x3D; (5*i + 1) % 16;</span><br><span class="line">            &#125; else if (i &lt; 48) &#123;</span><br><span class="line">                f &#x3D; b ^ c ^ d;</span><br><span class="line">                g &#x3D; (3*i + 5) % 16;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                f &#x3D; c ^ (b | (~d));</span><br><span class="line">                g &#x3D; (7*i) % 16;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            temp &#x3D; d;</span><br><span class="line">            d &#x3D; c;</span><br><span class="line">            c &#x3D; b;</span><br><span class="line">            b &#x3D; b + LEFTROTATE((a + f + k[i] + w[g]), r[i]);</span><br><span class="line">            a &#x3D; temp;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Add this chunk&#39;s hash to result so far:</span><br><span class="line">        h0 +&#x3D; a;</span><br><span class="line">        h1 +&#x3D; b;</span><br><span class="line">        h2 +&#x3D; c;</span><br><span class="line">        h3 +&#x3D; d;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; cleanup</span><br><span class="line">    free(msg);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;var char digest[16] :&#x3D; h0 append h1 append h2 append h3 &#x2F;&#x2F;(Output is in little-endian)</span><br><span class="line">    to_bytes(h0, digest);</span><br><span class="line">    to_bytes(h1, digest + 4);</span><br><span class="line">    to_bytes(h2, digest + 8);</span><br><span class="line">    to_bytes(h3, digest + 12);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_roysue_easyso1_MainActivity_stringFromJNI( JNIEnv* env, jobject thiz )</span><br><span class="line">&#123;</span><br><span class="line">#if defined(__arm__)</span><br><span class="line">    #if defined(__ARM_ARCH_7A__)</span><br><span class="line">    #if defined(__ARM_NEON__)</span><br><span class="line">      #if defined(__ARM_PCS_VFP)</span><br><span class="line">        #define ABI &quot;armeabi-v7a&#x2F;NEON (hard-float)&quot;</span><br><span class="line">      #else</span><br><span class="line">        #define ABI &quot;armeabi-v7a&#x2F;NEON&quot;</span><br><span class="line">      #endif</span><br><span class="line">    #else</span><br><span class="line">      #if defined(__ARM_PCS_VFP)</span><br><span class="line">        #define ABI &quot;armeabi-v7a (hard-float)&quot;</span><br><span class="line">      #else</span><br><span class="line">        #define ABI &quot;armeabi-v7a&quot;</span><br><span class="line">      #endif</span><br><span class="line">    #endif</span><br><span class="line">  #else</span><br><span class="line">   #define ABI &quot;armeabi&quot;</span><br><span class="line">  #endif</span><br><span class="line">#elif defined(__i386__)</span><br><span class="line">#define ABI &quot;x86&quot;</span><br><span class="line">#elif defined(__x86_64__)</span><br><span class="line">#define ABI &quot;x86_64&quot;</span><br><span class="line">#elif defined(__mips64)  &#x2F;* mips64el-* toolchain defines __mips__ too *&#x2F;</span><br><span class="line">#define ABI &quot;mips64&quot;</span><br><span class="line">#elif defined(__mips__)</span><br><span class="line">#define ABI &quot;mips&quot;</span><br><span class="line">#elif defined(__aarch64__)</span><br><span class="line">#define ABI &quot;arm64-v8a&quot;</span><br><span class="line">#else</span><br><span class="line">#define ABI &quot;unknown&quot;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    int i, sum&#x3D;0;</span><br><span class="line">    i &#x3D; 1;  &#x2F;&#x2F;语句①</span><br><span class="line">    while(i&lt;&#x3D;10 &#x2F;*语句②*&#x2F; )&#123;</span><br><span class="line">        sum+&#x3D;i;</span><br><span class="line">        i++;  &#x2F;&#x2F;语句③</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;r0ysue&quot;, &quot;now sum is %d&quot;, sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char* msg &#x3D; &quot;r0ysue&quot;;</span><br><span class="line">    size_t len &#x3D; strlen(msg);</span><br><span class="line">    uint8_t result[16];</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;    md5((uint8_t*)msg, len, result);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;    char* tmp &#x3D; (char*)malloc(16);</span><br><span class="line">&#x2F;&#x2F;    memset(tmp,0x00,sizeof(char)*16);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;    char* final &#x3D; (char*)malloc(16);</span><br><span class="line">&#x2F;&#x2F;    memset(final,0x00,sizeof(char)*16);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;    &#x2F;&#x2F; display result</span><br><span class="line">&#x2F;&#x2F;    for (i &#x3D; 0; i &lt; 16; i++)&#123;</span><br><span class="line">&#x2F;&#x2F;        sprintf(tmp,&quot;%2.2x&quot;, result[i]);</span><br><span class="line">&#x2F;&#x2F;        __android_log_print(ANDROID_LOG_INFO, &quot;r0ysue&quot;, &quot;now tmp is %s&quot;, tmp);</span><br><span class="line">&#x2F;&#x2F;        sprintf(final, &quot;%s%s&quot;, final, tmp);</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">&#x2F;&#x2F;    __android_log_print(ANDROID_LOG_INFO, &quot;r0ysue&quot;, &quot;now final is %s&quot;, final);</span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;    puts(&quot;&quot;);</span><br><span class="line">&#x2F;&#x2F;    return (*env)-&gt;NewStringUTF(env, final);</span><br><span class="line"></span><br><span class="line">    char *r &#x3D; (char *) malloc(16);</span><br><span class="line">    memset(r,0x00,sizeof(char)*16);</span><br><span class="line"></span><br><span class="line">    char *final &#x3D; (char *) malloc(16);</span><br><span class="line">    memset(final,0x00,sizeof(char)*16);</span><br><span class="line"></span><br><span class="line">    md5((uint8_t*)msg,len,result);</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; 16; i++)&#123;</span><br><span class="line">        sprintf(r, &quot;%2.2x&quot;, result[i]);</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;r0ysue&quot;,  &quot;Hi,now i is %s\n&quot;,r);</span><br><span class="line">        sprintf(final, &quot;%s%s&quot;, final, r);</span><br><span class="line">    &#125;</span><br><span class="line">    jstring jresult &#x3D; (*env)-&gt;NewStringUTF(env,final);</span><br><span class="line">    return jresult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_roysue_easyso1_MainActivity_method01(JNIEnv *env, jclass clazz, jstring str_) &#123;</span><br><span class="line">    &#x2F;&#x2F; TODO: implement method01()</span><br><span class="line"></span><br><span class="line">    const char *str &#x3D; (*env)-&gt;GetStringUTFChars(env,str_, JNI_FALSE);</span><br><span class="line">    char *result &#x3D; AES_128_CBC_PKCS5_Encrypt(str);</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env,str_, str);</span><br><span class="line"></span><br><span class="line">    jstring jResult &#x3D; getJString(env, result);</span><br><span class="line">    free(result);</span><br><span class="line"></span><br><span class="line">    return jResult;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_roysue_easyso1_MainActivity_method02(JNIEnv *env, jclass clazz, jstring str_) &#123;</span><br><span class="line">    &#x2F;&#x2F; TODO: implement method02()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const char *str &#x3D; (*env)-&gt;GetStringUTFChars(env,str_, JNI_FALSE);</span><br><span class="line">    char *result &#x3D; AES_128_CBC_PKCS5_Decrypt(str);</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env,str_, str);</span><br><span class="line"></span><br><span class="line">    jstring jResult &#x3D; getJString(env, result);</span><br><span class="line">    free(result);</span><br><span class="line"></span><br><span class="line">    return jResult;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译好后使用ghidra分析，New project后新建文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7z x ghidra_9.2.1_PUBLIC_20201215.zip</span><br><span class="line">.&#x2F;ghidraRun  将编译后的解包拿到libroysue.so拖入ghidra</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211106105742596.png" alt="image-20211106105742596"></p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211101090607364.png" alt="image-20211101090607364"></p><p>右侧反编译后的代码已经被混淆</p><h3 id="frida-1"><a href="#frida-1" class="headerlink" title="frida"></a>frida</h3><p>根据方法名获取地址<a href="https://github.com/lasting-yang/frida_hook_libart" target="_blank" rel="noopener">frida_hook_libart</a>，**<a href="https://github.com/daisixuan/hook_ArtMethod_RegisterNative" target="_blank" rel="noopener"> hook_ArtMethod_RegisterNative</a>**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function () &#123;</span><br><span class="line">    console.log(&quot;Invoking...&quot;)</span><br><span class="line">    var method01_addr &#x3D; Module.findExportByName(&quot;libroysue.so&quot;, &quot;Java_com_roysue_easyso1_MainActivity_method02&quot;);</span><br><span class="line">    console.log(&quot;method01 addr is  &#x3D;&gt;&quot;, method01_addr)</span><br><span class="line"></span><br><span class="line">    # Java_com_roysue_easyso1_MainActivity_method02(JNIEnv *env, jclass clazz, jstring str_)</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var jstring &#x3D; Java.vm.getEnv().newStringUtf(&quot;4e8de2f3c674d8157b4862e50954d81c&quot;)</span><br><span class="line">        var method01 &#x3D; new NativeFunction(method01_addr, &quot;pointer&quot;, [&quot;pointer&quot;, &quot;pointer&quot;, &quot;pointer&quot;]);</span><br><span class="line">        var result &#x3D; method01(Java.vm.getEnv(), jstring, jstring)</span><br><span class="line">        console.log(&quot;final result is &#x3D;&gt; &quot;, Java.vm.getEnv().getStringUtfChars(result, null).readCString());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>frida -UF -l FridaInvokeNative.js  invoke()</p><h3 id="ExAndroidNativeEmu"><a href="#ExAndroidNativeEmu" class="headerlink" title="ExAndroidNativeEmu"></a>ExAndroidNativeEmu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;maiyao1988&#x2F;ExAndroidNativeEmu.git  基于Unicorn的模拟器</span><br><span class="line">proxychains pyenv install 3.7.0</span><br><span class="line">pyenv local 3.7.0</span><br><span class="line">proxychains pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>easyso1.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">import posixpath</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">from unicorn import *</span><br><span class="line">from unicorn.arm_const import *</span><br><span class="line"></span><br><span class="line">from androidemu.emulator import Emulator</span><br><span class="line">from androidemu.java.java_class_def import JavaClassDef</span><br><span class="line">from androidemu.java.java_method_def import java_method_def</span><br><span class="line">import androidemu.utils.debug_utils</span><br><span class="line">from androidemu.utils.chain_log import ChainLogger</span><br><span class="line">from androidemu.java.classes.string import String</span><br><span class="line"></span><br><span class="line">import capstone</span><br><span class="line">import traceback</span><br><span class="line"></span><br><span class="line">g_cfd &#x3D; ChainLogger(sys.stdout, &quot;.&#x2F;ins-jni.txt&quot;)</span><br><span class="line">def hook_code(mu, address, size, user_data):</span><br><span class="line">    try:</span><br><span class="line">        emu &#x3D; user_data</span><br><span class="line">        if (not emu.memory.check_addr(address, UC_PROT_EXEC)):</span><br><span class="line">            logger.error(&quot;addr 0x%08X out of range&quot;%(address,))</span><br><span class="line">            sys.exit(-1) </span><br><span class="line">        androidemu.utils.debug_utils.dump_code(emu, address, size, g_cfd)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logger.exception(&quot;exception in hook_code&quot;)</span><br><span class="line">        sys.exit(-1)</span><br><span class="line"></span><br><span class="line">def hook_mem_read(uc, access, address, size, value, user_data):</span><br><span class="line">    pc &#x3D; uc.reg_read(UC_ARM_REG_PC)</span><br><span class="line">    </span><br><span class="line">    if (address &#x3D;&#x3D; 0xCBC80640):</span><br><span class="line">        logger.debug(&quot;read mutex&quot;)</span><br><span class="line">        data &#x3D; uc.mem_read(address, size)</span><br><span class="line">        v &#x3D; int.from_bytes(data, byteorder&#x3D;&#39;little&#39;, signed&#x3D;False)</span><br><span class="line">        logger.debug(&quot;&gt;&gt;&gt; Memory READ at 0x%08X, data size &#x3D; %u,  data value &#x3D; 0x%08X, pc: 0x%08X,&quot; % (address, size, v, pc))</span><br><span class="line"></span><br><span class="line">def hook_mem_write(uc, access, address, size, value, user_data):</span><br><span class="line">    pc &#x3D; uc.reg_read(UC_ARM_REG_PC)</span><br><span class="line">    if (address &#x3D;&#x3D; 0xCBC80640):</span><br><span class="line">        logger.debug(&quot;write mutex&quot;)</span><br><span class="line">        logger.debug(&quot;&gt;&gt;&gt; Memory WRITE at 0x%08X, data size &#x3D; %u, data value &#x3D; 0x%08X, pc: 0x%08X&quot; % (address, size, value, pc))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MainActivity(metaclass&#x3D;JavaClassDef, jvm_name&#x3D;&#39;local&#x2F;myapp&#x2F;testnativeapp&#x2F;MainActivity&#39;):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @java_method_def(name&#x3D;&#39;stringFromJNI&#39;, signature&#x3D;&#39;()Ljava&#x2F;lang&#x2F;String;&#39;, native&#x3D;True)</span><br><span class="line">    def string_from_jni(self, mu):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def test(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger &#x3D; logging.getLogger(__name__)</span><br><span class="line"> </span><br><span class="line">emulator &#x3D; Emulator(</span><br><span class="line">    vfs_root&#x3D;posixpath.join(posixpath.dirname(__file__), &quot;vfs&quot;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># Register Java class.</span><br><span class="line">emulator.java_classloader.add_class(MainActivity)</span><br><span class="line"># emulator.mu.hook_add(UC_HOOK_CODE, hook_code, emulator)</span><br><span class="line"></span><br><span class="line"># emulator.mu.hook_add(UC_HOOK_MEM_WRITE, hook_mem_write)</span><br><span class="line"># emulator.mu.hook_add(UC_HOOK_MEM_READ, hook_mem_read)</span><br><span class="line"></span><br><span class="line"># Load all libraries.</span><br><span class="line">lib_module &#x3D; emulator.load_library(&quot;tests&#x2F;bin&#x2F;libroysue.so&quot;)</span><br><span class="line"></span><br><span class="line">logger.info(&quot;Loaded modules:&quot;)</span><br><span class="line"></span><br><span class="line">for module in emulator.modules:</span><br><span class="line">    logger.info(&quot;&#x3D;&gt; 0x%08x - %s&quot; % (module.base, module.filename))</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    logger.info(&quot;Response from JNI call: %s&quot; % emulator.call_symbol(lib_module,&quot;Java_com_roysue_easyso1_MainActivity_method01&quot;,emulator.java_vm.jni_env.address_ptr, 0x00, String(&#39;Hello&#39;)))</span><br><span class="line">    logger.info(&quot;Response from JNI call: %s&quot; % emulator.call_symbol(lib_module,&quot;Java_com_roysue_easyso1_MainActivity_method02&quot;,emulator.java_vm.jni_env.address_ptr, 0x00, String(&#39;a8e98de3a13365e39030feefb6c508f7&#39;)))</span><br><span class="line"> </span><br><span class="line">    logger.info(&quot;Exited EMU.&quot;)</span><br><span class="line">    logger.info(&quot;Native methods registered to MainActivity:&quot;)</span><br><span class="line"></span><br><span class="line">except UcError as e:</span><br><span class="line">    print(&quot;Exit at %x&quot; % emulator.mu.reg_read(UC_ARM_REG_PC))</span><br><span class="line">    raise</span><br></pre></td></tr></table></figure><h3 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a><a href="https://bbs.pediy.com/thread-206654.htm" target="_blank" rel="noopener">gdb调试</a></h3><ul><li>可调试内核</li><li>支持全平台</li><li>qemu内置</li><li>内核硬件断点，开启内存断点</li></ul><p>建议使用aosp810自行编译的系统，将app编译成带调试符号的so</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">tree -NChfl | grep -i gdb</span><br><span class="line">file aosp810r1&#x2F;prebuilts&#x2F;misc&#x2F;android-arm64&#x2F;gdbserver64  app端将misc文件夹中所有架构的gdb拷贝出来放到&#x2F;data&#x2F;local&#x2F;tmp&#x2F;gdbserver</span><br><span class="line">adb shell</span><br><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;gdbserver&#x2F;android-arm64&#x2F;gdbserver64 --help</span><br><span class="line">.&#x2F;fs1280arm64</span><br><span class="line">objection -g com.roysue.easyso1 explore  </span><br><span class="line">frida  查看Process Architecture架构为arm架构，即32位</span><br><span class="line">ps -e|grep -i zgygote  查看孵化器进程id，如zgygote为3316，zgygote64位3317</span><br><span class="line">ps -e|grep -i 3316  查看32位的包</span><br><span class="line">chmod 777 android-arm&#x2F;gdbserver</span><br><span class="line">adb shell dumpsys activity top|grep com.roysue.easyso1  查看顶层app包名</span><br><span class="line">adb shell am start -D -n com.roysue.easyso1&#x2F;.MainActivity 调试模式运行</span><br><span class="line">ps -e|grep -i roysue  获取进程id为19175</span><br><span class="line">.&#x2F;gdbserver 0.0.0.0:23946 --attach 19175</span><br><span class="line">file aosp810r1&#x2F;prebuilts&#x2F;gcc&#x2F;linux-x86   在ip为192.168.0.129的kali中启动.&#x2F;linux-x86&#x2F;bin&#x2F;gdb</span><br><span class="line">(gdb) target remote 192.168.0.183:23946  app端ip为192.168.0.183</span><br><span class="line">(gdb) info shared  查看so的共享库</span><br><span class="line">(gdb) set disassemble-next on 指令回显</span><br><span class="line">(gdb) set step-mode on 打开单步调试</span><br><span class="line">(gdb) c</span><br><span class="line"></span><br><span class="line">.&#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;tools&#x2F;jdb -connect com.sun.jdi.SocketAttach:hostname&#x3D;127.0.0.1,port&#x3D;8700  继续执行</span><br><span class="line"></span><br><span class="line">.&#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;tools&#x2F;</span><br><span class="line">ln -s  &#x2F;root&#x2F;Desktop&#x2F;android-studio&#x2F;jre&#x2F; &#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;tools&#x2F;lib&#x2F;monitor-x86_64&#x2F;  启动ddms，.&#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;tools&#x2F;monitor</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211106121315455.png" alt="image-20211106121315455"></p><p>配置CMakeLists.txt  允许调试模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET(CMAKE_BUILD_TYPE &quot;Debug&quot;)</span><br><span class="line">SET(CMAKE_CXX_FLAGS_DEBUG &quot;$ENV&#123;CXXFLAGS&#125; -O0 -Wall -g2 -ggdb&quot;)</span><br><span class="line">SET(CMAKE_CXX_FLAGS_RELEASE &quot;$ENV&#123;CXXFLAGS&#125; -O3 -Wall&quot;)</span><br></pre></td></tr></table></figure><p>在build.gradle的android模块中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">packagingOptions&#123;</span><br><span class="line">    doNotStrip &quot;*&#x2F;armeabi&#x2F;*.so&quot;</span><br><span class="line">    doNotStrip &quot;*&#x2F;armeabi-v7a&#x2F;*.so&quot;</span><br><span class="line">    doNotStrip &quot;*&#x2F;x86&#x2F;*.so&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译好后解包拿到libroysue.so</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objdump -T libroysue.so  导出表</span><br><span class="line">objdump -t libroysue.so | more  符号表</span><br><span class="line">nm -s libroysue.so | grep method  查看符号表偏移 000033f5</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211107025324811.png" alt="image-20211107025324811"></p><h3 id="HyperPwn调试"><a href="#HyperPwn调试" class="headerlink" title="HyperPwn调试"></a>HyperPwn调试</h3><p><a href="https://github.com/bet4it/hyperpwn.git%EF%BC%8C[Kali%E5%AE%89%E8%A3%85Hyperpwn(%E5%9F%BA%E4%BA%8Egdb%E7%9A%84%E8%B0%83%E8%AF%95%E5%88%A9%E5%99%A8)](https://bbs.pediy.com/thread-265856.htm)%EF%BC%8C[Hyperpwn:%E5%9F%BA%E4%BA%8Egdb%E7%9A%84%E8%B0%83%E8%AF%95%E5%88%A9%E5%99%A8%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B%E6%9B%B4%E8%BD%BB%E6%9D%BE](https://bbs.pediy.com/thread-257344.html)" target="_blank" rel="noopener">https://github.com/bet4it/hyperpwn.git，[Kali安装Hyperpwn(基于gdb的调试利器)](https://bbs.pediy.com/thread-265856.htm)，[Hyperpwn:基于gdb的调试利器，让你的调试过程更轻松](https://bbs.pediy.com/thread-257344.html)</a></p><p>apt –fix-broken install</p><p>dpkg -i <a href="https://github.com/vercel/hyper/releases/download/v3.1.0-canary.4/hyper_3.1.0-canary.4_amd64.deb" target="_blank" rel="noopener">hyper_3.1.0-canary.4_amd64.deb</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su kali  使用非root用户权限运行</span><br><span class="line">hyper version</span><br><span class="line">cd &#x2F;opt&#x2F;Hyper</span><br><span class="line">sudo chmod 4755 chrome-sandbox</span><br><span class="line">hyper -v  报错cannot open display: :0.0,将kali切换用户switch user,kali&#x2F;kali 登录后启动</span><br><span class="line">hyper  启动</span><br></pre></td></tr></table></figure><p>安装插件需要代理，虽然proxychains可以代理，但是只能单个命令使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;redsocks.conf</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211106231625249.png" alt="image-20211106231625249"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redsocks  直接启动，ss -nltp|more  检查代理是否启动</span><br></pre></td></tr></table></figure><p>sh iptables.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#不重定向目的地址为服务器的包</span><br><span class="line">sudo iptables -t nat -A OUTPUT -d 192.168.179.1 -j RETURN  #请用你的shadowsocks服务器的地址替换$SERVER_IP</span><br><span class="line"> </span><br><span class="line">#不重定向私有地址的流量</span><br><span class="line">sudo iptables -t nat -A OUTPUT -d 10.0.0.0&#x2F;8 -j RETURN</span><br><span class="line">sudo iptables -t nat -A OUTPUT -d 172.16.0.0&#x2F;16 -j RETURN</span><br><span class="line">sudo iptables -t nat -A OUTPUT -d 192.168.0.0&#x2F;16 -j RETURN</span><br><span class="line"> </span><br><span class="line">#不重定向保留地址的流量,这一步很重要</span><br><span class="line">sudo iptables -t nat -A OUTPUT -d 127.0.0.0&#x2F;8 -j RETURN</span><br><span class="line"> </span><br><span class="line">#重定向所有不满足以上条件的流量到redsocks监听的12345端口</span><br><span class="line">sudo iptables -t nat -A OUTPUT -p tcp -j REDIRECT --to-ports 12345 #12345是你的redsocks运行的端口,请根据你的情况替换它</span><br><span class="line"></span><br><span class="line">curl ip.sb 查看全局科学的代理配置完成</span><br></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hyper i hyperinator</span><br><span class="line">hyper i hyperpwn</span><br></pre></td></tr></table></figure><p>切换用户到kali</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hyper  更新插件报错error An unexpected error occurred: &quot;...getaddrinfo ENOENT raw.githubusercontent.com&quot;.</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211106235927760.png" alt="image-20211106235927760"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br><span class="line">151.101.76.133 raw.githubusercontent.com</span><br><span class="line">重新Update,知道右上角出现Plugins Updated</span><br></pre></td></tr></table></figure><p>切回用户root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb push ~&#x2F;Android&#x2F;Sdk&#x2F;ndk&#x2F;22.0.7026061&#x2F;prebuild &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">apt search gdb-multiarch</span><br><span class="line">apt install gdb-multiarch </span><br><span class="line">gdb</span><br><span class="line">q</span><br><span class="line">cat &#x2F;proc&#x2F;13709&#x2F;status 查看TracerPid为0就是不可调试</span><br></pre></td></tr></table></figure><p>切回kali插件安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pwndbg&#x2F;pwndbg.git</span><br><span class="line">cd pwndbg</span><br><span class="line">.&#x2F;setup.sh</span><br><span class="line">wget -O ~&#x2F;.gdbinit-gef.py -q http:&#x2F;&#x2F;gef.blah.cat&#x2F;py</span><br><span class="line">echo source ~&#x2F;.gdbinit-gef.py &gt;&gt; ~&#x2F;.gdbinit</span><br><span class="line">gdb-multiarch</span><br><span class="line">hyper</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211107011428407.png" alt="image-20211107011428407"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">经常忘记：kali开sshd服务：</span><br><span class="line"># vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">PermitRootLogin yes</span><br><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;ssh start</span><br><span class="line"></span><br><span class="line">开机自启：</span><br><span class="line">update-rc.d ssh enable</span><br></pre></td></tr></table></figure><p>开始attach，通过查看app架构为32位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ps -e|grep roysue  父进程id为3109，进程id为13709</span><br><span class="line">ps -e|grep zygote  进程也为3109</span><br><span class="line">ps -e|grep 3109</span><br><span class="line">chmod 777 &#x2F;data&#x2F;local&#x2F;tmp&#x2F;prebuilt&#x2F;android-arm&#x2F;gdbserver&#x2F;gdbserver</span><br><span class="line">.&#x2F;gdbserver 0.0.0.0:23946 --attach 13709</span><br><span class="line">cat &#x2F;proc&#x2F;13709&#x2F;maps | grep libroysue  查看带x权限的基地址</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211107024948516.png" alt="image-20211107024948516"></p><p>切换到kali账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hyper</span><br><span class="line">target remote 192.168.0.183:23946</span><br><span class="line">set arch arm</span><br><span class="line">set arm fallback-mode thumb</span><br><span class="line">c  运行到下个断点</span><br><span class="line">ctrl+c 停止执行</span><br><span class="line">info share  看所有加载so</span><br><span class="line">x&#x2F;20i 0x33f5+0xcfc2e000  查看</span><br><span class="line">b *(0x33f5+0xcfc2e000)  下断点 so基地址+函数偏移</span><br><span class="line">info b 查看断点</span><br><span class="line">c 运行到下个断点F8 进入函数F7</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211107030547532.png" alt="image-20211107030547532"></p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211107030953974.png" alt="image-20211107030953974"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.roysue.easyso1 explore</span><br><span class="line">memory list modules  找到libroysue.so的基地址</span><br><span class="line">memory list exports libroysue.so  找出so的所有函数即地址</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211107034206883.png" alt="image-20211107034206883"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b *0xd3c31377</span><br><span class="line">b *0xd3c324dd</span><br><span class="line">c</span><br><span class="line">invoke()</span><br></pre></td></tr></table></figure><h1 id="arm汇编"><a href="#arm汇编" class="headerlink" title="arm汇编"></a>arm汇编</h1><p><a href="https://www.jianshu.com/p/44650eaceb18" target="_blank" rel="noopener">Android CPU 架构详解</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">file ~&#x2F;Android&#x2F;Sdk&#x2F;ndk&#x2F;22.0.7026061&#x2F;toolchains&#x2F;llvm&#x2F;prebuilt&#x2F;linux-x86_64&#x2F;bin&#x2F;*</span><br><span class="line">~&#x2F;Android&#x2F;Sdk&#x2F;ndk&#x2F;22.0.7026061&#x2F;toolchains&#x2F;llvm&#x2F;prebuilt&#x2F;linux-x86_64&#x2F;bin&#x2F;clang++ -target aarch64-linux-android21 md5.c 编译c文件</span><br><span class="line">.&#x2F;md5 r0ysue</span><br><span class="line">clang -target aarch64-linux-android21 md5.c -o md5arrch64  编译成64位</span><br><span class="line">adb push md5aarch64 &#x2F;data&#x2F;loca&#x2F;tmp</span><br><span class="line">.&#x2F;md5aarch64 r0ysue  </span><br><span class="line">clang -target armv7a-linux-android21 md5.c -o md5v7a  编译成32位</span><br><span class="line">clang -target arm-linux-android21 md5.c -o md5arm</span><br><span class="line">clang -target arm-linux-android21 -E md5.c -o md5arm.i 预处理,将依赖的库进行展开</span><br><span class="line">clang -target arm-linux-android21 -S md5arm2.i -o md5arm.s  编译</span><br><span class="line">clang -target arm-linux-android21 md5arm.o  汇编成二进制</span><br><span class="line">clang -target arm-linux-android21 md5arm.o -o md5Arm2 链接</span><br><span class="line">.&#x2F;md5Arm2 roysue</span><br><span class="line">llvm-readelf --sections md5Arm2</span><br><span class="line">llvm-nm md5Arm2</span><br><span class="line">man nm</span><br><span class="line"></span><br><span class="line">clang -target arm-linux-android21 md5.c -c -o md5.bc -emit-llvm  二进制文件不可读</span><br><span class="line">llvm-dis md5.bc -o md5.ll  生成字节码</span><br><span class="line">llvm-as md5.ll -o md52.bc</span><br><span class="line">apt install llvm-ll-tools</span><br><span class="line">llc md52.bc -o md52.s</span><br><span class="line">clang -target arm-linux-android21 -c md52.s -o md52.o  打包成可执行程序但是没有链接符号</span><br><span class="line">clang -target arm-linux-android21 md52.o -o md52</span><br><span class="line">.&#x2F;md52 roysue</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/zlmm741/article/details/105160970" target="_blank" rel="noopener">ARM 反汇编基础</a>，<a href="https://www.cnblogs.com/ylhwx/p/7834969.html" target="_blank" rel="noopener">常用ARM指令</a></p><h2 id="unicorn"><a href="#unicorn" class="headerlink" title="unicorn"></a>unicorn</h2><p>hello.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;* 我的第一个 C 程序 *&#x2F;</span><br><span class="line">    getchar();</span><br><span class="line">    printf(&quot;Hello, World! \n&quot;);</span><br><span class="line"> </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clang -target armv7a-linux-android21 -E hello.c -o hello.i  预编译</span><br><span class="line">clang -target arm-linux-android21 -S hello.i -o hello.s 编译成汇编</span><br><span class="line">clang -target arm-linux-android21 -mthumb -S hello.i -o helloTHUMB.s  开启thumb模式</span><br><span class="line">clang -target arm-linux-android21 hello.s -o hello</span><br><span class="line">.&#x2F;hello roysue</span><br></pre></td></tr></table></figure><p>全局科学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh iptables.sh</span><br><span class="line">redsocks</span><br><span class="line">curl ip.sb</span><br></pre></td></tr></table></figure><p>调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;Hyper-3.1.0-canary.4.AppImage --no-sandbox</span><br><span class="line">vim ~&#x2F;.zshrc</span><br><span class="line">alias hyper2&#x3D;&#39;&#x2F;root&#x2F;Desktop&#x2F;Hyper-3.1.0-canary.4.AppImage --no-sandbox&#39;</span><br><span class="line">source ~&#x2F;.zshrc</span><br><span class="line">hyper2</span><br><span class="line">npm install hyperinator</span><br><span class="line">npm install hyperpwn</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pwndbg&#x2F;pwndbg.git</span><br><span class="line">cd pwndbg</span><br><span class="line">.&#x2F;setup.sh</span><br><span class="line">wget -O ~&#x2F;.gdbinit-gef.py -q http:&#x2F;&#x2F;gef.blah.cat&#x2F;py</span><br><span class="line">echo source ~&#x2F;.gdbinit-gef.py &gt;&gt; ~&#x2F;.gdbinit</span><br><span class="line">vim ~&#x2F;.hyper.js</span><br><span class="line">plugins: [&quot;hyperinator&quot;,&quot;hyperpwn&quot;]</span><br><span class="line">hyper2  左上角Plugins-update</span><br><span class="line">gdb-multiarch</span><br><span class="line">hyper</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line">.&#x2F;gdbserver 0.0.0.0:23946 hello</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211107214942712.png" alt="image-20211107214942712"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target remote 192.168.3.13:23946</span><br><span class="line">b main 下断点</span><br><span class="line">c 执行到下一个断点</span><br><span class="line">disassemble main  反编译main函数，等同于objdump -t hello ， 查看main函数的起始地址00001410</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211107221013255.png" alt="image-20211107221013255"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">ps -e|grep -i hello  进程id为13120</span><br><span class="line">cat &#x2F;proc&#x2F;13120&#x2F;maps | grep hello</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211107220755286.png" alt="image-20211107220755286"></p><p>hex(0xaae13000+0x1410)=0xaae14410 是main函数的起始地址，但是断点却下在了0xaae1441c，<a href="https://blog.csdn.net/qq_34127958/article/details/72791382" target="_blank" rel="noopener">ARM三级流水线</a>，pc值=当前指令内存地址+8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b *0xaae14410   因为已经过了断点，重启gdbserver,在hyper中重打断点，但是每次启动地址可能不一样</span><br><span class="line">info registers  查看指令对应的值</span><br><span class="line">ni  汇编级别逐步调试，n是源码级别逐步调试 </span><br><span class="line">x&#x2F;4xw 0xab24043c  查看内存中的值</span><br><span class="line">hexdump 0xab23f370+0x8  打印地址值</span><br><span class="line">si 进入指令</span><br></pre></td></tr></table></figure><p>结合frida</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clang -target arm-linux-android21 -mthumb hello.c -o hellogetchar</span><br><span class="line">.&#x2F;hellogetchar</span><br><span class="line">frida -U -f &quot;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;hello&quot; --no-pause</span><br><span class="line">Process  进程id为14526</span><br><span class="line">Process.enumerateModules()</span><br><span class="line">Process.findModuleByName(&quot;hellogetchar&quot;)  获取base地址</span><br><span class="line">.&#x2F;gdbserver 0.0.0.0:23946 --attach 14526</span><br></pre></td></tr></table></figure><p>hello.s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">.syntax unified</span><br><span class="line">.fpuneon</span><br><span class="line">.file&quot;hello.c&quot;</span><br><span class="line">.globlmain                            @ -- Begin function main</span><br><span class="line">.p2align2</span><br><span class="line">.typemain,%function</span><br><span class="line">.code32                              @ @main</span><br><span class="line">main:</span><br><span class="line">push &#123;lr&#125;</span><br><span class="line">ldr r0,[r1,#8]</span><br><span class="line">bl printf</span><br><span class="line">mov r0,#0</span><br><span class="line">pop &#123;lr&#125;</span><br><span class="line">bx lr</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">clang -target armv7a-linux-android21 hello.s -o helloLAST</span><br><span class="line">adb push helloLAST &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">.&#x2F;helloLAST 1 123</span><br><span class="line"></span><br><span class="line">.&#x2F;gdbserver 0.0.0.0:23946 .&#x2F;helloLAST 1 abc</span><br><span class="line">hyper2</span><br><span class="line">target remote 192.168.3.13:23946</span><br><span class="line">disassemble main</span><br><span class="line">b *0xaae46400</span><br><span class="line">c</span><br><span class="line">info registers</span><br><span class="line">ni</span><br><span class="line">hexdump *(0xfffefa14+0x8)</span><br></pre></td></tr></table></figure><p>objdump</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clang -target armv7a-linux-android21 -mthumb helloTHUMB.s -o helloTHUMB</span><br><span class="line">adb push helloTHUMB &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">objdump -d helloTHUMB 报错can&#39;t disassemble for architecture UNKNOWN! 不能在x86机器反编译arm的汇编，kali nethunter上pkg install binutils安装objdump,在手机端调用反编译，或者将手机中的该文件拷贝出来使用，反编译拿到指令</span><br></pre></td></tr></table></figure><p>主动执行汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import unicorn </span><br><span class="line">import capstone</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line"># 142a:       4608            mov     r0, r1</span><br><span class="line"># 141c:       4479            add     r1, pc</span><br><span class="line"></span><br><span class="line">def testthumb():</span><br><span class="line">    # CODE &#x3D; b&#39;\x08\x46\x79\x44&#39;</span><br><span class="line">    CODE &#x3D;  b&#39;\x0a\x46\x03\x46&#39;</span><br><span class="line">    CP &#x3D; capstone.Cs(capstone.CS_ARCH_ARM,capstone.CS_MODE_THUMB)</span><br><span class="line">    for i in CP.disasm(CODE,0,len(CODE)):</span><br><span class="line">        print(&quot;[addr:%x]:%s %s\n&quot;%(i.address,i.mnemonic,i.op_str))</span><br><span class="line">    </span><br><span class="line">    mu&#x3D;unicorn.Uc(unicorn.UC_ARCH_ARM,unicorn.UC_MODE_THUMB)</span><br><span class="line">    ADDRESS&#x3D;0x1000</span><br><span class="line">    SIZE&#x3D;1024</span><br><span class="line">    mu.mem_map(ADDRESS,SIZE)</span><br><span class="line">    mu.mem_write(ADDRESS,CODE)</span><br><span class="line">    bytes &#x3D; mu.mem_read(ADDRESS,10)</span><br><span class="line">    print(&quot;ADDRESS:0x%x,contents:%s&quot;%(ADDRESS,binascii.b2a_hex (bytes)))</span><br><span class="line">    mu.reg_write(unicorn.arm_const.UC_ARM_REG_R0,0x100)</span><br><span class="line">    mu.reg_write(unicorn.arm_const.UC_ARM_REG_R1,0x200)</span><br><span class="line">    mu.reg_write(unicorn.arm_const.UC_ARM_REG_R2,0x300)</span><br><span class="line">    mu.reg_write(unicorn.arm_const.UC_ARM_REG_R3,0x400)</span><br><span class="line">    mu.emu_start(ADDRESS+1,ADDRESS+4)</span><br><span class="line">    print(&quot;result is 0x%x&quot;%(mu.reg_read(unicorn.arm_const.UC_ARM_REG_R2)))</span><br><span class="line">    print(&quot;result is 0x%x&quot;%(mu.reg_read(unicorn.arm_const.UC_ARM_REG_R3)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    testthumb()</span><br></pre></td></tr></table></figure><h1 id="Unidbg"><a href="#Unidbg" class="headerlink" title="Unidbg"></a><a href="https://github.com/zhkl0228/unidbg" target="_blank" rel="noopener">Unidbg</a></h1><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211225102711312.png" alt="image-20211225102711312"></p><p>基于Unicorn(直接执行arm汇编)，配合libc.so,libart.so等so库对精简安卓系统的模拟实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function stringToByte(str) &#123;</span><br><span class="line">    var len, c;</span><br><span class="line">    len &#x3D; str.length;</span><br><span class="line">    var bytes &#x3D; [];</span><br><span class="line">    for(var i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">        c &#x3D; str.charCodeAt(i);</span><br><span class="line">        if(c &gt;&#x3D; 0x010000 &amp;&amp; c &lt;&#x3D; 0x10FFFF) &#123;</span><br><span class="line">            bytes.push(((c &gt;&gt; 18) &amp; 0x07) | 0xF0);</span><br><span class="line">            bytes.push(((c &gt;&gt; 12) &amp; 0x3F) | 0x80);</span><br><span class="line">            bytes.push(((c &gt;&gt; 6) &amp; 0x3F) | 0x80);</span><br><span class="line">            bytes.push((c &amp; 0x3F) | 0x80);</span><br><span class="line">        &#125; else if(c &gt;&#x3D; 0x000800 &amp;&amp; c &lt;&#x3D; 0x00FFFF) &#123;</span><br><span class="line">            bytes.push(((c &gt;&gt; 12) &amp; 0x0F) | 0xE0);</span><br><span class="line">            bytes.push(((c &gt;&gt; 6) &amp; 0x3F) | 0x80);</span><br><span class="line">            bytes.push((c &amp; 0x3F) | 0x80);</span><br><span class="line">        &#125; else if(c &gt;&#x3D; 0x000080 &amp;&amp; c &lt;&#x3D; 0x0007FF) &#123;</span><br><span class="line">            bytes.push(((c &gt;&gt; 6) &amp; 0x1F) | 0xC0);</span><br><span class="line">            bytes.push((c &amp; 0x3F) | 0x80);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            bytes.push(c &amp; 0xFF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return new Int8Array(bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var handle;</span><br><span class="line">function testdlopen()&#123;</span><br><span class="line">    var dlopen_addr&#x3D;Module.findExportByName(&quot;libc.so&quot;,&quot;dlopen&quot;);</span><br><span class="line">    var dlopen&#x3D;new NativeFunction(dlopen_addr,&quot;pointer&quot;,[&quot;pointer&quot;,&quot;int&quot;]);</span><br><span class="line">    var soPath&#x3D;stringToByte(&quot;&#x2F;system&#x2F;lib&#x2F;libmobileServer.so&quot;);</span><br><span class="line">    const pathAddr &#x3D; Memory.alloc(soPath.length);</span><br><span class="line">    Memory.writeByteArray(pathAddr,soPath);</span><br><span class="line">    handle&#x3D;dlopen(pathAddr,1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function testdlclose()&#123;</span><br><span class="line">    var dlclose_addr&#x3D;Module.findExportByName(&quot;libc.so&quot;,&quot;dlclose&quot;);</span><br><span class="line">    var dlclose&#x3D;new NativeFunction(dlclose_addr,&quot;int&quot;,[&quot;pointer&quot;]);</span><br><span class="line">    var retVal&#x3D;dlclose(handle);</span><br><span class="line">    console.log(&quot;retVal&quot;,retVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cat /proc/10783/maps | grep system/lib64</p><p><a href="https://bbs.pediy.com/thread-191649.htm" target="_blank" rel="noopener">简单粗暴的so加解密实现</a> </p><p><a href="https://bbs.pediy.com/thread-194053.htm" target="_blank" rel="noopener">从零打造简单的SODUMP工具</a></p><p><a href="https://bbs.pediy.com/thread-221741.htm" target="_blank" rel="noopener">Android逆向中So模块自动化修复工具+实战一发</a></p><p><a href="https://bbs.pediy.com/thread-221878.htm" target="_blank" rel="noopener">Android加固中So文件自动化修复工具GUI</a></p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/%E5%8A%A0%E5%9B%BA%E6%8A%80%E6%9C%AF.png" alt="加固技术"></p><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><h2 id="看雪第三题"><a href="#看雪第三题" class="headerlink" title="看雪第三题"></a>看雪第三题</h2><p>对frida做了检测，输入账户密码后上frida闪退</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226140738745.png" alt="image-20211226140738745"></p><p>IDA64bit打开libnative-lib.so，查看导出表，shift+F12查看so中的所有字符串，<code>c++filt    _ZN7_JNIEnv15RegisterNativesEP7_jclassPK15JNINativeMethodi</code>,IDA会自动将这些字符串通过c++filt转为导出函数</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226140842694.png" alt="image-20211226140842694"></p><p>进入init函数，F5反编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 init()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned __int64 v0; &#x2F;&#x2F; x8</span><br><span class="line">  unsigned __int64 v1; &#x2F;&#x2F; ST00_8</span><br><span class="line">  __int64 result; &#x2F;&#x2F; x0</span><br><span class="line">  char v3; &#x2F;&#x2F; [xsp+20h] [xbp-10h]</span><br><span class="line">  __int64 v4; &#x2F;&#x2F; [xsp+28h] [xbp-8h]</span><br><span class="line"></span><br><span class="line">  v0 &#x3D; _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));</span><br><span class="line">  v4 &#x3D; *(_QWORD *)(v0 + 40);</span><br><span class="line">  v1 &#x3D; v0;</span><br><span class="line">  result &#x3D; pthread_create(&amp;v3, 0LL, detect_frida_loop, 0LL);</span><br><span class="line">  *(_QWORD *)(v1 + 40);</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入detect_frida_loop，可以尝试不要检测任意地址<code>0.0.0.0</code>,或者<code>strcmp(&amp;v2, &quot;REJECT&quot;)</code>不相等即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">void __fastcall __noreturn detect_frida_loop(void *a1)</span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line">  inet_aton(&quot;0.0.0.0&quot;, &amp;v8);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    for ( i &#x3D; 1; i &lt;&#x3D; 65533; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 &#x3D; socket(2LL, 1LL, 0LL);</span><br><span class="line">      v7 &#x3D; bswap32((unsigned __int16)i) &gt;&gt; 16;</span><br><span class="line">      if ( (unsigned int)connect(v5, &amp;v6, 16LL) !&#x3D; -1 )</span><br><span class="line">      &#123;</span><br><span class="line">        ......</span><br><span class="line">        v3 &#x3D; recvfrom(v5, &amp;v2, 6LL, 64LL, 0LL, 0LL);</span><br><span class="line">        if ( v3 !&#x3D; -1 )</span><br><span class="line">        &#123;</span><br><span class="line">          if ( (unsigned int)strcmp(&amp;v2, &quot;REJECT&quot;) )</span><br><span class="line">          &#123;</span><br><span class="line">            __android_log_print(4LL, &quot;pediy&quot;, &quot;not FOUND FRIDA SERVER&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">          else</span><br><span class="line">          &#123;</span><br><span class="line">            v1 &#x3D; getpid();</span><br><span class="line">            kill(v1, 9LL);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      close(v5);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双击<code>0.0.0.0</code>，进入只读段的汇编代码</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226142233026.png" alt="image-20211226142233026"></p><p>点中”0.0.0.0”，进入Hex View-1</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226142334485.png" alt="image-20211226142334485"></p><p>C编码是ASCII码表，JAVA是UNICODE，尝试<a href="https://www.rapidtables.com/convert/number/hex-to-ascii.html" target="_blank" rel="noopener">hex-to-ascii</a></p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226142509893.png" alt="image-20211226142509893"></p><p>Swap后将2.2.2.2转为十六进制</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226142544870.png" alt="image-20211226142544870"></p><p>F2修改So中的Hex，改完后再F2再应用</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226142740220.png" alt="image-20211226142740220"></p><p>保存</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226142916201.png" alt="image-20211226142916201"></p><p>回到Pseudocode-C重新F5反编译刷新</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226143011624.png" alt="image-20211226143011624"></p><p>一般使用<code>apk d 3.apk</code>，再通过将so放到解开的文件夹中替换，<code>apktool b 3 -o 3_mod.apk</code>,但是没有签名无法安装，签名回编译<a href="https://github.com/patrickfav/uber-apk-signer/releases/download/v1.2.1/uber-apk-signer-1.2.1.jar" target="_blank" rel="noopener">uber-apk-signer</a>,<code>java -jar uber-apk-signer-1.1.0.jar -a 3_mod.apk  --allowResign</code>完成自动签名，重新安装即可。</p><p>回到Pseudocode-C页面，点中REJECT</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226144558547.png" alt="image-20211226144558547"></p><p>双击进入IDA View-A，点中REJECT，进入Hex View-1</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226144818713.png" alt="image-20211226144818713"></p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226144905207.png" alt="image-20211226144905207"></p><p>将REJECT改成“666666”</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226145018201.png" alt="image-20211226145018201"></p><p>同样F2修改原字符串的十六进制，F2应用并保存</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226145108697.png" alt="image-20211226145108697"></p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226145220890.png" alt="image-20211226145220890"></p><p>重新解析</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211226145303623.png" alt="image-20211226145303623"></p><p>完成过frida检测。</p><p><code>adb shell &amp;&amp; ls /system/lib64</code>  查看所有so</p><p><code>frida-ps -Ua</code> 查看所有进程的包名</p><p>Frida尝试hook so层的函数</p><p>frida -U -f com.kanxue.pediy1 -l demo.js  启动后使用%resume重新加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function hookstrcmp()&#123;</span><br><span class="line">    Java.perform(function() &#123;</span><br><span class="line"></span><br><span class="line">        var addr_strcmp &#x3D; Module.findExportByName(&quot;libc.so&quot;,&quot;strcmp&quot;);</span><br><span class="line">        Interceptor.attach(addr_strcmp, &#123;</span><br><span class="line">            onEnter: function (args) &#123;</span><br><span class="line"></span><br><span class="line">                    if(ptr(args[1]).readCString().indexOf(&quot;REJECT&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">                        console.log(&quot;[*] strcmp (&quot; + ptr(args[0]).readCString() + &quot;,&quot; + ptr(args[1]).readCString()+&quot;)&quot;);</span><br><span class="line">                        this.isREJECT &#x3D; true;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;,onLeave:function(retval)&#123;</span><br><span class="line">                if(this.isREJECT)&#123;</span><br><span class="line">                    retval.replace(0x1);</span><br><span class="line">                    console.log(&quot;the REJECT&#39;s result :&quot;,retval);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(hookstrcmp);</span><br></pre></td></tr></table></figure><h2 id="52第三题"><a href="#52第三题" class="headerlink" title="52第三题"></a>52第三题</h2><p><a href="https://www.52pojie.cn/thread-1369661-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1369661-1-1.html</a></p><p><a href="https://www.52pojie.cn/thread-1378761-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1378761-1-1.html</a><br><a href="https://www.52pojie.cn/thread-1371527-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1371527-1-1.html</a><br><a href="https://www.52pojie.cn/thread-1383999-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1383999-1-1.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install 2021wuai.apk</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211230224303554.png" alt="image-20211230224303554"></p><p>直接ida打开<code>libnative-lib.so</code>，搜索check，或者查看shift+f12查看so中的字符串</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211230224619481.png" alt="image-20211230224619481"></p><p>查看<code>Java_cn_pojie52_cm01_MainActivity_check</code>，并F5查看源代码，修改类型</p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211230224815528.png" alt="image-20211230224815528"></p><p><img src="/2021/07/07/SO%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/image-20211230224928594.png" alt="image-20211230224928594"></p><p>Frida开始hook    frida-ps -Ua  查看所有包名</p><p>frida -U -n com.pojie52.cm01 -l 2021wuai.js   调用inline_hook()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function inline_hook() &#123;</span><br><span class="line"></span><br><span class="line">    Java.perform(function() &#123;</span><br><span class="line"></span><br><span class="line">        var addr_libnative &#x3D; Module.findBaseAddress(&quot;libnative-lib.so&quot;);</span><br><span class="line">        </span><br><span class="line">        if (addr_libnative) &#123;</span><br><span class="line">            console.log(&quot;so基址: &quot;, addr_libnative);</span><br><span class="line">            &#x2F;&#x2F; 尝试hook sub_B90((int)dest, v7, &quot;areyousure??????&quot;) 这行语句打印出入参</span><br><span class="line">            var sub_B90 &#x3D; addr_libnative.add(0xB90);</span><br><span class="line">            &#x2F;&#x2F; so基址+物理地址（0xB90）&#x3D; 0x7ad480b000+8AC&#x3D;0x7AD480B8AC</span><br><span class="line">            Interceptor.attach(sub_B90, &#123;</span><br><span class="line">                onEnter: function(args) &#123;</span><br><span class="line">                    this.arg0 &#x3D; args[0];</span><br><span class="line">                    this.arg1 &#x3D; args[1];</span><br><span class="line">                    this.arg2 &#x3D; args[2];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    console.log(&quot;\n&quot;,hexdump(this.arg0));</span><br><span class="line">                    console.log(&quot;\n&quot;,this.arg1);</span><br><span class="line">                    console.log(&quot;\n&quot;,hexdump(this.arg2));</span><br><span class="line">                &#125;,</span><br><span class="line">                onLeave:function(retval)&#123;</span><br><span class="line">                    </span><br><span class="line">                    console.log(&quot;-------sub_B90 retval -------&quot;);</span><br><span class="line">                    console.log(&quot;\n&quot;,hexdump(this.arg0));</span><br><span class="line">                    console.log(&quot;\n&quot;,this.arg1);</span><br><span class="line">                    console.log(&quot;\n&quot;,hexdump(this.arg2));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(inline_hook);</span><br></pre></td></tr></table></figure><p>arg1: 传入明文字符串<br>arg2: 明文字符串长度<br>arg3: 固定字符串</p><p>01:03:21</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制路由器抓包</title>
      <link href="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/"/>
      <url>/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p>京东搜索<strong>从实践中学习</strong>系列丛书</p><p>网络工具集：netwox</p><p>网络层：MAC/IP/ARP/DHCP</p><p>传输层：IP/TCP/UDP/ICMP(ping,traceroute)</p><p>应用层：DNS/Telnet/NC/FTP</p><p><a href="https://www.anquanke.com/post/id/205455" target="_blank" rel="noopener">ARM设备武器化指南·破·Kali.Nethunter.2020a.上手实操</a></p><p>配合有线，无线网卡，手机wifi，4g该手机将会有4个ip地址。</p><img src="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/t010ca0e643371bcde4.jpg" alt="img" style="zoom: 25%;"><p><a href="https://dnschecker.org/" target="_blank" rel="noopener">网卡NDS Lookup</a></p><h1 id="给指定网卡配置路由器"><a href="#给指定网卡配置路由器" class="headerlink" title="给指定网卡配置路由器"></a>给指定网卡配置路由器</h1><p>给kali插入一块Ralink 802.11n网卡</p><p><code>nm-connection-editor</code></p><img src="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/image-20210703093216435.png" alt="image-20210703093216435" style="zoom: 67%;"><img src="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/image-20210703094941787.png" alt="image-20210703094941787" style="zoom: 67%;"><img src="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/image-20210703095042523.png" alt="image-20210703095042523" style="zoom:67%;"><img src="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/image-20210703095112319.png" alt="image-20210703095112319" style="zoom:67%;"><p>保存后ifconfig查看wlan0的ip，移动端就可以收到wifi信号了，jnettop结合wireshark抓包经过该网卡的全部流量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">ifconfig wlan0 down</span><br><span class="line">ifconfig wlan0 up</span><br><span class="line">ssh root@192.168.0.107   连接kali nethunter</span><br><span class="line">nethogs，jnettop 和 kali linux中抓的结果一致</span><br><span class="line">apt install netwox  创造任意tcp,udp数据报文，网络欺骗，自行发包</span><br><span class="line">netwox 55 -i 192.168.0.107  判断内网主机是否存活</span><br><span class="line">netwox 171  充当客户端请求dhcp</span><br><span class="line">netwox 179  根据自己ip获取dhcp服务器信息</span><br><span class="line">netwox 3 -a www.163.com</span><br><span class="line">netwox 3 -a 192.168.0.0&#x2F;24</span><br><span class="line">netwox 38 -l 192.168.0.8 -m 192.168.0.9</span><br><span class="line">netwox 34</span><br><span class="line">nentwox 74 -i &quot;192.168.0.107&quot;  洪水攻击</span><br><span class="line"></span><br><span class="line">netwox 94 -i 192.168.0.7 -p 8888 -c &quot;&#x2F;bin&#x2F;sh -c ifconfig&quot;  远程调用指令</span><br><span class="line">netwox 93 -P 8888</span><br><span class="line"></span><br><span class="line">netwox 87 -i 192.168.0.7 -p 80  发送消息</span><br><span class="line">netwox 89 -P 80  接受消息</span><br><span class="line"></span><br><span class="line">netwox 95 -i 192.168.0.7 -p 8888 &quot;nohup.out&quot;   获取目标机的文件</span><br><span class="line">netwox 95 --help</span><br><span class="line">netwox 93 -P 8888</span><br><span class="line"></span><br><span class="line">netwox 96 -i 192.168.0.7 -p 8888 -f get-pip.py -F get-pip.py  传输文件</span><br><span class="line">netwox 93 -P 8888</span><br><span class="line"></span><br><span class="line">netwox 51 -i 220.181.38.148</span><br><span class="line">netwox 67 -i 192.168.0.7 -p 1-100</span><br><span class="line">netwox 59 -i 192.168.0.7 洪水共计</span><br><span class="line"></span><br><span class="line">netwox 88 -i 192.168.0.7 -p 80   发送udp的包</span><br><span class="line">netwox 90 -P 80</span><br><span class="line"></span><br><span class="line">nc -l 8888 &gt; get-pip.py </span><br><span class="line">nc 118.126.66.192 8888 &lt; get-pip.py</span><br></pre></td></tr></table></figure><p><img src="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/1036857-20161008190023098-992049015.png" alt="img"></p><p>arp缓存表，路由表 </p><p><img src="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/image-20210703101439318.png" alt="image-20210703101439318"></p><p><a href="https://konstakang.com/devices/rpi3/LineageOS17.1/" target="_blank" rel="noopener">树莓派刷安卓10</a></p><h1 id="4G代理"><a href="#4G代理" class="headerlink" title="4G代理"></a>4G代理</h1><p>pip install <a href="https://github.com/shadowsocks/shadowsocks/archive/master.zip" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks/archive/master.zip</a>    在kali nethunter下载shadowsocks-3.0.0</p><p>ssserver –version</p><p>ssserver -k “123456” -m rc4-md5</p><p>pip install <a href="https://github.com/shadowsocks/shadowsocks/archive/master.zip" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks/archive/master.zip</a>    在kali linux下载shadowsocks-3.0.0</p><p>sslocal –version</p><p>ssserver –version</p><p>sslocal -s 192.168.0.4 -p 8388 -k “123456” -m rc4-md5</p><p>vim /etc/proxychains4.conf</p><p>socks5 127.0.0.1 1080</p><p>proxychains curl ip.sb   =&gt; proxychains =&gt; sslocal =&gt; nps =&gt; 内网穿透 -&gt; npc -&gt; sserver -&gt; 4G</p><p>搭建NPS服务器 =&gt; 新增客户端 </p><p>下载<a href="https://github.com/ehang-io/nps/releases/download/v0.26.2/linux_arm64_client.tar.gz" target="_blank" rel="noopener">linux_arm64_client.tar.gz</a> 执行新增客户端后生成的npc命令</p><p>建立隧道</p><p><img src="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/image-20210703115536906.png" alt="image-20210703115536906"></p><img src="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/image-20210703115759144.png" alt="image-20210703115759144" style="zoom: 67%;"><p>sslocal -s 118.126.66.193  -p 58388 -k “123456” -m rc4-md5   </p><p><img src="/2021/07/03/%E8%87%AA%E5%88%B6%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%93%E5%8C%85/image-20210703120035844.png" alt="image-20210703120035844"></p><p>112.65.48.132  是手机的ip，在手机端curl ip.sb</p><p>pip install pysocks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;ip&#39;)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line">proxy &#x3D; &#123;&quot;http&quot;:&quot;socks5:&#x2F;&#x2F;127.0.0.1:1080&quot;,&quot;https&quot;:&quot;socks5:&#x2F;&#x2F;127.0.0.1:1080&quot;&#125;</span><br><span class="line">r2 &#x3D;requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;ip&#39;,proxies &#x3D;proxy)</span><br><span class="line">print(r2.text)</span><br></pre></td></tr></table></figure><p><a href="https://tech.meituan.com/2017/03/17/shark-sdk.html" target="_blank" rel="noopener">美团点评移动网络优化实践</a></p><p><a href="https://www.jianshu.com/p/ef892323e68f" target="_blank" rel="noopener">TCP协议详解</a></p><p><a href="https://blog.csdn.net/aa1928992772/article/details/85240358?spm=1001.2014.3001.5501" target="_blank" rel="noopener">UDP协议的详细解析</a></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加壳与脱壳之FART脱壳</title>
      <link href="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/"/>
      <url>/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="FART框架简介"><a href="#FART框架简介" class="headerlink" title="FART框架简介"></a>FART框架简介</h1><p>在对于整体保护来说，Dalvik和Art通用的解决方案都是寻找一个合适的时机点去dump内存中完整的dex。整体加固存在致命的弱点，就是在内存中是连续的。由此进入函数抽取的时代，即二代壳的开始，而FART的出现要解决的问题就是函数抽取的方案。FART是一个框架，不只是ART下的，事实上也可以在Dalvik下实现。</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210717094342055.png" alt="image-20210717094342055"></p><h2 id="ART下脱壳原理"><a href="#ART下脱壳原理" class="headerlink" title="ART下脱壳原理"></a>ART下脱壳原理</h2><p>InMemoryDexClassLoader源码分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static jobjectCreateSingleDexFileCookie(JNIEnv* env,std::unique_ptr&lt;MemMap&gt;data)</span><br><span class="line">static constDexFile*CreateDexFile(JNIEnv*env,std::unique_ptr&lt;MemMap&gt;dex_mem_map)</span><br><span class="line">DexFile::Open(location,</span><br><span class="line">OpenCommon(map-&gt;Begin()</span><br><span class="line">DexFile::DexFile(constuint8_t*base,</span><br></pre></td></tr></table></figure><p>DexClassLoader源码分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenAndReadMagic(filename,&amp;magic, error_msg);</span><br><span class="line">DexFile::OpenCommon(constuint8_t* base,</span><br><span class="line">DexFile::DexFile(constuint8_t*base,</span><br></pre></td></tr></table></figure><p>dex2oat编译流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2965int main(int argc, char** argv) &#123;</span><br><span class="line">2966  int result &#x3D; static_cast&lt;int&gt;(art::Dex2oat(argc, argv));</span><br><span class="line">2967  &#x2F;&#x2F; Everything was done, do an explicit exit here to avoid running Runtime destructors that take</span><br><span class="line">2968  &#x2F;&#x2F; time (bug 10645725) unless we&#39;re a debug build or running on valgrind. Note: The Dex2Oat class</span><br><span class="line">2969  &#x2F;&#x2F; should not destruct the runtime in this case.</span><br><span class="line">2970  if (!art::kIsDebugBuild &amp;&amp; (RUNNING_ON_MEMORY_TOOL &#x3D;&#x3D; 0)) &#123;</span><br><span class="line">2971    _exit(result);</span><br><span class="line">2972  &#125;</span><br><span class="line">2973  return result;</span><br><span class="line">2974&#125;</span><br></pre></td></tr></table></figure><p>apk安装时进行的dex2oat的编译流程</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210717101608807.png" alt="image-20210717101608807"></p><p>dex2oat编译流程是最终通过CompileMethod按照函数粒度进行编译，并不是所有的函数都会被编译，比如类初始化函数&lt;clinit&gt;。因此对于当一个类被初始化时，该类的初始化函数始终运行在interpreter模式。对于类的初始化函数并不是dex2oat编译的对象，自然该函数被编译生成二进制代码，自然类的初始化函数始终运行在解释模式下。 </p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210717101742808.png" alt="image-20210717101742808"></p><p>ART下函数执行模式：</p><ul><li>interpreter模式：解释模式，最后进入art下的解释器完成取址，取出对应codeItem每一条smali指令，由art下的解释器解释执行，不同版本解释器实现不一样（对于所有的类的初始化函数不管有没有禁用掉dex2oat的编译流程，都是运行在解释模式下，最后必然进入art下的解释器中）</li></ul><blockquote><p><a href="http://aospxref.com/android-10.0.0_r47/xref/art/runtime/interpreter/interpreter.cc?r=&mo=11679&fi=236#236" target="_blank" rel="noopener">android10</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">236  enum InterpreterImplKind &#123;</span><br><span class="line">237    kSwitchImplKind,        &#x2F;&#x2F; Switch-based interpreter implementation.</span><br><span class="line">238    kMterpImplKind          &#x2F;&#x2F; Assembly interpreter</span><br><span class="line">239  &#125;;</span><br><span class="line">240  </span><br><span class="line">241  #if ART_USE_CXX_INTERPRETER</span><br><span class="line">242  static constexpr InterpreterImplKind kInterpreterImplKind &#x3D; kSwitchImplKind;</span><br><span class="line">243  #else</span><br><span class="line">244  static constexpr InterpreterImplKind kInterpreterImplKind &#x3D; kMterpImplKind;</span><br><span class="line">245  #endif</span><br></pre></td></tr></table></figure><p><a href="http://aospxref.com/android-9.0.0_r61/xref/art/runtime/interpreter/interpreter.cc?r=&mo=11688&fi=234#234" target="_blank" rel="noopener">android 9</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">234  enum InterpreterImplKind &#123;</span><br><span class="line">235    kSwitchImplKind,        &#x2F;&#x2F; Switch-based interpreter implementation.</span><br><span class="line">236    kMterpImplKind          &#x2F;&#x2F; Assembly interpreter</span><br><span class="line">237  &#125;;</span><br><span class="line">238  </span><br><span class="line">239  static constexpr InterpreterImplKind kInterpreterImplKind &#x3D; kMterpImplKind;</span><br></pre></td></tr></table></figure><p><a href="http://aospxref.com/android-8.0.0_r36/xref/art/runtime/interpreter/interpreter.cc?r=&mo=11582&fi=231#231" target="_blank" rel="noopener">android 8</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">231  enum InterpreterImplKind &#123;</span><br><span class="line">232    kSwitchImplKind,        &#x2F;&#x2F; Switch-based interpreter implementation.</span><br><span class="line">233    kMterpImplKind          &#x2F;&#x2F; Assembly interpreter</span><br><span class="line">234  &#125;;</span><br><span class="line">235  </span><br><span class="line">236  static constexpr InterpreterImplKind kInterpreterImplKind &#x3D; kMterpImplKind;</span><br></pre></td></tr></table></figure><p><a href="http://aospxref.com/android-7.1.2_r39/xref/art/runtime/interpreter/interpreter.cc?r=&mo=11731&fi=229#229" target="_blank" rel="noopener">android 7</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">229  enum InterpreterImplKind &#123;</span><br><span class="line">230    kSwitchImplKind,        &#x2F;&#x2F; Switch-based interpreter implementation.</span><br><span class="line">231    kComputedGotoImplKind,  &#x2F;&#x2F; Computed-goto-based interpreter implementation.</span><br><span class="line">232    kMterpImplKind          &#x2F;&#x2F; Assembly interpreter</span><br><span class="line">233  &#125;;</span><br><span class="line">234  static std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const InterpreterImplKind&amp; rhs) &#123;</span><br><span class="line">235    os &lt;&lt; ((rhs &#x3D;&#x3D; kSwitchImplKind)</span><br><span class="line">236                ? &quot;Switch-based interpreter&quot;</span><br><span class="line">237                : (rhs &#x3D;&#x3D; kComputedGotoImplKind)</span><br><span class="line">238                    ? &quot;Computed-goto-based interpreter&quot;</span><br><span class="line">239                    : &quot;Asm interpreter&quot;);</span><br><span class="line">240    return os;</span><br><span class="line">241  &#125;</span><br><span class="line">243  static constexpr InterpreterImplKind kInterpreterImplKind &#x3D; kMterpImplKind;</span><br></pre></td></tr></table></figure><p>说明在8.0以后google抛弃了基于kComputedGotoImplKind的实现，而使用汇编的方式实现。ArtMethod对象中的GetDexFile获取到ArtMethod所属的dex file，可以通过Begin和Size获取该dex的内存中起始地址和大小，实现内存中dex的dump操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1049  const uint8_t* Begin() const &#123;</span><br><span class="line">1050    return begin_;</span><br><span class="line">1051  &#125;</span><br><span class="line">1052</span><br><span class="line">1053  size_t Size() const &#123;</span><br><span class="line">1054    return size_;</span><br><span class="line">1055  &#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>quick模式：直接运行dex2oat编译生成的arm模式，直接运行二进制代码</p><p>当一个壳使用dexclassloader加载一个dex文件时，如果没有禁用掉dex2oat类中初始化函数将也没有被编译，是运行在解释模式下。如果禁用掉dex2oat导致dex文件中所有的函数都运行在解释模式下。</p></li></ul><h2 id="FART脱壳点"><a href="#FART脱壳点" class="headerlink" title="FART脱壳点"></a>FART脱壳点</h2><h3 id="Execute脱壳点"><a href="#Execute脱壳点" class="headerlink" title="Execute脱壳点"></a>Execute脱壳点</h3><p>interpreter模式流程：</p><p>从ArtMethod类中EnterInterpreterFromInvoke开始分析Execute-&gt;ExecuteMterplmpl或者ExecuteSwitchImpl，可以看到对于任何一个运行在interpreter模式的java函数来说，最后都会进入art下的解释器中进行解释执行。</p><p>修改/<a href="http://aospxref.com/android-8.0.0_r36/xref/art/" target="_blank" rel="noopener">art</a>/<a href="http://aospxref.com/android-8.0.0_r36/xref/art/runtime/" target="_blank" rel="noopener">runtime</a>/<a href="http://aospxref.com/android-8.0.0_r36/xref/art/runtime/interpreter/" target="_blank" rel="noopener">interpreter</a>/<a href="http://aospxref.com/android-8.0.0_r36/xref/art/runtime/interpreter/interpreter.cc" target="_blank" rel="noopener">interpreter.cc</a>添加<code>static inline JValue Execute(</code>的<code>DCHECK(!shadow_frame.GetMethod()-&gt;IsAbstract());</code>前面通过artmethod获取Dexfile对象从而dump下dex文件</p><pre><code>ArtMethod* artmethod=shadow_frame.GetMethod();// 判断是否是类初始化函数，降低调用次数，只在初始化时进行dump操作if(strstr(artmethod-&gt;PrettyMethod().c_str(),&quot;&lt;clinit&gt;&quot;)){        // 很多函数抽取壳将dex2oat干掉，除了初始化函数所有的函数都进入解释模式    //inline const DexFile* ArtMethod::GetDexFile()     const DexFile* dexfile=artmethod-&gt;GetDexFile();    /*  const uint8_t* Begin() const {1050      return begin_;1051    }1052  1053    size_t Size() const {1054      return size_;1055    }*/    // 获取dex文件的起始地址和大小    const uint8_t* begin=dexfile-&gt;Begin();    size_t size=dexfile-&gt;Size();    // 写入到sdcard中    char dexfilepath[100]={0};    sprintf(dexfilepath,&quot;/sdcard/%d_%d_Execute.dex&quot;,(int)size,getpid());    int fd=open(dexfilepath,O_CREAT|O_RDWR,0666);    if(fd&gt;0)    {        int number=write(fd,begin,size);        if(number&gt;0){            }        close(fd);                }        }</code></pre><p>重新编译,将out/target/product/sailfish下的system.img和system_other.img重新刷机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source build&#x2F;envsetup.sh</span><br><span class="line">lunch</span><br><span class="line">选择23 aosp_sailfish-userdebug</span><br><span class="line">time make -j4</span><br></pre></td></tr></table></figure><p>开始刷机flash.bat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot boot.img</span><br><span class="line">fastboot flash vendor vendor.img</span><br><span class="line">fastboot flash system_a system.img</span><br><span class="line">fastboot flash system_b system_other.img</span><br><span class="line">fastboot flash userdata userdata.img</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>打开加壳app后，在sdcard中查看Excute结尾的dex即为脱下来的原dex</p><h3 id="Execute和linkcode脱壳点"><a href="#Execute和linkcode脱壳点" class="headerlink" title="Execute和linkcode脱壳点"></a>Execute和linkcode脱壳点</h3><p>源代码中找到出现DexFile的位置，添加相应代码，获取起始地址和大小dump下来。找到参数，返回值，函数执行过程中出现的dex对象都是潜在的脱壳点。或者通过artmethod对象获取到所属的dexFile对象，进入dex脱壳的流程。</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210724211058847.png" alt="image-20210724211058847"></p><p><a href="https://bbs.pediy.com/thread-252630.html" target="_blank" rel="noopener">FART：ART环境下基于主动调用的自动化脱壳方案</a></p><p><a href="https://bbs.pediy.com/thread-254555.html" target="_blank" rel="noopener">拨云见日：安卓APP脱壳的本质以及如何快速发现ART下的脱壳点</a> </p><p><a href="https://bbs.pediy.com/thread-254028.htm" target="_blank" rel="noopener">FART正餐前甜点：ART下几个通用简单高效的dump内存中dex方法</a></p><p>比如在dex2oat编译过程的DexFile的脱壳点，如果app的加壳厂商干掉了dex2oat流程，就不会进入到该脱壳点，自然无法在dex2oat的编译流程中dump内存中dex。故而dex2oat不是一个好的脱壳点。Execute为什么是一个好脱壳点，不管加固厂商有没有禁用dex2oat编译流程，对于dex文件类初始化都会进入到解释执行的流程当中。Execute是个内联函数，加固厂商很难通过hook修改Execute的逻辑。artmethod可以通过getDexFile获取到dexfile对象，以下都是合适的脱壳点。</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210724213617099.png" alt="image-20210724213617099"></p><p>进入<a href="http://aospxref.com/android-8.1.0_r81/xref/art/runtime/class_linker.cc#LinkCode" target="_blank" rel="noopener">LinkCode</a></p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210724213735000.png" alt="image-20210724213735000"></p><p>将上文中artmethod获取Dexfile对象从而dump下dex文件的代码拷贝到LinkCode中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ArtMethod* artmethod&#x3D;method;</span><br><span class="line">&#x2F;&#x2F; 判断是否是类初始化函数，降低调用次数，防止效率太低，只在初始化时进行dump操作</span><br><span class="line">if(strstr(artmethod-&gt;PrettyMethod().c_str(),&quot;&lt;clinit&gt;&quot;))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 很多函数抽取壳将dex2oat干掉，除了初始化函数所有的函数都进入解释模式</span><br><span class="line">&#x2F;&#x2F;inline const DexFile* ArtMethod::GetDexFile() </span><br><span class="line">const DexFile* dexfile&#x3D;artmethod-&gt;GetDexFile();</span><br><span class="line">&#x2F;*  const uint8_t* Begin() const &#123;</span><br><span class="line">1050      return begin_;</span><br><span class="line">1051    &#125;</span><br><span class="line">1052  </span><br><span class="line">1053    size_t Size() const &#123;</span><br><span class="line">1054      return size_;</span><br><span class="line">1055    &#125;*&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 获取dex文件的起始地址和大小</span><br><span class="line">const uint8_t* begin&#x3D;dexfile-&gt;Begin();</span><br><span class="line">size_t size&#x3D;dexfile-&gt;Size();</span><br><span class="line">&#x2F;&#x2F; 写入到sdcard中</span><br><span class="line">char dexfilepath[100]&#x3D;&#123;0&#125;;</span><br><span class="line">sprintf(dexfilepath,&quot;&#x2F;sdcard&#x2F;%d_%d_LinkCode.dex&quot;,(int)size,getpid());</span><br><span class="line">int fd&#x3D;open(dexfilepath,O_CREAT|O_RDWR,0666);</span><br><span class="line">if(fd&gt;0)</span><br><span class="line">&#123;</span><br><span class="line">int number&#x3D;write(fd,begin,size);</span><br><span class="line">if(number&gt;0)&#123;</span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译刷机，安装好加壳app后打开app存储权限，再打开app查看/sdcard/*_LinkCode.dex文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time make -j4</span><br></pre></td></tr></table></figure><h1 id="FART场景"><a href="#FART场景" class="headerlink" title="FART场景"></a>FART场景</h1><p>现在加固厂商对dex保护不仅仅局限在dex整体，已经进入到函数抽取中的函数粒度的保护，甚至进入到vmp和dex2c的每一条指令的保护，保护粒度越来越细化。很多工具无法应对函数粒度的加固保护方案，更别说vmp和dex2c的加固方案。dexhunter解决函数抽取通过遍历dex中全部的类进行主动加载初始化，fupk3首次使用主动调用概念，对每一个函数调用，一定程度上解决函数的抽取。但是fupk3基于Dalvik下的即Android4.4之前的，很多app已经不支持Dalvik了。</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210724214642517.png" alt="image-20210724213735000"></p><p>fart框架针对函数抽取，同时实现art，兼容4.4到10.0等，只要art没有被抛弃，fart都可以实现在这些系统上的脱壳。脱壳组件分离可以内存dex的整体dump加固基础的防护，主动调用组件对某一个函数或class中所有函数的指令部分，修复组件针对vmp保护的apk的修复。</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210725081509556.png" alt="image-20210725081509556"></p><p>CodeItem是运行过程中解密后的指令流部分，牵扯到dex的文件格式。</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210725082959016.png" alt="image-20210725082959016"></p><p>新建项目codeitemtest,在MainActivity中加入如下代码，并在onCreate中调用testWithoutTry();testWithTry();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void testWithoutTry()&#123;</span><br><span class="line">    Log.i(&quot;onejane&quot;,&quot;testWithoutTry&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void testWithTry()&#123;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    int j &#x3D; 100;</span><br><span class="line">    try &#123;</span><br><span class="line">        Log.i(&quot;onejane&quot;,&quot;testWithtry&quot;);</span><br><span class="line">        int result &#x3D; j&#x2F;i;</span><br><span class="line">    &#125; catch (Exception e)&#123;</span><br><span class="line">        Log.i(&quot;onejane&quot;,&quot;testWithTry-&gt;from catch&quot;);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用010Editor打开编译后的dex，找到struct_method_id_list_dex_class_ids和struct_method_id_list_dex_method_ids右键Export CSV，搜索MainActivity找到index为1358</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210725085311266.png" alt="image-20210725085311266"></p><p>找到该MainActivity的位置，图中选中的0x11DAA0是该函数的代码偏移</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210725085422307.png" alt="image-20210725085422307"></p><p>前16字节是函数头部分，寄存器个数，参数等</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210725085610019.png" alt="image-20210725085610019"></p><p>在GDA中Show ByteCode定位相关的指令，05ae转成十进制为1454，通过struct_method_id_list_dex_method_ids查看1454找到对应函数。Show In Hex定位到地址</p><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210725175425242.png" alt="image-20210725175425242"></p><p>FART生成bin文件，即CodeItem的格式</p><p>5元组填充{name:函数名，<strong>method_idx</strong>:函数索引，offset:偏移，code_item_len:长度，<strong>ins</strong>:函数体CodeItem的base64字符串}，使用010Edito打开dex和bin文件对比索引，其中GDA中的地址复制到010Editor中使用Ctrl+g搜索找到dex索引位置，bin中的offset偏移转成十六进制后可以通过Ctrl+g在010Editor中找到对应代码位置，</p><p>FART脱壳结束得到的文件列表有两类：</p><ol><li>Execute脱壳点得到dex和dex中的所有类列表</li><li>主动调用时dump得到的dex和此时dex中的所有类列表，以及该dex中所有函数的CodeItem即bin文件</li></ol><p>FART脱下来的文件只需要函数体文件以及与函数体文件名开头的对应的大小的dex，而在execute脱壳点脱下来的dex只是作为参考</p><p>拷贝bin文件中ins的值base64编码到base64decode.py中写入checkSize.bin文件中，打开bin后将计算好的字节覆盖掉原dex中的代码，实现手动修复checkSize函数。GDA打开后找到MemoryCache的checkSize函数右键Show ByteCode查看字节码信息，</p><blockquote><p>完美使用场景：整体加固壳就不说了</p><p>FART对dex的修复粒度在函数粒度，三组件结合可以完美解决基于函数抽取技术进行加固的app脱壳</p></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>adb install aipao.apk</p><p>Settings—-Apps &amp; notifications—-App permissions—-添加该app的sd卡读写权限</p><p>打开app查看logcat信息，主动调用时出现ActivityThread的信息，/sdcard/fart中已经出现execute的dex文件，bin文件不断增大，等待fart主动调用结束出现fart run over</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep -r &quot;MemoryCache&quot; .&#x2F;*.txt  找到MemoryCache类所在的txt中</span><br><span class="line">adb pull &#x2F;sdcard&#x2F;fart&#x2F;com.aipao.hanmoueschool  其中dexfile的dex文件是在主动调用每一个函数时顺带当前artmethod所属的dex文件dump下来，txt是类列表</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8BFART%E8%84%B1%E5%A3%B3/image-20210725195213008.png" alt="image-20210725195213008"></p><p>当遇到函数被抽空时，可以使用dump下的codeItem函数体bin文件进行修复，使用python fart.py实现修复</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
          <category> 加壳与脱壳 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FART </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>克拉恋人会员制取证分析</title>
      <link href="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/"/>
      <url>/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="绕过强制会员"><a href="#绕过强制会员" class="headerlink" title="绕过强制会员"></a>绕过强制会员</h1><p>adb install com.caratlover.apk  安装后强制支付会员费才可进主页</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210531003110432.png" alt="image-20210531003110432"></p><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p>jadx打开发现代码很少，目测被加固，脱个衣服先。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;FRIDA-DEXDump.git</span><br><span class="line">.&#x2F;fs1426arm64</span><br><span class="line">pyenv local 3.9.0</span><br><span class="line">python main.py   app保持最前端,开始脱壳</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hanbinglengyue&#x2F;FART.git</span><br><span class="line">adb push frida_fart&#x2F;lib&#x2F;fart* &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">adb shell &amp;&amp; cp fart* &#x2F;data&#x2F;app &amp;&amp; chmod 777</span><br><span class="line">frida -U -f com.caratlover -l frida_fart_hook.js --no-pause  使用安卓8和安卓8.1进行脱壳</span><br><span class="line">mv ..&#x2F;*.dex carat &amp;&amp;  adb pull &#x2F;sdcard&#x2F;carat</span><br></pre></td></tr></table></figure><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210531002927720.png" alt="image-20210531002927720"></p><p><code>file *</code> 查看文件格式是Dalvik dex file，但是脱完的部分dex文件用010 Editor打开时，报错，说明文件并不标准。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.caratlover explore</span><br><span class="line">android hooking list activities</span><br><span class="line">android intent launch_activity com.chanson.business.MainActivity  直接绕过强制会员购买页面</span><br></pre></td></tr></table></figure><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210531093247062.png" alt="image-20210531093247062"></p><p>使用jadx1.2.0中同时打开多个dex，查找<code>com.chanson.business.MainActivity</code></p><p>用12.8.0的frida混淆的爹妈都不认识了，还是用14.2.16版本。</p><p>绕过强制会员页面后，编辑资料填写个人详细信息。</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210531093539184.png" alt="image-20210531093539184"></p><h1 id="搭讪"><a href="#搭讪" class="headerlink" title="搭讪"></a>搭讪</h1><p>通过点击发送时，调用hookEvent.js查看触发的类<code>frida -UF -l hookEvent.js</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Pixel::克拉恋人]-&gt; [WatchEvent] onClick: com.tencent.qcloud.tim.uikit.modules.chat.layout.input.InputLayout</span><br></pre></td></tr></table></figure><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210531093736893.png" alt="image-20210531093736893"></p><p>查看InputLayout该类的用例，该UI基本都在<code>com.chanson.business.message.activity.ChatActivity</code>中调用</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210531230429589.png" alt="image-20210531230429589"></p><p>其中<code>com.chanson.business.message.activity.ChatActivity</code>有一段代码，判断是否vip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private final void ja() &#123;</span><br><span class="line">    BasicUserInfoBean col1;</span><br><span class="line">    BasicUserInfoBean col12;</span><br><span class="line">    if (Ib.f9521i.m()) &#123;</span><br><span class="line">        MyInfoBean k &#x3D; Ib.f9521i.k();</span><br><span class="line">        if (k &#x3D;&#x3D; null || (col12 &#x3D; k.getCol1()) &#x3D;&#x3D; null || !col12.isVip()) &#123;</span><br><span class="line">            CheckTalkBean checkTalkBean &#x3D; this.f10545d;</span><br><span class="line">            if ((checkTalkBean !&#x3D; null ? checkTalkBean.getUnlockTime() : 0) &gt; 0) &#123;</span><br><span class="line">                da();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                l(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            da();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        MyInfoBean k2 &#x3D; Ib.f9521i.k();</span><br><span class="line">        if (k2 &#x3D;&#x3D; null || (col1 &#x3D; k2.getCol1()) &#x3D;&#x3D; null || !col1.isReal()) &#123;</span><br><span class="line">            ConfirmDialogFragment.a aVar &#x3D; ConfirmDialogFragment.Companion;</span><br><span class="line">            String string &#x3D; getString(R$string.you_can_chat_after_you_have_certified);</span><br><span class="line">            i.a((Object) string, &quot;getString(R.string.you_c…after_you_have_certified)&quot;);</span><br><span class="line">            String string2 &#x3D; getString(R$string.authentication_now_in_ten_seconds);</span><br><span class="line">            i.a((Object) string2, &quot;getString(R.string.authe…ation_now_in_ten_seconds)&quot;);</span><br><span class="line">            FragmentManager supportFragmentManager &#x3D; getSupportFragmentManager();</span><br><span class="line">            i.a((Object) supportFragmentManager, &quot;supportFragmentManager&quot;);</span><br><span class="line">            ConfirmDialogFragment.a.a(aVar, &quot;&quot;, string, &quot;&quot;, string2, true, supportFragmentManager, true, (kotlin.jvm.a.a) null, false, (kotlin.jvm.a.b) null, (String) null, 0.0f, (kotlin.jvm.a.b) null, 8064, (Object) null).a(new I(this));</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        da();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的isVip方法来自于<code>com.chanson.business.model.BasicUserInfoBean</code>,我们尝试trace下该类，并打印类的每个域的值。</p><h2 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h2><p>frida -UF -l trace.js -o traceVip.txt  对指定类的所有动静态方法及构造函数进行trace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">function inspectObject(obj) &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        const obj_class &#x3D; obj.class;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; var objClass &#x3D; Java.use(&quot;java.lang.Object&quot;).getClass.apply(object);</span><br><span class="line">        &#x2F;&#x2F; obj_class &#x3D;Java.use(&quot;java.lang.Class&quot;).getName.apply(objClass);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        const fields &#x3D; obj_class.getDeclaredFields();</span><br><span class="line">        const methods &#x3D; obj_class.getMethods();</span><br><span class="line">        &#x2F;&#x2F; console.log(&quot;Inspecting &quot; + obj.getClass().toString());</span><br><span class="line">        &#x2F;&#x2F; console.log(&quot;Inspecting &quot; + obj.class.toString());</span><br><span class="line">        console.log(&quot;\tFields:&quot;);</span><br><span class="line">        for (var i in fields) &#123;</span><br><span class="line">            console.log(&quot;\t\t&quot; + fields[i].toString());</span><br><span class="line">            var className &#x3D; obj_class.toString().trim().split(&quot; &quot;)[1];</span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;className is &#x3D;&gt; &quot;,className);</span><br><span class="line">            var fieldName &#x3D; fields[i].toString().split(className.concat(&quot;.&quot;)).pop();</span><br><span class="line">            console.log(fieldName + &quot; &#x3D;&gt; &quot;, obj[fieldName].value);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; console.log(&quot;\tMethods:&quot;);</span><br><span class="line">        &#x2F;&#x2F; for (var i in methods)</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;\t\t&quot; + methods[i].toString());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function uniqBy(array, key)</span><br><span class="line">&#123;</span><br><span class="line">        var seen &#x3D; &#123;&#125;;</span><br><span class="line">        return array.filter(function(item) &#123;</span><br><span class="line">                var k &#x3D; key(item);</span><br><span class="line">                return seen.hasOwnProperty(k) ? false : (seen[k] &#x3D; true);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; trace a specific Java Method</span><br><span class="line">function traceMethod(targetClassMethod)</span><br><span class="line">&#123;</span><br><span class="line">var delim &#x3D; targetClassMethod.lastIndexOf(&quot;.&quot;);</span><br><span class="line">if (delim &#x3D;&#x3D;&#x3D; -1) return;</span><br><span class="line"></span><br><span class="line">var targetClass &#x3D; targetClassMethod.slice(0, delim)</span><br><span class="line">var targetMethod &#x3D; targetClassMethod.slice(delim + 1, targetClassMethod.length)</span><br><span class="line"></span><br><span class="line">var hook &#x3D; Java.use(targetClass);</span><br><span class="line">var overloadCount &#x3D; hook[targetMethod].overloads.length;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Tracing &quot; + targetClassMethod + &quot; [&quot; + overloadCount + &quot; overload(s)]&quot;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">for (var i &#x3D; 0; i &lt; overloadCount; i++) &#123;</span><br><span class="line"></span><br><span class="line">hook[targetMethod].overloads[i].implementation &#x3D; function() &#123;</span><br><span class="line">            inspectObject(this)</span><br><span class="line">console.warn(&quot;\n*** entered &quot; + targetClassMethod);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; print backtrace</span><br><span class="line">&#x2F;&#x2F; Java.perform(function() &#123;</span><br><span class="line">&#x2F;&#x2F;var bt &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new());</span><br><span class="line">&#x2F;&#x2F;console.log(&quot;\nBacktrace:\n&quot; + bt);</span><br><span class="line">&#x2F;&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; print args</span><br><span class="line">if (arguments.length) console.log();</span><br><span class="line">for (var j &#x3D; 0; j &lt; arguments.length; j++) &#123;</span><br><span class="line">                console.log(&quot;arg[&quot; + j + &quot;]: &quot; + arguments[j]);</span><br><span class="line">                </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; print retval</span><br><span class="line">var retval &#x3D; this[targetMethod].apply(this, arguments); &#x2F;&#x2F; rare crash (Frida bug?)</span><br><span class="line">            console.log(&quot;\nretval: &quot; + retval);</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">console.warn(&quot;\n*** exiting &quot; + targetClassMethod);</span><br><span class="line">return retval;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function traceClass(targetClass)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F;Java.use是新建一个对象哈，大家还记得么？</span><br><span class="line">var hook &#x3D; Java.use(targetClass);</span><br><span class="line">  &#x2F;&#x2F;利用反射的方式，拿到当前类的所有方法</span><br><span class="line">    var methods &#x3D; hook.class.getDeclaredMethods();</span><br><span class="line">    &#x2F;&#x2F; var methods &#x3D; hook.class.getMethods();</span><br><span class="line">    console.log(&quot;methods &#x3D;&gt; &quot;,methods)</span><br><span class="line">  &#x2F;&#x2F;建完对象之后记得将对象释放掉哈</span><br><span class="line">hook.$dispose;</span><br><span class="line">  &#x2F;&#x2F;将方法名保存到数组中</span><br><span class="line">var parsedMethods &#x3D; [];</span><br><span class="line">methods.forEach(function(method) &#123;</span><br><span class="line">parsedMethods.push(method.toString().replace(targetClass + &quot;.&quot;, &quot;TOKEN&quot;).match(&#x2F;\sTOKEN(.*)\(&#x2F;)[1]);</span><br><span class="line">&#125;);</span><br><span class="line">  &#x2F;&#x2F;去掉一些重复的值</span><br><span class="line">    var targets &#x3D; uniqBy(parsedMethods, JSON.stringify);</span><br><span class="line">    &#x2F;&#x2F; 只hook构造函数</span><br><span class="line">    &#x2F;&#x2F;targets &#x3D; [];</span><br><span class="line">    targets &#x3D; targets.concat(&quot;$init&quot;)</span><br><span class="line">    console.log(&quot;targets&#x3D;&gt;&quot;,targets)</span><br><span class="line">  &#x2F;&#x2F;对数组中所有的方法进行hook，traceMethod也就是第一小节的内容</span><br><span class="line">targets.forEach(function(targetMethod) &#123;</span><br><span class="line">traceMethod(targetClass + &quot;.&quot; + targetMethod);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function hook() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.log(&quot;start&quot;)</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch: function (loader) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if(loader.findClass(&quot;com.ceco.nougat.gravitybox.ModStatusbarColor$1&quot;))&#123;</span><br><span class="line">                    &#x2F;&#x2F; if(loader.findClass(&quot;de.robv.android.xposed.XC_MethodHook&quot;))&#123;</span><br><span class="line">                    &#x2F;&#x2F; if(loader.findClass(&quot;de.robv.android.xposed.XposedBridge&quot;))&#123;</span><br><span class="line">                    &#x2F;&#x2F;if(loader.findClass(&quot;com.android.internal.statusbar.StatusBarIcon&quot;))&#123;</span><br><span class="line"></span><br><span class="line">                        console.log(&quot;Successfully found loader&quot;)</span><br><span class="line">                        console.log(loader);</span><br><span class="line">                        Java.classFactory.loader &#x3D; loader ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch(error)&#123;</span><br><span class="line">                    console.log(&quot;find error:&quot; + error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line">                console.log(&quot;end1&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F; Java.use(&quot;de.robv.android.xposed.XposedBridge&quot;).log.overload(&#39;java.lang.String&#39;).implementation &#x3D; function (str) &#123;</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;entering Xposedbridge.log &quot;,str.toString())</span><br><span class="line">        &#x2F;&#x2F;     return true</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line">        &#x2F;&#x2F;traceClass(&quot;com.ceco.nougat.gravitybox.ModStatusbarColor&quot;)</span><br><span class="line">        &#x2F;&#x2F; Java.use(&quot;com.roysue.xposed1.HookTest$1&quot;).afterHookedMethod.implementation &#x3D; function (param)&#123;</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;entering afterHookedMethod param is &#x3D;&gt; &quot;,param);</span><br><span class="line">        &#x2F;&#x2F;     return this.afterHookedMethod(param);</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line">        &#x2F;&#x2F; traceClass(&quot;de.robv.android.xposed.XC_MethodHook&quot;)</span><br><span class="line">        &#x2F;&#x2F; Java.use(&quot;de.robv.android.xposed.XC_MethodHook$MethodHookParam&quot;).setResult.implementation &#x3D; function(str)&#123;</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;entersing de.robv.android.xposed.XC_MethodHook$MethodHookParam setResult &#x3D;&gt; &quot;,str)</span><br><span class="line">        &#x2F;&#x2F;     console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">        &#x2F;&#x2F;     return this.setResult(str);</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">        Java.enumerateLoadedClasses (&#123;</span><br><span class="line">            onMatch:function(className)&#123;</span><br><span class="line">                if(className.toString().indexOf(&quot;gravitybox&quot;)&gt;0 &amp;&amp; </span><br><span class="line">                className.toString().indexOf(&quot;$&quot;)&gt;0</span><br><span class="line">                )&#123;</span><br><span class="line">                    console.log(&quot;found &#x3D;&gt; &quot;,className)</span><br><span class="line">                    &#x2F;&#x2F; var interFaces &#x3D; Java.use(className).class.getInterfaces();</span><br><span class="line">                    &#x2F;&#x2F; if(interFaces.length&gt;0)&#123;</span><br><span class="line">                    &#x2F;&#x2F;     console.log(&quot;interface is &#x3D;&gt; &quot;);</span><br><span class="line">                    &#x2F;&#x2F;     for(var i in interFaces)&#123;</span><br><span class="line">                    &#x2F;&#x2F;         console.log(&quot;\t&quot;,interFaces[i].toString())</span><br><span class="line">                    &#x2F;&#x2F;     &#125;</span><br><span class="line">                    &#x2F;&#x2F; &#125;</span><br><span class="line">                    if(Java.use(className).class.getSuperclass())&#123;</span><br><span class="line">                        var superClass &#x3D; Java.use(className).class.getSuperclass().getName();</span><br><span class="line">                        &#x2F;&#x2F; console.log(&quot;superClass is &#x3D;&gt; &quot;,superClass);</span><br><span class="line">                        if (superClass.indexOf(&quot;XC_MethodHook&quot;)&gt;0)&#123;</span><br><span class="line">                            console.log(&quot;found class is &#x3D;&gt; &quot;,className.toString())</span><br><span class="line">                            traceClass(className);</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&quot;search completed!&quot;)</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        console.log(&quot;end2&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    &#x2F;&#x2F; hook()</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        traceClass(&quot;com.chanson.business.model.BasicUserInfoBean&quot;)  </span><br><span class="line">        &#x2F;&#x2F; traceClass(&quot;com.chanson.business.model.MyInfoBean&quot;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210531232604816.png" alt="image-20210531232604816"></p><blockquote><p>java.lang.Throwable<br>        at com.chanson.business.model.BasicUserInfoBean.isVip(Native Method)<br>        at com.chanson.business.message.activity.ChatActivity.na(SourceFile:2)<br>        at com.chanson.business.message.activity.ChatActivity.k(SourceFile:1)<br>        at com.chanson.business.message.activity.a.run(SourceFile:1)<br>        at android.os.Handler.handleCallback(Handler.java:790)<br>        at android.os.Handler.dispatchMessage(Handler.java:99)<br>        at android.os.Looper.loop(Looper.java:164)<br>        at android.app.ActivityThread.main(ActivityThread.java:6494)<br>        at java.lang.reflect.Method.invoke(Native Method)<br>        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)<br>        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)<br>        at de.robv.android.xposed.XposedBridge.main(XposedBridge.java:108)</p></blockquote><p><strong>优化对应关系</strong></p><p>frida -UF -l trace.js -o traceVip.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">function traceMethod(targetClassMethod) &#123;</span><br><span class="line">    var delim &#x3D; targetClassMethod.lastIndexOf(&quot;.&quot;);</span><br><span class="line">    if (delim &#x3D;&#x3D;&#x3D; -1) return;</span><br><span class="line"></span><br><span class="line">    var targetClass &#x3D; targetClassMethod.slice(0, delim)</span><br><span class="line">    var targetMethod &#x3D; targetClassMethod.slice(delim + 1, targetClassMethod.length)</span><br><span class="line"></span><br><span class="line">    var hook &#x3D; Java.use(targetClass);</span><br><span class="line">    var overloadCount &#x3D; hook[targetMethod].overloads.length;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Tracing &quot; + targetClassMethod + &quot; [&quot; + overloadCount + &quot; overload(s)]&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (var i &#x3D; 0; i &lt; overloadCount; i++) &#123;</span><br><span class="line"></span><br><span class="line">        hook[targetMethod].overloads[i].implementation &#x3D; function () &#123;</span><br><span class="line">            var output &#x3D; &quot;&quot;;</span><br><span class="line">            for(var line&#x3D;0;line&lt;100;line++)&#123;</span><br><span class="line">                output &#x3D; output.concat(&quot;&#x3D;&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">            output &#x3D; output.concat(&quot;\r\n&quot;)</span><br><span class="line">            const Class &#x3D; Java.use(&quot;java.lang.Class&quot;);</span><br><span class="line">            &#x2F;&#x2F; const obj_class &#x3D; Java.cast(this.getClass(), Class);</span><br><span class="line">            const obj_class &#x3D; this.class;</span><br><span class="line">            const fields &#x3D; obj_class.getDeclaredFields();</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; output &#x3D; output.concat(&quot;Inspecting &quot; + this.getClass().toString());</span><br><span class="line">            output &#x3D; output.concat(&quot;Inspecting &quot; + this.class);</span><br><span class="line">            output &#x3D; output.concat(&quot;\r\n&quot;)</span><br><span class="line">            output &#x3D; output.concat(&quot;\tFields:&quot;);</span><br><span class="line">            output &#x3D; output.concat(&quot;\r\n&quot;)</span><br><span class="line">            for (var i in fields) &#123;</span><br><span class="line">                &#x2F;&#x2F; console.log(&quot;\t\t&quot; + fields[i].toString());</span><br><span class="line">                var className &#x3D; obj_class.toString().trim().split(&quot; &quot;)[1];</span><br><span class="line">                &#x2F;&#x2F; console.log(&quot;className is &#x3D;&gt; &quot;,className);</span><br><span class="line">                var fieldName &#x3D; fields[i].toString().split(className.concat(&quot;.&quot;)).pop();</span><br><span class="line">                var fieldValue &#x3D; undefined;</span><br><span class="line">                if(!(this[fieldName]&#x3D;&#x3D;&#x3D;undefined))&#123;</span><br><span class="line">                    fieldValue &#x3D; this[fieldName].value ; </span><br><span class="line">                &#125;</span><br><span class="line">                output &#x3D; output.concat(fieldName + &quot; &#x3D;&gt; &quot;, fieldValue);</span><br><span class="line">                output &#x3D; output.concat(&quot;\r\n&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; inspectObject(this);</span><br><span class="line">            output &#x3D; output.concat(&quot;\n*** entered &quot; + targetClassMethod);</span><br><span class="line">            output &#x3D; output.concat(&quot;\r\n&quot;)</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; print backtrace</span><br><span class="line">            &#x2F;&#x2F; Java.perform(function() &#123;</span><br><span class="line">            &#x2F;&#x2F;var bt &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new());</span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;\nBacktrace:\n&quot; + bt);</span><br><span class="line">            &#x2F;&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; print args</span><br><span class="line">            if (arguments.length) console.log();</span><br><span class="line">            for (var j &#x3D; 0; j &lt; arguments.length; j++) &#123;</span><br><span class="line">                output &#x3D; output.concat(&quot;arg[&quot; + j + &quot;]: &quot; + arguments[j] + &quot; &#x3D;&gt; &quot; + JSON.stringify(arguments[j]));</span><br><span class="line">                output &#x3D; output.concat(&quot;\r\n&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">            output &#x3D; output.concat(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">            output &#x3D; output.concat(&quot;\r\n&quot;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; print retval</span><br><span class="line">            var retval &#x3D; this[targetMethod].apply(this, arguments); &#x2F;&#x2F; rare crash (Frida bug?)</span><br><span class="line">            output &#x3D; output.concat(&quot;\nretval: &quot; + retval + &quot; &#x3D;&gt; &quot; + JSON.stringify(retval));</span><br><span class="line">            output &#x3D; output.concat(&quot;\r\n&quot;)</span><br><span class="line">            output &#x3D; output.concat(&quot;\n*** exiting &quot; + targetClassMethod);</span><br><span class="line">            output &#x3D; output.concat(&quot;\r\n&quot;)</span><br><span class="line">            console.log(output);</span><br><span class="line">            return retval;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210601005958949.png" alt="image-20210601005958949"></p><h2 id="vip"><a href="#vip" class="headerlink" title="vip"></a>vip</h2><h3 id="旧版4-1-0"><a href="#旧版4-1-0" class="headerlink" title="旧版4.1.0"></a>旧版4.1.0</h3><p>frida -UF -l hookCaratVip.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function hookVIP()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;com.chanson.business.model.BasicUserInfoBean&quot;).isVip.implementation &#x3D; function()&#123;</span><br><span class="line">            console.log(&quot;Calling isVIP &quot;)</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(&quot;Start hook&quot;)</span><br><span class="line">    hookVIP()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h3 id="新版4-6-0"><a href="#新版4-6-0" class="headerlink" title="新版4.6.0"></a>新版4.6.0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.chanson.business.message.activity.ChatActivity --dump-args --dump-backtrace --dump-return  当我们无法判断什么时候判断vip时，hook整个类，查看调用链，点击发送消息时，弹窗付费</span><br></pre></td></tr></table></figure><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210601171218877.png" alt="image-20210601171218877"></p><p>查看jadx中的<code>com.chanson.business.message.activity.ChatActivity</code>类，通过aa方法得知只有在被拉黑等情况，返回false则无法发送消息，我们在第一步让Z()返回false，直接进入<code>return true</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">private final boolean aa() &#123;</span><br><span class="line">    if (!Z()) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.f10873d &#x3D;&#x3D; null) &#123;</span><br><span class="line">        Hb.a(Hb.f11628c, &quot;数据异常&quot;, 0, 2, (Object) null);</span><br><span class="line">        return false;</span><br><span class="line">    &#125; else if (ga()) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        CheckTalkBean checkTalkBean &#x3D; this.f10873d;</span><br><span class="line">        if (checkTalkBean &#x3D;&#x3D; null) &#123;</span><br><span class="line">            i.a();</span><br><span class="line">            throw null;</span><br><span class="line">        &#125; else if (!checkTalkBean.getUnlock()) &#123;</span><br><span class="line">            ChatLayout chatLayout &#x3D; (ChatLayout) k(R$id.chatLayout);</span><br><span class="line">            i.a((Object) chatLayout, &quot;chatLayout&quot;);</span><br><span class="line">            chatLayout.getInputLayout().hideSoftInput();</span><br><span class="line">            x.a(new RunnableC1179a(this), 100);</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else if (checkTalkBean.getStatus() &#x3D;&#x3D; 3 || checkTalkBean.getStatus() &#x3D;&#x3D; 2) &#123;</span><br><span class="line">            Hb.a(Hb.f11628c, &quot;你已将对方拉黑，无法发送消息&quot;, 0, 2, (Object) null);</span><br><span class="line">            ChatLayout chatLayout2 &#x3D; (ChatLayout) k(R$id.chatLayout);</span><br><span class="line">            i.a((Object) chatLayout2, &quot;chatLayout&quot;);</span><br><span class="line">            InputLayout inputLayout &#x3D; chatLayout2.getInputLayout();</span><br><span class="line">            i.a((Object) inputLayout, &quot;chatLayout.inputLayout&quot;);</span><br><span class="line">            inputLayout.getInputText().setText(&quot;&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else if (checkTalkBean.getStatus() !&#x3D; 1) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Hb.a(Hb.f11628c, &quot;对方已将你拉黑，无法发送消息&quot;, 0, 2, (Object) null);</span><br><span class="line">            ChatLayout chatLayout3 &#x3D; (ChatLayout) k(R$id.chatLayout);</span><br><span class="line">            i.a((Object) chatLayout3, &quot;chatLayout&quot;);</span><br><span class="line">            InputLayout inputLayout2 &#x3D; chatLayout3.getInputLayout();</span><br><span class="line">            i.a((Object) inputLayout2, &quot;chatLayout.inputLayout&quot;);</span><br><span class="line">            inputLayout2.getInputText().setText(&quot;&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过objection判断ChatActivity源码实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.caratlover explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">android hooking search classes ChatActivity</span><br><span class="line">plugin wallbreaker classdump --fullname com.chanson.business.message.activity.ChatActivity</span><br><span class="line">android hooking watch class_method com.chanson.business.message.activity.ChatActivity.Z --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210601022535406.png" alt="image-20210601022535406"></p><p>每次Z()返回true自然进不了发送消息逻辑，主动调用Z()返回false，破解vip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function hookVIP()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;com.chanson.business.message.activity.ChatActivity&quot;).Z.implementation &#x3D; function()&#123;</span><br><span class="line">            console.log(&quot;Calling isVIP &quot;)</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(&quot;Start hook&quot;)</span><br><span class="line">    hookVIP()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210601020458519.png" alt="image-20210601020458519"></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>Postern配置代理，其中192.168.0.107是charles主机ip，8889是charles的socks</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210601021359032.png" alt="image-20210601021359032"></p><p>配置规则</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210601021407826.png" alt="image-20210601021407826"></p><p>遇到8668端口抓不到，报错<code>SSL：Unsupported or unrecognized SSL message</code>,修改charles的Proxy Settings</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210601021805962.png" alt="image-20210601021805962"></p><p>盲猜一波是base64加密</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210601021901648.png" alt="image-20210601021901648"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python r0capture.py -U -f com.caratlover -v -w 2 &gt;&gt; capture.txt  抓包发现都被加密，类被混淆的非常厉害，虽然无法识别类的作用，我们可以有通过trace去跟踪调用返回值</span><br></pre></td></tr></table></figure><p>找到登录包<code>/auth/login-check</code>,其调用栈中<code>at com.chanson.common.a.j.intercept(SourceFile:45)</code></p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210602144812815.png" alt="image-20210602144812815"></p><p>通过jadx查看<code>com.chanson.common.a.j</code>方法，其中<code>com.chanson.common.utils.a.b</code>将传入的jsonObject转成string后调用c方法。</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210602151006668.png" alt="image-20210602151006668"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.caratlover -l trace.js --no-pause -o traffic.txt  修改trace的class</span><br><span class="line">traceClass(&quot;com.chanson.common.utils.a.b&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>Error: java.lang.ClassNotFoundException: Didn’t find class “com.chanson.common.utils.a.b” 报错是因为app启动还要时间，修改<code>setTimeout(main, 2000);</code></p></blockquote><p>trace登录,先打开登录界面，输入密码后<code>frida -U com.caratlover -l r0tracer.js --no-pause -o traffic.txt</code></p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210602154917590.png" alt="image-20210602154917590"></p><p>大量的加密字段类似base64，尝试trace Base64。修改<code>traceClass(&quot;android.util.Base64&quot;)</code>，开启trace，<code>frida -U com.caratlover -l r0tracer.js --no-pause -o base64.txt</code>追查调用栈</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210602160016918.png" alt="image-20210602160016918"></p><p> 通过jadx查看<code>com.chanson.common.a.d</code>,其中<code>String a2 = a.a(string, &quot;f87210e0ed3079d8&quot;);</code>的a方法跳转到实现发现是一个完整的标准aes加密。</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210602160255397.png" alt="image-20210602160255397"></p><p>全局搜索还有AESUtils，完全自己开发的非标准的AES加密，<code>7z x com.caratlover.apk</code> 查看lib/armeabi-v7a下存在<code>alicomphonenumberauthsdk-log-online-standard-release_alijtca_plus.so</code></p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210602160511071.png" alt="image-20210602160511071"></p><p>strings查看该so中的字符串，<code>traceClass(&quot;com.mobile.auth.gatewayauth.utils.security.CheckRoot&quot;)</code></p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210602161050938.png" alt="image-20210602161050938"></p><h1 id="对抗更新"><a href="#对抗更新" class="headerlink" title="对抗更新"></a>对抗更新</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb connect 172.20.103.172  启动wifiadb</span><br><span class="line">adb install com.caratlover4.1.0.apk</span><br><span class="line">frida -UF -l hookEvent.js  点击马上更新按钮，触发点击时间，打印点击类</span><br></pre></td></tr></table></figure><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210603160106003.png" alt="image-20210603160106003"></p><p>打开jadx逐个查看脱完壳后的dex文件，新版本的jadx对加密后的dex反编译结果会rename</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210603162543390.png" alt="image-20210603162543390"></p><p>查看ConfirmDialogFragment类，其中有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public &#x2F;* synthetic *&#x2F; void onDestroyView() &#123;</span><br><span class="line">    super.onDestroyView();</span><br><span class="line">    g();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主动调用去除弹窗"><a href="#主动调用去除弹窗" class="headerlink" title="主动调用去除弹窗"></a>主动调用去除弹窗</h2><p>frida -UF -l disableUPDATE.js  再destory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function disableUPDATE()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.choose(&quot;com.chanson.business.widget.ConfirmDialogFragment&quot;,&#123;</span><br><span class="line">            onMatch:function(ins)&#123;</span><br><span class="line">&#x2F;&#x2F; 动态方法choose onMatch找到实例进行调用</span><br><span class="line">                console.log(&quot;found ins &#x3D;&gt; &quot;,ins);</span><br><span class="line">&#x2F;&#x2F; smali或objection看真实方法名</span><br><span class="line">                ins.onDestroyView()</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete:function()&#123;</span><br><span class="line">                console.log(&quot;Search completed!&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(&quot;Start hook&quot;)</span><br><span class="line">    disableUPDATE()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p>![GIF 2021-6-3 16-37-29](克拉恋人会员制取证分析/GIF 2021-6-3 16-37-29.gif)</p><p>不过页面无法操作,尝试直接跳到MainActivity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.caratlover explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">android intent launch_activity com.chanson.business.MainActivity</span><br></pre></td></tr></table></figure><h2 id="trace-1"><a href="#trace-1" class="headerlink" title="trace"></a>trace</h2><p>frida -U -f com.caratlover -l r0trace.js --runtime=v8 --no-pause -o trace.txt   在traceClass中添加<code>targets = [];</code> 只hook构造函数，点击马上更新</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210604213755118.png" alt="image-20210604213755118"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">traceClass(&quot;com.chanson.business.widget.ConfirmDialogFragment&quot;)</span><br><span class="line">setTimeout(main, 1000);</span><br></pre></td></tr></table></figure><blockquote><p>setImmediate是立即执行函数，setTimeout是等待毫秒后延迟执行函数<br>二者在attach模式下没有区别<br>在spawn模式下，hook系统API时如javax.crypto.Cipher建议使用setImmediate立即执行，不需要延时<br>在spawn模式下，hook应用自己的函数或含壳时，建议使用setImmediate并给出适当的延时(500~5000)</p></blockquote><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210607212455683.png" alt="image-20210607212455683"></p><p>找到<code>com.chanson.business.login.presenter.PhoneLoginPresenter$a.a</code>实现方法</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210607212852510.png" alt="image-20210607212852510"></p><p>找到a方法的调用处，在switch的<code>baseResponse.getErrorCode()</code>的判断时调用<code>PhoneLoginPresenter.f10498a.a</code>,其中<code>renamed from: com.chanson.business.g.s</code>正是我们trace得到的类</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210607213046818.png" alt="image-20210607213046818"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">traceClass(&quot;com.chanson.common.base.BaseResponse&quot;) </span><br><span class="line">setTimeout(main, 1000);</span><br></pre></td></tr></table></figure><p>尝试trace<code>com.chanson.common.base.BaseResponse</code>查看getErrorCode的结果，返回10002，正巧会调用<code>PhoneLoginPresenter.f10498a.a((Update) rVar.a(rVar.a(baseResponse.getUpdate()), Update.class));</code></p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210607213548788.png" alt="image-20210607213548788"></p><p>使用新版本的apk启动时重新trace<code>com.chanson.common.base.BaseResponse</code>查看正常情况下case返回的值为10001。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Java.use(&quot;com.chanson.common.base.BaseResponse&quot;).getErrorCode.implementation &#x3D; function()&#123;</span><br><span class="line">    console.log(&quot;Calling getErrorCode &quot;)</span><br><span class="line">    return 10001;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(main,2000)  &#x2F;&#x2F; 壳的切换需要时间</span><br></pre></td></tr></table></figure><p><code>frida -U -f com.caratlover -l disableUPDATE.js --no-pause</code>hook getErrorCode直接返回10001，发现正常进入登录，登录时发现<code>我们检测到你的账号存在异常数据，为确保你的账号安全，请重新登录</code>,r0capture抓包发现对版本号进行了校验，接下来将SSLOutputStream的入参改成新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream&quot;).write.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (bytearry, int1, int2) &#123;</span><br><span class="line">    for(var i &#x3D; 0; i &lt; bytearry.length; ++i)&#123;</span><br><span class="line">        &#x2F;&#x2F; Memory.writeS8(ptr.add(i), array[i]);</span><br><span class="line">        if(bytearry[i]&#x3D;&#x3D;&#39;0x34&#39;)&#123;</span><br><span class="line">            console.log(&quot;found 4&quot;);</span><br><span class="line">            if(bytearry.length - i &gt; 4)&#123;</span><br><span class="line">                if(bytearry[i+1] &#x3D;&#x3D; &#39;0x2e&#39; &amp;&amp; bytearry[i+2] &#x3D;&#x3D; &#39;0x31&#39; &amp;&amp;  bytearry[i+3] &#x3D;&#x3D; &#39;0x2e&#39; &amp;&amp;  bytearry[i+4] &#x3D;&#x3D; &#39;0x30&#39; )&#123;</span><br><span class="line">                    bytearry[i+2] &#x3D; 50</span><br><span class="line">                    console.log(&quot;finally change to 4.2.0!&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 4.1.0 字符串转16进制转 0x34 0x2e 0x31 0x2e 0x30</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var result &#x3D; this.write(bytearry, int1, int2);</span><br><span class="line">    jhexdump(bytearry)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; var trafficstring &#x3D; StringClass.$new(bytearry).replace(StringClass.$new(&quot;4.1.0&quot;),StringClass.$new(&quot;4.2.0&quot;))</span><br><span class="line">    &#x2F;&#x2F; console.log(&quot;write &#x3D;&gt; &quot;,trafficstring)</span><br><span class="line">    &#x2F;&#x2F; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="line">    &#x2F;&#x2F; var result &#x3D; this.write(trafficstring.getBytes(), int1, int2);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="批量撩妹"><a href="#批量撩妹" class="headerlink" title="批量撩妹"></a>批量撩妹</h1><p>jadx-gui查看新版本依旧加壳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;fs14216arm64</span><br><span class="line">pyenv local 3.9.0</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hanbinglengyue&#x2F;FART.git</span><br><span class="line">adb push frida_fart&#x2F;lib&#x2F;fart* &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">adb shell &amp;&amp; cp fart* &#x2F;data&#x2F;app &amp;&amp; chmod 777</span><br><span class="line">frida -U -f com.caratlover -l frida_fart_hook.js --no-pause  使用安卓8和安卓8.1进行脱壳</span><br><span class="line">mv ..&#x2F;*.dex carat &amp;&amp;  adb pull &#x2F;sdcard&#x2F;carat</span><br></pre></td></tr></table></figure><p>开启内存漫游</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.0</span><br><span class="line">.&#x2F;fs128arm64</span><br><span class="line">objection -g com.caratlover explore</span><br><span class="line">android intent launch_activity com.chanson.business.MainActivity  直接绕过强制会员购买页面</span><br></pre></td></tr></table></figure><p>将破解vip添加在r0trace的main中执行一次，实现trace某一个类时执行单次hook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.warn(&quot;r0tracer begin ... !&quot;)</span><br><span class="line">        Java.perform(function()&#123;</span><br><span class="line">Java.use(&quot;com.chanson.business.message.activity.ChatActivity&quot;).Z.implementation &#x3D; function()&#123;</span><br><span class="line">console.log(&quot;Calling isVIP &quot;)</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l hookEvent.js  点击发送消息，触发com.tencent.qcloud.tim.uikit.modules.chat.layout.input.InputLayout`，并弹窗要求付费，我们尝试trace该类的同时并破解vip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.warn(&quot;r0tracer begin ... !&quot;)</span><br><span class="line">        traceClass(&quot;com.tencent.qcloud.tim.uikit.modules.chat.layout.input.InputLayout&quot;);</span><br><span class="line">        Java.perform(function()&#123;</span><br><span class="line">Java.use(&quot;com.chanson.business.message.activity.ChatActivity&quot;).Z.implementation &#x3D; function()&#123;</span><br><span class="line">console.log(&quot;Calling isVIP &quot;)</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l r0tracer.js --no-pause &gt; chat.txt  开启trace,只有frida12 没有runtime=v8的选项，发送消息，查看调用栈</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210607232416746.png" alt="image-20210607232416746"></p><p>在jadx中找到InputLayout的onClick方法</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210607234715239.png" alt="image-20210607234715239"></p><p>尝试<code>traceClass(&quot;com.tencent.qcloud.tim.uikit.modules.message.MessageInfoUtil&quot;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.warn(&quot;r0tracer begin ... !&quot;)</span><br><span class="line">        traceClass(&quot;com.tencent.qcloud.tim.uikit.modules.message.MessageInfoUtil&quot;)</span><br><span class="line"></span><br><span class="line">        Java.perform(function()&#123;</span><br><span class="line">Java.use(&quot;com.chanson.business.message.activity.ChatActivity&quot;).Z.implementation &#x3D; function()&#123;</span><br><span class="line">console.log(&quot;Calling isVIP &quot;)</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l r0tracer.js --no-pause &gt; chat.txt  开启trace，再次发送消息,搜索我们发送的ccccdddd</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210607235129408.png" alt="image-20210607235129408"></p><p>通过jadx找到<code>com.tencent.qcloud.tim.uikit.modules.message.MessageInfoUtil</code>的buildTextMessage方法</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210607235326550.png" alt="image-20210607235326550"></p><p>想办法获取MessageInfo返回值的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.warn(&quot;r0tracer begin ... !&quot;)</span><br><span class="line">        traceClass(&quot;com.tencent.qcloud.tim.uikit.modules.message.MessageInfo&quot;)</span><br><span class="line"></span><br><span class="line">        Java.perform(function()&#123;</span><br><span class="line">Java.use(&quot;com.chanson.business.message.activity.ChatActivity&quot;).Z.implementation &#x3D; function()&#123;</span><br><span class="line">console.log(&quot;Calling isVIP &quot;)</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l r0tracer.js --no-pause &gt; chat.txt  开启trace，再次发送消息tttttttt,搜索tttttttt</p><blockquote><p>Inspecting Fields: =&gt; true =&gt; class com.tencent.qcloud.tim.uikit.modules.message.MessageInfo<br>com.tencent.imsdk.TIMMessage     TIMMessage =&gt; TIMMessage{<br>    ConverstaionType:Invalid<br>    ConversationId:<br>    MsgId:2148258574<br>    MsgSeq:32779<br>    Rand:2148258574<br>    time:1614087810<br>    isSelf:true<br>    Status:Sending<br>    Sender:klover1_server_550179<br>    elements:[<br>        {Type:Text, Content:<strong>tttttttt</strong>}<br>    ]<br>}<br> =&gt; “&lt;instance: com.tencent.imsdk.TIMMessage&gt;”<br>java.lang.String     dataPath =&gt; null =&gt; null<br>android.net.Uri     dataUri =&gt; null =&gt; null<br>com.tencent.imsdk.TIMElem     element =&gt; com.tencent.imsdk.TIMTextElem@7d67029 =&gt; “&lt;instance: com.tencent.imsdk.TIMElem, $className: com.tencent.imsdk.TIMTextElem&gt;”<br>java.lang.Object     extra =&gt; tttttttt =&gt; “&lt;instance: java.lang.Object, $className: java.lang.String&gt;”<br>java.lang.String     fromUser =&gt; klover1_server_550179 =&gt; “klover1_server_550179”<br>boolean     group =&gt; false =&gt; false<br>java.lang.String     groupNameCard =&gt; null =&gt; null<br>java.lang.String     id =&gt; 70b42de0-097a-4b9c-927d-13e660ce86a6 =&gt; “70b42de0-097a-4b9c-927d-13e660ce86a6”<br>int     imgHeight =&gt; 0 =&gt; 0<br>int     imgWidth =&gt; 0 =&gt; 0<br>long     msgTime =&gt; 1614087810 =&gt; “1614087810”<br>int     msgType =&gt; 0 =&gt; 0<br>boolean     peerRead =&gt; false =&gt; false<br>boolean     read =&gt; true =&gt; true<br>boolean     self =&gt; true =&gt; true<br>int     status =&gt; 1 =&gt; 1<br>long     uniqueId =&gt; 0 =&gt; “0”<br>int     MSG_STATUS_DELETE =&gt; 274 =&gt; 274<br>int     MSG_STATUS_DOWNLOADED =&gt; 6 =&gt; 6<br>int     MSG_STATUS_DOWNLOADING =&gt; 4 =&gt; 4<br>int     MSG_STATUS_NORMAL =&gt; 0 =&gt; 0<br>int     MSG_STATUS_READ =&gt; 273 =&gt; 273<br>int     MSG_STATUS_REVOKE =&gt; 275 =&gt; 275<br>int     MSG_STATUS_SENDING =&gt; 1 =&gt; 1<br>int     MSG_STATUS_SEND_FAIL =&gt; 3 =&gt; 3<br>int     MSG_STATUS_SEND_SUCCESS =&gt; 2 =&gt; 2<br>int     MSG_STATUS_UN_DOWNLOAD =&gt; 5 =&gt; 5<br>int     MSG_TYPE_AUDIO =&gt; 48 =&gt; 48<br>int     MSG_TYPE_CUSTOM =&gt; 128 =&gt; 128<br>int     MSG_TYPE_CUSTOM_FACE =&gt; 112 =&gt; 112<br>int     MSG_TYPE_FILE =&gt; 80 =&gt; 80<br>int     MSG_TYPE_GROUP_CREATE =&gt; 257 =&gt; 257<br>int     MSG_TYPE_GROUP_DELETE =&gt; 258 =&gt; 258<br>int     MSG_TYPE_GROUP_JOIN =&gt; 259 =&gt; 259<br>int     MSG_TYPE_GROUP_KICK =&gt; 261 =&gt; 261<br>int     MSG_TYPE_GROUP_MODIFY_NAME =&gt; 262 =&gt; 262<br>int     MSG_TYPE_GROUP_MODIFY_NOTICE =&gt; 263 =&gt; 263<br>int     MSG_TYPE_GROUP_QUITE =&gt; 260 =&gt; 260<br>int     MSG_TYPE_IMAGE =&gt; 32 =&gt; 32<br>int     MSG_TYPE_LOCATION =&gt; 96 =&gt; 96<br>int     MSG_TYPE_MIME =&gt; 1 =&gt; 1<br>int     MSG_TYPE_TEXT =&gt; 0 =&gt; 0<br>int     MSG_TYPE_TIPS =&gt; 256 =&gt; 256<br>int     MSG_TYPE_VIDEO =&gt; 64 =&gt; 64<br>[native     function h() {<br>    [native code]<br>} =&gt; undefined =&gt; undefined</p><p>entered com.tencent.qcloud.tim.uikit.modules.message.MessageInfo.getTIMMessage<br>java.lang.Throwable<br>    at com.tencent.qcloud.tim.uikit.modules.message.MessageInfo.getTIMMessage(Native Method)<br>    at com.tencent.qcloud.tim.uikit.modules.chat.base.ChatManagerKit.<strong>sendMessage</strong>(SourceFile:11)</p></blockquote><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210608000342744.png" alt="image-20210608000342744"></p><p>主要逻辑在<code>this.mCurrentConversation.sendMessage</code>，进入sendMessage方法</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210608000653377.png" alt="image-20210608000653377"></p><p>进入<code>conversation.sendMessage</code>方法</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210608000723461.png" alt="image-20210608000723461"></p><p>具体流程在native层，使用的是<a href="https://github.com/tencentyun/qcloud-documents/blob/09c42626904a1247da9ff7f41b732c94e0c28e11/product/%E7%A7%BB%E5%8A%A8%E4%B8%8E%E9%80%9A%E4%BF%A1/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1/8%E5%AE%A2%E6%88%B7%E7%AB%AFAPI/SDK%20API/%E6%97%A7%E7%89%88%20SDK%20API/SDK%20API%EF%BC%88iOS%EF%BC%89.md" target="_blank" rel="noopener">腾讯云sdk</a>，很难抓到包，不过可以在<code>com.tencent.qcloud.tim.uikit.modules.message.MessageInfoUtil.buildTextMessage</code>构造消息体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android heap search instances com.tencent.imsdk.TIMManager </span><br><span class="line">android hooking list class_methods com.tencent.imsdk.TIMManager</span><br><span class="line">android heap execute 227890024 getLoginUser  根据堆中的实例主动调用方法</span><br><span class="line">android heap execute 227890024 getVersion</span><br><span class="line">android hooking search classes TIMConversation</span><br><span class="line">android hooking list class_methods com.tencent.imsdk.TIMConversation</span><br></pre></td></tr></table></figure><p>trace单个函数在r0trace中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(targetMethod.toString().indexOf(&quot;getConversation&quot;) &lt; 0)&#123;</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看腾讯云官方文档<a href="https://cloud.tencent.com/document/product" target="_blank" rel="noopener">文档中心</a> <em>&gt;</em> <a href="https://cloud.tencent.com/document/product/269" target="_blank" rel="noopener">即时通信 IM</a> <em>&gt;</em> <a href="https://cloud.tencent.com/document/product/269/36853" target="_blank" rel="noopener">SDK 文档</a> <em>&gt;</em> <a href="https://cloud.tencent.com/document/product/269/44532" target="_blank" rel="noopener">旧版 API 教程</a> <em>&gt;</em> <a href="https://cloud.tencent.com/document/product/269/44535" target="_blank" rel="noopener">消息收发</a> <em>&gt;</em> <a href="https://cloud.tencent.com/document/product/269/9232" target="_blank" rel="noopener">消息收发（Android）</a>,获取会话由 <code>TIMManager</code> 中的 <code>getConversation</code> 实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function TIMManager() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        Java.choose(&quot;com.tencent.imsdk.TIMManager&quot;, &#123;</span><br><span class="line">            onMatch: function (ins) &#123;</span><br><span class="line">                console.log(&quot;found ins &#x3D;&gt; &quot;, ins)</span><br><span class="line">                console.log(&quot;found ins.getNetworkStatus() &#x3D;&gt; &quot;, ins.getNetworkStatus())</span><br><span class="line">                console.log(&quot;found ins.getSdkConfig() &#x3D;&gt; &quot;, ins.getSdkConfig())</span><br><span class="line">                console.log(&quot;found ins.getUserConfig() &#x3D;&gt; &quot;, ins.getUserConfig())  &#x2F;&#x2F;看不到内容可以通过r0trace的inspectObject单独看</span><br><span class="line">                var output &#x3D; &quot;&quot;;</span><br><span class="line">                output &#x3D; inspectObject(ins.getUserConfig(), output);</span><br><span class="line">                console.log(output)</span><br><span class="line">    &#125;, onComplete: function () &#123;</span><br><span class="line">        console.log(&quot;search compeled&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试trace腾讯云sdk,<code>frida -UF -l r0tracer.js --no-pause -o chat.txt</code>,重新进入聊天界面获取log中的peer，即用户id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.warn(&quot;r0tracer begin ... !&quot;)</span><br><span class="line">        traceClass(&quot;com.tencent.imsdk.TIMManager&quot;) </span><br><span class="line">        Java.perform(function()&#123;</span><br><span class="line">Java.use(&quot;com.chanson.business.message.activity.ChatActivity&quot;).Z.implementation &#x3D; function()&#123;</span><br><span class="line">console.log(&quot;Calling isVIP &quot;)</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了peer就可以调用<code>TIMManager.getInstance().getConversation</code>的<code>sendMessage</code>发送消息了</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210608004924503.png" alt="image-20210608004924503"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function TIMManager() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        Java.choose(&quot;com.tencent.imsdk.TIMManager&quot;, &#123;</span><br><span class="line">            onMatch: function (ins) &#123;</span><br><span class="line">                console.log(&quot;found ins &#x3D;&gt; &quot;, ins)</span><br><span class="line">                console.log(&quot;found ins.getNetworkStatus() &#x3D;&gt; &quot;, ins.getNetworkStatus())</span><br><span class="line">                console.log(&quot;found ins.getSdkConfig() &#x3D;&gt; &quot;, ins.getSdkConfig())</span><br><span class="line">                &#x2F;&#x2F; console.log(&quot;found ins.getUserConfig() &#x3D;&gt; &quot;, ins.getUserConfig())  看不到内容可以通过r0trace的inspectObject单独看</span><br><span class="line">                &#x2F;&#x2F; var output &#x3D; &quot;&quot;;</span><br><span class="line">                &#x2F;&#x2F; output &#x3D; inspectObject(ins.getUserConfig(), output);</span><br><span class="line">                &#x2F;&#x2F; console.log(output)</span><br><span class="line"></span><br><span class="line">                 var peer &#x3D; Java.use(&#39;java.lang.String&#39;).$new(&quot;klover1_server_190249&quot;);  &#x2F;&#x2F; 这就是peer用户id</span><br><span class="line">                 var conversation &#x3D; ins.getConversation(Java.use(&quot;com.tencent.imsdk.TIMConversationType&quot;).C2C.value, peer);</span><br><span class="line"></span><br><span class="line">                 var msg &#x3D; Java.use(&quot;com.tencent.imsdk.TIMMessage&quot;).$new();</span><br><span class="line">                 &#x2F;&#x2F;添加文本内容</span><br><span class="line">                 var elem &#x3D; Java.use(&quot;com.tencent.imsdk.TIMTextElem&quot;).$new();</span><br><span class="line">                 elem.setText(Java.use(&quot;java.lang.String&quot;).$new(&quot;cpdd&quot;));</span><br><span class="line">                 msg.addElement(elem)</span><br><span class="line"></span><br><span class="line">                 const callback &#x3D; Java.registerClass(&#123;  &#x2F;&#x2F; new 一个接口</span><br><span class="line">                     name: &#39;callback&#39;,</span><br><span class="line">                     implements: [Java.use(&quot;com.tencent.imsdk.TIMValueCallBack&quot;)],</span><br><span class="line">                     methods: &#123;</span><br><span class="line">                         onError(code, desc) &#123;</span><br><span class="line">                             console.log(&quot;send message failed. code: &quot; + code + &quot; errmsg: &quot; + desc);</span><br><span class="line">                         &#125;,</span><br><span class="line">                         onSuccess(msg) &#123;&#x2F;&#x2F;发送消息成功</span><br><span class="line">                             console.log(&quot;SendMsg ok&quot; + msg);</span><br><span class="line">                         &#125;,</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;);</span><br><span class="line">                 conversation.sendMessage(msg, callback.$new())</span><br><span class="line"></span><br><span class="line">    &#125;, onComplete: function () &#123;</span><br><span class="line">        console.log(&quot;search compeled&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实现了sdk中完整的发送消息的流程</p><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210608005229195.png" alt="image-20210608005229195"></p><p>调用批量发送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">function TIMManager() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        Java.choose(&quot;com.tencent.imsdk.TIMManager&quot;, &#123;</span><br><span class="line">            onMatch: function (ins) &#123;</span><br><span class="line">                console.log(&quot;found ins &#x3D;&gt; &quot;, ins)</span><br><span class="line">                console.log(&quot;found ins.getNetworkStatus() &#x3D;&gt; &quot;, ins.getNetworkStatus())</span><br><span class="line">                console.log(&quot;found ins.getSdkConfig() &#x3D;&gt; &quot;, ins.getSdkConfig())</span><br><span class="line">                &#x2F;&#x2F; console.log(&quot;found ins.getUserConfig() &#x3D;&gt; &quot;, ins.getUserConfig())  看不到内容可以通过r0trace的inspectObject单独看</span><br><span class="line">                &#x2F;&#x2F; var output &#x3D; &quot;&quot;;</span><br><span class="line">                &#x2F;&#x2F; output &#x3D; inspectObject(ins.getUserConfig(), output);</span><br><span class="line">                &#x2F;&#x2F; console.log(output)</span><br><span class="line">                console.log(&quot;found ins.getConversationList() &#x3D;&gt; &quot;, ins.getConversationList())</span><br><span class="line">                console.log(&quot;found ins.getConversationList() &#x3D;&gt; &quot;, ins.getConversationList().toString())</span><br><span class="line">                console.log(&quot;found ins.getConversationList() &#x3D;&gt; &quot;, JSON.stringify(ins.getConversationList()))</span><br><span class="line"></span><br><span class="line">                var iter &#x3D; ins.getConversationList().listIterator();</span><br><span class="line">                while (iter.hasNext()) &#123;</span><br><span class="line">                    console.log(iter.next());</span><br><span class="line">                    if (iter.next() !&#x3D; null) &#123;</span><br><span class="line">                        var TIMConversation &#x3D; Java.cast(iter.next(), Java.use(&quot;com.tencent.imsdk.TIMConversation&quot;))</span><br><span class="line">                        console.log(TIMConversation.getPeer());</span><br><span class="line">                        &#x2F;&#x2F; if (TIMConversation.getPeer().toString().indexOf(&quot;209509&quot;) &gt;&#x3D; 0) &#123;</span><br><span class="line">                        console.log(&quot;try send message...&quot;)</span><br><span class="line"></span><br><span class="line">                        &#x2F;&#x2F;构造一条消息</span><br><span class="line">                        var msg &#x3D; Java.use(&quot;com.tencent.imsdk.TIMMessage&quot;).$new();</span><br><span class="line">                        &#x2F;&#x2F;添加文本内容</span><br><span class="line">                        var elem &#x3D; Java.use(&quot;com.tencent.imsdk.TIMTextElem&quot;).$new();</span><br><span class="line">                        elem.setText(&quot;cpdd 你是唯一 问我是谁 codewj&quot;);</span><br><span class="line">                        &#x2F;&#x2F;将elem添加到消息</span><br><span class="line">                        msg.addElement(elem)</span><br><span class="line"></span><br><span class="line">                        const callback &#x3D; Java.registerClass(&#123;</span><br><span class="line">                            name: &#39;com.tencent.imsdk.TIMValueCallBackCallback&#39;,</span><br><span class="line">                            implements: [Java.use(&quot;com.tencent.imsdk.TIMValueCallBack&quot;)],</span><br><span class="line">                            methods: &#123;</span><br><span class="line">                                onError(i, str) &#123; console.log(&quot;send message failed. code: &quot; + i + &quot; errmsg: &quot; + str) &#125;,</span><br><span class="line">                                onSuccess(msg) &#123; console.log(&quot;SendMsg ok&quot;, +msg) &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        &#x2F;&#x2F;发送消息</span><br><span class="line">                        TIMConversation.sendMessage(msg, callback.$new())</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, onComplete: function () &#123;</span><br><span class="line">        console.log(&quot;search compeled&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/31/%E5%85%8B%E6%8B%89%E6%81%8B%E4%BA%BA%E4%BC%9A%E5%91%98%E5%88%B6%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210608202426.png" alt="微信图片_20210608202426"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>haydream收费直播间的取证分析</title>
      <link href="/2021/05/29/haydream%E6%94%B6%E8%B4%B9%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/"/>
      <url>/2021/05/29/haydream%E6%94%B6%E8%B4%B9%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><p><img src="/2021/05/29/haydream%E6%94%B6%E8%B4%B9%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210529115117279.png" alt="image-20210529115117279"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;FRIDA-DEXDump.git</span><br><span class="line">.&#x2F;fs1280arm64</span><br><span class="line">pyenv local 3.8.0</span><br><span class="line">python main.py   app保持最前端,开始脱壳</span><br><span class="line">python merge_dex.py .&#x2F;com.hay.dreamlover&#x2F; livedex   将脱壳后的dex反编译成java，推荐！！！</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Simp1er&#x2F;AndroidSec.git </span><br><span class="line">python dex2apk.py -a haydream.apk -i .&#x2F;com.hay.dreamlover -o output.apk   将脱壳后的dex重打包成apk</span><br></pre></td></tr></table></figure><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>charles-postern连接socks5启动vpn   发现任何一个页面只要连接代理或者vpn都无法访问请求</p><p><a href="https://mp.weixin.qq.com/s/UixExZkPWHJAT3jAD2sJJg" target="_blank" rel="noopener">某抢票app逆向续篇之干掉vpn抓包检测</a>  api有<code>java.net.NetworkInterface.getName(),android.net.ConnectivityManager</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.hay.dreamlover explore</span><br><span class="line">android hooking search classes networkinterface</span><br><span class="line">android hooking watch class java.net.NetworkInterface</span><br><span class="line">android hooking search classes connectivitymanager</span><br><span class="line">android hooking watch class android.net.ConnectivityManager</span><br><span class="line">android hooking watch class android.net.IConnectivityManager   进入页面后果然触发了这些方法，说明确实做了vpn检测</span><br><span class="line">android hooking watch class_method android.net.ConnectivityManager.getActiveNetworkInfo --dump-args --dump-backtrace --dump-return  打印调用栈，通过jadx查看LiveNetChecker,尝试使用frida脚本过这段代码逻辑</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;r0ysue&#x2F;r0capture.git</span><br><span class="line">python3 r0capture.py -U com.hay.dreamlover -v  先打开app后attach，log显示127.0.0.1和127.0.0.1通信，且所有内容都已经加密</span><br><span class="line">frida -U -f com.hay.dreamlover -l script.js -o out.txt</span><br><span class="line">python3 r0capture.py -U com.hay.dreamlover -v -w 3 延迟3秒</span><br></pre></td></tr></table></figure><p>使用带有kali nethunter底包的nexus 6p，开启ssh服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.0.104 默认密码toor</span><br><span class="line">jnettop  点开直播间，可以看到直播间地址和ip</span><br><span class="line">手机自制路由器，电脑插上网卡连接到虚拟机，nm-connection-editor，新加一个Wi-Fi,设置SSID，Mode设置Hotspot,Band设置B&#x2F;G(2.4 GHZ),Device选择wlan0,配置IPv4 Settings的Address,手机即可收到新wifi热点</span><br><span class="line">lsusb  查看设备型号</span><br><span class="line">wireshark  抓包</span><br></pre></td></tr></table></figure><h1 id="收费直播间分析"><a href="#收费直播间分析" class="headerlink" title="收费直播间分析"></a>收费直播间分析</h1><p>直播弹窗倒计时9s后强制退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.hay.dreamlover explore</span><br><span class="line">android hooking search classes Dialog</span><br><span class="line">android hooking search classes AlertDialog</span><br><span class="line">android hooking search classes PopupWindow</span><br><span class="line">android hooking watch class android.app.Dialog  --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class android.app.AlertDialog  --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method android.app.Dialog.show --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><blockquote><p>(agent) [8z3ukmteu2y] Called android.app.Dialog.show()<br>(agent) [8z3ukmteu2y] Backtrace:<br>        android.app.Dialog.show(Native Method)<br>        <strong>com.fanwe.lib.dialog.impl.SDDialogBase.show</strong>(SDDialogBase.java:337)<br>        com.fanwe.live.activity.room.LiveLayoutViewerExtendActivity.showScenePayJoinDialog(LiveLayoutViewerExtendActivity.java:618)<br>        com.fanwe.live.activity.room.LiveLayoutViewerExtendActivity.onScenePayViewerShowWhetherJoin(LiveLayoutViewerExtendActivity.java:516)<br>        com.fanwe.pay.LiveScenePayViewerBusiness.dealPayModelRoomInfoSuccess(LiveScenePayViewerBusiness.java:156)<br>        com.fanwe.live.activity.room.LiveLayoutViewerExtendActivity.onBsRequestRoomInfoSuccess(LiveLayoutViewerExtendActivity.java:111)<br>        com.fanwe.live.activity.room.LivePushViewerActivity.onBsRequestRoomInfoSuccess(LivePushViewerActivity.java:405)<br>        <strong>com.fanwe.live.business.LiveBusiness.onRequestRoomInfoSuccess</strong>(LiveBusiness.java:306)<br>        com.fanwe.live.business.LiveViewerBusiness.onRequestRoomInfoSuccess(LiveViewerBusiness.java:79)<br>        com.fanwe.live.business.LiveBusiness$2.onSuccess(LiveBusiness.java:257)<br>        com.fanwe.library.adapter.http.callback.SDRequestCallback.onSuccessInternal(SDRequestCallback.java:127)<br>        com.fanwe.library.adapter.http.callback.SDRequestCallback.notifySuccess(SDRequestCallback.java:175)<br>        com.fanwe.hybrid.http.AppHttpUtil$1.onSuccess(AppHttpUtil.java:105)<br>        com.fanwe.hybrid.http.AppHttpUtil$1.onSuccess(AppHttpUtil.java:74)<br>        org.xutils.http.HttpTask.onSuccess(HttpTask.java:447)<br>        org.xutils.common.task.TaskProxy$InternalHandler.handleMessage(TaskProxy.java:198)<br>        android.os.Handler.dispatchMessage(Handler.java:106)<br>        android.os.Looper.loop(Looper.java:164)<br>        android.app.ActivityThread.main(ActivityThread.java:6494)<br>        java.lang.reflect.Method.invoke(Native Method)<br>        com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)<br>        com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)</p><p>(agent) [8z3ukmteu2y] Return Value: (none)</p></blockquote><p>frida -UF -l trace.js -o hay.txt  打印了多个android.app.Dialog.show</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceClass(&quot;android.app.Dialog&quot;)</span><br></pre></td></tr></table></figure><p>结合jadx分析弹窗堆栈，实现逻辑可以干掉弹窗或者干掉倒计时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">android hooking search methods startCountDown</span><br><span class="line">android hooking watch class com.fanwe.pay.appview.PayLiveBlackBgView  进入直播间确实触发了该方法</span><br><span class="line">android hooking watch class_method com.fanwe.pay.appview.PayLiveBlackBgView.startCountDown --dump-args --dump-backtrace --dump-return  </span><br><span class="line">android hooking list class_methods com.fanwe.lib.dialog.impl.SDDialogBase</span><br></pre></td></tr></table></figure><p>frida -UF -l hookVIP.js  破解收费直播间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;Entering hook&quot;)</span><br><span class="line">&#x2F;&#x2F; 干掉弹窗</span><br><span class="line">        Java.use(&quot;com.fanwe.lib.dialog.impl.SDDialogBase&quot;).show.implementation &#x3D; function()&#123;</span><br><span class="line">            console.log(&quot;hook show &quot;)</span><br><span class="line">        &#125;</span><br><span class="line">&#x2F;&#x2F; 设置倒计时</span><br><span class="line">        Java.use(&quot;com.fanwe.pay.appview.PayLiveBlackBgView&quot;).startCountDown.implementation &#x3D; function(x)&#123;</span><br><span class="line">            console.log(&quot;Calling countdown &quot;)</span><br><span class="line">            return this.startCountDown(1000*3600)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2021/05/29/haydream%E6%94%B6%E8%B4%B9%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210529165859370.png" alt="image-20210529165859370"></p><p>在  <strong>com.fanwe.live.business.LiveBusiness.onRequestRoomInfoSuccess</strong>类中大部分request都来自于CommonInterface类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.fanwe.live.common.CommonInterface  每进一个房间或下拉自动触发该类的方法</span><br><span class="line">android hooking watch class_method com.fanwe.live.common.CommonInterface.requestIndex --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method com.fanwe.live.common.CommonInterface.requestRoomInfo --dump-args --dump-backtrace --dump-return  进入直播间，log打印room_id</span><br><span class="line">plugin wallbreaker classdump --fullname com.fanwe.live.business.LiveBusiness$2</span><br><span class="line">android hooking search classes com.fanwe.live.business.LiveBusiness</span><br><span class="line">android hooking watch class com.fanwe.live.business.LiveBusiness</span><br></pre></td></tr></table></figure><blockquote><p>(agent) [2xhzmmkxx1r] Called com.fanwe.live.common.CommonInterface.requestIndex(int, int, int, java.lang.String, com.fanwe.hybrid.http.AppRequestCallback)</p><p>(agent) [2xhzmmkxx1r] Backtrace:<br>        com.fanwe.live.common.CommonInterface.requestIndex(Native Method)<br>        com.fanwe.live.appview.main.LiveTabHotView.requestData(LiveTabHotView.java:390)<br>        com.fanwe.live.appview.main.LiveTabHotView.onLoopRun(LiveTabHotView.java:382)<br>        com.fanwe.live.appview.main.LiveTabBaseView$1.run(LiveTabBaseView.java:116)<br>        com.fanwe.lib.looper.impl.SDSimpleLooper$1.handleMessage(SDSimpleLooper.java:54)<br>        android.os.Handler.dispatchMessage(Handler.java:106)<br>        android.os.Looper.loop(Looper.java:164)<br>        android.app.ActivityThread.main(ActivityThread.java:6494)<br>        java.lang.reflect.Method.invoke(Native Method)<br>        com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)<br>        com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)</p><p>(agent) [2xhzmmkxx1r] Arguments com.fanwe.live.common.CommonInterface.requestIndex(1, (none), (none), 热门, com.fanwe.live.appview.main.LiveTabHotView$4@89cbef4)<br>(agent) [2xhzmmkxx1r] Return Value: (none)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes SDResponse</span><br><span class="line">plugin wallbreaker classdump --fullname com.fanwe.library.adapter.http.model.SDResponse</span><br><span class="line">android hooking watch class_method com.fanwe.library.adapter.http.model.SDResponse.getDecryptedResult --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p>frida -UF -l requestIndex.js  主动调用获取房间列表和详情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">function hook() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var JSON &#x3D; Java.use(&quot;com.alibaba.fastjson.JSON&quot;)</span><br><span class="line">        var Index_indexActModel &#x3D; Java.use(&quot;com.fanwe.live.model.Index_indexActModel&quot;);</span><br><span class="line">        var gson &#x3D; Java.use(&quot;com.google.gson.Gson&quot;).$new();</span><br><span class="line">        var LiveRoomModel &#x3D; Java.use(&quot;com.fanwe.live.model.LiveRoomModel&quot;);</span><br><span class="line">        Java.use(&quot;com.fanwe.live.appview.main.LiveTabHotView$4&quot;).onSuccess.implementation &#x3D; function (resp) &#123;</span><br><span class="line">            console.log(&quot;Entering Room List Parser &#x3D;&gt; &quot;, resp)</span><br><span class="line">            var result &#x3D; resp.getDecryptedResult();</span><br><span class="line">            &#x2F;&#x2F; 转成json对象</span><br><span class="line">            var resultModel &#x3D; JSON.parseObject(result, Index_indexActModel.class);</span><br><span class="line">            &#x2F;&#x2F; json转成java对象，并调用getList方法</span><br><span class="line">            var roomList &#x3D; Java.cast(resultModel, Index_indexActModel).getList();</span><br><span class="line">            console.log(&quot;size : &quot;, roomList.size(), roomList.get(0))</span><br><span class="line">            for (var i &#x3D; 0; i &lt; roomList.size(); i++) &#123;</span><br><span class="line">                var LiveRoomModelInfo &#x3D; Java.cast(roomList.get(i), LiveRoomModel);</span><br><span class="line">                console.log(&quot;roominfo: &quot;, i, &quot; &quot;, gson.toJson(LiveRoomModelInfo));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return this.onSuccess(resp)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 主动调用</span><br><span class="line">function invoke()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.choose(&quot;com.fanwe.live.appview.main.LiveTabHotView&quot;,&#123;</span><br><span class="line">            onMatch:function(ins)&#123;</span><br><span class="line">                console.log(&quot;found ins &#x3D;&gt; &quot;,ins)</span><br><span class="line">                ins.requestData();</span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&quot;Search completed!&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main() &#123;</span><br><span class="line">    hook()</span><br><span class="line">    &#x2F;&#x2F; invoke()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="/2021/05/29/haydream%E6%94%B6%E8%B4%B9%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210529170029292.png" alt="image-20210529170029292"></p><p>frida -UF -l requestRoomInfo.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 遍历类所有的域</span><br><span class="line">function inspectObject(obj) &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        const Class &#x3D; Java.use(&quot;java.lang.Class&quot;);</span><br><span class="line">        const obj_class &#x3D; Java.cast(obj.getClass(), Class);</span><br><span class="line">        const fields &#x3D; obj_class.getDeclaredFields();</span><br><span class="line">        const methods &#x3D; obj_class.getMethods();</span><br><span class="line">        console.log(&quot;Inspecting &quot; + obj.getClass().toString());</span><br><span class="line">        console.log(&quot;\tFields:&quot;);</span><br><span class="line">        for (var i in fields)&#123;</span><br><span class="line">           &#x2F;&#x2F; console.log(&quot;\t\t&quot; + fields[i].toString());</span><br><span class="line">           var className &#x3D; obj_class.toString().trim().split(&quot; &quot;)[1] ;</span><br><span class="line">           &#x2F;&#x2F; console.log(&quot;className is &#x3D;&gt; &quot;,className);</span><br><span class="line">           var fieldName &#x3D; fields[i].toString().split(className.concat(&quot;.&quot;)).pop() ; </span><br><span class="line">           console.log(fieldName + &quot; &#x3D;&gt; &quot;,obj[fieldName].value);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; console.log(&quot;\tMethods:&quot;);</span><br><span class="line">        &#x2F;&#x2F; for (var i in methods)</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;\t\t&quot; + methods[i].toString());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打印调用结果的域及信息，类似wallbreaker</span><br><span class="line">function hookROOMinfo() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var JSON &#x3D; Java.use(&quot;com.alibaba.fastjson.JSON&quot;)</span><br><span class="line">        var gson &#x3D; Java.use(&quot;com.google.gson.Gson&quot;).$new();</span><br><span class="line">        var App_get_videoActModel &#x3D; Java.use(&quot;com.fanwe.live.model.App_get_videoActModel&quot;);</span><br><span class="line"></span><br><span class="line">        Java.use(&quot;com.fanwe.live.business.LiveBusiness$2&quot;).onSuccess.implementation &#x3D; function (resp) &#123;</span><br><span class="line">            console.log(&quot;Enter LiveBusiness$2 ... &quot;, resp)</span><br><span class="line">            var result &#x3D; resp.getDecryptedResult();</span><br><span class="line">            var resultVideoModel &#x3D; JSON.parseObject(result, App_get_videoActModel.class);</span><br><span class="line">            var roomDetail &#x3D; Java.cast(resultVideoModel, App_get_videoActModel);</span><br><span class="line">            console.log(&quot;room id is &#x3D;&gt; &quot;, roomDetail.getRoom_id());</span><br><span class="line">            inspectObject(roomDetail);</span><br><span class="line">            return this.onSuccess(resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/29/haydream%E6%94%B6%E8%B4%B9%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210529170418419.png" alt="image-20210529170418419"></p><p>当jadx找不到类的时候，说明脱壳没脱全，通过objection去内存即可搜刮wallbreak内存漫游。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 内存中捞不到类</span><br><span class="line">function invoke()&#123;</span><br><span class="line"></span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.choose(&quot;com.fanwe.live.business.LiveBusiness&quot;,&#123;</span><br><span class="line">            onMatch:function(ins)&#123;</span><br><span class="line">                console.log(&quot;found ins &#x3D;&gt; &quot;,ins)</span><br><span class="line">                &#x2F;&#x2F; ins.requestData();</span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&quot;Search completed!&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 自行调用构造函数创建类</span><br><span class="line">function invoke2()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; com.fanwe.live.business.LiveBusiness(ILiveActivity);</span><br><span class="line">        var ILiveActivity &#x3D; Java.use(&quot;com.fanwe.live.activity.room.ILiveActivity&quot;);</span><br><span class="line">&#x2F;&#x2F; 实现接口</span><br><span class="line">        const ILiveActivityImpl &#x3D; Java.registerClass(&#123;</span><br><span class="line">            name: &#39;com.fanwe.live.activity.room.ILiveActivityImpl&#39;,</span><br><span class="line">            implements: [ILiveActivity],</span><br><span class="line">            methods: &#123;</span><br><span class="line">                openSendMsg()&#123;&#125;,</span><br><span class="line">                getCreaterId()&#123;&#125;,</span><br><span class="line">                getGroupId()&#123;&#125;,</span><br><span class="line">                getRoomId()&#123;&#125;,</span><br><span class="line">                getRoomInfo()&#123;&#125;,</span><br><span class="line">                getSdkType()&#123;&#125;,</span><br><span class="line">                isAuctioning()&#123;&#125;,</span><br><span class="line">                isCreater()&#123;&#125;,</span><br><span class="line">                isPlayback()&#123;&#125;,</span><br><span class="line">                isPrivate()&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">        var result &#x3D; Java.use(&quot;com.fanwe.live.business.LiveBusiness&quot;).$new(ILiveActivityImpl.$new());</span><br><span class="line">        console.log(&quot;result is &#x3D;&gt; &quot;,result.requestRoomInfo(&quot;123454&quot;))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var LiveBusiness &#x3D; null ;</span><br><span class="line">console.log(&quot;LiveBusiness is &#x3D;&gt; &quot;, LiveBusiness)</span><br><span class="line">function hook3()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;com.fanwe.live.business.LiveBusiness&quot;).getLiveQualityData.implementation &#x3D; function()&#123;</span><br><span class="line">            LiveBusiness &#x3D; this;</span><br><span class="line">            console.log(&quot;now LiveBusiness is &#x3D;&gt; &quot;, LiveBusiness)</span><br><span class="line">            LiveBusiness.requestRoomInfo(&quot;12343&quot;);</span><br><span class="line">            var result &#x3D; this.getLiveQualityData()</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function invoke3()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var result &#x3D; LiveBusiness.requestRoomInfo(&quot;12343&quot;);</span><br><span class="line">        console.log(&quot;result is &#x3D;&gt; &quot;,result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function invoke4()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; com.fanwe.live.business.LiveBusiness(ILiveActivity);</span><br><span class="line">        var ILiveActivity &#x3D; Java.use(&quot;com.fanwe.live.activity.room.ILiveActivity&quot;);</span><br><span class="line"></span><br><span class="line">        const ILiveActivityImpl &#x3D; Java.registerClass(&#123;</span><br><span class="line">            name: &#39;com.fanwe.live.activity.room.ILiveActivityImpl&#39;,</span><br><span class="line">            implements: [ILiveActivity],</span><br><span class="line">            methods: &#123;</span><br><span class="line">                openSendMsg()&#123;&#125;,</span><br><span class="line">                getCreaterId()&#123;&#125;,</span><br><span class="line">                getGroupId()&#123;&#125;,</span><br><span class="line">                getRoomId()&#123;&#125;,</span><br><span class="line">                getRoomInfo()&#123;&#125;,</span><br><span class="line">                getSdkType()&#123;&#125;,</span><br><span class="line">                isAuctioning()&#123;&#125;,</span><br><span class="line">                isCreater()&#123;&#125;,</span><br><span class="line">                isPlayback()&#123;&#125;,</span><br><span class="line">                isPrivate()&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">        var LB &#x3D; Java.use(&quot;com.fanwe.live.business.LiveBusiness&quot;).$new(ILiveActivityImpl.$new());</span><br><span class="line"></span><br><span class="line">        var LB2 &#x3D; Java.use(&quot;com.fanwe.live.business.LiveBusiness$2&quot;);</span><br><span class="line">        var AppRequestCallback &#x3D; Java.use(&#39;com.fanwe.hybrid.http.AppRequestCallback&#39;);</span><br><span class="line">        Java.use(&quot;com.fanwe.live.common.CommonInterface&quot;).requestRoomInfo(1377894,123,&quot;1234&quot;,Java.cast(LB2.$new(LB),AppRequestCallback));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function main() &#123;</span><br><span class="line">    hookROOMinfo();</span><br><span class="line">    hook3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="/2021/05/29/haydream%E6%94%B6%E8%B4%B9%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210529172252177.png" alt="image-20210529172252177"></p><p>以上hook2时无法返回数据，是因为roomId为空，获取room_id时发现getRoomId来自于一个接口ILiveInfo，可以通过该接口找到实现类，或者通过jadx的smali查看是不是确实为getRoomId。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking search methods getRoomId  全局搜索方法</span><br><span class="line">android hooking watch class_method com.fanwe.live.activity.room.LiveActivity.getRoomId --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/05/29/haydream%E6%94%B6%E8%B4%B9%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210530232624680.png" alt="image-20210530232624680"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">function hookROOMinfo() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var JSON &#x3D; Java.use(&quot;com.alibaba.fastjson.JSON&quot;)</span><br><span class="line">        var gson &#x3D; Java.use(&quot;com.google.gson.Gson&quot;).$new();</span><br><span class="line">        var App_get_videoActModel &#x3D; Java.use(&quot;com.fanwe.live.model.App_get_videoActModel&quot;);</span><br><span class="line"></span><br><span class="line">        Java.use(&quot;com.fanwe.live.business.LiveBusiness$2&quot;).onSuccess.implementation &#x3D; function (resp) &#123;</span><br><span class="line">            console.log(&quot;Enter LiveBusiness$2 ... &quot;, resp)</span><br><span class="line">            var result &#x3D; resp.getDecryptedResult();</span><br><span class="line">            var resultVideoModel &#x3D; JSON.parseObject(result, App_get_videoActModel.class);</span><br><span class="line">            var roomDetail &#x3D; Java.cast(resultVideoModel, App_get_videoActModel);</span><br><span class="line">            console.log(&quot;room id is &#x3D;&gt; &quot;, roomDetail.getRoom_id());</span><br><span class="line">            inspectObject(roomDetail);</span><br><span class="line">            return this.onSuccess(resp);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 直接主动调用，设置房间号</span><br><span class="line">        &#x2F;&#x2F; Java.use(&quot;com.fanwe.live.common.CommonInterface&quot;).requestRoomInfo.implementation &#x3D; function (roomid, vod, key, ins) &#123;</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;Calling common.CommonInterface.requestRoomInfo...&quot;)</span><br><span class="line">        &#x2F;&#x2F;     return this.requestRoomInfo(1379212, vod, key, ins);</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(&quot;com.fanwe.live.LiveInformation&quot;).getRoomId.implementation &#x3D; function()&#123;</span><br><span class="line">            console.log(&quot;calling com.fanwe.live.activity.room.LiveActivity.getRoomId ...&quot;)</span><br><span class="line">            return 1379212 ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;         com.fanwe.live.ILiveInfo.getRoomId</span><br><span class="line">        &#x2F;&#x2F; com.fanwe.live.LiveInformation.getRoomId</span><br><span class="line">        &#x2F;&#x2F; com.fanwe.live.activity.room.LiveActivity.getRoomId</span><br><span class="line">        &#x2F;&#x2F; com.fanwe.live.appview.room.RoomSelectFriendsView.getRoomId</span><br><span class="line">        &#x2F;&#x2F; com.fanwe.live.model.CreateLiveData.getRoomId</span><br><span class="line">        &#x2F;&#x2F; com.fanwe.live.model.JoinLiveData.getRoomId</span><br><span class="line">        &#x2F;&#x2F; com.fanwe.live.model.JoinPlayBackData.getRoomId</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l rquestRoomInfo.js  再次调用invoke2()实现房间详情抓取</p><blockquote><p>主动调用的原则：离数据越远，中间需要自己实现的细节就越多；哪个细节实现不对，APP就崩掉了。</p></blockquote><p>针对单个类AppHttpUtil找不到，使用<a href="https://github.com/hanbinglengyue/FART.git" target="_blank" rel="noopener">fart</a>可以脱单个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes AppHttpUtil</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hanbinglengyue&#x2F;FART.git</span><br><span class="line">adb push lib&#x2F;fart* &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">adb shell -&gt;cp fart* &#x2F;data&#x2F;app &amp;&amp; chmod 777</span><br><span class="line">frida -UF -l frida_fart_reflection.js</span><br><span class="line">dump(&quot;com.fanwe.hybrid.http.AppHttpUtil&quot;)</span><br><span class="line">adb pull &#x2F;sdcard&#x2F;6850924_22686.dex</span><br></pre></td></tr></table></figure><p>通过jadx-gui打开看不到源码，<code>file 6850924_22686.dex</code>是data格式，而非Dalvik dex格式。通过010 Editor打开该dex发现文件魔术字全是00 00 00 00 00 00 00 00, 查看正常dex文件头为64 65 78 0a 30 33 35 00，再次打开即可找到AppHttpUtil，可以看到拼接参数时用的标准的加密库。</p><p><img src="/2021/05/29/haydream%E6%94%B6%E8%B4%B9%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210529172701652.png" alt="image-20210529172701652"></p><p>使用沙箱安装该apk后查看/data/data/com.hay.dreamlover的加密文件数据，找到Cipher文件中base64定位加解密的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method com.fanwe.library.utils.MD5Util.MD5 --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p>通过vnc连接kali nethunter后启动wireshark抓包，保存为pcapng格式文件，使用电脑分析，找到最终发出去的包，发现通过本地端口转发出去，获取请求头参数后实现解密</p><p><img src="/2021/05/29/haydream%E6%94%B6%E8%B4%B9%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210530235438489.png" alt="image-20210530235438489"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">## Time: 2020-7-31 19:41:11</span><br><span class="line">## com.hay.dreamlover </span><br><span class="line"></span><br><span class="line">import requests, os,  time, sys</span><br><span class="line">from lxml import etree</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line">import threading</span><br><span class="line">import hashlib</span><br><span class="line">import base64</span><br><span class="line">from urllib import parse</span><br><span class="line"></span><br><span class="line"># import click</span><br><span class="line"># import frida</span><br><span class="line"># import logging</span><br><span class="line"># import traceback</span><br><span class="line"></span><br><span class="line">import base64</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line"># https:&#x2F;&#x2F;blog.csdn.net&#x2F;wangziyang777&#x2F;article&#x2F;details&#x2F;104982823</span><br><span class="line"></span><br><span class="line">## aes 加密&#x2F;解密</span><br><span class="line">class AESECB:</span><br><span class="line">    def __init__(self, key):</span><br><span class="line">        self.key &#x3D; key</span><br><span class="line">        self.mode &#x3D; AES.MODE_ECB</span><br><span class="line">        self.bs &#x3D; 16  # block size</span><br><span class="line">        self.PADDING &#x3D; lambda s: s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)</span><br><span class="line">    def encrypt(self, text):</span><br><span class="line">        generator &#x3D; AES.new(self.key, self.mode)  # ECB模式无需向量iv</span><br><span class="line">        crypt &#x3D; generator.encrypt(self.PADDING(text))</span><br><span class="line">        crypted_str &#x3D; base64.b64encode(crypt)</span><br><span class="line">        result &#x3D; crypted_str.decode()</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    def decrypt(self, text):</span><br><span class="line">        generator &#x3D; AES.new(self.key, self.mode)  # ECB模式无需向量iv</span><br><span class="line">        text +&#x3D; (len(text) % 4) * &#39;&#x3D;&#39;</span><br><span class="line">        decrpyt_bytes &#x3D; base64.b64decode(text)</span><br><span class="line">        meg &#x3D; generator.decrypt(decrpyt_bytes)</span><br><span class="line">        # 去除解码后的非法字符</span><br><span class="line">        try:</span><br><span class="line">            result &#x3D; re.compile(&#39;[\\x00-\\x08\\x0b-\\x0c\\x0e-\\x1f\n\r\t]&#39;).sub(&#39;&#39;, meg.decode())</span><br><span class="line">        except Exception:</span><br><span class="line">            result &#x3D; &#39;解码失败，请重试!&#39;</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#计算密码的md5值</span><br><span class="line">def get_md5(s):</span><br><span class="line">    md &#x3D; hashlib.md5()</span><br><span class="line">    md.update(s.encode(&#39;utf-8&#39;))</span><br><span class="line">    return md.hexdigest()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    aes &#x3D; AESECB(&#39;8648754518945235&#39;)</span><br><span class="line">    ctl &#x3D; &quot;index&quot;</span><br><span class="line">    act &#x3D; &quot;index&quot;</span><br><span class="line">    signqt &#x3D; get_md5(&quot;528094&amp;*3564695()&quot; + ctl + &quot;+_&quot; + act + &quot;@!@###@&quot;);</span><br><span class="line">    timeqt &#x3D; str(round(time.time() * 1000));</span><br><span class="line">    </span><br><span class="line">    headers &#x3D; &#123;&quot;X-JSL-API-AUTH&quot;:&quot;sha1|1596358731|VOI1X6448Y4f4E|fd941812d5b875b021f92cf2b0044552462d8cd9&quot;&#125;;</span><br><span class="line">    body &#x3D; &#123;&quot;screen_width&quot;:1080,</span><br><span class="line">            &quot;screen_height&quot;:1794,</span><br><span class="line">            &quot;sdk_type&quot;:&quot;android&quot;,</span><br><span class="line">            &quot;sdk_version_name&quot;:&quot;1.3.0&quot;,</span><br><span class="line">            &quot;sdk_version&quot;:2020031801,</span><br><span class="line">            &quot;xpoint&quot;:120.107042,</span><br><span class="line">            &quot;ypoint&quot;:30.302162,</span><br><span class="line">            &quot;ctl&quot;:ctl,</span><br><span class="line">            &quot;act&quot;:&quot;new_video&quot;,</span><br><span class="line">            &quot;p&quot;:1,</span><br><span class="line">            &quot;signqt&quot;:signqt,</span><br><span class="line">            &quot;timeqt&quot;:timeqt&#125;</span><br><span class="line">    requestData &#x3D; aes.encrypt(str(body));</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;hhy2.hhyssing.com:37462&#x2F;mapi&#x2F;index.php?requestData&#x3D;&quot; + requestData + &quot;i_type&#x3D;1&amp;ctl&#x3D;&quot; + ctl + &quot;&amp;act&#x3D;&quot; + act;</span><br><span class="line">    rsp &#x3D; requests.post(url, headers &#x3D; headers);</span><br><span class="line">    result &#x3D; json.loads(rsp.text).get(&quot;output&quot;);</span><br><span class="line">    decodeAes &#x3D; AESECB(&quot;7489148794156147&quot;);</span><br><span class="line">    print(decodeAes.decrypt(result));</span><br></pre></td></tr></table></figure><p>python r0capture.py -U com.hay.dreamlover -v -w 3 &gt;&gt; hay.txt  抓包进出直播间,查看请求</p><p>netstat -tuulp|grep hay  查看端口</p><p>adb forward tcp:37462 tcp:37462  将给本地发请求包转发到手机端的37462端口</p><p>nethunter 中wireshark抓lo包，本地对本地的包，因为app都是对本地请求，再转发到服务端(使用vnc viewer连接)</p><p>阿里游戏盾SDK的作用：</p><ul><li>防止抓包</li><li>隐藏真实的服务器地址，流量包二次</li><li>抗D</li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之搜索引擎结果分析</title>
      <link href="/2021/05/25/ElasticSearch%E4%B9%8B%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90/"/>
      <url>/2021/05/25/ElasticSearch%E4%B9%8B%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="search解析"><a href="#search解析" class="headerlink" title="_search解析"></a>_search解析</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 6,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 6,</span><br><span class="line">    &quot;successful&quot;: 6,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 10,</span><br><span class="line">    &quot;max_score&quot;: 1,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;.kibana&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;config&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;5.2.0&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;buildNum&quot;: 14695</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>took：整个搜索请求花费了多少毫秒</p><p>hits.total：本次搜索，返回了几条结果<br>hits.max_score：本次搜索的所有结果中，最大的相关度分数是多少，每一条document对于search的相关度，越相关，_score分数越大，排位越靠前<br>hits.hits：默认查询前10条数据，完整数据，_score降序排序</p><p>shards：shards fail的条件（primary和replica全部挂掉），不影响其他shard。默认情况下来说，一个搜索请求，会打到一个index的所有primary shard上去，当然了，每个primary shard都可能会有一个或多个replic shard，所以请求也可以到primary shard的其中一个replica shard上去。</p><p>timeout：默认无timeout，latency平衡completeness，手动指定timeout，timeout查询执行机制</p><p>timeout=10ms，timeout=1s，timeout=1m<br>GET /_search?timeout=10m</p><p><img src="/2021/05/25/ElasticSearch%E4%B9%8B%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90/image-20210526102317567.png" alt="image-20210526102317567"></p><h1 id="搜索模式解析"><a href="#搜索模式解析" class="headerlink" title="搜索模式解析"></a>搜索模式解析</h1><p>multi-index和multi-type搜索模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;_search：所有索引，所有type下的所有数据都搜索出来</span><br><span class="line">&#x2F;index1&#x2F;_search：指定一个index，搜索其下所有type的数据</span><br><span class="line">&#x2F;index1,index2&#x2F;_search：同时搜索两个index下的数据</span><br><span class="line">&#x2F;*1,*2&#x2F;_search：按照通配符去匹配多个索引</span><br><span class="line">&#x2F;index1&#x2F;type1&#x2F;_search：搜索一个index下指定的type的数据</span><br><span class="line">&#x2F;index1&#x2F;type1,type2&#x2F;_search：可以搜索一个index下多个type的数据</span><br><span class="line">&#x2F;index1,index2&#x2F;type1,type2&#x2F;_search：搜索多个index下的多个type的数据</span><br><span class="line">&#x2F;_all&#x2F;type1,type2&#x2F;_search：_all可以代表搜索所有index下的指定type的数据</span><br></pre></td></tr></table></figure><p><img src="/2021/05/25/ElasticSearch%E4%B9%8B%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90/image-20210526103022096.png" alt="image-20210526103022096"></p><ol><li><strong>exact value</strong></li></ol><p>2017-01-01，exact value，搜索的时候，必须输入2017-01-01，才能搜索出来，如果你输入一个01，是搜索不出来的</p><ol start="2"><li><strong>full text</strong><br>（1）缩写 vs. 全程：cn vs. china<br>（2）格式转化：like liked likes<br>（3）大小写：Tom vs tom<br>（4）同义词：like vs love</li></ol><p>2017-01-01，2017 01 01，搜索2017，或者01，都可以搜索出来<br>china，搜索cn，也可以将china搜索出来<br>likes，搜索like，也可以将likes搜索出来<br>Tom，搜索tom，也可以将Tom搜索出来<br>like，搜索love，同义词，也可以将like搜索出来</p><p>就不是说单纯的只是匹配完整的一个值，而是可以对值进行拆分词语后（分词）进行匹配，也可以通过缩写、时态、大小写、同义词等进行匹配。</p><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a><strong>倒排索引</strong></h2><p>doc1：I really liked my small dogs, and I think my mom also liked them.<br>doc2：He never liked any dogs, so I hope that my mom will not expect me to liked him.</p><p>mother like little dog，不可能有任何结果</p><p>normalization，建立倒排索引的时候，会执行一个操作，也就是说对拆分出的各个单词进行相应的处理，以提升后面搜索的时候能够搜索到相关联的文档的概率，包括时态的转换，单复数的转换，同义词的转换，大小写的转换。</p><table><thead><tr><th>word</th><th>doc1</th><th>doc2</th></tr></thead><tbody><tr><td>I</td><td>*</td><td>*</td></tr><tr><td>really</td><td>*</td><td></td></tr><tr><td>like</td><td>*</td><td>*</td></tr><tr><td>my</td><td>*</td><td>*</td></tr><tr><td>little</td><td>*</td><td></td></tr><tr><td>dog</td><td>*</td><td>*</td></tr><tr><td>and</td><td>*</td><td></td></tr><tr><td>think</td><td>*</td><td></td></tr><tr><td>mom</td><td>*</td><td>*</td></tr><tr><td>also</td><td>*</td><td></td></tr><tr><td>them</td><td>*</td><td></td></tr><tr><td>He</td><td></td><td>*</td></tr><tr><td>never</td><td></td><td>*</td></tr><tr><td>any</td><td></td><td>*</td></tr><tr><td>so</td><td></td><td>*</td></tr><tr><td>hope</td><td></td><td>*</td></tr><tr><td>that</td><td></td><td>*</td></tr><tr><td>will</td><td></td><td>*</td></tr><tr><td>not</td><td></td><td>*</td></tr><tr><td>expect</td><td></td><td>*</td></tr><tr><td>me</td><td></td><td>*</td></tr><tr><td>to</td><td></td><td>*</td></tr><tr><td>him</td><td></td><td>*</td></tr></tbody></table><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><p>切分词语，normalization（提升recall召回率），将句子拆分成一个一个的单个的单词，同时对每个单词进行normalization（时态转换，单复数转换），分词器。</p><blockquote><p>recall召回率：搜索的时候，增加能够搜索到的结果的数量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">character filter：在一段文本进行分词之前，先进行预处理，比如说最常见的就是，过滤html标签（&lt;span&gt;hello&lt;span&gt; --&gt; hello），&amp; --&gt; and（I&amp;you --&gt; I and you）</span><br><span class="line">tokenizer：分词，hello you and me --&gt; hello, you, and, me</span><br><span class="line">token filter：lowercase，stop word，synonymom，dogs --&gt; dog，liked --&gt; like，Tom --&gt; tom，a&#x2F;the&#x2F;an --&gt; 干掉，mother --&gt; mom，small --&gt; little</span><br></pre></td></tr></table></figure><h3 id="内置分词器"><a href="#内置分词器" class="headerlink" title="内置分词器"></a>内置分词器</h3><p>Set the shape to semi-transparent by calling set_trans(5)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">standard analyzer：set, the, shape, to, semi, transparent, by, calling, set_trans, 5（默认的是standard）</span><br><span class="line">simple analyzer：set, the, shape, to, semi, transparent, by, calling, set, trans</span><br><span class="line">whitespace analyzer：Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</span><br><span class="line">language analyzer（特定的语言的分词器，比如说，english，英语分词器）：set, shape, semi, transpar, call, set_tran, 5</span><br></pre></td></tr></table></figure><h1 id="分页搜索"><a href="#分页搜索" class="headerlink" title="分页搜索"></a>分页搜索</h1><h2 id="es进行分页搜索"><a href="#es进行分页搜索" class="headerlink" title="es进行分页搜索"></a>es进行分页搜索</h2><p>size，from</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_search?size&#x3D;10</span><br><span class="line">GET &#x2F;_search?size&#x3D;10&amp;from&#x3D;0</span><br><span class="line">GET &#x2F;_search?size&#x3D;10&amp;from&#x3D;20</span><br><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;_search  总共有9条</span><br><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;_search?from&#x3D;0&amp;size&#x3D;3  将这9条数据分成3页，每一页是3条数据</span><br><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;_search?from&#x3D;3&amp;size&#x3D;3  </span><br><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;_search?from&#x3D;6&amp;size&#x3D;3</span><br></pre></td></tr></table></figure><h2 id="deep-paging"><a href="#deep-paging" class="headerlink" title="deep paging"></a>deep paging</h2><p><img src="/2021/05/25/ElasticSearch%E4%B9%8B%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90/image-20210526105008431.png" alt="image-20210526105008431"></p><h1 id="query-string"><a href="#query-string" class="headerlink" title="query string"></a>query string</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;_search?q&#x3D;test_field:test   包含</span><br><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;_search?q&#x3D;+test_field:test   包含</span><br><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;_search?q&#x3D;-test_field:test  不包含</span><br><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;_search?q&#x3D;test  直接可以搜索所有的field，任意一个field包含指定的关键字就可以搜索出来</span><br></pre></td></tr></table></figure><p>es中的_all元数据，在建立索引的时候，我们插入一条document，它里面包含了多个field，此时，es会自动将多个field的值，全部用字符串的方式串联起来，变成一个长的字符串，作为_all field的值，同时建立索引，后面如果在搜索的时候，没有对某个field指定搜索，就默认搜索_all field，其中是包含了所有field的值的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;jack&quot;,</span><br><span class="line">  &quot;age&quot;: 26,</span><br><span class="line">  &quot;email&quot;: &quot;jack@sina.com&quot;,</span><br><span class="line">  &quot;address&quot;: &quot;guamgzhou&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>jack 26 jack@sina.com guangzhou</code>，作为这一条document的_all field的值，同时进行分词后建立对应的倒排索引</p><h1 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h1><p>插入几条数据，让es自动为我们建立一个索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;website&#x2F;article&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;post_date&quot;: &quot;2017-01-01&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;my first article&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this is my first article in this website&quot;,</span><br><span class="line">  &quot;author_id&quot;: 11400</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;website&#x2F;article&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;post_date&quot;: &quot;2017-01-02&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;my second article&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this is my second article in this website&quot;,</span><br><span class="line">  &quot;author_id&quot;: 11400</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;website&#x2F;article&#x2F;3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;post_date&quot;: &quot;2017-01-03&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;my third article&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this is my third article in this website&quot;,</span><br><span class="line">  &quot;author_id&quot;: 11400</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;website&#x2F;article&#x2F;_search?q&#x3D;20173条结果             </span><br><span class="line">GET &#x2F;website&#x2F;article&#x2F;_search?q&#x3D;2017-01-01        3条结果</span><br><span class="line">GET &#x2F;website&#x2F;article&#x2F;_search?q&#x3D;post_date:2017-01-01   1条结果</span><br><span class="line">GET &#x2F;website&#x2F;article&#x2F;_search?q&#x3D;post_date:2017         1条结果</span><br></pre></td></tr></table></figure><p>dynamic mapping，自动为我们建立index，创建type，以及type对应的mapping，mapping中包含了每个field对应的数据类型，以及如何分词等设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;website&#x2F;_mapping&#x2F;article</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;website&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;article&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;author_id&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;long&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;content&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;post_date&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;date&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;title&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为es自动建立mapping的时候，设置了不同的field不同的data type。不同的data type的分词、搜索等行为是不一样的。所以出现了_all field和post_date field的搜索表现完全不一样。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造完美逆向和沙箱编译环境</title>
      <link href="/2021/05/22/%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8E%E9%80%86%E5%90%91%E5%92%8C%E6%B2%99%E7%AE%B1%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/05/22/%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8E%E9%80%86%E5%90%91%E5%92%8C%E6%B2%99%E7%AE%B1%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p>md5校验：CertUtil -hashfile ide-eval-resetter-2.1.13.jar MD5</p><p>apt install neofetch  显示系统信息</p><p>echo $SHELL  查看终端</p><p>pyenv versions</p><p>pyenv install –list </p><p>htop jnettop iotop</p><p>010 Editor-Template Repository-Executable  选择指定文件格式解析</p><p>无限续期：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先关闭软件：</span><br><span class="line">rm -rf ~&#x2F;.config&#x2F;SweetScape&#x2F;</span><br><span class="line">rm -rf ~&#x2F;.local&#x2F;share&#x2F;SweetScape&#x2F;</span><br></pre></td></tr></table></figure><p>8.1.0_r1  对应代号 OPM1.171019.011</p><p>wget <a href="https://dl.google.com/dl/android/aosp/bullhead-opm1.171019.011-factory-3be6fd1c.zip" target="_blank" rel="noopener">https://dl.google.com/dl/android/aosp/bullhead-opm1.171019.011-factory-3be6fd1c.zip</a></p><p>./flush-all.sh  如报错替换fastboot,<code>which fastboot</code></p><p>adb push n5x_nethunter /sdcard/</p><p>adb reboot bootloader</p><p>fastboot flash recovery nex_nethunter/twrp-3.3.0-0-bullhead.img  刷入SR5-SuperSU和nethunter-2020.3-bullhead-oreo-kalifs-full.zip</p><p>adb push /root/Android/Sdk/ndk/22.1.7171670/prebuilt/android-arm /data/local/tmp</p><p>./fs14248arm74</p><p>objection -g com.roysue.easyso1 explore</p><p>memory list modules</p><p>memory list exports libroysue.so  查看so的导出符号</p><p>./gdbserver 0.0.0.0:23946 –attach pid</p><p>hyper</p><p>gdb-multiarch</p><p>set arch arm<br>set arm fallback-mode thumb</p><p>target remote192.168.0.10:23946</p><p>info shared libroysue.so</p><p>b *0xcc7143f5</p><p>info break  打断点</p><p>c  执行下一个断点  </p><p>nexti   汇编级别下一步F8</p><p>n  源码级别下一步</p><p> <code>ctrl+shift+pageup</code>  选寄存器状态</p><p> `ctrl+shift+pagedown 选寄存器状态</p><h1 id="Nethunter-刷机"><a href="#Nethunter-刷机" class="headerlink" title="Nethunter 刷机"></a>Nethunter 刷机</h1></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objection </tag>
            
            <tag> frida </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>识货跳转淘宝时携带参数的实现</title>
      <link href="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>最近在电商业务的设计中要求像识货app一样实现选好型号尺寸之类的商品属性后，跳转到淘宝时携带这些参数帮助用户自行选中，如下图所示：</p><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/1.gif" alt="1"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>启动frida-server；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs128arm64</span><br></pre></td></tr></table></figure><ol start="2"><li>使用PKiD判断是否加壳；</li></ol><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514142311447.png" alt="image-20210514142311447"></p><ol start="3"><li>安装好识货app，由于没有加固，直接从AndroidMainfest.xml中拿到包名。jadx-gui *.apk 查看，<code>package=&quot;com.hupu.shihuo&quot;</code>找到包名；</li><li>hook点击事件获取触发的类<code>frida -UF -l hookEvent.js</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.2  该环境的frida版本为12.8.0</span><br><span class="line">frida --version</span><br></pre></td></tr></table></figure><ul><li>点击尺寸型号时，选择配色尺码触发事件</li></ul><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514151600873.png" alt="image-20210514151600873"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Google Pixel XL::识货]-&gt; [WatchEvent] onClick: cn.shihuo.modulelib.views.widget.easyrecyclerview.adapter.RecyclerArrayAdapter$3</span><br></pre></td></tr></table></figure><ul><li>选好型号后，点击立即购买触发事件</li></ul><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514180705310.png" alt="image-20210514180705310"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Google Pixel XL::识货]-&gt; [WatchEvent] onClick: com.module.shoes.view.DetailOfShoesBFragment$ab</span><br></pre></td></tr></table></figure><ul><li>点击担保购买，查看触发事件</li></ul><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514180413387.png" alt="image-20210514180413387"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Google Pixel XL::识货]-&gt; [WatchEvent] onClick: com.module.shoes.view.adapter.ChannelOfShoesAdapter$ViewHolder$a</span><br></pre></td></tr></table></figure><h1 id="内存漫游"><a href="#内存漫游" class="headerlink" title="内存漫游"></a>内存漫游</h1><h2 id="属性点击"><a href="#属性点击" class="headerlink" title="属性点击"></a>属性点击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class cn.shihuo.modulelib.views.widget.easyrecyclerview.adapter.RecyclerArrayAdapter$3 --dump-args --dump-backtrace --dump-return  对整个RecyclerArrayAdapter类进行hook第三个匿名内部类</span><br></pre></td></tr></table></figure><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514181543742.png" alt="image-20210514181543742"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobs list</span><br><span class="line">jobs kill o0jgr3f2i6j  拿到需要hook的方法后取消hook</span><br></pre></td></tr></table></figure><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514181631516.png" alt="image-20210514181631516"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch cn.shihuo.modulelib.views.widget.easyrecyclerview.adapter.RecyclerArrayAdapter$3  内存中搜索该匿名内部类</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x10117a  打印该内部类</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x10108a  查看该类中可能的实力对象ShoeStylesAdapter</span><br></pre></td></tr></table></figure><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514183208265.png" alt="image-20210514183208265"></p><p>以上的类中没有任何线索涉及到参数的传递或者请求的跳转。</p><h2 id="立即购买"><a href="#立即购买" class="headerlink" title="立即购买"></a>立即购买</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes DetailOfShoesBFragment$ab  内存中搜索DetailOfShoesBFragment内部类ab及涉及的方法</span><br><span class="line">android hooking list class_methods com.module.shoes.view.DetailOfShoesBFragment$ab  获取该类方法及参数类型</span><br></pre></td></tr></table></figure><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514183750256.png" alt="image-20210514183750256"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android heap search instances com.module.shoes.view.DetailOfShoesBFragment$ab  获取内存实例</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x10e5b6  将该实例dump出来</span><br><span class="line">plugin wallbreaker objectdump --fullname 0xe566  该实例中还有一个DetailOfShoesBFragment实例</span><br></pre></td></tr></table></figure><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514184004914.png" alt="image-20210514184004914"></p><p>在DetailOfShoesBFragment实例中，ShoeDetailSecondModel极有可能有关键性线索实现参数携带跳转。</p><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514184154847.png" alt="image-20210514184154847"></p><p>可是当我整个字符串拷贝下来时，发现连个taobao的毛都没看到，再次dump该实例，也没有什么重要线索。</p><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514184408667.png" alt="image-20210514184408667"></p><h2 id="担保购买"><a href="#担保购买" class="headerlink" title="担保购买"></a>担保购买</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android heap search instances com.module.shoes.view.adapter.ChannelOfShoesAdapter$ViewHolder$a  直接内存搜刮</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x20e57e</span><br></pre></td></tr></table></figure><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514184656425.png" alt="image-20210514184656425"></p><p>找到SupplierInfoModel类在jadx看源码是有一些关键性字段的，如price,href等。</p><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514184804153.png" alt="image-20210514184804153"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectdump --fullname 0x20e512</span><br></pre></td></tr></table></figure><p><img src="/2021/05/14/%E8%AF%86%E8%B4%A7%E8%B7%B3%E8%BD%AC%E6%B7%98%E5%AE%9D%E6%97%B6%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20210514184924234.png" alt="image-20210514184924234"></p><p>将这段href拷贝下来，解码后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shihuo:&#x2F;&#x2F;www.shihuo.cn?route&#x3D;go&amp;goods_product_id&#x3D;12331971&amp;tpExtra&#x3D;&#123;&quot;dgReqId&quot;:&quot;TTfc4jvaelao00&quot;,&quot;fReqId&quot;:&quot;93E867875BE612E72CAF39F223AF0C08&quot;,&quot;fTp&quot;:&quot;list:list:1&quot;,&quot;fTpName&quot;:&quot;&quot;,&quot;ffTp&quot;:&quot;home:feed_list:1&quot;,&quot;ffTpName&quot;:&quot;推荐&quot;,&quot;layer&quot;:&quot;2&quot;,&quot;sc&quot;:&quot;HOME_FEED_RECOMMEND_RANK&quot;,&quot;si&quot;:&quot;1001&quot;,&quot;skc&quot;:&quot;1683465&quot;,&quot;sourceTp&quot;:&quot;home:feed_list:1&quot;,&quot;sourceTpName&quot;:&quot;推荐&quot;,&quot;style_id&quot;:&quot;6459093&quot;,&quot;supplier_id&quot;:&quot;8234343&quot;&#125;&amp;url&#x3D;https:&#x2F;&#x2F;item.taobao.com&#x2F;item.htm?id&#x3D;643291979969&amp;skuId&#x3D;4798775291256&amp;dspm&#x3D;46e625b0904faa9c&amp;fromShType&#x3D;1&amp;goodsType&#x3D;4&amp;openType&#x3D;1&amp;shopId&#x3D;cn.taobao.62301187&amp;category_type&#x3D;1&amp;goods_id&#x3D;13#&#123;&quot;from&quot;:&quot;shihuo:&#x2F;&#x2F;www.shihuo.cn?route&#x3D;goodsDetail&quot;,&quot;block&quot;:&quot;Supplier&quot;,&quot;tp&quot;:&quot;Supplier&quot;,&quot;sku_id&quot;:88366767,&quot;extra&quot;:&quot;2&quot;,&quot;dspm&quot;:&quot;46e625b0904faa9c&quot;,&quot;pos_type&quot;:2,&quot;goods_id&quot;:&quot;13&quot;,&quot;supplier_id&quot;:&quot;8234343&quot;,&quot;style_id&quot;:&quot;6459093&quot;,&quot;size&quot;:&quot;41&quot;,&quot;price&quot;:&quot;1002&quot;,&quot;sort&quot;:&quot;2&quot;,&quot;filter&quot;:&quot;0000000&quot;,&quot;is_recommend&quot;:0,&quot;goods_sku_id&quot;:12331971&#125;</span><br></pre></td></tr></table></figure><p>很明显这段是识货自行封装的协议，后面参数<code>url=</code>应该就是跳转到淘宝的链接。</p><p>将<code>https://item.taobao.com/item.htm?id=643291979969&amp;skuId=4798775291256&amp;dspm=46e625b0904faa9c&amp;fromShType=1&amp;goodsType=4&amp;openType=1&amp;shopId=cn.taobao.62301187&amp;category_type=1&amp;goods_id=13#{&quot;from&quot;:&quot;shihuo://www.shihuo.cn?route=goodsDetail&quot;,&quot;block&quot;:&quot;Supplier&quot;,&quot;tp&quot;:&quot;Supplier&quot;,&quot;sku_id&quot;:88366767,&quot;extra&quot;:&quot;2&quot;,&quot;dspm&quot;:&quot;46e625b0904faa9c&quot;,&quot;pos_type&quot;:2,&quot;goods_id&quot;:&quot;13&quot;,&quot;supplier_id&quot;:&quot;8234343&quot;,&quot;style_id&quot;:&quot;6459093&quot;,&quot;size&quot;:&quot;41&quot;,&quot;price&quot;:&quot;1002&quot;,&quot;sort&quot;:&quot;2&quot;,&quot;filter&quot;:&quot;0000000&quot;,&quot;is_recommend&quot;:0,&quot;goods_sku_id&quot;:12331971}</code>链接拷贝到手机浏览器中自动跳转到淘宝，点击选项时加上了选择条件。</p><p>逐步删除条件，最终得到<code>https://item.taobao.com/item.htm?id=643291979969&amp;skuId=4798775291256&amp;fromShType=1&amp;goodsType=4&amp;openType=1&amp;shopId=cn.taobao.62301187&amp;category_type=1&amp;goods_id=13</code>,一旦删除skuId将不能携带型号等属性自动选择。</p><h1 id="真相"><a href="#真相" class="headerlink" title="真相"></a>真相</h1><p>淘宝的skuId就是将信息同步到淘宝，淘宝将自动选中用户在识货选中的条件。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objection </tag>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之分布式特性</title>
      <link href="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/"/>
      <url>/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><blockquote><p>Elasticsearch是一套分布式的系统，分布式是为了应对大数据量，隐藏了复杂的分布式机制，实现了分片机制(数据插入分配不同的shard中)，集群发现机制(启动多个es进程自动发现集群并加入且接受部分数据当做副本)，shard负载均衡机制(增减节点时，多节点条件下es自动进行均匀分配，保持每个节点均衡读写负载请求)，shard副本机制(请求路由，集群扩容，shard重分配)。master节点实现创建或删除索引，增加或删除节点。节点对等，每个节点都能接收所有的请求，自动请求路由，响应收集。</p></blockquote><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210525152751946.png" alt="image-20210525152751946"></p><p>ES就是一个分布式的文档数据存储系统。</p><ul><li>文档数据：es可以存储和操作json文档类型的数据，而且这也是es的核心数据结构。</li><li>存储系统：es可以对json文档类型的数据进行存储，查询，创建，更新，删除，等等操作。其实ES满足了这些功能，就可以说已经是一个NoSQL的存储系统了。</li></ul><p>场景：</p><ul><li>数据量较大，es的分布式本质，可以帮助你快速进行扩容，承载大量数据</li><li>数据结构灵活多变，随时可能会变化，而且数据结构之间的关系，非常复杂，如果我们用传统数据库，那是不是很坑，因为要面临大量的表</li><li>对数据的相关操作，较为简单，比如就是一些简单的增删改查，用我们之前讲解的那些document操作就可以搞定</li><li>NoSQL数据库，适用的也是类似于上面的这种场景</li></ul><h2 id="shard-amp-replica机制"><a href="#shard-amp-replica机制" class="headerlink" title="shard&amp;replica机制"></a>shard&amp;replica机制</h2><ol><li>index包含多个shard</li><li>每个shard都是一个最小工作单元，承载部分数据，lucene实例，完整的建立索引和处理请求的能力</li><li>增减节点时，shard会自动在nodes中负载均衡,6个节点，7个shard，其中一个节点2个shard,进入新节点时，自动将shard负载均匀分配到所有节点。</li><li>primary shard和replica shard，每个document肯定只存在于某一个primary shard以及其对应的replica shard中，不可能存在于多个primary shard</li><li>replica shard是primary shard的副本，负责容错，以及承担读请求负载</li><li>primary shard的数量在创建索引的时候就固定了，replica shard的数量可以随时修改</li><li>primary shard的默认数量是5，replica默认是1，默认有10个shard，5个primary shard，5个replica shard</li><li>primary shard不能和自己的replica shard放在同一个节点上（否则节点宕机，primary shard和副本都丢失，起不到容错的作用），但是可以和其他primary shard的replica shard放在同一个节点上</li></ol><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/shard&replica%E6%9C%BA%E5%88%B6%E5%86%8D%E6%AC%A1%E6%A2%B3%E7%90%86.png" alt="shard&amp;replica机制再次梳理"></p><h2 id="单node创建index"><a href="#单node创建index" class="headerlink" title="单node创建index"></a>单node创建index</h2><ol><li>单node环境下，创建一个index，有3个primary shard，3个replica shard</li><li>集群status是yellow</li><li>这个时候，只会将3个primary shard分配到仅有的一个node上去，另外3个replica shard是无法分配的</li><li>集群可以正常工作，但是一旦出现节点宕机，数据全部丢失，而且集群不可用，无法承接任何请求</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index</span><br><span class="line">&#123;</span><br><span class="line">   &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;number_of_shards&quot; : 3,</span><br><span class="line">      &quot;number_of_replicas&quot; : 1</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双node分配shard"><a href="#双node分配shard" class="headerlink" title="双node分配shard"></a>双node分配shard</h2><ol><li>replica shard分配：master(3个primary shard)，slave(3个replica shard)，新增1个node</li><li>primary ---&gt; replica同步</li><li>读请求：primary/replica</li></ol><h2 id="横向扩容"><a href="#横向扩容" class="headerlink" title="横向扩容"></a>横向扩容</h2><ol><li>primary&amp;replica自动负载均衡，6个shard，3 primary，3 replica</li><li>每个node有更少的shard，IO/CPU/Memory资源给每个shard分配更多，每个shard性能更好</li><li>扩容的极限，6个shard（3 primary，3 replica），最多扩容到6台机器，每个shard可以占用单台服务器的所有资源，性能最好</li><li>超出扩容极限，动态修改replica数量，9个shard（3primary，6 replica），扩容到9台机器，比3台机器时，拥有3倍的读吞吐量</li><li>3台机器下，9个shard（3 primary，6 replica），资源更少，但是容错性更好，最多容纳2台机器宕机，6个shard只能容纳0台机器宕机</li></ol><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210514171113961.png" alt="image-20210514171113961"></p><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/%E6%89%A9%E5%AE%B9%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90.png" alt="扩容过程分析"></p><h2 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h2><ol><li>9 shard，3 node</li><li>master node宕机，自动master选举，red</li><li>replica容错：新master将replica提升为primary shard，yellow</li><li>重启宕机node，master copy replica到该node，使用原有的shard并同步宕机后的修改，green</li></ol><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210514192317121.png" alt="image-20210514192317121"></p><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_indx&#x2F;test_type&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_content&quot;: &quot;test test&quot;</span><br><span class="line">&#125;</span><br><span class="line">GET  &#x2F;test_indx&#x2F;test_type&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;test_content&quot;: &quot;test test&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>_index元数据</li></ol><p>（1）代表一个document存放在哪个index中<br>（2）类似的数据放在一个索引，非类似的数据放不同索引：product index（包含了所有的商品），sales index（包含了所有的商品销售数据），inventory index（包含了所有库存相关的数据）。如果你把比如product，sales，human resource（employee），全都放在一个大的index里面，比如说company index，不合适的。<br>（3）index中包含了很多类似的document：类似是什么意思，其实指的就是说，这些document的fields很大一部分是相同的，你说你放了3个document，每个document的fields都完全不一样，这就不是类似了，就不太适合放到一个index里面去了。<br>（4）索引名称必须是小写的，不能用下划线开头，不能包含逗号：product，website，blog</p><ol start="2"><li>_type元数据</li></ol><p>（1）代表document属于index中的哪个类别（type）<br>（2）一个索引通常会划分为多个type，逻辑上对index中有些许不同的几类数据进行分类：因为一批相同的数据，可能有很多相同的fields，但是还是可能会有一些轻微的不同，可能会有少数fields是不一样的，举个例子，就比如说，商品，可能划分为电子商品，生鲜商品，日化商品，等等。<br>（3）type名称可以是大写或者小写，但是同时不能用下划线开头，不能包含逗号</p><ol start="3"><li>_id元数据</li></ol><p>（1）代表document的唯一标识，与index和type一起，可以唯一标识和定位一个document<br>（2）我们可以手动指定document的id（put /index/type/id），也可以不指定，由es自动为我们创建一个id</p><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210514193728892.png" alt="image-20210514193728892"></p><h2 id="document-id"><a href="#document-id" class="headerlink" title="document_id"></a>document_id</h2><ol><li>手动指定document id</li></ol><p>一般来说，是从某些其他的系统中，导入一些数据到es时，会采取这种方式，就是使用系统中已有数据的唯一标识，作为es中document的id。举个例子，比如说，我们现在在开发一个电商网站，做搜索功能，或者是OA系统，做员工检索功能。这个时候，数据首先会在网站系统或者IT系统内部的数据库中，会先有一份，此时就肯定会有一个数据库的primary key（自增长，UUID，或者是业务编号）。如果将数据导入到es中，此时就比较适合采用数据在数据库中已有的primary key。</p><p>如果说，我们是在做一个系统，这个系统主要的数据存储就是es一种，也就是说，数据产生出来以后，可能就没有id，直接就放es一个存储，那么这个时候，可能就不太适合说手动指定document id的形式了，因为你也不知道id应该是什么，此时可以采取下面要讲解的让es自动生成id的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_content&quot;: &quot;my test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>自动生成document id</li></ol><p>（1）post /index/type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;test_index&#x2F;test_type</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_content&quot;: &quot;my test&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;AVp4RN0bhjxldOOnBxaE&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）自动生成的id，长度为20个字符，URL安全，base64编码，GUID，分布式系统并行生成时不可能会发生冲突</p><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210514194511913.png" alt="image-20210514194511913"></p><h2 id="source"><a href="#source" class="headerlink" title="_source"></a>_source</h2><p>_source元数据：就是说，我们在创建一个document的时候，使用的那个放在request body中的json串，默认情况下，在get的时候，会原封不动的给我们返回回来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">put &#x2F;test_index&#x2F;test_type&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field1&quot;: &quot;test field1&quot;,</span><br><span class="line">  &quot;test_field2&quot;: &quot;test field2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get &#x2F;test_index&#x2F;test_type&#x2F;1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;: 2,</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;test_field1&quot;: &quot;test field1&quot;,</span><br><span class="line">    &quot;test_field2&quot;: &quot;test field2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定制返回的结果，指定_source中，返回哪些field,<code>GET /test_index/test_type/1?_source=test_field1,test_field2</code></p><h2 id="批量查询"><a href="#批量查询" class="headerlink" title="批量查询"></a>批量查询</h2><p>就是一条一条的查询，比如说要查询100条数据，那么就要发送100次网络请求，这个开销还是很大的<br>如果进行批量查询的话，查询100条数据，就只要发送1次网络请求，网络请求的性能开销缩减100倍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;1</span><br><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;2</span><br><span class="line">GET &#x2F;_mget            mget批量查询</span><br><span class="line">&#123;</span><br><span class="line">   &quot;docs&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">         &quot;_type&quot; :  &quot;test_type&quot;,</span><br><span class="line">         &quot;_id&quot; :    1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">         &quot;_type&quot; :  &quot;test_type&quot;,</span><br><span class="line">         &quot;_id&quot; :    2</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">GET &#x2F;test_index&#x2F;_mget      查询的document是一个index下的不同type</span><br><span class="line">&#123;</span><br><span class="line">   &quot;docs&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_type&quot; :  &quot;test_type&quot;,</span><br><span class="line">         &quot;_id&quot; :    1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_type&quot; :  &quot;test_type&quot;,</span><br><span class="line">         &quot;_id&quot; :    2</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;_mget  查询的数据都在同一个index下的同一个type</span><br><span class="line">&#123;</span><br><span class="line">   &quot;ids&quot;: [1, 2]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以说mget是很重要的，一般来说，在进行查询的时候，如果一次性要查询多条数据的话，那么一定要用batch批量操作的api，尽可能减少网络开销次数，可能可以将性能提升数倍，甚至数十倍。</p><h2 id="bulk批量增删改"><a href="#bulk批量增删改" class="headerlink" title="bulk批量增删改"></a>bulk批量增删改</h2><p>bulk api对json的语法，有严格的要求，每个json串不能换行，只能放一行，同时一个json串和一个json串之间，必须有一个换行</p><ol><li>delete：删除一个文档，只要1个json串就可以了</li><li>create：PUT /index/type/id/_create，强制创建</li><li>index：普通的put操作，可以是创建文档，也可以是全量替换文档</li><li>update：执行的partial update操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;_bulk</span><br><span class="line">&#123; &quot;delete&quot;: &#123; &quot;_index&quot;: &quot;test_index&quot;, &quot;_type&quot;: &quot;test_type&quot;, &quot;_id&quot;: &quot;3&quot; &#125;&#125; </span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;test_index&quot;, &quot;_type&quot;: &quot;test_type&quot;, &quot;_id&quot;: &quot;12&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;test_field&quot;:    &quot;test12&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;:  &#123; &quot;_index&quot;: &quot;test_index&quot;, &quot;_type&quot;: &quot;test_type&quot;, &quot;_id&quot;: &quot;2&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;test_field&quot;:    &quot;replaced test2&quot; &#125;</span><br><span class="line">&#123; &quot;update&quot;: &#123; &quot;_index&quot;: &quot;test_index&quot;, &quot;_type&quot;: &quot;test_type&quot;, &quot;_id&quot;: &quot;1&quot;, &quot;_retry_on_conflict&quot; : 3&#125; &#125;</span><br><span class="line">&#123; &quot;doc&quot; : &#123;&quot;test_field2&quot; : &quot;bulk test1&quot;&#125; &#125;</span><br></pre></td></tr></table></figure><p>bulk操作中，任意一个操作失败，是不会影响其他的操作的，但是在返回结果里，会告诉你异常日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;test_index&#x2F;_bulk</span><br><span class="line">&#123; &quot;delete&quot;: &#123; &quot;_type&quot;: &quot;test_type&quot;, &quot;_id&quot;: &quot;3&quot; &#125;&#125; </span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_type&quot;: &quot;test_type&quot;, &quot;_id&quot;: &quot;12&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;test_field&quot;:    &quot;test12&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;:  &#123; &quot;_type&quot;: &quot;test_type&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;test_field&quot;:    &quot;auto-generate id test&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;:  &#123; &quot;_type&quot;: &quot;test_type&quot;, &quot;_id&quot;: &quot;2&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;test_field&quot;:    &quot;replaced test2&quot; &#125;</span><br><span class="line">&#123; &quot;update&quot;: &#123; &quot;_type&quot;: &quot;test_type&quot;, &quot;_id&quot;: &quot;1&quot;, &quot;_retry_on_conflict&quot; : 3&#125; &#125;</span><br><span class="line">&#123; &quot;doc&quot; : &#123;&quot;test_field2&quot; : &quot;bulk test1&quot;&#125; &#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;test_index&#x2F;test_type&#x2F;_bulk</span><br><span class="line">&#123; &quot;delete&quot;: &#123; &quot;_id&quot;: &quot;3&quot; &#125;&#125; </span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_id&quot;: &quot;12&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;test_field&quot;:    &quot;test12&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;:  &#123; &#125;&#125;</span><br><span class="line">&#123; &quot;test_field&quot;:    &quot;auto-generate id test&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;:  &#123; &quot;_id&quot;: &quot;2&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;test_field&quot;:    &quot;replaced test2&quot; &#125;</span><br><span class="line">&#123; &quot;update&quot;: &#123; &quot;_id&quot;: &quot;1&quot;, &quot;_retry_on_conflict&quot; : 3&#125; &#125;</span><br><span class="line">&#123; &quot;doc&quot; : &#123;&quot;test_field2&quot; : &quot;bulk test1&quot;&#125; &#125;</span><br></pre></td></tr></table></figure><p>bulk request会加载到内存里，如果太大的话，性能反而会下降，因此需要反复尝试一个最佳的bulk size。一般从1000~5000条数据开始，尝试逐渐增加。另外，如果看大小的话，最好是在5~15MB之间。</p><h3 id="bulk-api奇特的json格式"><a href="#bulk-api奇特的json格式" class="headerlink" title="bulk api奇特的json格式"></a>bulk api奇特的json格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;action&quot;: &#123;&quot;meta&quot;&#125;&#125;\n</span><br><span class="line">&#123;&quot;data&quot;&#125;\n</span><br><span class="line">&#123;&quot;action&quot;: &#123;&quot;meta&quot;&#125;&#125;\n</span><br><span class="line">&#123;&quot;data&quot;&#125;\n</span><br></pre></td></tr></table></figure><ol><li>不用将其转换为json对象，不会出现内存中的相同数据的拷贝，直接按照换行符切割json</li><li>对每两个一组的json，读取meta，进行document路由</li><li>直接将对应的json发送到node上去</li><li>最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能</li></ol><p>如果采用比较良好的json数组格式,允许任意的换行，整个可读性非常棒，读起来很爽，es拿到那种标准格式的json串以后，要按照下述流程去进行处理</p><ul><li>将json数组解析为JSONArray对象，这个时候，整个数据，就会在内存中出现一份一模一样的拷贝，一份数据是json文本，一份数据是JSONArray对象</li><li>解析json数组里的每个json，对每个请求中的document进行路由</li><li>为路由到同一个shard上的多个请求，创建一个请求数组</li><li>将这个请求数组序列化</li><li>将序列化后的请求数组发送到对应的节点上去</li></ul><p>耗费更多内存，更多的jvm gc开销，我们之前提到过bulk size最佳大小的那个问题，一般建议说在几千条那样，然后大小在10MB左右，所以说，可怕的事情来了。假设说现在100个bulk请求发送到了一个节点上去，然后每个请求是10MB，100个请求，就是1000MB = 1GB，然后每个请求的json都copy一份为jsonarray对象，此时内存中的占用就会翻倍，就会占用2GB的内存，甚至还不止。因为弄成jsonarray之后，还可能会多搞一些其他的数据结构，2GB+的内存占用。占用更多的内存可能就会积压其他请求的内存使用量，比如说最重要的搜索请求，分析请求，等等，此时就可能会导致其他请求的性能急速下降。占用内存更多，就会导致java虚拟机的垃圾回收次数更多，跟频繁，每次要回收的垃圾对象更多，耗费的时间更多，导致es的java虚拟机停止工作线程的时间更多</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="全量替换"><a href="#全量替换" class="headerlink" title="全量替换"></a>全量替换</h3><ol><li>语法与创建文档是一样的，如果document id不存在，那么就是创建；如果document id已经存在，那么就是全量替换操作，替换document的json串内容，更新_version的值</li></ol><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210514195424111.png" alt="image-20210514195424111"></p><ol start="2"><li>document是不可变的，如果要修改document的内容，第一种方式就是全量替换，直接对document重新建立索引，替换里面所有的内容</li><li>es会将老的document标记为deleted，然后新增我们给定的一个document，当我们创建越来越多的document的时候，es会在适当的时机在后台自动删除标记为deleted的document</li></ol><h3 id="局部更新"><a href="#局部更新" class="headerlink" title="局部更新"></a>局部更新</h3><p>PUT /index/type/id，创建文档&amp;替换文档，就是一样的语法</p><ol><li>应用程序先发起一个get请求，获取到document，展示到前台界面，供用户查看和修改</li><li>用户在前台界面修改数据，发送到后台</li><li>后台代码，会将用户修改的数据在内存中进行执行，然后封装好修改后的全量数据</li><li>然后发送PUT请求，到es中，进行全量替换</li><li>es将老的document标记为deleted，然后重新创建一个新的document</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post &#x2F;index&#x2F;type&#x2F;id&#x2F;_update </span><br><span class="line">&#123;</span><br><span class="line">   &quot;doc&quot;: &#123;</span><br><span class="line">      &quot;要修改的少数几个field即可，不需要全量的数据&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210517194617604.png" alt="image-20210517194617604"></p><h4 id="实战partial-update"><a href="#实战partial-update" class="headerlink" title="实战partial update"></a>实战partial update</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;10</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field1&quot;: &quot;test1&quot;,</span><br><span class="line">  &quot;test_field2&quot;: &quot;test2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;test_index&#x2F;test_type&#x2F;10&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;test_field2&quot;: &quot;updated test2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="groovy实现partial-update"><a href="#groovy实现partial-update" class="headerlink" title="groovy实现partial update"></a>groovy实现partial update</h4><p>es，其实是有个内置的脚本支持的，可以基于groovy脚本实现各种各样的复杂操作</p><p><strong>准备数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;11</span><br><span class="line">&#123;</span><br><span class="line">  &quot;num&quot;: 0,</span><br><span class="line">  &quot;tags&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更新数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;test_index&#x2F;test_type&#x2F;11&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">   &quot;script&quot; : &quot;ctx._source.num+&#x3D;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>外部脚本</strong></p><p>vim elasticsearch-5.2.0\config\scripts\test-add-tags.groovy<br><code>ctx._source.tags+=new_tag</code>  为tags字段添加tag1,test-add-tags.groovy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;test_index&#x2F;test_type&#x2F;11&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;: &#123;</span><br><span class="line">    &quot;lang&quot;: &quot;groovy&quot;, </span><br><span class="line">    &quot;file&quot;: &quot;test-add-tags&quot;,</span><br><span class="line">    &quot;params&quot;: &#123;</span><br><span class="line">      &quot;new_tag&quot;: &quot;tag1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ctx.op = ctx._source.num == count ? &#39;delete&#39; : &#39;none&#39;</code>  删除文档test-delete-document.groovy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;test_index&#x2F;test_type&#x2F;11&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;: &#123;</span><br><span class="line">    &quot;lang&quot;: &quot;groovy&quot;,</span><br><span class="line">    &quot;file&quot;: &quot;test-delete-document&quot;,</span><br><span class="line">    &quot;params&quot;: &#123;</span><br><span class="line">      &quot;count&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>upsert操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;test_index&#x2F;test_type&#x2F;11&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;num&quot;: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始_update会直接报错404.</p><p>如果指定的document不存在，就执行upsert中的初始化操作；如果指定的document存在，就执行doc或者script指定的partial update操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;test_index&#x2F;test_type&#x2F;11&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">   &quot;script&quot; : &quot;ctx._source.num+&#x3D;1&quot;,</span><br><span class="line">   &quot;upsert&quot;: &#123;</span><br><span class="line">       &quot;num&quot;: 0,</span><br><span class="line">       &quot;tags&quot;: []</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强制创建"><a href="#强制创建" class="headerlink" title="强制创建"></a>强制创建</h3><p><code>PUT /index/type/id?op_type=create，PUT /index/type/id/_create</code></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>DELETE /index/type/id</code></p><p>不会理解物理删除，只会将其标记为deleted，当数据越来越多的时候，在后台自动删除</p><h2 id="并发冲突"><a href="#并发冲突" class="headerlink" title="并发冲突"></a>并发冲突</h2><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210514195747886.png" alt="image-20210514195747886"></p><h3 id="悲观锁与乐观锁方案"><a href="#悲观锁与乐观锁方案" class="headerlink" title="悲观锁与乐观锁方案"></a>悲观锁与乐观锁方案</h3><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210514201338263.png" alt="image-20210514201338263"></p><p>第一次创建一个document的时候，它的_version内部版本号就是1；以后，每次对这个document执行修改或者删除操作，都会对这个_version版本号自动加1；哪怕是删除，也会对这条数据的版本号加1。</p><p>在删除一个document之后，可以从一个侧面证明，它不是立即物理删除掉的，因为它的一些版本号等信息还是保留着的。先删除一条document，再重新创建这条document，其实会在delete version基础之上，再把version号加1 </p><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210514202012003.png" alt="image-20210514202012003"></p><h3 id="version乐观锁实战"><a href="#version乐观锁实战" class="headerlink" title="_version乐观锁实战"></a>_version乐观锁实战</h3><ol><li>构造一条数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;7</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>模拟两个客户端，都获取到了同一条数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET test_index&#x2F;test_type&#x2F;7</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;7&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;test_field&quot;: &quot;test test&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>其中一个客户端，先更新了一下这个数据，同时带上数据的版本号，确保说，es中的数据的版本号，跟客户端中的数据的版本号是相同的，才能修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;7?version&#x3D;1 </span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test client 1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;7&quot;,</span><br><span class="line">  &quot;_version&quot;: 2,</span><br><span class="line">  &quot;result&quot;: &quot;updated&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>另外一个客户端，尝试基于version=1的数据去进行修改，同样带上version版本号，进行乐观锁的并发控制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;7?version&#x3D;1 </span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test client 2&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;version_conflict_engine_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;[test_type][7]: version conflict, current version [2] is different than the one provided [1]&quot;,</span><br><span class="line">        &quot;index_uuid&quot;: &quot;6m0G7yx7R1KECWWGnfH1sw&quot;,</span><br><span class="line">        &quot;shard&quot;: &quot;3&quot;,</span><br><span class="line">        &quot;index&quot;: &quot;test_index&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;version_conflict_engine_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;[test_type][7]: version conflict, current version [2] is different than the one provided [1]&quot;,</span><br><span class="line">    &quot;index_uuid&quot;: &quot;6m0G7yx7R1KECWWGnfH1sw&quot;,</span><br><span class="line">    &quot;shard&quot;: &quot;3&quot;,</span><br><span class="line">    &quot;index&quot;: &quot;test_index&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 409</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在乐观锁成功阻止并发问题之后，尝试正确的完成更新</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;7</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;7&quot;,</span><br><span class="line">  &quot;_version&quot;: 2,</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;test_field&quot;: &quot;test client 1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>基于最新的数据和版本号，去进行修改，修改后，带上最新的版本号，可能这个步骤会需要反复执行好几次，才能成功，特别是在多线程并发更新同一条数据很频繁的情况下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;7?version&#x3D;2 </span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test client 2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="external-version乐观锁实战"><a href="#external-version乐观锁实战" class="headerlink" title="external version乐观锁实战"></a>external version乐观锁实战</h3><p>es提供了一个feature，就是说，你可以不用它提供的内部_version版本号来进行并发控制，可以基于你自己维护的一个版本号来进行并发控制。比如，加入你的数据在mysql里也有一份，然后你的应用系统本身就维护了一个版本号，无论是什么自己生成的，程序控制的。这个时候，你进行乐观锁并发控制的时候，可能并不是想要用es内部的_version来进行控制，而是用你自己维护的那个version来进行控制。</p><blockquote><p>_version=1，?version=1，才能更新成功<br>_version=1，?version&gt;1&amp;version_type=external，才能成功，比如说?version=2&amp;version_type=external</p><p>version_type=external，唯一的区别在于，_version，只有当你提供的version与es中的_version一模一样的时候，才可以进行修改，只要不一样，就报错；当version_type=external的时候，只有当你提供的version比es中的_version大的时候，才能完成修改。</p></blockquote><ol><li>先构造一条数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;8</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;8&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>模拟两个客户端同时查询到这条数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;8</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;8&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;test_field&quot;: &quot;test&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>第一个客户端先进行修改，此时客户端程序是在自己的数据库中获取到了这条数据的最新版本号，比如说是2</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;8?version&#x3D;2&amp;version_type&#x3D;external</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test client 1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;8&quot;,</span><br><span class="line">  &quot;_version&quot;: 2,</span><br><span class="line">  &quot;result&quot;: &quot;updated&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>模拟第二个客户端，同时拿到了自己数据库中维护的那个版本号，也是2，同时基于version=2发起了修改</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;8?version&#x3D;2&amp;version_type&#x3D;external</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test client 2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;version_conflict_engine_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;[test_type][8]: version conflict, current version [2] is higher or equal to the one provided [2]&quot;,</span><br><span class="line">        &quot;index_uuid&quot;: &quot;6m0G7yx7R1KECWWGnfH1sw&quot;,</span><br><span class="line">        &quot;shard&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;index&quot;: &quot;test_index&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;version_conflict_engine_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;[test_type][8]: version conflict, current version [2] is higher or equal to the one provided [2]&quot;,</span><br><span class="line">    &quot;index_uuid&quot;: &quot;6m0G7yx7R1KECWWGnfH1sw&quot;,</span><br><span class="line">    &quot;shard&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;index&quot;: &quot;test_index&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 409</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在并发控制成功后，重新基于最新的版本号发起更新<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;test_index&#x2F;test_type&#x2F;8</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;8&quot;,</span><br><span class="line">  &quot;_version&quot;: 2,</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;test_field&quot;: &quot;test client 1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;test_index&#x2F;test_type&#x2F;8?version&#x3D;3&amp;version_type&#x3D;external</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test client 2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;test_type&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;8&quot;,</span><br><span class="line">  &quot;_version&quot;: 3,</span><br><span class="line">  &quot;result&quot;: &quot;updated&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="partial-update内置乐观锁并发控制"><a href="#partial-update内置乐观锁并发控制" class="headerlink" title="partial update内置乐观锁并发控制"></a>partial update内置乐观锁并发控制</h3><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210525150841434.png" alt="image-20210525150841434"></p><p><code>post /index/type/id/_update?retry_on_conflict=5&amp;version=6</code></p><h2 id="document原理"><a href="#document原理" class="headerlink" title="document原理"></a>document原理</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210525153053021.png" alt="image-20210525153053021"></p><p>document路由到shard上的路由算法：<code>shard = hash(routing) % number_of_primary_shards</code></p><p>举个例子，一个index有3个primary shard，P0，P1，P2，每次增删改查一个document的时候，都会带过来一个routing number，默认就是这个document的_id（可能是手动指定，也可能是自动生成）,routing = _id，假设_id=1,会将这个routing值，传入一个hash函数中，产出一个routing值的hash值，hash(routing) = 21，然后将hash函数产出的值对这个index的primary shard的数量求余数，21 % 3 = 0，就决定了，这个document就放在P0上。</p><p>决定一个document在哪个shard上，最重要的一个值就是routing值，默认是_id，也可以手动指定，相同的routing值，每次过来，从hash函数中，产出的hash值一定是相同的。无论hash值是几，无论是什么数字，对number_of_primary_shards求余数，结果一定是在0~number_of_primary_shards-1之间这个范围内的。0,1,2。</p><p>默认的routing就是_id，也可以在发送请求的时候，手动指定一个routing value，比如说put /index/type/id?routing=user_id。手动指定routing value是很有用的，可以保证说，某一类document一定被路由到一个shard上去，那么在后续进行应用级别的负载均衡，以及提升批量读取的性能。</p><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><ul><li>客户端选择一个node发送请求过去，这个node就是coordinating node（协调节点）</li><li>coordinating node，对document进行路由，将请求转发给对应的node（有primary shard）</li><li>实际的node上的primary shard处理请求，然后将数据同步到replica node</li><li>coordinating node，如果发现primary node和所有replica node都搞定之后，就返回响应结果给客户端</li></ul><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210525154434211.png" alt="image-20210525154434211"></p><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ol><li>客户端发送请求到任意一个node，成为coordinate node</li><li>coordinate node对document进行路由，将请求转发到对应的node，此时会使用round-robin随机轮询算法，在primary shard以及其所有replica中随机选择一个，让读请求负载均衡</li><li>接收请求的node返回document给coordinate node</li><li>coordinate node返回document给客户端</li><li>特殊情况：document如果还在建立索引过程中，可能只有primary shard有，任何一个replica shard都没有，此时可能会导致无法读取到document，但是document完成索引建立之后，primary shard和replica shard就都有了</li></ol><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210525165721839.png" alt="image-20210525165721839"></p><h2 id="quorum"><a href="#quorum" class="headerlink" title="quorum"></a>quorum</h2><p>我们在发送任何一个增删改操作的时候，比如说put /index/type/id，都可以带上一个consistency参数，指明我们想要的写一致性<br>put /index/type/id?consistency=quorum</p><p>one：要求我们这个写操作，只要有一个primary shard是active活跃可用的，就可以执行<br>all：要求我们这个写操作，必须所有的primary shard和replica shard都是活跃的，才可以执行这个写操作<br>quorum：默认的值，要求所有的shard中，必须是大部分的shard都是活跃的，可用的，才可以执行这个写操作</p><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210525164457823.png" alt="image-20210525164457823"></p><p>quorum机制，写之前必须确保大多数shard都可用，int( (primary + number_of_replicas) / 2 ) + 1，当number_of_replicas&gt;1时才生效</p><p>quroum = int( (primary + number_of_replicas) / 2 ) + 1<br>举个例子，3个primary shard，number_of_replicas=1，总共有3 + 3 * 1 = 6个shard<br>quorum = int( (3 + 1) / 2 ) + 1 = 3<br>所以，要求6个shard中至少有3个shard是active状态的，才可以执行这个写操作</p><p>如果节点数少于quorum数量，可能导致quorum不齐全，进而导致无法执行任何写操作。3个primary shard，replica=1，要求至少3个shard是active，3个shard按照之前学习的shard&amp;replica机制，必须在不同的节点上，如果说只有2台机器的话，是不是有可能出现说，3个shard都没法分配齐全，此时就可能会出现写操作无法执行的情况。</p><p>1个primary shard，replica=3，quorum=((1 + 3) / 2) + 1 = 3，要求1个primary shard + 3个replica shard = 4个shard，其中必须有3个shard是要处于active状态的。如果这个时候只有2台机器的话，es提供了一种特殊的处理场景，就是说当number_of_replicas&gt;1时才生效，因为假如说，你就一个primary shard，replica=1，此时就2个shard，(1 + 1 / 2) + 1 = 2，要求必须有2个shard是活跃的，但是可能就1个node，此时就1个shard是活跃的，如果你不特殊处理的话，导致我们的单节点集群就无法工作</p><p>quorum不齐全时，wait，默认1分钟，timeout，100，30s，等待期间，期望活跃的shard数量可以增加，最后实在不行，就会timeout，我们其实可以在写操作的时候，加一个timeout参数，比如说put /index/type/id?timeout=30，这个就是说自己去设定quorum不齐全的时候，es的timeout时长，可以缩短，也可以增长</p><p><img src="/2021/05/13/ElasticSearch%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%B9%E6%80%A7/image-20210525165432451.png" alt="image-20210525165432451"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之基础介绍</title>
      <link href="/2021/05/10/ElasticSearch%E4%B9%8B%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/05/10/ElasticSearch%E4%B9%8B%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="垂直搜索（站内搜索）"><a href="#垂直搜索（站内搜索）" class="headerlink" title="垂直搜索（站内搜索）"></a><strong>垂直搜索（站内搜索）</strong></h2><blockquote><p>互联网的搜索：电商网站，招聘网站，新闻网站，各种app<br>IT系统的搜索：OA软件，办公自动化软件，会议管理，日程管理，项目管理，员工管理，搜索“张三”，“张三儿”，“张小三”；有个电商网站，卖家，后台管理系统，搜索“牙膏”，订单，“牙膏相关的订单”</p><p>搜索，就是在任何场景下，找寻你想要的信息，这个时候，会输入一段你要搜索的关键字，然后就期望找到这个关键字相关的有些信息</p></blockquote><p>Elasticsearch，分布式，高性能，高可用，可伸缩的搜索和分析系统</p><p><img src="/2021/05/10/ElasticSearch%E4%B9%8B%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/%E4%BB%80%E4%B9%88%E6%98%AFElasticsearch.png" alt="什么是Elasticsearch"></p><p>elasticsearch，基于lucene，隐藏复杂性，提供简单易用的restful api接口、java api接口（还有其他语言的api接口）,开箱即用，优秀的默认参数，不需要任何额外设置，完全开源</p><ol><li>分布式的文档存储引擎</li><li>分布式的搜索引擎和分析引擎</li><li>分布式，支持PB级数据</li></ol><blockquote><p>lucene，最先进、功能最强大的搜索库，直接基于lucene开发，非常复杂，api复杂（实现一些简单的功能，写大量的java代码），需要深入理解原理（各种索引结构）</p></blockquote><h2 id="数据库的弊端"><a href="#数据库的弊端" class="headerlink" title="数据库的弊端"></a>数据库的弊端</h2><p>全表扫描</p><ol><li>比方说，每条记录的指定字段的文本，可能会很长，比如说“商品描述”字段的长度，有长达数千个，甚至数万个字符，这个时候，每次都要对每条记录的所有文本进行扫描，来判断说，你包不包含我指定的这个关键词（比如说“牙膏”）</li><li>还不能将搜索词拆分开来，尽可能去搜索更多的符合你的期望的结果，比如输入“生化机”，就搜索不出来“生化危机”，输入“牙膏”搜索不到“牙刷膏”。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from products where product_name like &quot;%牙膏%&quot;</span><br></pre></td></tr></table></figure><h2 id="什么是倒排索引"><a href="#什么是倒排索引" class="headerlink" title="什么是倒排索引"></a>什么是倒排索引</h2><ol><li>全文检索，倒排索引</li><li>lucene，就是一个jar包，里面包含了封装好的各种建立倒排索引，以及进行搜索的代码，包括各种算法。我们就用java开发的时候，引入lucene jar，然后基于lucene的api进行去进行开发就可以了。用lucene，我们就可以去将已有的数据建立索引，lucene会在本地磁盘上面，给我们组织索引的数据结构。另外的话，我们也可以用lucene提供的一些功能和api来针对磁盘上数据进行搜索</li></ol><p><img src="/2021/05/10/ElasticSearch%E4%B9%8B%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2.png" alt="什么是全文检索"></p><h2 id="ElasticSearch功能"><a href="#ElasticSearch功能" class="headerlink" title="ElasticSearch功能"></a>ElasticSearch功能</h2><p><strong>分布式的搜索引擎和数据分析引擎</strong></p><p>分布式搜索：百度，网站的站内搜索，IT系统的检索<br>数据分析：电商网站，最近7天牙膏这种商品销量排名前10的商家有哪些；新闻网站，最近1个月访问量排名前3的新闻版块是哪些</p><p><strong>全文检索，结构化检索，数据分析</strong></p><p>全文检索：我想搜索商品名称包含牙膏的商品，select * from products where product_name like “%牙膏%”<br>结构化检索：我想搜索商品分类为日化用品的商品都有哪些，select * from products where category_id=”日化用品”<br>==&gt;实现部分匹配、自动完成、搜索纠错、搜索推荐<br>数据分析：我们分析每一个商品分类下有多少个商品，select category_id,count(*) from products group by category_id</p><p><strong>对海量数据进行近实时的处理</strong></p><p>分布式：ES自动可以将海量数据分散到多台服务器上去存储和检索<br>海量数据的处理：分布式以后，就可以采用大量的服务器去存储和检索数据，自然而然就可以实现海量数据的处理了<br>近实时：检索个数据要花费1小时（这就不要近实时，离线批处理，batch-processing）；在秒级别对数据进行搜索和分析</p><p>跟分布式/海量数据相反的：lucene，单机应用，只能在单台服务器上使用，最多只能处理单台服务器可以处理的数据量</p><h2 id="ElasticSearch适用场景"><a href="#ElasticSearch适用场景" class="headerlink" title="ElasticSearch适用场景"></a>ElasticSearch适用场景</h2><p><strong>国外</strong></p><ol><li>维基百科，类似百度百科，牙膏，牙膏的维基百科，全文检索，高亮，搜索推荐</li><li>The Guardian（国外新闻网站），类似搜狐新闻，用户行为日志（点击，浏览，收藏，评论）+社交网络数据（对某某新闻的相关看法），数据分析，给到每篇新闻文章的作者，让他知道他的文章的公众反馈（好，坏，热门，垃圾，鄙视，崇拜）</li><li>Stack Overflow（国外的程序异常讨论论坛），IT问题，程序的报错，提交上去，有人会跟你讨论和回答，全文检索，搜索相关问题和答案，程序报错了，就会将报错信息粘贴到里面去，搜索有没有对应的答案</li><li>GitHub（开源代码管理），搜索上千亿行代码</li><li>电商网站，检索商品</li><li>日志数据分析，logstash采集日志，ES进行复杂的数据分析（ELK技术，elasticsearch+logstash+kibana）</li><li>商品价格监控网站，用户设定某商品的价格阈值，当低于该阈值的时候，发送通知消息给用户，比如说订阅牙膏的监控，如果高露洁牙膏的家庭套装低于50块钱，就通知我，我就去买</li><li>BI系统，商业智能，Business Intelligence。比如说有个大型商场集团，BI，分析一下某某区域最近3年的用户消费金额的趋势以及用户群体的组成构成，产出相关的数张报表，**区，最近3年，每年消费金额呈现100%的增长，而且用户群体85%是高级白领，开一个新商场。ES执行数据分析和挖掘，Kibana进行数据可视化</li></ol><p><strong>国内</strong></p><ol start="9"><li>站内搜索（电商，招聘，门户，等等），IT系统搜索（OA，CRM，ERP，等等），数据分析（ES热门的一个使用场景）</li></ol><h2 id="ElasticSearch特点"><a href="#ElasticSearch特点" class="headerlink" title="ElasticSearch特点"></a>ElasticSearch特点</h2><ol><li>可以作为一个大型分布式集群（数百台服务器）技术，处理PB级数据，服务大公司；也可以运行在单机上，服务小公司</li><li>Elasticsearch不是什么新技术，主要是将全文检索、数据分析以及分布式技术，合并在了一起，才形成了独一无二的ES；lucene（全文检索），商用的数据分析软件（也是有的），分布式数据库（mycat）</li><li>对用户而言，是开箱即用的，非常简单，作为中小型的应用，直接3分钟部署一下ES，就可以作为生产环境的系统来使用了，数据量不大，操作不是太复杂</li><li>数据库的功能面对很多领域是不够用的（事务，还有各种联机事务型的操作）；特殊的功能，比如全文检索，同义词处理，相关度排名，复杂数据分析，海量数据的近实时处理；Elasticsearch作为传统数据库的一个补充，提供了数据库所不不能提供的很多功能</li></ol><h2 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h2><ol><li>Near Realtime（NRT）：近实时，两个意思，从写入数据到数据可以被搜索到有一个小延迟（大概1秒）；基于es执行搜索和分析可以达到秒级</li><li>Cluster：集群，包含多个节点，每个节点属于哪个集群是通过一个配置（集群名称，默认是elasticsearch）来决定的，对于中小型应用来说，刚开始一个集群就一个节点很正常</li><li>Node：节点，集群中的一个节点，节点也有一个名称（默认是随机分配的），节点名称很重要（在执行运维管理操作的时候），默认节点会去加入一个名称为“elasticsearch”的集群，如果直接启动一堆节点，那么它们会自动组成一个elasticsearch集群，当然一个节点也可以组成一个elasticsearch集群</li><li>Document&amp;field：文档，es中的最小数据单元，一个document可以是一条客户数据，一条商品分类数据，一条订单数据，通常用JSON数据结构表示，每个index下的type中，都可以去存储多个document。一个document里面有多个field，每个field就是一个数据字段。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">product document</span><br><span class="line">&#123;</span><br><span class="line">  &quot;product_id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;product_name&quot;: &quot;高露洁牙膏&quot;,</span><br><span class="line">  &quot;product_desc&quot;: &quot;高效美白&quot;,</span><br><span class="line">  &quot;category_id&quot;: &quot;2&quot;,</span><br><span class="line">  &quot;category_name&quot;: &quot;日化用品&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Index：索引，包含一堆有相似结构的文档数据，比如可以有一个客户索引，商品分类索引，订单索引，索引有一个名称。一个index包含很多document，一个index就代表了一类类似的或者相同的document。比如说建立一个product index，商品索引，里面可能就存放了所有的商品数据，所有的商品document。</li><li>Type：类型，每个索引里都可以有一个或多个type，type是index中的一个逻辑数据分类，一个type下的document，都有相同的field，比如博客系统，有一个索引，可以定义用户数据type，博客数据type，评论数据type。</li></ol><p>商品index，里面存放了所有的商品数据，商品document，但是商品分很多种类，每个种类的document的field可能不太一样，比如说电器商品，可能还包含一些诸如售后时间范围这样的特殊field；生鲜商品，还包含一些诸如生鲜保质期之类的特殊field，type，日化商品type，电器商品type，生鲜商品type</p><p>日化商品type：product_id，product_name，product_desc，category_id，category_name<br>电器商品type：product_id，product_name，product_desc，category_id，category_name，service_period<br>生鲜商品type：product_id，product_name，product_desc，category_id，category_name，eat_period</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">每一个type里面，都会包含一堆document</span><br><span class="line">&#123;</span><br><span class="line">  &quot;product_id&quot;: &quot;2&quot;,</span><br><span class="line">  &quot;product_name&quot;: &quot;长虹电视机&quot;,</span><br><span class="line">  &quot;product_desc&quot;: &quot;4k高清&quot;,</span><br><span class="line">  &quot;category_id&quot;: &quot;3&quot;,</span><br><span class="line">  &quot;category_name&quot;: &quot;电器&quot;,</span><br><span class="line">  &quot;service_period&quot;: &quot;1年&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;product_id&quot;: &quot;3&quot;,</span><br><span class="line">  &quot;product_name&quot;: &quot;基围虾&quot;,</span><br><span class="line">  &quot;product_desc&quot;: &quot;纯天然，冰岛产&quot;,</span><br><span class="line">  &quot;category_id&quot;: &quot;4&quot;,</span><br><span class="line">  &quot;category_name&quot;: &quot;生鲜&quot;,</span><br><span class="line">  &quot;eat_period&quot;: &quot;7天&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>shard：单台机器无法存储大量数据，es可以将一个索引中的数据切分为多个shard，分布在多台服务器上存储。有了shard就可以横向扩展，存储更多数据，让搜索和分析等操作分布到多台服务器上去执行，提升吞吐量和性能。每个shard都是一个lucene index。</li><li>replica：任何一个服务器随时可能故障或宕机，此时shard可能就会丢失，因此可以为每个shard创建多个replica副本。replica可以在shard故障时提供备用服务，保证数据不丢失，多个replica还可以提升搜索操作的吞吐量和性能。primary shard（建立索引时一次设置，不能修改，默认5个），replica shard（随时修改数量，默认1个），默认每个索引10个shard，5个primary shard，5个replica shard，最小的高可用配置，是2台服务器。</li></ol><table><thead><tr><th>Document</th><th>行</th></tr></thead><tbody><tr><td>Type</td><td>表</td></tr><tr><td>Index</td><td>库</td></tr></tbody></table><p><img src="/2021/05/10/ElasticSearch%E4%B9%8B%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/shard%E5%92%8Creplica%E7%9A%84%E8%A7%A3%E9%87%8A.png" alt="shard和replica的解释"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>安装JDK，至少1.8.0_73以上版本，java -version</li><li>下载和解压缩elasticsearch-5.2.0.zip，目录结构</li><li>启动Elasticsearch：bin\elasticsearch.bat，es本身特点之一就是开箱即用，如果是中小型应用，数据量少，操作不是很复杂，直接启动就可以用了</li><li>检查ES是否启动成功：<a href="http://localhost:9200/?pretty" target="_blank" rel="noopener">http://localhost:9200/?pretty</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: node名称</span><br><span class="line">cluster_name: 集群名称（默认的集群名称就是elasticsearch）</span><br><span class="line">version.number: 5.2.0，es版本号</span><br></pre></td></tr></table></figure><ol start="5"><li>修改集群名称：elasticsearch.yml</li><li>下载和解压缩Kibana安装包，使用里面的开发界面，去操作elasticsearch，作为我们操作es的一个主要的界面入口</li><li>启动Kibana：bin\kibana.bat</li><li>进入Dev Tools界面</li><li>GET _cluster/health</li></ol><h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><p>面向文档的搜索分析引擎</p><ol><li>应用系统的数据结构都是面向对象的，复杂的</li><li>对象数据存储到数据库中，只能拆解开来，变为扁平的多张表，每次查询的时候还得还原回对象格式，相当麻烦</li><li>ES是面向文档的，文档中存储的数据结构，与面向对象的数据结构是一样的，基于这种文档数据结构，es可以提供复杂的索引，全文检索，分析聚合等功能</li><li>es的document用json数据格式来表达</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Employee &#123;</span><br><span class="line"></span><br><span class="line">  private String email;</span><br><span class="line">  private String firstName;</span><br><span class="line">  private String lastName;</span><br><span class="line">  private EmployeeInfo info;</span><br><span class="line">  private Date joinDate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private class EmployeeInfo &#123;</span><br><span class="line">  </span><br><span class="line">  private String bio; &#x2F;&#x2F; 性格</span><br><span class="line">  private Integer age;</span><br><span class="line">  private String[] interests; &#x2F;&#x2F; 兴趣爱好</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两张表：employee表，employee_info表，将employee对象的数据重新拆开来，变成Employee数据和EmployeeInfo数据<br>employee表：email，first_name，last_name，join_date，4个字段<br>employee_info表：bio，age，interests，3个字段；此外还有一个外键字段，比如employee_id，关联着employee表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;email&quot;:      &quot;zhangsan@sina.com&quot;,</span><br><span class="line">    &quot;first_name&quot;: &quot;san&quot;,</span><br><span class="line">    &quot;last_name&quot;: &quot;zhang&quot;,</span><br><span class="line">    &quot;info&quot;: &#123;</span><br><span class="line">        &quot;bio&quot;:         &quot;curious and modest&quot;,</span><br><span class="line">        &quot;age&quot;:         30,</span><br><span class="line">        &quot;interests&quot;: [ &quot;bike&quot;, &quot;climb&quot; ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;join_date&quot;: &quot;2021&#x2F;01&#x2F;01&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h2><p><code>GET /_cat/health?v</code>  快速检查集群的健康状况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1488006741 15:12:21  elasticsearch yellow          1         1      1   1    0    0        1             0                  -                 50.0%</span><br><span class="line"></span><br><span class="line">epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1488007113 15:18:33  elasticsearch green           2         2      2   1    0    0        0             0                  -                100.0%</span><br></pre></td></tr></table></figure><p>green: 每个索引的primary shard和replica shard都是active状态的<br>yellow: 每个索引的primary shard都是active状态的，但是部分replica shard不是active状态，处于不可用的状态<br>red: 不是所有索引的primary shard都是active状态的，部分索引有数据丢失了</p><p><code>PUT /test_index?pretty</code>   创建索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">health status index      uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   test_index XmS9DTAtSkSZSwWhhGEKkQ   5   1          0            0       650b           650b</span><br><span class="line">yellow open   .kibana    rUm9n9wMRQCCrRDEhqneBg   1   1          1            0      3.1kb          3.1kb</span><br></pre></td></tr></table></figure><p><code>DELETE /test_index?pretty</code>  删除索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">health status index   uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   .kibana rUm9n9wMRQCCrRDEhqneBg   1   1          1            0      3.1kb          3.1kb</span><br></pre></td></tr></table></figure><h2 id="新增商品"><a href="#新增商品" class="headerlink" title="新增商品"></a>新增商品</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;ecommerce&#x2F;product&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot; : &quot;gaolujie yagao&quot;,</span><br><span class="line">    &quot;desc&quot; :  &quot;gaoxiao meibai&quot;,</span><br><span class="line">    &quot;price&quot; :  30,</span><br><span class="line">    &quot;producer&quot; :      &quot;gaolujie producer&quot;,</span><br><span class="line">    &quot;tags&quot;: [ &quot;meibai&quot;, &quot;fangzhu&quot; ]</span><br><span class="line">&#125;</span><br><span class="line">PUT &#x2F;ecommerce&#x2F;product&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot; : &quot;jiajieshi yagao&quot;,</span><br><span class="line">    &quot;desc&quot; :  &quot;youxiao fangzhu&quot;,</span><br><span class="line">    &quot;price&quot; :  25,</span><br><span class="line">    &quot;producer&quot; :      &quot;jiajieshi producer&quot;,</span><br><span class="line">    &quot;tags&quot;: [ &quot;fangzhu&quot; ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;ecommerce&#x2F;product&#x2F;3</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot; : &quot;zhonghua yagao&quot;,</span><br><span class="line">    &quot;desc&quot; :  &quot;caoben zhiwu&quot;,</span><br><span class="line">    &quot;price&quot; :  40,</span><br><span class="line">    &quot;producer&quot; :      &quot;zhonghua producer&quot;,</span><br><span class="line">    &quot;tags&quot;: [ &quot;qingxin&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es会自动建立index和type，不需要提前创建，而且es默认会对document每个field都建立倒排索引，让其可以被搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;ecommerce&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;product&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;: 1, # 创建与更新计数</span><br><span class="line">  &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,  # 只有一个节点</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询商品"><a href="#查询商品" class="headerlink" title="查询商品"></a>查询商品</h2><p><code>GET /ecommerce/product/1</code></p><h2 id="替换文档"><a href="#替换文档" class="headerlink" title="替换文档"></a>替换文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;ecommerce&#x2F;product&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot; : &quot;jiaqiangban gaolujie yagao&quot;,</span><br><span class="line">    &quot;desc&quot; :  &quot;gaoxiao meibai&quot;,</span><br><span class="line">    &quot;price&quot; :  30,</span><br><span class="line">    &quot;producer&quot; :      &quot;gaolujie producer&quot;,</span><br><span class="line">    &quot;tags&quot;: [ &quot;meibai&quot;, &quot;fangzhu&quot; ]</span><br><span class="line">&#125;</span><br><span class="line">PUT &#x2F;ecommerce&#x2F;product&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot; : &quot;jiaqiangban gaolujie yagao&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换方式有一个不好，即使必须带上所有的field，才能去进行信息的修改</p><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;ecommerce&#x2F;product&#x2F;1&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;jiaqiangban gaolujie yagao&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p><code>DELETE /ecommerce/product/1</code></p><h1 id="搜索方式"><a href="#搜索方式" class="headerlink" title="搜索方式"></a>搜索方式</h1><ol><li>query string search</li><li>query DSL</li><li>query filter</li><li>full-text search</li><li>phrase search</li><li>highlight search</li><li>agg search</li></ol><h2 id="query-string-search"><a href="#query-string-search" class="headerlink" title="query string search"></a>query string search</h2><p>took：耗费了几毫秒<br>timed_out：是否超时，这里是没有<br>_shards：数据拆成了5个分片，所以对于搜索请求，会打到所有的primary shard（或者是它的某个replica shard也可以）<br>hits.total：查询结果的数量，3个document<br>hits.max_score：score的含义，就是document对于一个search的相关度的匹配分数，越相关，就越匹配，分数也高<br>hits.hits：包含了匹配搜索的document的详细数据</p><p><code>GET /ecommerce/product/_search</code> 搜索全部商品</p><p><code>GET /ecommerce/product/_search?q=name:yagao&amp;sort=price:desc</code>  搜索商品名称中包含yagao的商品，按照售价降序排序</p><blockquote><p>适用于临时的在命令行使用一些工具，比如curl，快速的发出请求，来检索想要的信息；但是如果查询请求很复杂，是很难去构建的，在生产环境中，几乎很少使用query string search</p></blockquote><h2 id="query-DSL"><a href="#query-DSL" class="headerlink" title="query DSL"></a>query DSL</h2><p>查询所有商品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;ecommerce&#x2F;product&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询名称包含yagao的商品，同时按照价格降序排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;ecommerce&#x2F;product&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;name&quot; : &quot;yagao&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;sort&quot;: [</span><br><span class="line">        &#123; &quot;price&quot;: &quot;desc&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页查询商品，总共3条商品，假设每页就显示1条商品，现在显示第2页，所以就查出来第2个商品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;ecommerce&#x2F;product&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;from&quot;: 1,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定要查询出来商品的名称和价格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;ecommerce&#x2F;product&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;, &quot;price&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更加适合生产环境的使用，可以构建复杂的查询</p></blockquote><h2 id="query-filter"><a href="#query-filter" class="headerlink" title="query filter"></a>query filter</h2><p>搜索商品名称包含yagao，而且售价大于25元的商品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;ecommerce&#x2F;product&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;bool&quot; : &#123;</span><br><span class="line">            &quot;must&quot; : &#123;</span><br><span class="line">                &quot;match&quot; : &#123;</span><br><span class="line">                    &quot;name&quot; : &quot;yagao&quot; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter&quot; : &#123;</span><br><span class="line">                &quot;range&quot; : &#123;</span><br><span class="line">                    &quot;price&quot; : &#123; &quot;gt&quot; : 25 &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="full-text-search（全文检索）"><a href="#full-text-search（全文检索）" class="headerlink" title="full-text search（全文检索）"></a>full-text search（全文检索）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;ecommerce&#x2F;product&#x2F;4</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot; : &quot;special yagao&quot;,</span><br><span class="line">    &quot;desc&quot; :  &quot;special meibai&quot;,</span><br><span class="line">    &quot;price&quot; :  50,</span><br><span class="line">    &quot;producer&quot; :      &quot;special yagao producer&quot;,</span><br><span class="line">    &quot;tags&quot;: [ &quot;meibai&quot;, &quot;fangzhu&quot; ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;ecommerce&#x2F;product&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;producer&quot; : &quot;yagao producer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>special        4<br>yagao        4<br>producer    1,2,3,4<br>gaolujie    1<br>zhognhua    3<br>jiajieshi    2</p></blockquote><p>yagao producer ---&gt; 拆成yagao和producer,搜索结果根据score排序</p><h2 id="phrase-search（短语搜索）"><a href="#phrase-search（短语搜索）" class="headerlink" title="phrase search（短语搜索）"></a>phrase search（短语搜索）</h2><p>跟全文检索相对应，相反，全文检索会将输入的搜索串拆解开来，去倒排索引里面去一一匹配，只要能匹配上任意一个拆解后的单词，就可以作为结果返回<br>phrase search，要求输入的搜索串，必须在指定的字段文本中，完全包含一模一样的，才可以算匹配，才能作为结果返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;ecommerce&#x2F;product&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match_phrase&quot; : &#123;</span><br><span class="line">            &quot;producer&quot; : &quot;yagao producer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="highlight-search（高亮搜索结果）"><a href="#highlight-search（高亮搜索结果）" class="headerlink" title="highlight search（高亮搜索结果）"></a>highlight search（高亮搜索结果）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;ecommerce&#x2F;product&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;producer&quot; : &quot;producer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;producer&quot; : &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="agg（聚合搜索）"><a href="#agg（聚合搜索）" class="headerlink" title="agg（聚合搜索）"></a>agg（聚合搜索）</h2><p><strong>计算每个tag下的商品数量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;ecommerce&#x2F;product&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_tags&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123; &quot;field&quot;: &quot;tags&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：Fielddata is disabled on text fields by default. Set fielddata=true on [tags] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory.</p><p>将文本field的fielddata属性设置为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;ecommerce&#x2F;_mapping&#x2F;product</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;tags&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">      &quot;fielddata&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GET /ecommerce/product/_search</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0, # 不显示查询出来原始的doc</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;all_tags&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123; &quot;field&quot;: &quot;tags&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>{<br>  “took”: 20,<br>  “timed_out”: false,<br>  “_shards”: {<br>    “total”: 5,<br>    “successful”: 5,<br>    “failed”: 0<br>  },<br>  “hits”: {<br>    “total”: 4,<br>    “max_score”: 0,<br>    “hits”: []<br>  },<br>  “aggregations”: {<br>    “group_by_tags”: {<br>      “doc_count_error_upper_bound”: 0,<br>      “sum_other_doc_count”: 0,<br>      “buckets”: [<br>        {<br>          “key”: “fangzhu”,<br>          “doc_count”: 3<br>        },<br>        {<br>          “key”: “meibai”,<br>          “doc_count”: 2<br>        },<br>        {<br>          “key”: “qingxin”,<br>          “doc_count”: 1<br>        }<br>      ]<br>    }<br>  }<br>}</p></blockquote><p><strong>计算名称中包含yagao的商品，每个tag下的商品数量</strong></p><p><code>GET /ecommerce/product/_search</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;yagao&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;all_tags&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;tags&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>先分组，再算每组的平均值，计算每个tag下的商品的平均价格</strong></p><p><code>GET /ecommerce/product/_search</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;size&quot;: 0,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;group_by_tags&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123; &quot;field&quot; : &quot;tags&quot; &#125;,</span><br><span class="line">            &quot;aggs&quot; : &#123;</span><br><span class="line">                &quot;avg_price&quot; : &#123;</span><br><span class="line">                    &quot;avg&quot; : &#123; &quot;field&quot; : &quot;price&quot; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>{<br>  “took”: 8,<br>  “timed_out”: false,<br>  “_shards”: {<br>    “total”: 5,<br>    “successful”: 5,<br>    “failed”: 0<br>  },<br>  “hits”: {<br>    “total”: 4,<br>    “max_score”: 0,<br>    “hits”: []<br>  },<br>  “aggregations”: {<br>    “group_by_tags”: {<br>      “doc_count_error_upper_bound”: 0,<br>      “sum_other_doc_count”: 0,<br>      “buckets”: [<br>        {<br>          “key”: “fangzhu”,<br>          “doc_count”: 2,<br>          “avg_price”: {<br>            “value”: 27.5<br>          }<br>        },<br>        {<br>          “key”: “meibai”,<br>          “doc_count”: 2,<br>          “avg_price”: {<br>            “value”: 40<br>          }<br>        },<br>        {<br>          “key”: “qingxin”,<br>          “doc_count”: 1,<br>          “avg_price”: {<br>            “value”: 40<br>          }<br>        }<br>      ]<br>    }<br>  }<br>}</p></blockquote><p><strong>计算每个tag下的商品的平均价格，并且按照平均价格降序排序</strong></p><p><code>GET /ecommerce/product/_search</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;size&quot;: 0,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;all_tags&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123; &quot;field&quot; : &quot;tags&quot;, &quot;order&quot;: &#123; &quot;avg_price&quot;: &quot;desc&quot; &#125; &#125;,</span><br><span class="line">            &quot;aggs&quot; : &#123;</span><br><span class="line">                &quot;avg_price&quot; : &#123;</span><br><span class="line">                    &quot;avg&quot; : &#123; &quot;field&quot; : &quot;price&quot; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>按照指定的价格范围区间进行分组，然后在每组内再按照tag进行分组，最后再计算每组的平均价格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;ecommerce&#x2F;product&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_price&quot;: &#123;</span><br><span class="line">      &quot;range&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;price&quot;,</span><br><span class="line">        &quot;ranges&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 0,</span><br><span class="line">            &quot;to&quot;: 20</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 20,</span><br><span class="line">            &quot;to&quot;: 40</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 40,</span><br><span class="line">            &quot;to&quot;: 50</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;group_by_tags&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;tags&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;average_price&quot;: &#123;</span><br><span class="line">              &quot;avg&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;price&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本数据类型与应用场景</title>
      <link href="/2021/05/09/Redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2021/05/09/Redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>Redis作为内存中的数据结构存储系统,它可以用作数据库、缓存和消息中间件。它的 value支持多种类型的数据结构,基本数据结构包含:字符串( strings)、散列( hashes)、列表(ists)、集合(sets)、有序集合( sorted sets)五种。这五种数据结构在我们工作中经常使用到,面试过程中经常被问到,因此熟练掌握这5种基本数据结构的使用和应用场景是Redis知识最基础也是最重要的部分。</p><p>共同好友：set</p><p>用户积分排行榜：sorted set</p><p>feed流：list</p><p>…</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="类型介绍"><a href="#类型介绍" class="headerlink" title="类型介绍"></a>类型介绍</h3><p>字符串是 Redis最简单的储存类型,它存储的值可以是字符串、整数或者浮点数,对整个字符串或者字符串的其中一部分执行操作;对整数或者浮点数执行自增( increment)或者自减( decrement)操作。</p><p>Redis的字符串是一个由字节组成的序列,跟java里面的 ArrayList有点类似,采用预分配冗余空间的方式来减少内存的频繁分配,内部为当前字符串实际分配的空间 capacity一般要高于实际字符串长度len。当字符串长度小于1M时,扩容都是加倍现有的空间,如果超过1M,扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>字符串类型在工作中使用广泛,主要用于不怎么更改但频繁查询的缓存数据,提高査询性能。比如存储登录用户信息、电商中存储商品信息、可以做计数器(想知道什么时候封锁一个IP地址(访问超过几次))等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set username onejane</span><br><span class="line">get username</span><br><span class="line">mset age 18 address suzhou</span><br><span class="line">mget username age</span><br><span class="line">incr num </span><br><span class="line">decr num</span><br><span class="line">incrby num 2</span><br><span class="line">decrby num 2</span><br><span class="line">del num</span><br></pre></td></tr></table></figure><h2 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h2><p>散列相当于Java中的 HashMap,内部是无序字典。实现原理跟 HashMap一致。一个哈希表有多个节点,每个节点保存一个键值对。<br>与Java中的 HashMap不同的是, rehash的方式不一样,因为Java的 HashMap在字典很大时, rehash是个耗时的操作,需要次性全部 rehash。 Redis为了高性能,不能堵塞服务,所以采用了渐进式 rehash策略。<br>渐进式 rehash会在 rehash的同时,保留新旧两个hash结构,查询时会同时查询两个hash结构,然后在后续的定时任务中以及hash操作指令中,循序渐进地将旧hash的内容一点点迁移到新的hash结构中。当搬迁完成了,就会使用新的hash结。构取而代之<br>当hash移除了最后一个元素之后,该数据结构自动被删除,内存被回收。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis快速入门</title>
      <link href="/2021/05/09/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2021/05/09/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>高性能：底层C语言编写，内存数据库，通讯采用epoll非阻塞I/O多路复用机制</p><p>线程安全：单线程属于原子操作，高并发场景下保证数据安全。</p><blockquote><p>redis 6.0多线程体现在网络协议解析。同步数据上，底层核心操作还是单线程的。</p></blockquote><p>功能丰富：</p><ul><li><p>数据结构：String,List,HashSet,SortedSet,GEO,BitMap,HyperLogLog</p></li><li><p>持久化：RDB持久化,AOF持久化,RDB-AOF混合持久化</p></li><li><p>主从：Master-Slave应对高并发场景，一般单机QPS都在几万左右，如果需要支撑高并发，我们可以将Redis做成主从架构来支持读写分离。</p><p>主从架构 -&gt; 读写分离 -&gt; 支撑10万+读QPS</p><blockquote><p>并发10w以内：单节点读11w qps 写8.1w qps</p><p>10w-20w：读写分离 主从模式，为了主节点高可用，提供哨兵监控，为了降低各节点存储数据压力，提供集群模式</p></blockquote></li><li><p>哨兵：主节点不能出现单点故障，哨兵机制Sentinel监控主节点，自动主从切换</p></li><li><p>集群：数据存储压力通过cluster分片存储，模块化实现自定义实现个性化需求</p></li></ul><p><img src="/2021/05/09/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image-20210509091444218.png" alt="image-20210509091444218"></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>用户：注册，单点登录，签到</p><p>好友功能：关注，取消，互粉</p><p>排行榜：积分，热度排行榜</p><p>缓存：缓存餐厅数据</p><p>秒杀：预售，倒计时秒杀</p><p>订单：分布式锁</p><p>附近的人：地理位置搜索</p><p>Feed：添加，点赞，评论，列表</p><p><img src="/2021/05/09/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image-20210509092343156.png" alt="image-20210509092343156"></p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>Springboot整合Redis SpringCloud搭建微服务</p><p>系统响应慢：连接池优化，用合适的数据类型缓存，慢日志查询，BigKey处理</p><p>缓存异常：分布式锁，LRU淘汰算法，通过限流等处理缓存雪崩，穿透。</p><p>数据丢失不安全：主从复制数据一致性，RDB-AOF混合持久化，全量/部分同步</p><p>主从复制故障：哨兵监控，主观/客观下线</p><p>存储不够用：集群分片存储，集群内部原理，故障自动转移</p><p>服务器宕机：集群动态收缩，moved/ask转向，故障演示与恢复方案</p><blockquote><ol><li>底层原理：网络底层，事务处理，持久化原理，主从复制原理，哨兵机制，分片存储原理</li><li>底层算法：Sorted Set底层，Bitmap、Geo算法，数据过期淘汰算法，Leader选举流程，槽位定位算法，备份迁移及其算法</li><li>性能提升方案：Key与Value设计规范，避免BigKey，避免耗时操作，Pipline管道操作，连接池性能优化，子进程的开销与优化</li><li>故障解决方案：数据延迟，数据脏读，数据抖动，数据一致性，热点数据存储，RDB文件损坏</li></ol></blockquote><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><ol><li>Redis2.6</li></ol><ul><li>键的过期时间支持毫秒</li><li>从节点支持只读功能</li></ul><ol start="2"><li>Redis2.8</li></ol><ul><li>可以用bind命令绑定多个IP地址</li><li>发布订阅添加了pub/sub</li><li>Redis Sentienl第二版，相比于Redis2.6的RedisSentinel，已经变成生产可用</li></ul><ol start="3"><li>Redis3.0</li></ol><ul><li>添加Redis的分布式实现Redis Cluster</li></ul><ol start="4"><li>Redis3.2</li></ol><ul><li>添加GEO相关功能</li><li>新List类型：quicklist</li></ul><ol start="5"><li>Redis4.0</li></ol><ul><li>提供了模块系统,方便第三方开发者拓展 Redis的功能</li><li>提供了新的缓存剔除算法:LFU( Last Frequently Used),并对已有算法进行了优化。</li><li>提供了非阻塞del和 flushall/flushdb功能,有效解决删除了 bigKey可能造成的 Redis阻塞。</li><li>提供了RDB-AOF混合持久化格式,充分利用了AOF和RDB各自优势。</li></ul><ol start="7"><li>Redis5.0</li></ol><ul><li>新的 Stream数据类型。</li><li>客户经常连接和断开连接时性能更好。</li></ul><ol start="8"><li>Redis6.0</li></ol><ul><li>多线程IO，多线程部分只是用来处理网络数据的读写和协议解析,执行命令仍然是单线程。</li></ul><h1 id="支撑10w-qps"><a href="#支撑10w-qps" class="headerlink" title="支撑10w+qps"></a>支撑10w+qps</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>内存数据库,速度快,也支持数据的持久化</p></li><li><p>Redis不仅仅攴持简单的 key-value类型的数据,同时还提供 Lists、 Hashes、Sets、 Sorted Sets等多种数据结构的存储。</p></li><li><p>Redis支持数据的备份( master-slave)与集群(分片存储),以及拥有哨兵监控机制。</p></li><li><p>支持事务</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2></li><li><p>性能极高- Redis能读的速度是110000次/s,写的速度是81000次/s</p></li><li><p>丰富的数据类型- Redis支持 Strings、 Lists、 Hashes、Sets、 Sorted Sets等数据类型操作。</p></li><li><p>原子操作- Redis的所有操作都是原子性的,同时 Redis还支持对几个操作合并后的原子性执行(事务)</p></li><li><p>丰富的特性- Redis还支持 publish/subscribe,通知,key过期等特性</p></li></ul><p><img src="/2021/05/09/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image-20210509104849482.png" alt="image-20210509104849482"></p><ul><li>主节点一旦故障，无法写入数据，哨兵机制解决，奇数哨兵&gt;1/2重新选举主节点，避免网络波动误判  </li><li>读写分离，每次写入都会复制，从节点也会拥有实际数据，每个节点都有大量重复数据，服务器压力大，集群分片解决</li></ul><p><img src="/2021/05/09/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image-20210509105820391.png" alt="image-20210509105820391"></p><h2 id="Redis、Memcached、Ehcache区别"><a href="#Redis、Memcached、Ehcache区别" class="headerlink" title="Redis、Memcached、Ehcache区别"></a>Redis、Memcached、Ehcache区别</h2><p>Ehcache不能很好实现分布式项目缓存的同步共享的问题</p><p>Memcached数据类型单一</p><p><img src="/2021/05/09/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image-20210509110547832.png" alt="image-20210509110547832"></p><p>这三个中间件都可以应用于缓存,但目前市面上使用 Redis的场景会更多,更广泛,其原因是: Redis性能高、原子操作、支持多种数据类型,主从复制与哨兵监控,持久化操作等</p><h2 id="Redis的高并发"><a href="#Redis的高并发" class="headerlink" title="Redis的高并发"></a>Redis的高并发</h2><p>官方的 bench-mark数据:测试完成了50个并发执行100000个请求,设置和获取的值是一个256字节字符串。结果:读的速度是110000次/s,写的速度是81000次/s,redis尽量少写多读,符合缓存的适用要求,单机 redis支撑万级,如果10万+可以采用主从复制的模式。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li><p>Redis是纯内存数据库,没有磁盘IO，所以读取速度快。</p></li><li><p>Redis使用的是非阻塞I/O多路复用,减少了线程切换时上下文的切换和竞争。</p></li><li><p>Redis采用了单线程的模型,保证了每个操作的原子性,也减少了线程的上下文切换和竞争。</p></li><li><p>Redis存储结构多样化,不同的数据结构对数据存储进行了优化加快读取的速度。</p></li><li><p>Redis采用自己实现的事件分离器,效率比较高,内部采用非阻塞的执行方式,吞吐能力比较大</p></li></ol><h3 id="Redis的单线程"><a href="#Redis的单线程" class="headerlink" title="Redis的单线程"></a>Redis的单线程</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ol><li><p>不需要各种锁的性能消耗</p></li><li><p>单线程多进程集群方案</p></li><li><p>CPU消耗</p></li></ol><h4 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h4><p>单进程单线程优势</p><ol><li>代码更清晰,处理逻辑更简单</li><li>不用去考虑各种锁的问题,不存在加锁释放锁操作,没有因为可能出现死锁而导致的性能消耗</li><li>不存在多进程或者多线程导致的切换而消耗CPU</li></ol><p>单进程单线程弊端</p><ol><li>无法发挥多核CPU性能,不过可以通过在单机开多个 Redis实例来完善</li></ol><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>Redis采用网络IO多路复用技术来保证在多连接的时候系统高吞吐量，提高快速的写入和读取能力。</p><p><img src="/2021/05/09/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image-20210509112505847.png" alt="image-20210509112505847"></p><p><img src="/2021/05/09/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image-20210509112552141.png" alt="image-20210509112552141"></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">wget -P &#x2F;usr&#x2F;local&#x2F;src&#x2F; https:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-6.0.9.tar.gz  下载redis-6.0.9</span><br><span class="line">tar zxvf redis-6.0.9.tar.gz  解压</span><br><span class="line">yum install -y gcc-c++ autoconf automake       安装redis-6.0.9必备依赖,升级gcc</span><br><span class="line">yum install -y centos-release-scl scl-utils-build</span><br><span class="line">yum install -y devtoolset-9-toolchain</span><br><span class="line">scl enable  devtoolset-9 bash</span><br><span class="line">gcc -v</span><br><span class="line">cd redis-6.0.9&#x2F; &amp;&amp; make   编译</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;redis</span><br><span class="line">make PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis&#x2F; install   安装redis</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;</span><br><span class="line">.&#x2F;redis-server   启动redis-server</span><br><span class="line">cp &#x2F;usr&#x2F;local&#x2F;src&#x2F;redis-6.0.9&#x2F;redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;</span><br><span class="line">vi redis.conf 打开守护进程daemonize yes</span><br><span class="line">.&#x2F;redis-server redis.conf  后台运行redis</span><br><span class="line">vi &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;redis.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;redis-server</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server   &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis.conf</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start redis.service</span><br><span class="line">systemctl stop redis.service</span><br><span class="line">systemctl enable redis.service</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Redis支持很多的参数,但都有默认值。</p><ul><li><strong>daemonize</strong>默认情况下, redis不是在后台运行的,如果需要在后台运行,把该项的值更改为yes</li><li><strong>bind</strong>指定 Redis只接收来自于该IP地址的请求。</li><li><strong>port</strong>监听端口,默认为6379。</li><li><strong>databases</strong>设置数据库的个数,默认使用的数据库是0。</li><li><strong>save</strong>设置 Redis进行数据库镜像的频率</li><li><strong>filename</strong>镜像备份文件的文件名。</li><li><strong>dir</strong>数据库镜像备份的文件放置的路径。</li><li><strong>requirepass</strong>设置客户端连接后进行任何其他指定前需要使用的密码。</li><li><strong>maxclients</strong>限制同时连接的客户数量。</li><li><strong>maxmemory</strong>设置 redis能够使用的最大内存</li></ul><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">vi redis.conf</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">requirepass 123456</span><br><span class="line">systemctl restart redis.service</span><br><span class="line"></span><br><span class="line">vim Vagrantfile</span><br><span class="line">config.vm.network &quot;private_network&quot;, type: &quot;dhcp&quot;</span><br><span class="line">vagrant reload</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;</span><br><span class="line">.&#x2F;redis-cli -h 172.28.128.3 -p 6379 -a 123456</span><br><span class="line">.&#x2F;redis-cli  -a 123456</span><br><span class="line">select 2</span><br><span class="line">set username wj</span><br><span class="line">keys *</span><br><span class="line">info CPU</span><br><span class="line">info cluster</span><br><span class="line">info</span><br><span class="line">flushall</span><br></pre></td></tr></table></figure><p>Redis Desktop Manager</p><h3 id="jedis"><a href="#jedis" class="headerlink" title="jedis"></a>jedis</h3><p>Redis的Java客户端也有很多:<a href="https://redis.io/clients#java,%E5%85%B6%E4%B8%AD%E6%AF%94%E8%BE%83%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E6%98%AF" target="_blank" rel="noopener">https://redis.io/clients#java,其中比较受欢迎的是</a> Jedis和 Lettuce。</p><ul><li>Jedis在实现上是直接连接的 redis server,如果在多线程环境下是非线程安全的,这个时候只有使用连接池,为毎个Jedis实例增加物理连接,官方推荐</li><li>Lettuce的连接是基于Netty的,连接实例( StatefulRedisConnection)可以在多个线程间并发访问,应为StatefulRedisConnection是线程安全的,所以一个连接实例( StatefulRedisconnection)就可以满足多线程环境下的并发访问,当然这个也是可伸缩的设计,一个连接实例不够的情况也可以按需增加连接实例。</li><li>在 Spring Boot Data Redis1.X之前默认使用的是 Jedis,但目前最新版的修改成了 Lettuce。</li><li>之前公司使用 Jedis居多, Lettuce近两年在逐步上升,总的来讲 Jedis的性能会优于 Lettuce(因为它是直接操作 Redis)。</li></ul><p><strong>pom引入依赖</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--jedis客户端--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.3.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.13&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class JedisTest &#123;</span><br><span class="line">    Jedis jedis &#x3D; null;</span><br><span class="line">    @Before</span><br><span class="line">    public void testInit()&#123;</span><br><span class="line">        jedis &#x3D; new Jedis(&quot;172.28.128.3&quot;,6379);</span><br><span class="line">&#x2F;&#x2F;        jedis.auth(&quot;123456&quot;);</span><br><span class="line">        String pong &#x3D; jedis.ping();</span><br><span class="line">        System.out.println(pong);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testString()&#123;</span><br><span class="line">        System.out.println(jedis.select(2));</span><br><span class="line">        System.out.println(jedis.set(&quot;username&quot;,&quot;onejane&quot;));</span><br><span class="line">        System.out.println(jedis.get(&quot;username&quot;));</span><br><span class="line">        jedis.set(&quot;user:name:1&quot;,&quot;j&quot;);</span><br><span class="line">        System.out.println(jedis.get(&quot;user:name:1&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testKeys()&#123;</span><br><span class="line">        System.out.println(jedis.select(2));</span><br><span class="line">        System.out.println(jedis.keys(&quot;*&quot;));</span><br><span class="line">        System.out.println(jedis.flushAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @After</span><br><span class="line">    public void close()&#123;</span><br><span class="line">        if(null !&#x3D; jedis)&#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Jedis连接池优化</strong></p><p>我们知道 Jedis是直接操作 Redis,当在并发量非常大的时候,那么 Jedis操作 Redis的连接数很有可能就会异常,因此为了提髙操作效率,引入连接池。</p><p>Jedis池化技术( JedisPool)在创建时初始化一些连接资源存储到连接池中,使用 Jadis连接资源时不需要创建,而是从连接池中获取一个资源进行 redis的操作,使用完毕后,不需要销毁该 jedis连接资源,而是将该资源归还给连接池,供其他请求使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class JedisPoolConnectRedis &#123;</span><br><span class="line">    private static JedisPool jedisPool;</span><br><span class="line">    static &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建连接池配置对象</span><br><span class="line">        JedisPoolConfig jedisPoolConfig &#x3D; new JedisPoolConfig();</span><br><span class="line">        &#x2F;&#x2F; 设置最大连接数 默认8</span><br><span class="line">        jedisPoolConfig.setMaxTotal(5);</span><br><span class="line">        &#x2F;&#x2F; 设置最大空闲数量 默认8</span><br><span class="line">        jedisPoolConfig.setMaxIdle(5);</span><br><span class="line">        &#x2F;&#x2F; 设置最少空闲数量 默认0</span><br><span class="line">        jedisPoolConfig.setMinIdle(0);</span><br><span class="line">        &#x2F;&#x2F; 设置等待时间 ms</span><br><span class="line">        jedisPoolConfig.setMaxWaitMillis(100);</span><br><span class="line">        &#x2F;&#x2F; 初始化 JedisPool 对象</span><br><span class="line">        jedisPool &#x3D; new JedisPool(jedisPoolConfig,&quot;172.28.128.3&quot;,6379,100);</span><br><span class="line">&#x2F;&#x2F;        jedisPool &#x3D; new JedisPool(jedisPoolConfig,&quot;172.28.128.3&quot;,6379,100,&quot;123456&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取jedis对象</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Jedis getJedis()&#123;</span><br><span class="line">        return jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改测试生成jedis对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis &#x3D; null;</span><br><span class="line">@Before</span><br><span class="line">public void testInit()&#123;</span><br><span class="line">    jedis &#x3D; JedisPoolConnectRedis.getJedis();</span><br><span class="line">    &#x2F;&#x2F;  jedis.auth(&quot;123456&quot;);</span><br><span class="line">    String pong &#x3D; jedis.ping();</span><br><span class="line">    System.out.println(pong);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-data"><a href="#spring-data" class="headerlink" title="spring-data"></a>spring-data</h3><p><strong>pom添加依赖</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.10.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    </span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--lettuce线程安全 打开commons-pool2依赖， spring.redis.jedis改成spring.redis.lettuce即可--&gt;</span><br><span class="line">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;artifactId&gt;commons-pool2&lt;&#x2F;artifactId&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;&#x2F;dependency&gt;--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;&#x2F;exclusion&gt;</span><br><span class="line">            &lt;&#x2F;exclusions&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>application.yml添加配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  # redis配置</span><br><span class="line">  redis:</span><br><span class="line">    host: 172.28.128.3</span><br><span class="line">    port: 6379</span><br><span class="line">    database: 5</span><br><span class="line">    # jedis连接池配置</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-idle: 8</span><br><span class="line">        min-idle: 0</span><br><span class="line">        max-wait: 1000</span><br><span class="line">#    password: 123456</span><br><span class="line">#    lettuce:</span><br><span class="line">#      pool:</span><br><span class="line">#        max-active: 8</span><br><span class="line">#        max-idle: 8</span><br><span class="line">#        min-idle: 0</span><br><span class="line">#        max-wait: 1000</span><br></pre></td></tr></table></figure><p><strong>启动类添加Redis序列化方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; redisTemplate &#x3D; new RedisTemplate&lt;&gt;();</span><br><span class="line">    redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 使用Jackson2JsonRedisSerialize 替换默认序列化</span><br><span class="line">    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer &#x3D; new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line"></span><br><span class="line">    ObjectMapper objectMapper &#x3D; new ObjectMapper();</span><br><span class="line">    objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">    objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line">    jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 设置value的序列化规则和 key的序列化规则</span><br><span class="line">    redisTemplate.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">    redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    redisTemplate.afterPropertiesSet();</span><br><span class="line">    return redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest&#x2F;&#x2F; 默认 (classes &#x3D; &#123;SpringdataDemoApplication.class&#125;)</span><br><span class="line">class SpringdataDemoApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void testInit() &#123;</span><br><span class="line">        System.out.println(redisTemplate.getConnectionFactory().getConnection().ping());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testString()&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(&quot;username&quot;,&quot;onejane&quot;);;</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(&quot;username&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h1><p><img src="/2021/05/09/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image-20210509162132020.png" alt="image-20210509162132020"></p><h2 id="food-social-contact-parent"><a href="#food-social-contact-parent" class="headerlink" title="food-social-contact-parent"></a>food-social-contact-parent</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;spring-boot-version&gt;2.3.5.RELEASE&lt;&#x2F;spring-boot-version&gt;</span><br><span class="line">    &lt;spring-cloud-version&gt;Hoxton.SR8&lt;&#x2F;spring-cloud-version&gt;</span><br><span class="line">    &lt;lombok-version&gt;1.18.16&lt;&#x2F;lombok-version&gt;</span><br><span class="line">    &lt;commons-lang-version&gt;3.11&lt;&#x2F;commons-lang-version&gt;</span><br><span class="line">    &lt;mybatis-starter-version&gt;2.1.3&lt;&#x2F;mybatis-starter-version&gt;</span><br><span class="line">    &lt;swagger-starter-version&gt;2.1.5-RELEASE&lt;&#x2F;swagger-starter-version&gt;</span><br><span class="line">    &lt;hutool-version&gt;5.4.7&lt;&#x2F;hutool-version&gt;</span><br><span class="line">    &lt;guava-version&gt;20.0&lt;&#x2F;guava-version&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 集中定义依赖，不引入 --&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- spring boot 依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring-boot-version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- spring cloud 依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring-cloud-version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- lombok 依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;lombok-version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- common-lang3 依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;commons-lang-version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- mybatis 依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mybatis-starter-version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- swagger 依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.battcn&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;swagger-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;swagger-starter-version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- mysql 依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- hutool 依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;hutool-version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- guava 依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.guava&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;guava&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;guava-version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 集中定义项目所需插件 --&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;pluginManagement&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!-- spring boot maven 项目打包插件 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;pluginManagement&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure><h2 id="注册中心ms-registry"><a href="#注册中心ms-registry" class="headerlink" title="注册中心ms-registry"></a>注册中心ms-registry</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: ms-registry</span><br><span class="line"></span><br><span class="line"># 配置 Eureka Server 注册中心</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8080&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>启动类添加注册中心注解<code>@EnableEurekaServer</code></p><p>访问<a href="http://127.0.0.1:8080/" target="_blank" rel="noopener">http://127.0.0.1:8080/</a>  查看注册到eureka的实例</p><h2 id="网关ms-gateway"><a href="#网关ms-gateway" class="headerlink" title="网关ms-gateway"></a>网关ms-gateway</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-gateway&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: ms-gateway</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          enabled: true # 开启配置注册中心进行路由功能</span><br><span class="line">          lower-case-service-id: true # 将服务名称转小写</span><br><span class="line">      routes:</span><br><span class="line">        - id: ms-diners</span><br><span class="line">          uri: lb:&#x2F;&#x2F;ms-diners</span><br><span class="line">          predicates:</span><br><span class="line">            - Path&#x3D;&#x2F;hello&#x2F;**</span><br><span class="line"></span><br><span class="line"># 配置 Eureka Server 注册中心</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    # 注册中心实例以ip显示</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8080&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><h2 id="食客ms-diners"><a href="#食客ms-diners" class="headerlink" title="食客ms-diners"></a>食客ms-diners</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: ms-diners</span><br><span class="line"></span><br><span class="line"># 配置 Eureka Server 注册中心</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8080&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p><strong>Controller</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;hello&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping</span><br><span class="line">    public String hello(String name) &#123;</span><br><span class="line">        return &quot;hello &quot; + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接访问 <a href="http://localhost:8081/hello?name=redis" target="_blank" rel="noopener">http://localhost:8081/hello?name=redis</a><br>网关访问 <a href="http://localhost/hello?name=redis" target="_blank" rel="noopener">http://localhost/hello?name=redis</a></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida沙箱自吐实现</title>
      <link href="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h1><p>沙箱：对于系统来说，单个APP是没有隐私的，不管是脱壳、还是收发包，都是由系统的API来执行的。HOOK系统的API，就能得到很多APP的关键信息。</p><p>APP想要对抗沙箱：</p><ol><li>尽可能减少系统API的调用；</li><li>尽可能自己实现一定量的算法；</li><li>对自己实现的算法进行强混淆；</li><li>增加自身算法的复杂度吧：VMP</li></ol><p>各大安全公司、杀毒软件公司基本上都会有自己的沙箱，只要病毒/木马在自己的沙箱跑一遍，直接得到执行流、病毒相似性分析，如绑绑安全的<a href="https://www.bangcle.com/products/productindex?product_id=3" target="_blank" rel="noopener">安全密钥白盒</a>，对于APP也是一样的。</p><h2 id="基于hook的沙箱"><a href="#基于hook的沙箱" class="headerlink" title="基于hook的沙箱"></a>基于hook的沙箱</h2><p>Youpk Fart 都是沙箱,由于基于系统本身基本无法对抗。</p><h3 id="appmon"><a href="#appmon" class="headerlink" title="appmon"></a>appmon</h3><p><a href="https://github.com/dpnishant/appmon/wiki/4.a-Setup-Host" target="_blank" rel="noopener">appmon wiki</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;fs128arm64 </span><br><span class="line">vim &#x2F;etc&#x2F;proxychains4.conf </span><br><span class="line">socks5  192.168.0.107 1080   # 电脑主机 ssr选项设置-开启来自局域网的连接</span><br><span class="line">PYTHON_CONFIGURE_OPTS&#x3D;&quot;--disable-ipv6&quot; proxychains4 pyenv install 3.8.2</span><br><span class="line">PYTHON_CONFIGURE_OPTS&#x3D;&quot;--disable-ipv6&quot; proxychains4 pip install frida&#x3D;&#x3D;12.8.0</span><br><span class="line">PYTHON_CONFIGURE_OPTS&#x3D;&quot;--disable-ipv6&quot; proxychains4 pip install frida-tools&#x3D;&#x3D;5.3.0</span><br><span class="line">PYTHON_CONFIGURE_OPTS&#x3D;&quot;--disable-ipv6&quot; proxychains4 pip install objection&#x3D;&#x3D;1.8.4</span><br><span class="line">proxychains wget https:&#x2F;&#x2F;github.com&#x2F;dpnishant&#x2F;appmon&#x2F;archive&#x2F;refs&#x2F;heads&#x2F;master.zip</span><br><span class="line">7z x master.zip </span><br><span class="line">cd appmon-master </span><br><span class="line">pip install argparse flask termcolor dataset --upgrade --ignore-installed six</span><br><span class="line">python appmon.py -a &quot;com.xiaojianbang.app&quot; -p android -s scripts&#x2F;Android</span><br></pre></td></tr></table></figure><p>点击HookTestDemo.apk的算法加密按钮，触发生成./app_dumps/com.xiaojianbang.app.db</p><p>访问<a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a>  选择com.xiaojianbang.app</p><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/image-20210506003248713.png" alt="image-20210506003248713"></p><p>由于显示内容都是[Object Object],修改源码打印hook内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.value &#x3D; byteArraytoHexString(digest);  删除</span><br><span class="line">var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);  替换</span><br><span class="line">data.value &#x3D; ByteString.of(digest).hex()</span><br><span class="line"></span><br><span class="line">frida -UF -l Hash.js</span><br></pre></td></tr></table></figure><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/image-20210506003840372.png" alt="image-20210506003840372"></p><h2 id="基于源码的沙箱"><a href="#基于源码的沙箱" class="headerlink" title="基于源码的沙箱"></a>基于源码的沙箱</h2><p><a href="https://pan.baidu.com/s/1uPZbnKXa2_RJEUJRFxckLA" target="_blank" rel="noopener">aosp810r1</a>   解压<br><a href="https://dl.google.com/dl/android/aosp/google_devices-sailfish-opm1.171019.011-f3bafc8b.tgz" target="_blank" rel="noopener">驱动Vendor image</a>  <a href="https://dl.google.com/dl/android/aosp/qcom-sailfish-opm1.171019.011-247af472.tgz" target="_blank" rel="noopener">驱动GPS, Audio, Camera, Gestures, Graphics, DRM, Video, Sensors</a>  解压驱动<br>解压到aosp810r1中后<code>./extrace-google_devices-sailfish.sh</code>  和<code>./extrace-qcom-sailfish.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># apt update</span><br><span class="line"># git config --global user.email &quot;you@example.com&quot;</span><br><span class="line"># git config --global user.name &quot;Your Name&quot;</span><br><span class="line"># apt install bison tree</span><br><span class="line"># dpkg --add-architecture i386</span><br><span class="line"># apt update</span><br><span class="line"># apt install libc6:i386 libncurses5:i386 libstdc++6:i386</span><br><span class="line"># apt install libxml2-utils</span><br><span class="line"></span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;swapfile bs&#x3D;1024 count&#x3D;10240000  使用dd创建swapfile作为swap分区空间</span><br><span class="line">mkswap swapfile  mkswap创建交换文件</span><br><span class="line"></span><br><span class="line">Kali下手动安装openjdk-8-jdk：</span><br><span class="line"># wget http:&#x2F;&#x2F;http.kali.org&#x2F;pool&#x2F;main&#x2F;o&#x2F;openjdk-8&#x2F;openjdk-8-jdk-headless_8u212-b01-1_amd64.deb</span><br><span class="line"># dpkg -i openjdk-8-jdk-headless_8u212-b01-1_amd64.deb</span><br><span class="line"># wget http:&#x2F;&#x2F;http.kali.org&#x2F;pool&#x2F;main&#x2F;o&#x2F;openjdk-8&#x2F;openjdk-8-jdk_8u212-b01-1_amd64.deb</span><br><span class="line"># dpkg -i openjdk-8-jdk_8u212-b01-1_amd64.deb</span><br><span class="line">安装完成后再用：</span><br><span class="line"># update-alternatives --config java</span><br><span class="line"># update-alternatives --config javac</span><br><span class="line">选择2来切换jdk的版本：见图</span><br><span class="line">最后用version选项来确认版本：</span><br><span class="line"># java -version</span><br><span class="line"># javac -version</span><br><span class="line">source build&#x2F;envsetup.sh</span><br><span class="line">lunch   选择24 aosp_sailfish-userdebug</span><br><span class="line">make   编译完成的系统镜像位于当前目录的out&#x2F;target&#x2F;product&#x2F;sailfish&#x2F;下包括各个img</span><br></pre></td></tr></table></figure><p><a href="https://dl.google.com/dl/android/aosp/sailfish-opm1.171019.011-factory-56d15350.zip" target="_blank" rel="noopener">官方镜像</a>  下载下来后解压将上面编译好的所有img替换到官方镜像解压后的image-sailfish-opm1.171019.011文件夹，并还原创建zip包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">.&#x2F;flash-all.sh</span><br></pre></td></tr></table></figure><p><a href="http://wuxiaolong.me/2018/08/15/AOSP3/" target="_blank" rel="noopener">Android Studio 导入 AOSP 源码</a>  <code>development/tools/idegen/idegen.sh</code></p><p>会在根目录下生成<br>android.iml 和 android.ipr 这两个文件，这两个文件是 Android Studio 的工程配置文件，这时候其实已经可以直接导入 Android Studio，但会导入所有的源码模块，会很慢，可以进行过滤，除了 frameworks 模块和 packages 模块，其他都给过滤掉，不导入 Android Studio，打开 android.iml 文件，搜下<code>excludeFolder</code>，在后面加入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;art&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;bionic&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;bootable&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;build&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;cts&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;dalvik&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;developers&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;development&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;device&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;docs&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;external&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;hardware&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;kernel&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;libcore&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;libnativehelper&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;out&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;pdk&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;platform_testing&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;prebuilts&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;sdk&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;system&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;test&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;toolchain&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;tools&quot; &#x2F;&gt;</span><br><span class="line">&lt;excludeFolder url&#x3D;&quot;file:&#x2F;&#x2F;$MODULE_DIR$&#x2F;.repo&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>发现 Android Studio 不停 scanning files to index，我的强迫症又犯了，解决：</p><ol><li>invalidate and restart 不起作用；</li><li>右击项目 –&gt; Open module setting –&gt; Modules –&gt; 找到 gen 文件夹 –&gt; 右键选择 Resources，终于告别烦人的 scanning files to index。</li></ol><p>修改MessageDigest.java</p><h3 id="crypto-filter-aosp"><a href="#crypto-filter-aosp" class="headerlink" title="crypto_filter_aosp"></a><a href="https://github.com/icew4y/crypto_filter_aosp" target="_blank" rel="noopener">crypto_filter_aosp</a></h3><p>基于android6.0.1 Nexus 6P <a href="https://pan.baidu.com/s/1Fe_m_OsWiVZJ03eWlR-0mg" target="_blank" rel="noopener">ROM</a>,<a href="https://dl.google.com/dl/android/aosp/angler-mmb29v-factory-17366b60.zip" target="_blank" rel="noopener">系统底包</a></p><p>先刷官方原版底包，老版本使用fastboot6.0放到kali的/root/Android/Sdk/plateform-tools,<code>flash-all.sh</code></p><ol><li>手机先刷入fastbboot flash recovery twrp</li><li>下载rom解压，adb push ROM/ /sdcard/TWRP/BACKUPS</li><li>进入twrp，从备份中恢复Restore,重启手机,然后修改权限 chmod 777 /data/local/tmp/monitor_package</li><li>安装你需要监控的apk(系统自动把最后一次安装的apk添加进去监控的列表 /data/local/tmp/monitor_package),只能同时监控一个<code>adb install HookTestDemo.apk</code></li><li>/data/data/package_name/下面生成APK调用的算法,只有三种(数据均为JSON编码,字段为BASE64编码)<code>/data/data/com.xiaojianbang.app</code></li></ol><p>参考crypto_filter_aosp文件夹源码添加到aosp810r1的源码中，将MyUtil.java,ContextHolder.java,AndroidBase64.java,Cipher.java放到<code>aosp810r1/libcore/ojluni/src/main/java/javax/crypto</code></p><p>将参考20200212/MessageDigest.java代码实现到aosp810r1的MessageDigest.java。同理，修改Mac.java</p><p>openjdk_java_files.mk添加新增的需要编译的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;javax&#x2F;crypto&#x2F;Mac.java \</span><br><span class="line">ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;javax&#x2F;crypto&#x2F;ContextHolder.java \</span><br><span class="line">ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;javax&#x2F;crypto&#x2F;MyUtil.java \</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source build&#x2F;envsetup.sh</span><br><span class="line">lunch aosp_sailfish-user</span><br><span class="line">make 如报错make update-api</span><br></pre></td></tr></table></figure><p>编译完成后将编译好的img压缩成image-sailfish-opm1.17019.011.zip放到官方系统底包，<code>./flash-all.bat</code>刷机   </p><h1 id="AOSP网络库自吐"><a href="#AOSP网络库自吐" class="headerlink" title="AOSP网络库自吐"></a>AOSP网络库自吐</h1><p>适用于沙箱的原则：我们要可以在安卓源码中找到其实现、彻底的修改其实现。</p><p>App开发实力越强，App自己实现的内容越多，对系统的依赖程度越低，沙箱的作用就越小。→ 沙箱只能帮助定位到关键的点，如何把内容解开还是分析自己实现的部分。</p><p>为了能抓到包，无数安全研究人员使出浑身解数，我们可以按照OSI七层模型或TCP/IP四层模型。</p><blockquote><ol><li>我们在谈论MAC地址/ARP的时候，我们聊的就是链路层；</li><li>我们在谈论IP地址/路由器的时候，我们聊的就是网络层；</li><li>我们在谈论连接某个端口的时候，我们聊的就是传输层；</li><li>我们在谈论发送数据的内容的时候，我们聊的就是应用层；</li></ol></blockquote><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_5XMU3SB58Y5QA2K.png" alt="img"></p><p><strong>应用层/Application：基于中间人的HTTP(S)抓包</strong></p><ul><li>该方法继承于网页端的抓包，只不过对抗性全面强化；在设计网站时无法控制客户端，但是App确是可以被厂商全面控制的；</li><li>在客户端校验服务器证书的情况下，需要将抓包软件（推荐Charles）的证书置于手机根证书目录下，推荐Magisk插件<a href="https://github.com/Magisk-Modules-Repo/movecert" target="_blank" rel="noopener">Move Certificates</a>；</li><li>在服务器验证客户端证书的情况下，还需要<a href="https://blog.csdn.net/qq_38316655/article/details/104176882" target="_blank" rel="noopener">在App中dump出证书导入到Charles</a>中，这就涉及到证书密码和证书的解密；</li><li>App使用特定API，绕过WIFI代理进行通信→ 使用VPN将所有流量导入到Charles → App还会<a href="https://mp.weixin.qq.com/s/UixExZkPWHJAT3jAD2sJJg" target="_blank" rel="noopener">检测VPN</a>，发现即断网 → 需要hook过VPN检测；</li></ul><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_PD5F7MBRW2NRUHN.png" alt="img"></p><blockquote><p>哪些是可以改的：（沙箱在辅助中间人抓包的过程中发挥的作用）</p><ul><li>Charles证书内置到系统根目录中去，某文件→某目录下<br>（<code>aosp810r1/system/ca-certificates/files</code>）</li><li>App的客户端证书的文件和密码，并不是所有的客户端证书都是必须以文件的形式、打开密码的要求存储的。可以是明文硬编码在代码里。<br>(<a href="https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java%EF%BC%8C" target="_blank" rel="noopener">https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java，</a>)</li><li>对抗部分：有没有使用No_ Proxy、VPN检测,<a href="https://mp.weixin.qq.com/s/UixExZkPWHJAT3jAD2sJJg" target="_blank" rel="noopener">某抢票app逆向续篇之干掉vpn抓包检测</a><br>(System.getProperty(“http.proxyHost”); System.getProperty(“http.proxyPort”); java.net.NetworkInterface.getName(),android.net.ConnectivityManager.getNetworkCapabilities())</li><li>SSL pinning：从文件打开、哈希的计算处打调用栈</li></ul></blockquote><ul><li>App使用SSL pinning，只信任自己的证书 → 从<a href="https://github.com/WooyunDota/DroidSSLUnpinning" target="_blank" rel="noopener">数十种框架</a>中找到<a href="https://square.github.io/okhttp/3.x/okhttp/okhttp3/CertificatePinner.html" target="_blank" rel="noopener">hook点</a>并绕过 → App进行了代码混淆 → 反混淆并hook绕过，而反混淆总是让人倒吸一口凉气。。。</li></ul><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_P8ZADA2376ZUCPY.png" alt="img"></p><ul><li>由于厂商可以全面控制客户端，因此可以使用小众协议，比如WebSocket、<a href="https://bbs.pediy.com/thread-264034.htm" target="_blank" rel="noopener">Protobuf</a>，甚至自己写协议，比如腾讯的<a href="https://bbs.pediy.com/thread-250845.htm" target="_blank" rel="noopener">JceStruct</a>，此时除了自己分析协议字段别无他法</li></ul><p><strong>传输层/Transport：App使用纯Socket通信</strong></p><ul><li>比如<a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1179834" target="_blank" rel="noopener">某应用</a>的数据采用点对点纯Socket的tcp通信，此时只有dump其通信流量，分析其raw data，结合源码分析字段构成；</li><li><a href="https://tech.meituan.com/2017/03/17/shark-sdk.html" target="_blank" rel="noopener">某厂商</a>开创性地提出了自建代理长连通道的网络加速方案，App中绝大部分的请求通过CIP通道中的TCP子通道与长连服务器通信，长连服务器将收到的请求代理转发到业务服务器，对于业务来讲大大提高了效率，但是对于逆向来说却加大了抓包的难度。</li></ul><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_8W4G2KBZHWW82XA.png" alt="img"></p><ul><li>也幸亏其SDK中包含了降级方案，可以hook某些关键函数实现降级到HTTP，给了安全研究员一口饭吃。更有大厂已经在通讯标准演进的路线上大步快跑，在目前HTTP/2都没有普及的情况下，受益于相比于网页端而言、App客户端全面可控的优势，<a href="https://zhuanlan.zhihu.com/p/157369714" target="_blank" rel="noopener">提前迈入HTTP/3时代</a>，在性能优化的KPI上一骑绝尘而去，从内核、算法、传输层网络库和服务端全部自研。</li></ul><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_8W4MCA8RE9WRJCF.png" alt="img"></p><p>面对连抓包工具都没有提供支持的kQUIC，逆向分析者只能说欲哭无泪。同样还是幸亏SDK中包含了<code>plan B</code>降级方案，可以通过hook来进行降级，安全研究员续命一秒钟。</p><p> <strong>网络层/Network：一般而言鲜有App可以更改设备的IP地址</strong> </p><ul><li>科学上网软件、VPN可以改手机的路由表，因此可以用来抓包；</li><li>可以自建路由器进行抓包，对手机完全无侵入、无感知，彻底搞定抓不到包！</li></ul><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_NZ72UJYECSHQPYP.png" alt="img"></p><ul><li>缺点是加密内容也无法还原，可以dump流量，却无法解密内容；在手机端连标准的SSL也解不开。也可以在手机上安装使用<code>Kali Nethunter</code>，在手机上直接跑<code>Wireshark</code>，接在4G流量卡上进行抓包，这种方式甚至可以抓到手机的流量卡的网卡包，应该是目前已知的唯一抓流量卡的方法。</li></ul><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_ADH5T9NFZWVAE7P.png" alt="img"></p><h2 id="应用层抓包通杀脚本"><a href="#应用层抓包通杀脚本" class="headerlink" title="应用层抓包通杀脚本"></a>应用层抓包通杀脚本</h2><ol><li>App在开发过程中，以App自己的权限，可以用代码实现到的最底层为传输层，也就用Socket接口，进行纯二进制的收发包，此处包括Java层和Native层。</li><li>除了少数开发实力雄厚甚至过剩的大厂，掌握着纯二进制收发包的传输层创新、或者自定义协议的技术之外，占绝对数量绝大多数的App厂商采用的还是传统的HTTP/SSL方案。</li></ol><p>而且占绝对数量中绝大多数的App，其实现HTTP/SSL的方案也是非常的直白，那就是调用系统的API，或者调用更加易用的网络框架，比如访问网站的<a href="https://square.github.io/okhttp/" target="_blank" rel="noopener">Okhttp框架</a>，播放视频的<a href="https://github.com/google/ExoPlayer" target="_blank" rel="noopener">Exoplayer</a>，异步平滑图片滚动加载框架<a href="https://muyangmin.github.io/glide-docs-cn/" target="_blank" rel="noopener">Glide</a>，对于非网络库或协议等底层开发者来说，这些才应当是普罗大众安卓应用开发者的日常。</p><p>所以我们在对<code>Java</code>层<code>Socket</code>接口进行<code>trace</code>之后打调用栈，即可清晰地得出从肉眼可见的视频、到被封装成HTTP包、再到进入SSL进行加解密，再通过<code>Socket</code>与服务器进行通信的完整过程。</p><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_EH72H72TGJW9XKK.png" alt="img"></p><p>只要开发者使用了应用层框架，即无法避免的使用了系统的Socket进行了收发，如果是<code>HTTP</code>则直接走了<code>Socket</code>，没有加解密、直接是明文，将内容dump下来即可；如果走了<code>HTTPS</code>，那么HTTP包还要“裹上”一层SSL，通过SSL的接口进行收发，<code>SSL</code>则将加密后和解密前的数据走<code>Socket</code>与服务器进行通信，明文数据只有<code>SSL</code>库自己知道。</p><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_B7KXZQUSQ8WDMDH.png" alt="img"></p><p>因此想要得到SSL加密前和解密后的HTTP数据的话，就要对SSL库有深入的研究，而像这种大型的、历史悠久的基础库，研究它的人是非常多的；比如谷歌就有研究员对<code>OpenSSL</code>的收发包接口进行了深入的研究，并对其收发包等接口使用frida进行hook，提取明文HTTP数据，最终的成品为<a href="https://github.com/google/ssl_logger" target="_blank" rel="noopener">ssl_logger项目</a>；因为这种库一般作为互联网世界架构的基础设施，所以其应用非常广泛，这也是为何当其暴漏出<a href="https://heartbleed.com/" target="_blank" rel="noopener">“心脏滴血”</a>漏洞时，几乎影响到所有互联网设备的原因，不管是<code>Linux</code>、<code>Macos/iOS</code>、还是安卓，使用的都是<code>OpenSSL</code>，刚刚我们<code>trace</code>到的<a href="http://androidxref.com/8.1.0_r33/xref/external/conscrypt/common/src/main/java/org/conscrypt/ConscryptFileDescriptorSocket.java#541" target="_blank" rel="noopener"><code>SSLInputStream.read</code></a>函数，充其量只是<code>OpenSSL</code>库在<code>Java</code>层的一个包装器罢了。</p><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_THBAKWN7W3AWUNG.png" alt="img"></p><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_R57W9AH8CQXWSJW.png" alt="img"></p><p>而又有来自阿里的巨佬，在使用的过程中，进一步优化了该项目的JS脚本，修复了在新版frida上的语法错误，并在原项目只支持<code>Linux</code>和<code>macOS</code>的基础上，增加了对<code>iOS</code>和<code>Android</code>的支持，最终的成品就是<a href="https://github.com/BigFaceCat2017/frida_ssl_logger" target="_blank" rel="noopener">frida_ssl_logger项目</a>。</p><p> 该项目的完成度已经非常高，其核心原理就是对<code>SSL_read</code>和<code>SSL_write</code>进行<code>hook</code>，得到其收发包的明文数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Process.platform &#x3D;&#x3D; &quot;darwin&quot; ? &quot;*libboringssl*&quot; : &quot;*libssl*&quot;, [&quot;SSL_read&quot;, &quot;SSL_write&quot;, &quot;SSL_get_fd&quot;, &quot;SSL_get_session&quot;, &quot;SSL_SESSION_get_id&quot;]], &#x2F;&#x2F; for ios and Android</span><br><span class="line">[Process.platform &#x3D;&#x3D; &quot;darwin&quot; ? &quot;*libsystem*&quot; : &quot;*libc*&quot;, [&quot;getpeername&quot;, &quot;getsockname&quot;, &quot;ntohs&quot;, &quot;ntohl&quot;]]</span><br></pre></td></tr></table></figure><p>并将明文数据使用<code>RPC</code>传输到电脑上，使用<code>hexdump</code>在<code>python</code>的控制台进行输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if verbose:</span><br><span class="line">    src_addr &#x3D; socket.inet_ntop(socket.AF_INET,</span><br><span class="line">                                struct.pack(&quot;&gt;I&quot;, p[&quot;src_addr&quot;]))</span><br><span class="line">    dst_addr &#x3D; socket.inet_ntop(socket.AF_INET,</span><br><span class="line">                                struct.pack(&quot;&gt;I&quot;, p[&quot;dst_addr&quot;]))</span><br><span class="line">    print(&quot;SSL Session: &quot; + p[&quot;ssl_session_id&quot;])</span><br><span class="line">    print(&quot;[%s] %s:%d --&gt; %s:%d&quot; % (</span><br><span class="line">        p[&quot;function&quot;],</span><br><span class="line">        src_addr,</span><br><span class="line">        p[&quot;src_port&quot;],</span><br><span class="line">        dst_addr,</span><br><span class="line">        p[&quot;dst_port&quot;]))</span><br><span class="line">    hexdump.hexdump(data)</span><br></pre></td></tr></table></figure><p>或者保存至<code>pcap</code>文件，以供后续进一步分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">def log_pcap(pcap_file, ssl_session_id, function, src_addr, src_port,</span><br><span class="line">                dst_addr, dst_port, data):</span><br><span class="line">    &quot;&quot;&quot;Writes the captured data to a pcap file.</span><br><span class="line">    Args:</span><br><span class="line">        pcap_file: The opened pcap file.</span><br><span class="line">        ssl_session_id: The SSL session ID for the communication.</span><br><span class="line">        function: The function that was intercepted (&quot;SSL_read&quot; or &quot;SSL_write&quot;).</span><br><span class="line">        src_addr: The source address of the logged packet.</span><br><span class="line">        src_port: The source port of the logged packet.</span><br><span class="line">        dst_addr: The destination address of the logged packet.</span><br><span class="line">        dst_port: The destination port of the logged packet.</span><br><span class="line">        data: The decrypted packet data.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    t &#x3D; time.time()</span><br><span class="line"> </span><br><span class="line">    if ssl_session_id not in ssl_sessions:</span><br><span class="line">        ssl_sessions[ssl_session_id] &#x3D; (random.randint(0, 0xFFFFFFFF),</span><br><span class="line">                                        random.randint(0, 0xFFFFFFFF))</span><br><span class="line">    client_sent, server_sent &#x3D; ssl_sessions[ssl_session_id]</span><br><span class="line"> </span><br><span class="line">    if function &#x3D;&#x3D; &quot;SSL_read&quot;:</span><br><span class="line">        seq, ack &#x3D; (server_sent, client_sent)</span><br><span class="line">    else:</span><br><span class="line">        seq, ack &#x3D; (client_sent, server_sent)</span><br><span class="line"> </span><br><span class="line">    for writes in (</span><br><span class="line">            # PCAP record (packet) header</span><br><span class="line">            (&quot;&#x3D;I&quot;, int(t)),  # Timestamp seconds</span><br><span class="line">            (&quot;&#x3D;I&quot;, int((t * 1000000) % 1000000)),  # Timestamp microseconds</span><br><span class="line">            (&quot;&#x3D;I&quot;, 40 + len(data)),  # Number of octets saved</span><br><span class="line">            (&quot;&#x3D;i&quot;, 40 + len(data)),  # Actual length of packet</span><br><span class="line">            # IPv4 header</span><br><span class="line">            (&quot;&gt;B&quot;, 0x45),  # Version and Header Length</span><br><span class="line">            (&quot;&gt;B&quot;, 0),  # Type of Service</span><br><span class="line">            (&quot;&gt;H&quot;, 40 + len(data)),  # Total Length</span><br><span class="line">            (&quot;&gt;H&quot;, 0),  # Identification</span><br><span class="line">            (&quot;&gt;H&quot;, 0x4000),  # Flags and Fragment Offset</span><br><span class="line">            (&quot;&gt;B&quot;, 0xFF),  # Time to Live</span><br><span class="line">            (&quot;&gt;B&quot;, 6),  # Protocol</span><br><span class="line">            (&quot;&gt;H&quot;, 0),  # Header Checksum</span><br><span class="line">            (&quot;&gt;I&quot;, src_addr),  # Source Address</span><br><span class="line">            (&quot;&gt;I&quot;, dst_addr),  # Destination Address</span><br><span class="line">            # TCP header</span><br><span class="line">            (&quot;&gt;H&quot;, src_port),  # Source Port</span><br><span class="line">            (&quot;&gt;H&quot;, dst_port),  # Destination Port</span><br><span class="line">            (&quot;&gt;I&quot;, seq),  # Sequence Number</span><br><span class="line">            (&quot;&gt;I&quot;, ack),  # Acknowledgment Number</span><br><span class="line">            (&quot;&gt;H&quot;, 0x5018),  # Header Length and Flags</span><br><span class="line">            (&quot;&gt;H&quot;, 0xFFFF),  # Window Size</span><br><span class="line">            (&quot;&gt;H&quot;, 0),  # Checksum</span><br><span class="line">            (&quot;&gt;H&quot;, 0)):  # Urgent Pointer</span><br><span class="line">        pcap_file.write(struct.pack(writes[0], writes[1]))</span><br><span class="line">    pcap_file.write(data)</span><br><span class="line"> </span><br><span class="line">    if function &#x3D;&#x3D; &quot;SSL_read&quot;:</span><br><span class="line">        server_sent +&#x3D; len(data)</span><br><span class="line">    else:</span><br><span class="line">        client_sent +&#x3D; len(data)</span><br><span class="line">    ssl_sessions[ssl_session_id] &#x3D; (client_sent, server_sent)</span><br></pre></td></tr></table></figure><p>由于完成度已经相当高了，在构建安卓应用层抓包通杀脚本时，应当尽可能复用其已经实现好的“基础设施”，只要为其再补上明文数据即可，而这明文数据从哪里来？根据多轮<code>trace</code>可以得知，明文数据的收发包接口，正是由<code>java.net.SocketOutputStream.socketWrite0</code>和<code>java.net.SocketInputStream.socketRead0</code>这两个<code>API</code>负责的，当然其实二者还有很多上层调用的接口，在选择分析的接口时，应尽量选择离<code>native</code>层更近的、并且在更多安卓版本上适用的，比如这两个API在安卓7、8、9、10上是通用和不变的，以降低工作量。</p><p> 最后的任务就是与<code>SSL_read</code>和<code>SSL_write</code>一样，根据收发的函数、找到收发的IP地址和端口，而正好两个API均有<code>socket</code>的实例域，提供了收发包的IP地址和端口信息。 </p><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_STFX4X9F2XQHM4F.png" alt="img"></p><p>最终就是取出这些信息，构造与<code>SSL</code>一样发给电脑即可，需要注意的是<code>Java</code>的<code>[B</code>需要手动转化成<code>JavaScript</code>的<code>ByteArray</code>还是略微复杂的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">if (Java.available) &#123;</span><br><span class="line">  Java.perform(function () &#123;</span><br><span class="line">    Java.use(&quot;java.net.SocketOutputStream&quot;).socketWrite0.overload(&#39;java.io.FileDescriptor&#39;, &#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (fd, bytearry, offset, byteCount) &#123;</span><br><span class="line">      var result &#x3D; this.socketWrite0(fd, bytearry, offset, byteCount);</span><br><span class="line">      var message &#x3D; &#123;&#125;;</span><br><span class="line">      message[&quot;function&quot;] &#x3D; &quot;HTTP_send&quot;;</span><br><span class="line">      message[&quot;ssl_session_id&quot;] &#x3D; &quot;&quot;;</span><br><span class="line">      message[&quot;src_addr&quot;] &#x3D; ntohl(ipToNumber((this.socket.value.getLocalAddress().toString().split(&quot;:&quot;)[0]).split(&quot;&#x2F;&quot;).pop()));</span><br><span class="line">      message[&quot;src_port&quot;] &#x3D; parseInt(this.socket.value.getLocalPort().toString());</span><br><span class="line">      message[&quot;dst_addr&quot;] &#x3D; ntohl(ipToNumber((this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;)[0]).split(&quot;&#x2F;&quot;).pop()));</span><br><span class="line">      message[&quot;dst_port&quot;] &#x3D; parseInt(this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;).pop());</span><br><span class="line">      var ptr &#x3D; Memory.alloc(byteCount);</span><br><span class="line">      for (var i &#x3D; 0; i &lt; byteCount; ++i)</span><br><span class="line">        Memory.writeS8(ptr.add(i), bytearry[offset + i]);</span><br><span class="line">      send(message, Memory.readByteArray(ptr, byteCount))</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line">    Java.use(&quot;java.net.SocketInputStream&quot;).socketRead0.overload(&#39;java.io.FileDescriptor&#39;, &#39;[B&#39;, &#39;int&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (fd, bytearry, offset, byteCount, timeout) &#123;</span><br><span class="line">      var result &#x3D; this.socketRead0(fd, bytearry, offset, byteCount, timeout);</span><br><span class="line">      var message &#x3D; &#123;&#125;;</span><br><span class="line">      message[&quot;function&quot;] &#x3D; &quot;HTTP_recv&quot;;</span><br><span class="line">      message[&quot;ssl_session_id&quot;] &#x3D; &quot;&quot;;</span><br><span class="line">      message[&quot;src_addr&quot;] &#x3D; ntohl(ipToNumber((this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;)[0]).split(&quot;&#x2F;&quot;).pop()));</span><br><span class="line">      message[&quot;src_port&quot;] &#x3D; parseInt(this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;).pop());</span><br><span class="line">      message[&quot;dst_addr&quot;] &#x3D; ntohl(ipToNumber((this.socket.value.getLocalAddress().toString().split(&quot;:&quot;)[0]).split(&quot;&#x2F;&quot;).pop()));</span><br><span class="line">      message[&quot;dst_port&quot;] &#x3D; parseInt(this.socket.value.getLocalPort());</span><br><span class="line">      if (result &gt; 0) &#123;</span><br><span class="line">        var ptr &#x3D; Memory.alloc(result);</span><br><span class="line">        for (var i &#x3D; 0; i &lt; result; ++i)</span><br><span class="line">          Memory.writeS8(ptr.add(i), bytearry[offset + i]);</span><br><span class="line">        send(message, Memory.readByteArray(ptr, result))</span><br><span class="line">      &#125;</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>One more thing，虽然直接调用native层Socket的应用框架几乎没有；但是Javs层的Socket API是可以进一步下沉到C层的Socket，以支援so文件的socket抓包。以<code>java.net.SocketOutputStream.socketWrite0</code>举例，其native层的实现为<code>JNIEXPORT void JNICALL 55SocketOutputStream_socketWrite0(JNIEnv *env, jobject this,jobject fdObj,jbyteArray data,jint off, jint len)</code>（<a href="http://androidxref.com/8.1.0_r33/xref/libcore/ojluni/src/main/native/SocketOutputStream.c#54" target="_blank" rel="noopener">地址</a>），其核心为一句话<code>int n = NET_Send(fd, bufP + loff, llen, 0);</code>，进一步追踪<code>NET_Send</code>可以在<code>linux_close.cpp</code>文件中找到其实现(<a href="http://androidxref.com/8.1.0_r33/xref/libcore/ojluni/src/main/native/linux_close.cpp#126" target="_blank" rel="noopener">地址</a>)，本质上也是<code>libc</code>的<code>send、sendto、recv、recvfrom</code>这些，因此可以直接hook这些接口，捕获该进程的所有通信流量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">int NET_Read(int s, void* buf, size_t len) &#123;</span><br><span class="line">    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0) );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int NET_ReadV(int s, const struct iovec * vector, int count) &#123;</span><br><span class="line">    BLOCKING_IO_RETURN_INT( s, readv(s, vector, count) );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int NET_RecvFrom(int s, void *buf, int len, unsigned int flags,</span><br><span class="line">       struct sockaddr *from, int *fromlen) &#123;</span><br><span class="line">    socklen_t socklen &#x3D; *fromlen;</span><br><span class="line">    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, &amp;socklen) );</span><br><span class="line">    *fromlen &#x3D; socklen;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int NET_Send(int s, void *msg, int len, unsigned int flags) &#123;</span><br><span class="line">    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags) );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int NET_WriteV(int s, const struct iovec * vector, int count) &#123;</span><br><span class="line">    BLOCKING_IO_RETURN_INT( s, writev(s, vector, count) );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int NET_SendTo(int s, const void *msg, int len,  unsigned  int</span><br><span class="line">       flags, const struct sockaddr *to, int tolen) &#123;</span><br><span class="line">    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen) );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int NET_Accept(int s, struct sockaddr *addr, int *addrlen) &#123;</span><br><span class="line">    socklen_t socklen &#x3D; *addrlen;</span><br><span class="line">    BLOCKING_IO_RETURN_INT( s, accept(s, addr, &amp;socklen) );</span><br><span class="line">    *addrlen &#x3D; socklen;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int NET_Connect(int s, struct sockaddr *addr, int addrlen) &#123;</span><br><span class="line">    BLOCKING_IO_RETURN_INT( s, connect(s, addr, addrlen) );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">#ifndef USE_SELECT</span><br><span class="line">int NET_Poll(struct pollfd *ufds, unsigned int nfds, int timeout) &#123;</span><br><span class="line">    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout) );</span><br><span class="line">&#125;</span><br><span class="line">#else</span><br><span class="line">int NET_Select(int s, fd_set *readfds, fd_set *writefds,</span><br><span class="line">               fd_set *exceptfds, struct timeval *timeout) &#123;</span><br><span class="line">    BLOCKING_IO_RETURN_INT( s-1,</span><br><span class="line">                            select(s, readfds, writefds, exceptfds, timeout) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只是如果hook native层的这些接口的话，会混进openssl/boringssl的经过加密的流量，届时会比较难以区分，所以其实duck不必下降到native层，Java层的通信足以覆盖99%以上的场景（这个百分比是我估计的）。</p><p>最终也就是现在的效果：r0capture：安卓应用层抓包通杀脚本，<a href="https://github.com/r0ysue/r0capture" target="_blank" rel="noopener">地址：https://github.com/r0ysue/r0capture</a></p><ul><li>仅限安卓平台，测试安卓7、8、9、10 可用 ；</li><li>无视所有证书校验或绑定，不用考虑任何证书的事情；</li><li>通杀TCP/IP四层模型中的应用层中的全部协议；</li><li>通杀协议包括：Http,WebSocket,Ftp,Xmpp,Imap,Smtp,Protobuf等等、以及它们的SSL版本；</li><li>通杀所有应用层框架，包括HttpUrlConnection、Okhttp1/3/4、Retrofit/Volley等等；</li></ul><p>用法</p><ul><li>Spawn 模式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 r0capture.py -U -f com.qiyi.video</span><br></pre></td></tr></table></figure><ul><li>Attach 模式，抓包内容保存成pcap文件供后续分析：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 r0capture.py -U com.qiyi.video -p iqiyi.pcap</span><br></pre></td></tr></table></figure><p>建议使用Attach模式，从感兴趣的地方开始抓包，并且保存成pcap文件，供后续使用Wireshark进行分析。</p><blockquote><p>PS：用来抓注册包，效果尤佳。</p></blockquote><p> <img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/722120_AJ9VJPVCAF5K8AP.png" alt="img"></p><p>To-do：</p><ol><li>此处还是有部分开发实力过强的大厂或框架，采用的是自身的SSL框架，比如<a href="https://mabin004.github.io/2020/07/24/%E8%87%AA%E5%8A%A8%E5%AE%9A%E4%BD%8Dwebview%E4%B8%AD%E7%9A%84SLL-read%E5%92%8CSSL-write/" target="_blank" rel="noopener">WebView、小程序</a>或<a href="https://bbs.pediy.com/thread-261941.htm" target="_blank" rel="noopener">Flutter</a>，这部分目前暂未支持。当然这部分App也是少数。</li><li>暂不支持HTTP/2、或HTTP/3，该部分API在安卓系统上暂未普及或布署，为App自带，无法进行通用hook。</li><li>各种模拟器架构、实现、环境较为复杂，建议珍爱生命、使用真机。</li><li>暂未添加多进程支持，比如:service或:push等子进程，可以使用Frida的Child-gating来支持一下。</li><li>支持多进程之后要考虑<code>pcap</code>文件的写入锁问题，可以用<code>frida-tool</code>的<a href="https://github.com/frida/frida-tools/blob/75c2af408fa2b8450b87565268b2671630451f45/frida_tools/application.py#L581" target="_blank" rel="noopener"><code>Reactor</code>线程锁</a>来支持一下。</li></ol><blockquote><p>TCP/IP中可以实现的部分：</p><ul><li><p>网络层：可以拿到所有的收发包。效果同Wireshark。如果是明文，其实效果跟传输层是一样的。非明文、跟传输层也是一样的。</p></li><li><p>传输层：可以拿到所有（应用层）的收发包，明文→明文；<code>java.net.SocketInputStream.socketRead0</code>、<code>java.net.SocketOutputStream.socketWrite0</code>都是native函数，意味着</p></li><li><p>应用层非明文→非明文：<code>SSLInputStream.read</code> </p></li><li><p>应用层2：<a href="https://github.com/dpnishant/appmon/blob/45db2110e16180e3313f2fd2791b81d660c6e1d9/scripts/Android/Network/HTTP.js#L27" target="_blank" rel="noopener">com.android.okhttp.internal.http.HttpURLConnectionImpl</a></p></li></ul></blockquote><h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><p>安装HttpSocket</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.onejane.httpsocket explore</span><br><span class="line">android hooking search ssl  将所有打印出的类放到sslandroid8.txt中，前面批量加上android hooking watch class </span><br><span class="line">objection -g com.onejane.httpsocket explore -c sslandroid8.txt  批量hook，报错ClassLoader就删除包括ClassLoader类</span><br></pre></td></tr></table></figure><blockquote><p>android hooking watch class com.android.org.conscrypt.OpenSSLBIOInputStream<br>android hooking watch class com.android.org.conscrypt.OpenSSLCipher<br>android hooking watch class com.android.org.conscrypt.OpenSSLCipher$EVP_CIPHER<br>android hooking watch class com.android.org.conscrypt.OpenSSLCipher​$EVP_CIPHER​$AES<br>android hooking watch class com.android.org.conscrypt.OpenSSLCipher​$EVP_CIPHER​$AES​$CBC<br>android hooking watch class com.android.org.conscrypt.OpenSSLCipher$EVP_CIPHER$AES$CBC$PKCS5Padding<br>android hooking watch class com.android.org.conscrypt.OpenSSLCipher$EVP_CIPHER$AES_BASE<br>android hooking watch class com.android.org.conscrypt.OpenSSLContextImpl</p><p>…</p></blockquote><p>在安卓8上结果</p><blockquote><p>(agent) [lrxbzy1b2ea] Called javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier()<br>(agent) [lrxbzy1b2ea] Called javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory()<br>(agent) [lrxbzy1b2ea] Called javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory()<br>(agent) [nrgnn66lv3e] Called com.android.org.conscrypt.OpenSSLSocketImpl.isClosed()<br>(agent) [nrgnn66lv3e] Called com.android.org.conscrypt.OpenSSLSocketImpl.isInputShutdown()<br>(agent) [nrgnn66lv3e] Called com.android.org.conscrypt.OpenSSLSocketImpl.isOutputShutdown()<br>(agent) [42lol483nwl] Called com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream.write([B, int, int)<br>(agent) [nrgnn66lv3e] Called com.android.org.conscrypt.OpenSSLSocketImpl.isClosed()<br>(agent) [43hq04cbdn1] Called com.android.org.conscrypt.SslWrapper.write(java.io.FileDescriptor, [B, int, int, int)<br>(agent) [yz4ikx9fcpb] Called com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream.read([B, int, int)<br>(agent) [nrgnn66lv3e] Called com.android.org.conscrypt.OpenSSLSocketImpl.isClosed()<br>(agent) [43hq04cbdn1] Called com.android.org.conscrypt.SslWrapper.read(java.io.FileDescriptor, [B, int, int, int)</p><p>android hooking watch class_method com.android.org.conscrypt.ConscryptFileDescriptorSocket.$init</p></blockquote><p>在安卓10上结果</p><blockquote><p>(agent) [4816499695697] Called javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier()<br>com.roysue.httpsocket on (google: 10) [usb] #<br>(agent) [4816499695697] Called javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory()<br>(agent) [4816499695697] Called javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory()<br>com.roysue.httpsocket on (google: 10) [usb] # (agent) [2575726777846] Called com.android.org.conscrypt.OpenSSLSocketImpl.isClosed()<br>(agent) [2575726777846] Called com.android.org.conscrypt.OpenSSLSocketImpl.isInputShutdown()<br>(agent) [2575726777846] Called com.android.org.conscrypt.OpenSSLSocketImpl.isOutputShutdown()<br>(agent) [4979599214099] Called com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream.write([B, int, int)<br>(agent) [2575726777846] Called com.android.org.conscrypt.OpenSSLSocketImpl.isClosed()<br>(agent) [1105531481296] Called com.android.org.conscrypt.NativeSsl.write(java.io.FileDescriptor, [B, int, int, int)<br>(agent) [1105531481296] Called com.android.org.conscrypt.NativeSsl.isClosed()<br>(agent) [7367730933988] Called com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream.read([B, int, int)<br>(agent) [2575726777846] Called com.android.org.conscrypt.OpenSSLSocketImpl.isClosed()<br>(agent) [1105531481296] Called com.android.org.conscrypt.NativeSsl.read(java.io.FileDescriptor, [B, int, int, int)<br>(agent) [1105531481296] Called com.android.org.conscrypt.NativeSsl.isClosed()</p></blockquote><p><code>frida -UF -l hookSocket.js</code>  打印http抓包的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x3486</span><br></pre></td></tr></table></figure><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/image-20210516124228857.png" alt="image-20210516124228857"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function hook_SSLsocketandroid8()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;hook_SSLsocket&quot;)</span><br><span class="line">        </span><br><span class="line">        Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream&quot;).write.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function(bytearry,int1,int2)&#123;</span><br><span class="line">            var result &#x3D; this.write(bytearry,int1,int2);</span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;HTTPS write result,bytearry,int1,int2&#x3D;&gt;&quot;,result,bytearry,int1,int2)</span><br><span class="line">            &#x2F;&#x2F; var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;bytearray contents&#x3D;&gt;&quot;, ByteString.of(bytearry).hex())</span><br><span class="line">            &#x2F;&#x2F;console.log(jhexdump(bytearry,int1,int2));</span><br><span class="line">            &#x2F;&#x2F; console.log(jhexdump(bytearry));</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; com.android.org.conscrypt.ConscryptFileDescriptorSocket this$0</span><br><span class="line">            console.log(this.this$0.value.sslSession.value.peerHost.value)</span><br><span class="line">            console.log(this.this$0.value.sslSession.value.peerPort.value)</span><br><span class="line">            console.log(this.this$0.value.sslSession.value.getProtocol())</span><br><span class="line">            console.log(this.this$0.value.sslSession.value.getRequestedServerName())</span><br><span class="line">            console.log(JSON.stringify( this.this$0.value.sslSession.value.getStatusResponses()))</span><br><span class="line">            console.log(this.this$0.value.sslSession.value.getValueNames().toString())</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        &#x2F;&#x2F; Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream&quot;).read.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function(bytearry,int1,int2)&#123;</span><br><span class="line">        &#x2F;&#x2F;     var result &#x3D; this.read(bytearry,int1,int2);</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;HTTPS read result,bytearry,int1,int2&#x3D;&gt;&quot;,result,bytearry,int1,int2)</span><br><span class="line">        &#x2F;&#x2F;     var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;bytearray contents&#x3D;&gt;&quot;, ByteString.of(bytearry).hex())</span><br><span class="line">        &#x2F;&#x2F;     &#x2F;&#x2F;console.log(jhexdump(bytearry,int1,int2));</span><br><span class="line">        &#x2F;&#x2F;     &#x2F;&#x2F; console.log(jhexdump(bytearry));</span><br><span class="line">        &#x2F;&#x2F;     return result;</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>frida 14</p><p>android hooking watch class_method com.android.org.conscrypt.ConscryptFileDescriptorSocket.$init</p><p>objection  -g com.onejane.httpsocket explore -s “android hooking watch class_method com.android.org.conscrypt.ConscryptFileDescriptorSocket.$init”</p></blockquote><h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><p><a href="https://github.com/dpnishant/appmon" target="_blank" rel="noopener">appmon</a>中用到的API。12.8.0报错就切到14.*,<code>frida -UF -l HTTP.js</code>和<code>frida -UF -l Storage.js</code>和<code>frida -UF -l SharedPreferences.js</code></p><p><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF" target="_blank" rel="noopener">Mobile-Security-Framework-MobSF</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g comoolapk.market explore -s &quot;android hooking watch class android.content.ContextWrapper&quot;  下载app查看agent用到的api</span><br><span class="line">android hooking watch class_method android.content.ContextWrapper.getDataDir --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method android.content.ContextWrapper.getCacheDir --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U|grep -i gravity</span><br><span class="line">objection -g com.ceco.oreo.gravitybox explore</span><br><span class="line">android hooking watch class android.app.SharedPreferencesImpl</span><br><span class="line">android hooking watch class_method android.app.SharedPreferencesImpl.getString --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><h2 id="通杀"><a href="#通杀" class="headerlink" title="通杀"></a>通杀</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">objection -g comoolapk.market explore</span><br><span class="line">android hooking search classes File</span><br><span class="line">android hooking watch class java.io.File</span><br><span class="line">android hooking watch class_method java.io.File.getPath --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method java.io.File.delete --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method java.io.File.exists --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method java.io.File.list --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method java.io.File.getName --dump-args --dump-backtrace --dump-return</span><br><span class="line">cat objection.log | grep Return</span><br></pre></td></tr></table></figure><blockquote><p>java.io.File<br>java.lang.String</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class java.lang.String </span><br><span class="line">android hooking watch class_method java.lang.String.toString --dump-args --dump-return  安卓8</span><br><span class="line">android hooking watch class_method java.lang.String.equals --dump-args --dump-return  安卓10</span><br><span class="line">android hooking watch class_method java.lang.StringBuilder.$init --dump-args --dump-return</span><br><span class="line">android hooking watch class android.telephony.TelephonyManager  获取硬件信息</span><br><span class="line">plugin wallbreaker objectsearch android.telephony.TelephonyManager</span><br><span class="line">plugin wallbreaker objectdump 0x4563</span><br><span class="line">plugin wallbreaker classdump android.os.Build</span><br><span class="line">android hooking watch class_method android.telephony.TelephonyManager.getDeviceId --dump-args --dump-backtrace --dump-return</span><br><span class="line">frida -U -f com.coolapk.market -l File.js --no-pause -o file.txt</span><br><span class="line">frida -UF -l File.js --no-pause -o file.txt</span><br></pre></td></tr></table></figure><p><a href="https://mabin004.github.io/2018/12/20/%E5%88%A9%E7%94%A8Frida%E4%BF%AE%E6%94%B9Android%E8%AE%BE%E5%A4%87%E7%9A%84%E5%94%AF%E4%B8%80%E6%A0%87%E5%BF%97%E7%AC%A6/" target="_blank" rel="noopener">利用Frida修改Android设备的唯一标识符</a></p><p>修改Build.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">private static String getString(String property) &#123;</span><br><span class="line">    String result &#x3D; SystemProperties.get(property, UNKNOWN) ;</span><br><span class="line">    if(property.equals(&quot;ro.product.brand&quot;))&#123;</span><br><span class="line">        result &#x3D; new String(&quot;r0ysueBRAND&quot;);</span><br><span class="line">    &#125;else if(property.equals((&quot;ro.product.manufacturer&quot;)))&#123;</span><br><span class="line">        result &#x3D; new String(&quot;r0ysueMANUFACTUERER&quot;);</span><br><span class="line">    &#125;else if(property.equals(&quot;ro.product.board&quot;))&#123;</span><br><span class="line">        result &#x3D; new String(&quot;r0ysueBOARD&quot;);</span><br><span class="line">    &#125;else if(property.equals(&quot;no.such.thing&quot;))&#123;</span><br><span class="line">        result &#x3D; new String(&quot;r0ysueAAAABBBBCCCCDDDD&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    Exception e &#x3D; new Exception(&quot;r0ysueFINGERPRINT&quot;);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">@RequiresPermission(Manifest.permission.READ_PHONE_STATE)</span><br><span class="line">public static String getSerial() &#123;</span><br><span class="line">    IDeviceIdentifiersPolicyService service &#x3D; IDeviceIdentifiersPolicyService.Stub</span><br><span class="line">            .asInterface(ServiceManager.getService(Context.DEVICE_IDENTIFIERS_SERVICE));</span><br><span class="line">    try &#123;</span><br><span class="line">        String result &#x3D;service.getSerial();</span><br><span class="line"></span><br><span class="line">        return &quot;r0ysueserial1234&quot;;</span><br><span class="line">    &#125; catch (RemoteException e) &#123;</span><br><span class="line">        e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">    return UNKNOWN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改TelephonyManager.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(android.Manifest.permission.READ_PHONE_STATE)</span><br><span class="line">public String getSimSerialNumber(int subId) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        IPhoneSubInfo info &#x3D; getSubscriberInfo();</span><br><span class="line">        String resutlt &#x3D; info.getIccSerialNumberForSubscriber(subId, mContext.getOpPackageName());</span><br><span class="line">        if (info &#x3D;&#x3D; null)</span><br><span class="line">            return null;</span><br><span class="line">        return &quot;r0ysueSERIALAAAABBBB&quot;;</span><br><span class="line">    &#125; catch (RemoteException ex) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125; catch (NullPointerException ex) &#123;</span><br><span class="line">        &#x2F;&#x2F; This could happen before phone restarts due to crashing</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Deprecated</span><br><span class="line">@RequiresPermission(android.Manifest.permission.READ_PHONE_STATE)</span><br><span class="line">public String getDeviceId() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ITelephony telephony &#x3D; getITelephony();</span><br><span class="line">        String result &#x3D; telephony.getDeviceId(mContext.getOpPackageName());</span><br><span class="line">        if (telephony &#x3D;&#x3D; null)</span><br><span class="line">            return null;</span><br><span class="line">        return &quot;r0ysueIMEI&quot;;</span><br><span class="line">    &#125; catch (RemoteException ex) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125; catch (NullPointerException ex) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>. build/envsetup.sh</p><p>lunch aosp_bullhead-user</p><p>m</p><p>替换编译生成img到官方镜像包中，重新打包成image-bullhead-opm1.171019.011.zip</p><p>./flash-all.sh</p></blockquote><p><a href="https://mabin004.github.io/2018/12/12/%E6%8C%87%E7%BA%B9/" target="_blank" rel="noopener">指纹识别技术安全分析</a></p><blockquote><p>对抗 不检测root，检测aosp，正常人不会用aosp，<code>App</code>可以通过判断java.net.NetworkInterface.getName()是否等于“tun0”或“ppp0”来判断是否存在VPN。Bypass也很简单，hook该api使其返回“rmnet_data1”，即可达到过vpn检测目的。</p></blockquote><p><a href="https://github.com/WalterInSH/risk-management-note" target="_blank" rel="noopener">风险控制笔记</a></p><h1 id="自制沙箱"><a href="#自制沙箱" class="headerlink" title="自制沙箱"></a>自制沙箱</h1><p><a href="https://bbs.pediy.com/thread-225717.html#msg_header_h2_22" target="_blank" rel="noopener">检测Android虚拟机的方法和代码实现</a></p><p><a href="https://www.anquanke.com/post/id/199898" target="_blank" rel="noopener">2020年安卓源码编译指南</a></p><p><a href="https://bbs.pediy.com/thread-255212.html" target="_blank" rel="noopener">Android 应用多开对抗实践</a></p><p>使用手机连接charles的代理，chsl.pro/ssl安装证书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added  查看新安装的证书a27a90a2.0</span><br><span class="line">cp a27a90a2.0 &#x2F;sdcard&#x2F;Download</span><br><span class="line">cd Desktop&#x2F;asop810r1&#x2F;system&#x2F;ca-certificates&#x2F;files</span><br><span class="line">adb pull &#x2F;sdcard&#x2F;Download&#x2F;a27a90a2.0</span><br><span class="line">. build&#x2F;envsetup.sh</span><br><span class="line">lunch aosp_bullhead-user  编译，没有root，使用user-debug有root</span><br></pre></td></tr></table></figure><p>修改<a href="http://androidxref.com/8.1.0_r33/xref/libcore/ojluni/src/main/java/java/security/KeyStore.java" target="_blank" rel="noopener">KeyStore.java</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public final void load(InputStream stream, char[] password)</span><br><span class="line">        throws IOException, NoSuchAlgorithmException, CertificateException &#123;</span><br><span class="line">    if (password !&#x3D; null) &#123;</span><br><span class="line">        String inputPASSWORD &#x3D; new String(password);</span><br><span class="line">        Class logClass &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            logClass &#x3D; this.getClass().getClassLoader().loadClass(&quot;android.util.Log&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Method loge &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            loge &#x3D; logClass.getMethod(&quot;e&quot;, String.class, String.class);</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            loge.invoke(null, &quot;r0ysueKeyStoreLoad&quot;, &quot;KeyStore load PASSWORD is &#x3D;&gt; &quot; + inputPASSWORD);</span><br><span class="line">            Exception e &#x3D; new Exception(&quot;r0ysueKeyStoreLoad&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Date now &#x3D; new Date();</span><br><span class="line">        String currentTime &#x3D; String.valueOf(now.getTime());</span><br><span class="line">        FileOutputStream fos &#x3D; new FileOutputStream(&quot;&#x2F;sdcard&#x2F;Download&#x2F;&quot; + inputPASSWORD + currentTime);</span><br><span class="line">        byte[] b &#x3D; new byte[1024];</span><br><span class="line">        int length;</span><br><span class="line">        while ((length &#x3D; stream.read(b)) &gt; 0) &#123;</span><br><span class="line">            fos.write(b, 0, length);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.flush();</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    keyStoreSpi.engineLoad(stream, password);</span><br><span class="line">    initialized &#x3D; true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改SocketOutputStream.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">private void socketWrite(byte b[], int off, int len) throws IOException &#123;</span><br><span class="line">    if (len &lt;&#x3D; 0 || off &lt; 0 || len &gt; b.length - off) &#123;</span><br><span class="line">        if (len &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new ArrayIndexOutOfBoundsException(&quot;len &#x3D;&#x3D; &quot; + len</span><br><span class="line">                + &quot; off &#x3D;&#x3D; &quot; + off + &quot; buffer length &#x3D;&#x3D; &quot; + b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FileDescriptor fd &#x3D; impl.acquireFD();</span><br><span class="line">    try &#123;</span><br><span class="line">        BlockGuard.getThreadPolicy().onNetwork();</span><br><span class="line">        socketWrite0(fd, b, off, len);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(len&gt;0)&#123;</span><br><span class="line">            byte[] input &#x3D; new byte[len];</span><br><span class="line">            System.arraycopy(b,off,input,0,len);</span><br><span class="line"></span><br><span class="line">            String inputString &#x3D; new String(input);</span><br><span class="line">            Class logClass &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                logClass &#x3D; this.getClass().getClassLoader().loadClass(&quot;android.util.Log&quot;);</span><br><span class="line">            &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            Method loge &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                loge &#x3D; logClass.getMethod(&quot;e&quot;,String.class,String.class);</span><br><span class="line">            &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                loge.invoke(null,&quot;r0ysueSOCKETrequest&quot;,&quot;Socket is &#x3D;&gt; &quot;+this.socket.toString());</span><br><span class="line">                loge.invoke(null,&quot;r0ysueSOCKETrequest&quot;,&quot;buffer is &#x3D;&gt; &quot;+inputString);</span><br><span class="line">                Exception e &#x3D; new Exception(&quot;r0ysueSOCKETrequest&quot;);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; catch (SocketException se) &#123;</span><br><span class="line">        if (se instanceof sun.net.ConnectionResetException) &#123;</span><br><span class="line">            impl.setConnectionResetPending();</span><br><span class="line">            se &#x3D; new SocketException(&quot;Connection reset&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (impl.isClosedOrPending()) &#123;</span><br><span class="line">            throw new SocketException(&quot;Socket closed&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw se;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        impl.releaseFD();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;SocketOutputStream</span><br></pre></td></tr></table></figure><p>修改SocketInputStream.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">private int socketRead(FileDescriptor fd,</span><br><span class="line">                       byte b[], int off, int len,</span><br><span class="line">                       int timeout)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">    int result &#x3D; socketRead0(fd, b, off, len, timeout);</span><br><span class="line"></span><br><span class="line">    if(result&gt;0)&#123;</span><br><span class="line">        byte[] input &#x3D; new byte[result];</span><br><span class="line">        System.arraycopy(b,off,input,0,result);</span><br><span class="line"></span><br><span class="line">        String inputString &#x3D; new String(input);</span><br><span class="line">        Class logClass &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            logClass &#x3D; this.getClass().getClassLoader().loadClass(&quot;android.util.Log&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Method loge &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            loge &#x3D; logClass.getMethod(&quot;e&quot;,String.class,String.class);</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            loge.invoke(null,&quot;r0ysueSOCKETresponse&quot;,&quot;Socket is &#x3D;&gt; &quot;+this.socket.toString());</span><br><span class="line">            loge.invoke(null,&quot;r0ysueSOCKETresponse&quot;,&quot;buffer is &#x3D;&gt; &quot;+inputString);</span><br><span class="line">            Exception e &#x3D; new Exception(&quot;r0ysueSOCKETresponse&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改SslWrapper.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">int read(FileDescriptor fd, byte[] buf, int offset, int len, int timeoutMillis)</span><br><span class="line">            throws IOException &#123;</span><br><span class="line">        int result &#x3D; NativeCrypto.SSL_read(ssl, fd, handshakeCallbacks, buf, offset, len, timeoutMillis) ;</span><br><span class="line">        if(result&gt;0)&#123;</span><br><span class="line">            byte[] input &#x3D; new byte[result];</span><br><span class="line">            System.arraycopy(buf,offset,input,0,result);</span><br><span class="line">            String inputString &#x3D; new String(input);</span><br><span class="line">            Class logClass &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                logClass &#x3D; this.getClass().getClassLoader().loadClass(&quot;android.util.Log&quot;);</span><br><span class="line">            &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            Method loge &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                loge &#x3D; logClass.getMethod(&quot;e&quot;,String.class,String.class);</span><br><span class="line">            &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                loge.invoke(null,&quot;r0ysueSOCKETresponse&quot;,&quot;SSL is &#x3D;&gt;&quot;+this.handshakeCallbacks.toString());</span><br><span class="line">                loge.invoke(null,&quot;r0ysueSOCKETresponse&quot;,&quot;buffer is &#x3D;&gt; &quot;+inputString);</span><br><span class="line">                Exception e &#x3D; new Exception(&quot;r0ysueSOCKETresponse&quot;);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void write(FileDescriptor fd, byte[] buf, int offset, int len, int timeoutMillis)</span><br><span class="line">            throws IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(len&gt;0)&#123;</span><br><span class="line">            byte[] input &#x3D; new byte[len];</span><br><span class="line">            System.arraycopy(buf,offset,input,0,len);</span><br><span class="line"></span><br><span class="line">            String inputString &#x3D; new String(input);</span><br><span class="line">            Class logClass &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                logClass &#x3D; this.getClass().getClassLoader().loadClass(&quot;android.util.Log&quot;);</span><br><span class="line">            &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            Method loge &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                loge &#x3D; logClass.getMethod(&quot;e&quot;,String.class,String.class);</span><br><span class="line">            &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                loge.invoke(null,&quot;r0ysueSSLrequest&quot;,&quot;SSL is &#x3D;&gt; &quot;+this.handshakeCallbacks.toString());</span><br><span class="line">                loge.invoke(null,&quot;r0ysueSSLrequest&quot;,&quot;buffer is &#x3D;&gt; &quot;+inputString);</span><br><span class="line">                Exception e &#x3D; new Exception(&quot;r0ysueSSLrequest&quot;);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NativeCrypto.SSL_write(ssl, fd, handshakeCallbacks, buf, offset, len, timeoutMillis);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>编译好后，刷机，安装soul使用chales抓包,查看logcat中Keystore加载的Password，下载下来的证书改名为soul.p12安装实现App客户端证书文件和密码自吐</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make update-api  由于修改了文件，更新api</span><br><span class="line">m</span><br></pre></td></tr></table></figure><h1 id="甲方风控"><a href="#甲方风控" class="headerlink" title="甲方风控"></a>甲方风控</h1><p><a href="https://www.anquanke.com/post/id/197657#h2-9" target="_blank" rel="noopener">实用FRIDA进阶：内存漫游、hook anywhere、抓包</a></p><h2 id="r0capture"><a href="#r0capture" class="headerlink" title="r0capture"></a>r0capture</h2><p>git clone <a href="https://github.com/r0ysue/r0capture.git" target="_blank" rel="noopener">https://github.com/r0ysue/r0capture.git</a></p><blockquote><ul><li>仅限安卓平台，测试安卓7、8、9、10、11 可用 ；</li><li>无视所有证书校验或绑定，不用考虑任何证书的事情；</li><li>通杀TCP/IP四层模型中的应用层中的全部协议；</li><li>通杀协议包括：Http,WebSocket,Ftp,Xmpp,Imap,Smtp,Protobuf等等、以及它们的SSL版本；</li><li>通杀所有应用层框架，包括HttpUrlConnection、Okhttp1/3/4、Retrofit/Volley等等；</li><li>无视加固，不管是整体壳还是二代壳或VMP，不用考虑加固的事情；</li></ul></blockquote><p>python r0capture.py -U cn.soulapp.android -v</p><p>python r0capture.py -U -f  com.qiyi.video -v</p><p>frida -UF -l hookSSLSocket.js</p><p>frida -U -f cn.soulapp.android -l saveClientCet.js –no-pause  增加客户端证书dump功能</p><p>adb pull /sdcard/Download/ff93e99.p12</p><p><a href="https://keystore-explorer.org/" target="_blank" rel="noopener">证书转换工具</a>  支持bks to p12 把安卓转成Charles支持的p12</p><p>charles-Proxy-SSL Proxying Settings-Client Certificates-Create Secure Store-设置自定义密码，配置Host/Port为*对任何IP任何端口使用该证书，Import P12-填入SSL Certificate Password,即抓到的key密码</p><p><strong>为沙箱增加调用栈dump证书</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">function hook_KeyStore_load() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">        var myArray&#x3D;new Array(1024);</span><br><span class="line">        var i &#x3D; 0</span><br><span class="line">        for (i &#x3D; 0; i &lt; myArray.length; i++) &#123;</span><br><span class="line">            myArray[i]&#x3D; 0x0;</span><br><span class="line">         &#125;</span><br><span class="line">        var buffer &#x3D; Java.array(&#39;byte&#39;,myArray);</span><br><span class="line">        </span><br><span class="line">        var StringClass &#x3D; Java.use(&quot;java.lang.String&quot;);</span><br><span class="line">        var KeyStore &#x3D; Java.use(&quot;java.security.KeyStore&quot;);</span><br><span class="line">        KeyStore.load.overload(&#39;java.security.KeyStore$LoadStoreParameter&#39;).implementation &#x3D; function (arg0) &#123;</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line"></span><br><span class="line">            console.log(&quot;KeyStore.load1:&quot;, arg0);</span><br><span class="line">            this.load(arg0);</span><br><span class="line">        &#125;;</span><br><span class="line">        KeyStore.load.overload(&#39;java.io.InputStream&#39;, &#39;[C&#39;).implementation &#x3D; function (arg0, arg1) &#123;</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line"></span><br><span class="line">            console.log(&quot;KeyStore.load2:&quot;, arg0, arg1 ? StringClass.$new(arg1) : null);</span><br><span class="line"></span><br><span class="line">            if (arg0)&#123;</span><br><span class="line">                var file &#x3D;  Java.use(&quot;java.io.File&quot;).$new(&quot;&#x2F;sdcard&#x2F;Download&#x2F;&quot;+ String(arg0)+&quot;.p12&quot;);</span><br><span class="line">                var out &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(file);</span><br><span class="line">                var r;</span><br><span class="line">                while( (r &#x3D; arg0.read(buffer)) &gt; 0)&#123;</span><br><span class="line">                    out.write(buffer,0,r)</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(&quot;save success!&quot;)</span><br><span class="line">                out.close()</span><br><span class="line">            &#125;</span><br><span class="line">            this.load(arg0, arg1);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        console.log(&quot;hook_KeyStore_load...&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; android.content.res.AssetManager$AssetInputStream@9b10ad6 bxMAFPL9gc@ntKTqmV@A</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; android.content.res.AssetManager$AssetInputStream@41ce8f6 &#125;%2R+\OSsjpP!w%X</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; android.content.res.AssetManager$AssetInputStream@54858e6 cods.org.cn</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新使用charles即可抓到soul包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">objection -g cn.soulapp.android explore </span><br><span class="line">android hooking search classes keystore  将打印的类放到文keystore.txt件中，批量hook,前面加上android hooking watch class</span><br><span class="line">objection -g cn.soulapp.android explore  -c keystore.txt</span><br><span class="line">plugin wallbreaker objectsearch java.security.KeyStore$PrivateKeyEntry</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x0123u</span><br><span class="line">android hooking watch class_method java.security.KeyStore$PrivateKeyEntry.getCertificateChain --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method java.security.KeyStore$PrivateKeyEntry.getPrivateKey --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/Barryda/QtScrcpy" target="_blank" rel="noopener">QtScrCpy 手机投屏 Linux版</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install libsdl2-2.0-0</span><br><span class="line">.&#x2F;run x</span><br></pre></td></tr></table></figure><p><strong>为沙箱增加客户端证书DUMP的功能</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f cn.soulapp.android -l 2021trace.js --no-pause -o traceresult.txt   查看java.security.KeyStore$PrivateKeyEntry的调用栈</span><br><span class="line">objection -g cn.soulapp.android explore </span><br><span class="line">plugin load &#x2F;root&#x2F;Desktop&#x2F;Wallbreaker</span><br><span class="line">plugin wallbreaker objectsearch java.security.KeyStore$PrivateKeyEntry</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x123f  查看KeyStore$PrivateKeyEntry类的privateKey和publicKey</span><br><span class="line">android heap search instances java.security.KeyStore$PrivateKeyEntry</span><br><span class="line">android heap execute 0x2ce7 getPrivateKey()  主动调用</span><br></pre></td></tr></table></figure><p>js实现,<code>frida -U- f cn.soulapp.android -l savePrivateKey.js --no-pause</code>  打开app后查看/data/local/tmp/soul下的证书文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function () &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.log(&quot;Entering&quot;)</span><br><span class="line">        Java.use(&quot;java.security.KeyStore$PrivateKeyEntry&quot;).getPrivateKey.implementation &#x3D; function () &#123;</span><br><span class="line">            console.log(&quot;Calling java.security.KeyStore$PrivateKeyEntry.getPrivateKey method &quot;)</span><br><span class="line">            var result &#x3D; this.getPrivateKey()</span><br><span class="line">            console.log(&quot;toString result is &#x3D;&gt; &quot;, result.toString())</span><br><span class="line">            storeP12(this.getPrivateKey(),this.getCertificate(),&#39;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;soul&#39;+uuid(10,16)+&#39;.p12&#39;,&#39;hello&#39;);</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        Java.use(&quot;java.security.KeyStore$PrivateKeyEntry&quot;).getCertificateChain.implementation &#x3D; function () &#123;</span><br><span class="line">            console.log(&quot;Calling java.security.KeyStore$PrivateKeyEntry.getCertificateChain method &quot;)</span><br><span class="line">            var result &#x3D; this.getCertificateChain()</span><br><span class="line">            storeP12(this.getPrivateKey(),this.getCertificate(),&#39;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;soul&#39;+uuid(10,16)+&#39;.p12&#39;,&#39;hello&#39;);</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">function storeP12(pri, p7, p12Path, p12Password) &#123;</span><br><span class="line">    var X509Certificate &#x3D; Java.use(&quot;java.security.cert.X509Certificate&quot;)</span><br><span class="line">    var p7X509 &#x3D; Java.cast(p7, X509Certificate);</span><br><span class="line">    var chain &#x3D; Java.array(&quot;java.security.cert.X509Certificate&quot;, [p7X509])</span><br><span class="line">    var ks &#x3D; Java.use(&quot;java.security.KeyStore&quot;).getInstance(&quot;PKCS12&quot;, &quot;BC&quot;);</span><br><span class="line">    ks.load(null, null);</span><br><span class="line">    ks.setKeyEntry(&quot;client&quot;, pri, Java.use(&#39;java.lang.String&#39;).$new(p12Password).toCharArray(), chain);</span><br><span class="line">    try &#123;</span><br><span class="line">        var out &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(p12Path);</span><br><span class="line">        ks.store(out, Java.use(&#39;java.lang.String&#39;).$new(p12Password).toCharArray())</span><br><span class="line">    &#125; catch (exp) &#123;</span><br><span class="line">        console.log(exp)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function uuid(len, radix) &#123;</span><br><span class="line">    var chars &#x3D; &#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;.split(&#39;&#39;);</span><br><span class="line">    var uuid &#x3D; [], i;</span><br><span class="line">    radix &#x3D; radix || chars.length;</span><br><span class="line"></span><br><span class="line">    if (len) &#123;</span><br><span class="line">        &#x2F;&#x2F; Compact form</span><br><span class="line">        for (i &#x3D; 0; i &lt; len; i++) uuid[i] &#x3D; chars[0 | Math.random() * radix];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; rfc4122, version 4 form</span><br><span class="line">        var r;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; rfc4122 requires these characters</span><br><span class="line">        uuid[8] &#x3D; uuid[13] &#x3D; uuid[18] &#x3D; uuid[23] &#x3D; &#39;-&#39;;</span><br><span class="line">        uuid[14] &#x3D; &#39;4&#39;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Fill in random data. At i&#x3D;&#x3D;19 set the high bits of clock sequence as</span><br><span class="line">        &#x2F;&#x2F; per rfc4122, sec. 4.1.5</span><br><span class="line">        for (i &#x3D; 0; i &lt; 36; i++) &#123;</span><br><span class="line">            if (!uuid[i]) &#123;</span><br><span class="line">                r &#x3D; 0 | Math.random() * 16;</span><br><span class="line">                uuid[i] &#x3D; chars[(i &#x3D;&#x3D; 19) ? (r &amp; 0x3) | 0x8 : r];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return uuid.join(&#39;&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>adb pull /data/local/tmp</code> 使用KeyStore Explorer打开，密码是hello</p><p>charles-手机连接代理-SSL Proxying Settings-Client Certificates-Add-Import P12-密码hello-Host和Port配置*，启动Postern,启动soul成功抓包</p><p>adb install dida.apk  通过top查看包名<code>cn.ticktick.task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g cn.ticktick.task explore -s &quot;android hooking watch class_method java.io.File.\$init --dump-args --dump-return --dump-backtrace&quot;</span><br></pre></td></tr></table></figure><p><code>frida -U -f cn.ticktick.task -l sslpinninghelper.js --no-pause</code>  打印证书路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;java.io.File&quot;).$init.overload(&#39;java.io.File&#39;, &#39;java.lang.String&#39;).implementation &#x3D; function(file,cert)&#123;</span><br><span class="line">            var result &#x3D; this.$init(file,cert)</span><br><span class="line">            var stack &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new());</span><br><span class="line">            </span><br><span class="line">            if(file.getPath().indexOf(&quot;cacert&quot;)&gt;0 &amp;&amp; stack.indexOf(&quot;X509TrustManagerExtensions.checkServerTrusted&quot;)&gt; 0)&#123;</span><br><span class="line">                console.log(&quot;path,cart&quot;,file.getPath(), cert)</span><br><span class="line">                console.log(stack);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>SSL pinning helper 帮助定位证书绑定的关键代码，在服务器校验客户端的情形下，帮助dump客户端证书，并保存为p12的格式</p><p>pm -l | grep -i soul</p><p>pm -l | grep -i ticktick</p><p>pip install hexdump</p><p>python r0capture.py -U -f cn.soulapp.android -v &gt;&gt;sout.txt    重新抓包，frida 14.0.8</p><p>python r0capture.py -U -f cn.ticktick.task -v &gt;&gt;tick.txt</p><h1 id="框架层抓包"><a href="#框架层抓包" class="headerlink" title="框架层抓包"></a>框架层抓包</h1><p>沙箱SslWrapper.java 的修改等同于hook <code>Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream&quot;).read.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;)</code>实现定位收发包函数的功能。</p><p>基于trace的内存漫游确认<code>Java.use(&quot;java.security.KeyStore$PrivateKeyEntry&quot;).getCertificateChain</code>客户端证书dump导出功能。</p><p>增加混淆后的SSLping代码定位功能<code>stack.indexOf(&quot;X509TrustManagerExtensions.checkServerTrusted&quot;)</code></p><p>抓包沙箱植入根证书绕过客户端校验服务器，<code>cd aosp810r1/system/ca-certificates/files</code> 根证书目录，将charles的证书下载到该文件目录下，编译生成镜像，形成中间人</p><p>抓包沙箱导出客户端证书绕过服务器校验客户端，<a href="http://androidxref.com/8.1.0_r33/xref/libcore/ojluni/src/main/java/java/security/KeyStore.java" target="_blank" rel="noopener">KeyStore.java</a>有个内部方法PrivateKeyEntry</p><p>KeyStore.java  去除上面自制沙箱时 <code>public final void load(InputStream stream, char[] password)</code>的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public PrivateKey getPrivateKey() &#123;</span><br><span class="line"></span><br><span class="line">            String p12Password &#x3D; &quot;r0ysue&quot;;</span><br><span class="line">            Date now &#x3D; new Date();</span><br><span class="line">            String currentTime &#x3D; String.valueOf(now.getTime());</span><br><span class="line">            String p12Path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&quot;  + currentTime + &quot;.p12&quot;;</span><br><span class="line"></span><br><span class="line">            X509Certificate p7X509 &#x3D; (X509Certificate) chain[0];</span><br><span class="line">            Certificate[] mychain &#x3D; new Certificate[]&#123;p7X509&#125;;</span><br><span class="line">            &#x2F;&#x2F; 生成一个空的p12证书</span><br><span class="line">            KeyStore myks &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                myks &#x3D; KeyStore.getInstance(&quot;PKCS12&quot;, &quot;BC&quot;);</span><br><span class="line">            &#125; catch (KeyStoreException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (NoSuchProviderException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                myks.load(null, null);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (CertificateException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 将服务器返回的证书导入到p12中去</span><br><span class="line">            try &#123;</span><br><span class="line">                myks.setKeyEntry(&quot;client&quot;, privKey, p12Password.toCharArray(), mychain);</span><br><span class="line">            &#125; catch (KeyStoreException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 加密保存p12证书</span><br><span class="line">            FileOutputStream fOut &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                fOut &#x3D; new FileOutputStream(p12Path);</span><br><span class="line">            &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                myks.store(fOut, p12Password.toCharArray());</span><br><span class="line">            &#125; catch (KeyStoreException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (CertificateException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return privKey;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>抓包沙箱之定位(混淆后的)SSLpinning代码，修改File.java,去除上面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public File(File parent, String child) &#123;</span><br><span class="line">        if (child &#x3D;&#x3D; null) &#123;</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line">        if (parent !&#x3D; null) &#123;</span><br><span class="line">            if (parent.path.equals(&quot;&quot;)) &#123;</span><br><span class="line">                this.path &#x3D; fs.resolve(fs.getDefaultParent(),</span><br><span class="line">                        fs.normalize(child));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.path &#x3D; fs.resolve(parent.path,</span><br><span class="line">                        fs.normalize(child));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.path &#x3D; fs.normalize(child);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Class logClass &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            logClass &#x3D; this.getClass().getClassLoader().loadClass(&quot;android.util.Log&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Method loge &#x3D; null;</span><br><span class="line">        Method getStackTraceString &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">&#x2F;&#x2F;            loge &#x3D; logClass.getMethod(&quot;e&quot;, String.class, String.class);</span><br><span class="line">            getStackTraceString &#x3D; logClass.getMethod(&quot;getStackTraceString&quot;,Throwable.class);</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">&#x2F;&#x2F;            loge.invoke(null, &quot;r0ysueKeyStoreLoad&quot;, &quot;KeyStore load PASSWORD is &#x3D;&gt; &quot; + inputPASSWORD);</span><br><span class="line">            String stack &#x3D; (String)getStackTraceString.invoke(null,new Throwable());</span><br><span class="line">            if (parent.getPath().indexOf(&quot;cacert&quot;) &gt;&#x3D; 0 &amp;&amp;</span><br><span class="line">                    stack.indexOf(&quot;X509TrustManagerExtensions.checkServerTrusted&quot;) &gt;&#x3D; 0) &#123;</span><br><span class="line">                Exception e &#x3D; new Exception(&quot;r0ysueFileSSLpinning&quot;);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.prefixLength &#x3D; fs.prefixLength(this.path);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>编译刷机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lunch aosp_bullhead-user</span><br><span class="line">m  编译完更新system.img到官方镜像bullhead刷机</span><br></pre></td></tr></table></figure><p>默认系统报错<code>400 No required SSL certificate was sent</code>,导入证书到SSLProxying Setting才能正确抓到soul包</p><p>绕过滴答 <code>frida -U -f cn.ticktick.task -l bypassPinning.js --no-pause</code>默认报错<code>trust the Charles Root Certificate </code>,客户端收到charles的证书，计算公钥hash后比对结果决定发请求结果。</p><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/image-20210528110037286.png" alt="image-20210528110037286"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;Bypassing&quot;)</span><br><span class="line">        Java.use(&quot;z1.g&quot;).a.implementation &#x3D; function()&#123;</span><br><span class="line">            console.log(&quot;called here&quot;)</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="HTTPS客户端证书多重证书绑定"><a href="#HTTPS客户端证书多重证书绑定" class="headerlink" title="HTTPS客户端证书多重证书绑定"></a>HTTPS客户端证书多重证书绑定</h1><h2 id="咪咕视频"><a href="#咪咕视频" class="headerlink" title="咪咕视频"></a>咪咕视频</h2><p>登录抓包，<code>SSL handshake with client failed: An unknown issue occurred processing the certificate (certificate_unknown)</code>从抓包发现证书 绑定,可能客户端只信任信任的公钥签名，不信任就不允许，停止客户端访问的证书绑定。客户端发了，我们已经绕过了校验，把自己公钥发给charles，charles用自己私钥解开客户端的公钥发现不正常的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dumpsys activity top  查看包名 com.ophone.reader.ui</span><br><span class="line">objection -g com.ophone.reader.ui explore</span><br><span class="line">android sslpinning disable  需要在启动时运行</span><br><span class="line">objection -g com.ophone.reader.ui explore -s &quot;android sslpinning disable&quot;  在点我登录页面触发解绑定，如果崩溃</span><br><span class="line">objection -g com.ophone.reader.ui explore  在点我登录时开始漫游</span><br><span class="line">android sslpinning disable   解绑定后再获取验证码，再抓包</span><br></pre></td></tr></table></figure><p>证书绑定的逻辑没有hook掉：”at <a href="http://com.bangcle.andjni.jnilib.cl/" target="_blank" rel="noopener">com.bangcle.andjni.JniLib.cL</a>(Native Method)” → 只有逆代码来过证书绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python r0capture.py -U com.ophone.reader.ui -v -p migu.pcap  关闭postern抓包,获取验证码没有更新log，说明没有一些底层的框架</span><br></pre></td></tr></table></figure><p>通过wireshark查看migu.pcap结果，发现也没有关键性信息，抓包也抓不到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python r0capture.py -U -f com.ophone.reader.ui -v  尝试导出证书</span><br><span class="line">frida -U -f com.ophone.reader.ui -l script.js --no-pause</span><br><span class="line">adb shell 查看sdcard&#x2F;Download下的证书</span><br><span class="line">adb pull &#x2F;sdcard&#x2F;Download&#x2F;ophone 下的证书导入到Charles的SSL Proxying Settings中，打开postern抓包</span><br><span class="line">objection -g com.ophone.reader.ui explore  在点我登录时开始漫游</span><br><span class="line">android sslpinning disable   解绑定后再获取验证码抓包即可获取passport.migu.cn:8443的包信息</span><br></pre></td></tr></table></figure><blockquote><p>SSL handshake with server failed - Remote host terminated the handshake<br>The remote SSL server rejected the connection. The server may require a specific certificate or cipher not supported by Charles.</p></blockquote><p>过客户端证书后发现更多证书绑定,<a href="https://github.com/WooyunDota/DroidDrops/blob/master/2018/Frida.Android.Practice.md" target="_blank" rel="noopener">Frida.Android.Practice</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.ophone.reader.ui explore -s &quot;android sslpinning disable&quot;</span><br></pre></td></tr></table></figure><p>git clone <a href="https://github.com/WooyunDota/DroidSSLUnpinning.git" target="_blank" rel="noopener">https://github.com/WooyunDota/DroidSSLUnpinning.git</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.ophone.reader.ui -l hooks.js --no-pause   抓发送验证码包依旧有请求失败</span><br></pre></td></tr></table></figure><p><a href="https://bbs.pediy.com/thread-265160.htm" target="_blank" rel="noopener">FRIDA 使用经验交流分享</a>，git clone <a href="https://github.com/deathmemory/FridaContainer.git" target="_blank" rel="noopener">https://github.com/deathmemory/FridaContainer.git</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd utils&#x2F;android</span><br><span class="line">frida -U -f com.ophone.reader.ui -l multi_unpinning.js --no-pause</span><br><span class="line">objection -g com.ophone.reader.ui explore -s &quot;android hooking watch class_method java.io.File.\$init --dump-args --dump-backtrace --dump-return&quot;  查看证书</span><br><span class="line">frida -U -f com.ophone.reader.ui -l trace.js --no-pause -o ophone.txt 修改trace.js中traceClass(&quot;java.io.File&quot;),在traceClass中修改targets&#x3D;[]只trace init方法,在traceMethod中打开调用栈android.util.log，发送验证码后查看文件,搜索cacert查看调用栈</span><br></pre></td></tr></table></figure><p><img src="/2021/05/06/frida%E6%B2%99%E7%AE%B1%E8%87%AA%E5%90%90%E5%AE%9E%E7%8E%B0/image-20210528115202167.png" alt="image-20210528115202167"></p><h2 id="北京银行"><a href="#北京银行" class="headerlink" title="北京银行"></a>北京银行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python r0capture.py -U -f com.bankofbeijing.mobilebanking -v</span><br><span class="line">.&#x2F;hluda-server-14.2.1-android-arm64</span><br><span class="line">frida -U -f com.bankofbeijing.mobilebanking -l script.js --no-pause -o bjbank.txt</span><br><span class="line">frida -U -f com.bankofbeijing.mobilebanking -l trace.js --no-pause -o bjbank2.txt  打开traceClass(&quot;java.security.KeyStore$PrivateKeyEntry&quot;)</span><br></pre></td></tr></table></figure><p>加固厂商自定义开发的证书绑定对抗很难被攻克。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objection </tag>
            
            <tag> frida </tag>
            
            <tag> ssl </tag>
            
            <tag> aosp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改系统源码编译</title>
      <link href="/2021/05/04/%E9%AD%94%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
      <url>/2021/05/04/%E9%AD%94%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h2 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h2><ol><li>pixel(salfish)+官方8.1.0_r1+twrp3.3.0+Magisk+Frida</li><li>pixel(salfish)+twrp3.3.0+lineage16.0+addonsu16.0</li></ol><h2 id="xposed"><a href="#xposed" class="headerlink" title="xposed"></a>xposed</h2><ol><li>pixel(salfish)+官方7.1.2_r8+twrp3.2.1-0+SuperSU+XposedInstaller </li></ol><h2 id="fart同aosp"><a href="#fart同aosp" class="headerlink" title="fart同aosp"></a>fart同aosp</h2><ol><li>pixel(salfish)+最新fastboot+fart8.1.0</li><li>n6p(angler)+老fastboot+fart8.1.0</li></ol><h2 id="NetHunter"><a href="#NetHunter" class="headerlink" title="NetHunter"></a>NetHunter</h2><ol><li>n6p(angler)+原生8.1.0_r1+twrp3.3.1+SuoerSU</li></ol><h1 id="编译aosp刷机"><a href="#编译aosp刷机" class="headerlink" title="编译aosp刷机"></a>编译aosp刷机</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># apt update</span><br><span class="line"># git config --global user.email &quot;you@example.com&quot;</span><br><span class="line"># git config --global user.name &quot;Your Name&quot;</span><br><span class="line"># apt install bison tree</span><br><span class="line"># dpkg --add-architecture i386</span><br><span class="line"># apt update</span><br><span class="line"># apt install libc6:i386 libncurses5:i386 libstdc++6:i386</span><br><span class="line"># apt install libxml2-utils</span><br><span class="line">apt install nethogs  查看流量由哪个进程产生</span><br></pre></td></tr></table></figure><p><a href="https://source.android.com/source/build-numbers.html#source-code-tags-and-builds" target="_blank" rel="noopener">android版本列表</a></p><p>同步<a href="https://mirrors.ustc.edu.cn/help/aosp.html" target="_blank" rel="noopener">清华</a>  同步<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener">中科大</a> <a href="https://blog.csdn.net/click_idc/article/details/80591686" target="_blank" rel="noopener">编译内存不足加swap</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;swapfile bs&#x3D;1024 count&#x3D;10240000  使用dd创建swapfile作为swap分区空间</span><br><span class="line">mkswap swapfile  mkswap创建交换文件</span><br><span class="line"></span><br><span class="line">## 下载repo工具</span><br><span class="line">mkdir ~&#x2F;bin</span><br><span class="line">PATH&#x3D;~&#x2F;bin:$PATH</span><br><span class="line">curl https:&#x2F;&#x2F;storage.googleapis.com&#x2F;git-repo-downloads&#x2F;repo &gt; ~&#x2F;bin&#x2F;repo</span><br><span class="line">## 如果上述 URL 不可访问，可以用下面的：</span><br><span class="line">## curl -sSL  &#39;https:&#x2F;&#x2F;gerrit-googlesource.proxy.ustclug.org&#x2F;git-repo&#x2F;+&#x2F;master&#x2F;repo?format&#x3D;TEXT&#39; |base64 -d &gt; ~&#x2F;bin&#x2F;repo</span><br><span class="line">chmod a+x ~&#x2F;bin&#x2F;repo</span><br><span class="line">mkdir COMPILE</span><br><span class="line">cd COMPILE</span><br><span class="line"></span><br><span class="line">## 初始化仓库：</span><br><span class="line">repo init -u git:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;aosp&#x2F;platform&#x2F;manifest</span><br><span class="line">## 如果提示无法连接到 gerrit.googlesource.com，可以编辑 ~&#x2F;bin&#x2F;repo，把 REPO_URL 一行替换成下面的：</span><br><span class="line">## REPO_URL &#x3D; &#39;https:&#x2F;&#x2F;gerrit-googlesource.proxy.ustclug.org&#x2F;git-repo&#39;</span><br><span class="line">## 如果需要某个特定的 Android 版本：</span><br><span class="line">repo init -u git:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;aosp&#x2F;platform&#x2F;manifest -b android-7.1.2_r8</span><br><span class="line">或者</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;aosp-monthly&#x2F;aosp-latest.tar</span><br><span class="line">tar xf aosp-latest.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 同步源码树（以后只需执行这条命令来同步）：</span><br><span class="line">## 默认线程数4，可增加</span><br><span class="line">repo sync -j8</span><br><span class="line"># 下载java8  或者 apt install openjdk-8-jdk</span><br><span class="line">wget https:&#x2F;&#x2F;download.java.net&#x2F;openjdk&#x2F;jdk8u41&#x2F;ri&#x2F;openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br><span class="line"># 解压到&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;openjdk8&#x2F;</span><br><span class="line">#修改.zshrc</span><br><span class="line">nano ~&#x2F;.zshrc</span><br><span class="line"># 在zshrc中加入下面内容</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;openjdk8&#x2F;java-se-8u41-ri</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br></pre></td></tr></table></figure><h2 id="编译刷机"><a href="#编译刷机" class="headerlink" title="编译刷机"></a>编译刷机</h2><p>7z x <a href="https://pan.baidu.com/s/16WgxYMyLjsuNk-5RS9yvWA" target="_blank" rel="noopener">aosp712r8</a>  7.62g</p><p><a href="https://developers.google.com/android/drivers/" target="_blank" rel="noopener">驱动下载</a>  注意版本一致，在aosp712r8目录下解压安装 <code>./extrace-google_devices-sailfish.sh</code> 和<code>./extrace-qcom-sailfish.sh</code>不装驱动，编译后没有vender</p><p><img src="/2021/05/04/%E9%AD%94%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/image-20210504165848297.png" alt="image-20210504165848297"></p><p><img src="/2021/05/04/%E9%AD%94%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/20210407134258742.png" alt="![在这里插入图片描述](https://img-blog.csdnimg.cn/20210407133741127.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export LC_ALL&#x3D;C   编译前执行命令去除本地化设置</span><br><span class="line">cd COMPILE&#x2F;aosp712r8</span><br><span class="line">source build&#x2F;envsetup.sh  导入环境变量</span><br><span class="line">chsh -s &#x2F;bin&#x2F;bash   提示只支持bash，但kali2021默认是zsh，用zsh可能会导致编译版本不对，需要改成bash</span><br></pre></td></tr></table></figure><p>重启-选择设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lunch 选择版本18 aosp_sailfish_userdebug</span><br><span class="line"># j后面参数可以选则核心数*2</span><br><span class="line">make -j8  开始，编译完成的系统镜像位于当前目录的out&#x2F;target&#x2F;product&#x2F;sailfish&#x2F;下包括各个img</span><br><span class="line">which fastboot  查看fastboot位置</span><br></pre></td></tr></table></figure><p>关机+音量-  进入fastboot</p><p>unzip <a href="https://dl.google.com/dl/android/aosp/sailfish-n2g47o-factory-f2bc8024.zip" target="_blank" rel="noopener">sailfish-n2g47o-factory-f2bc8024.zip</a>   将上面编译好的boot.img,ramdisk.img,ramdisk-recovery.img,system.img,system_other.img,userdata.img拷贝到解压后的image-sailfish-n2g47o.zip 删除所有镜像，保留android-info.txt，压缩image-sailfish-n2g47o下所有内容，压缩包名称与flash-all.sh里的内容匹配，压缩包内不要有文件夹<code>zip -j image-sailfish-n2g47o.zip ./image-sailfish-n2g47o/*</code></p><p>./flush-all.sh  开始刷机</p><p><a href="https://bbs.pediy.com/thread-218366.htm" target="_blank" rel="noopener">记一次安卓系统源码下载过程</a> </p><p><a href="https://bbs.pediy.com/thread-218513.htm" target="_blank" rel="noopener">记一次安卓系统源码编译刷机过程</a> </p><p><a href="https://bbs.pediy.com/thread-219233.htm" target="_blank" rel="noopener">记一次安卓内核源码编译刷机过程(修改反调试标志位)</a> </p><h1 id="编译原版Xposed刷机"><a href="#编译原版Xposed刷机" class="headerlink" title="编译原版Xposed刷机"></a>编译原版Xposed刷机</h1><p><a href="https://bbs.pediy.com/thread-258639.htm" target="_blank" rel="noopener">XPOSED魔改一：获取特征</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir XPOSED</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;rovo89&#x2F;XposedInstaller.git  xposed框架安装工具</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;rovo89&#x2F;XposedBridge.git   xposed框架java部分</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;rovo89&#x2F;android_art.git  android 5.0及以上用art虚拟机，对这部分的修改</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;rovo89&#x2F;XposedTools.git  打包编译xposed框架</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;rovo89&#x2F;Xposed.git     xposed框架native部分</span><br></pre></td></tr></table></figure><p>android-studio编译XposedInstaller</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;Android&#x2F;Sdk&#x2F;build-tools&#x2F;23.0.3</span><br><span class="line">.&#x2F;aapt</span><br><span class="line">apt-file search libz.so.1</span><br><span class="line">apt install lib32z1</span><br></pre></td></tr></table></figure><p><img src="/2021/05/04/%E9%AD%94%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/20210420021959190.png" alt="在这里插入图片描述"></p><p>下载的<a href="https://github.com/rovo89/android_art" target="_blank" rel="noopener">android_art</a>复制到aosp712r8目录，用android_art替换原art重命名为art文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export LC_ALL&#x3D;C</span><br><span class="line">source build&#x2F;envsetup.sh</span><br><span class="line">lunch 18</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure><p>XposedBridge编译生成的apk改名为XposedBridge.jar放到/root/Desktop/COMPILE/aosp712r8/out/java/</p><p>XposedTools目录，<code>cp build.conf.example ./build.conf</code>修改配置文件build.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[General]</span><br><span class="line"># 输出目录</span><br><span class="line">outdir &#x3D; &#x2F;root&#x2F;Desktop&#x2F;COMPILE&#x2F;aosp712r8&#x2F;out&#x2F;</span><br><span class="line"></span><br><span class="line"># xposedBridge.jar目录</span><br><span class="line">javadir &#x3D; &#x2F;root&#x2F;Desktop&#x2F;COMPILE&#x2F;aosp712r8&#x2F;out&#x2F;java&#x2F;</span><br><span class="line"></span><br><span class="line">[Build]</span><br><span class="line"># Please keep the base version number and add your custom suffix</span><br><span class="line"># 版本</span><br><span class="line">version &#x3D; 89 (custom build by xyz &#x2F; %s)</span><br><span class="line"># 编译时线程数</span><br><span class="line">makeflags &#x3D; -j8</span><br><span class="line"></span><br><span class="line">[GPG]</span><br><span class="line">sign &#x3D; release</span><br><span class="line">user &#x3D; 852109AA!</span><br><span class="line"></span><br><span class="line"># Root directories of the AOSP source tree per SDK version</span><br><span class="line">[AospDir]</span><br><span class="line"># api版本和aosp源码目录</span><br><span class="line">25 &#x3D; &#x2F;root&#x2F;Desktop&#x2F;COMPILE&#x2F;aosp712r8&#x2F;</span><br><span class="line"># SDKs to be used for compiling BusyBox</span><br><span class="line"># Needs https:&#x2F;&#x2F;github.com&#x2F;rovo89&#x2F;android_external_busybox</span><br><span class="line">[BusyBox]</span><br><span class="line"># api版本一致</span><br><span class="line">arm &#x3D; 25</span><br><span class="line">x86 &#x3D; 25</span><br><span class="line">armv5 &#x3D; 25</span><br></pre></td></tr></table></figure><p>下载<a href="https://github.com/rovo89/Xposed" target="_blank" rel="noopener">Xposed</a>复制到 aosp712r87/frameworks/base/cmds目录</p><p>安装perl包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libauthen-ntlm-perl</span><br><span class="line">apt-get install libclass-load-perl</span><br><span class="line">apt-get install libcrypt-ssleay-perl</span><br><span class="line">apt-get install libdata-uniqid-perl</span><br><span class="line">apt-get install libdigest-hmac-perl</span><br><span class="line">apt-get install libdist-checkconflicts-perl</span><br><span class="line">apt-get install libfile-copy-recursive-perl</span><br><span class="line">apt-get install libfile-tail-perl</span><br><span class="line">apt-get install libconfig-inifiles-perl</span><br><span class="line">perl -MCPAN -e &#39;install Config::IniFiles&#39;</span><br><span class="line">perl -MCPAN -e &#39;install File::ReadBackwards&#39;</span><br><span class="line">perl -MCPAN -e &#39;install File::Tail&#39;</span><br><span class="line">cpan</span><br><span class="line">install Archive::Zip</span><br><span class="line">exit</span><br><span class="line">.&#x2F;build.pl -t arm64:25</span><br></pre></td></tr></table></figure><p>hook远程url，修改xposed下载源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U | grep -i xposed</span><br><span class="line">objection -g de.robv.android.xposed.installer explore</span><br><span class="line">android hooking watch class de.robv.android.xposed.installer.util.DownloadsUtil --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method de.robv.android.xposed.installer.util.DownloadsUtil.getDownloadTargetForUrl --dump-args --dump-backtrace --dump-return  点击install触发打印调用栈</span><br></pre></td></tr></table></figure><p>修改DownloadsUtil是setUrl方法中的mUrl的值为本地的zip地址，zip包目录：aosp712r8/out/sdk25/arm64/，<code>apt install lighttpd</code></p><p><img src="/2021/05/04/%E9%AD%94%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/20210419201415336.png" alt="在这里插入图片描述"></p><p>Android.mk没找到ART.mk，路径问题，修改Android.mk最下面ART.mk路径改成绝对路径</p><p><img src="/2021/05/04/%E9%AD%94%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/image-20210504211056918.png" alt="image-20210504211056918"></p><h1 id="魔改Xposed去特征"><a href="#魔改Xposed去特征" class="headerlink" title="魔改Xposed去特征"></a>魔改Xposed去特征</h1><p><a href="https://bbs.pediy.com/thread-255836.htm" target="_blank" rel="noopener">定制Xposed框架</a></p><p>XposedBridge通过Gradle工具jarStubs和jarStubsSource编译生成的XposedBridge/app/build/api/api.jar替换xposed的项目的libs下的api.jar</p><p>build.gradle <code>compileOnly  files(&#39;libs/api.jar&#39;)</code></p><p>修改<strong>XposedInstaller</strong>中的包名xposed为xppsed，所有的de.robv.android.xposed.installer改成de.robv.android.xppsed.installer，所有的/su/xposed/xposed.prop和/system/xposed.prop的xposed.prop改成xppsed.prop</p><p> 修改<strong>XposedBridged</strong>的包名xposed改为xppsed，所有的de.robv.android.xposed改成所有的de.robv.android.xppsed，build好后的XposedBridge后包app-release-unsigned.apk的名字改成XppsedBridge.jar</p><p>进入aosp712r87/frameworks/base/cmds/<strong>xposed</strong>/</p><p>修改libxposed_common.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define CLASS_XPOSED_BRIDGE  &quot;de&#x2F;robv&#x2F;android&#x2F;xppsed&#x2F;XposedBridge&quot;</span><br><span class="line">#define CLASS_ZYGOTE_SERVICE &quot;de&#x2F;robv&#x2F;android&#x2F;xppsed&#x2F;services&#x2F;ZygoteService&quot;</span><br><span class="line">#define CLASS_FILE_RESULT    &quot;de&#x2F;robv&#x2F;android&#x2F;xppsed&#x2F;services&#x2F;FileResult&quot;</span><br></pre></td></tr></table></figure><p>修改xposed.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define XPOSED_PROP_FILE &quot;&#x2F;system&#x2F;xppsed.prop&quot;</span><br><span class="line">#define XPOSED_LIB_ART           XPOSED_LIB_DIR &quot;libxppsed_art.so&quot;</span><br><span class="line">#define XPOSED_JAR               &quot;&#x2F;system&#x2F;framework&#x2F;XppsedBridge.jar&quot;</span><br><span class="line">#define XPOSED_CLASS_DOTS_ZYGOTE &quot;de.robv.android.xppsed.XposedBridge&quot;</span><br><span class="line">#define XPOSED_CLASS_DOTS_TOOLS  &quot;de.robv.android.xppsed.XposedBridge$ToolEntryPoint&quot;</span><br></pre></td></tr></table></figure><p>修改xposed_service.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IMPLEMENT_META_INTERFACE(XposedService, &quot;de.robv.android.xppsed.IXposedService&quot;);</span><br></pre></td></tr></table></figure><p>修改xposed_shared.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define XPOSED_DIR &quot;&#x2F;data&#x2F;user_de&#x2F;0&#x2F;de.robv.android.xppsed.installer&#x2F;&quot;</span><br><span class="line">#define XPOSED_DIR &quot;&#x2F;data&#x2F;data&#x2F;de.robv.android.xppsed.installer&#x2F;&quot;</span><br></pre></td></tr></table></figure><p>修改libxposed_art.cpp名为libxppsed_art.cpp</p><p>修改ART.mk</p><p>libxposed_art改成libxppsed_art</p><p> 进入<strong>XposedTools</strong></p><p> 修改build.pl</p><p>xposed.prop改成xppsed.prop </p><p>XposedBridge.jar改成XppsedBridge.jar</p><p>libxposed_art改成libxppsed_art</p><p>grep -ril “xposedbridge.jar” * 找到所有包含的文件flash-script.sh等文件中的有上述xposed.prop，XposedBridge.jar，libxposed_art改掉即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;build.pl -t arm64:25  重新编译生成路径aosp712r8&#x2F;out&#x2F;sdk25&#x2F;arm64下的zip包改成xposed-v89-sdk25-arm64.zip</span><br></pre></td></tr></table></figure><p>apt install lighttpd &amp;&amp; service lighttpd start</p><p>cp xposed-v89-sdk25-arm64.zip /var/www/html/</p><p>手机端访问192.168.0.102/xposed-v89-sdk25-arm64.zip (虚拟机) 可以直接下载</p><p>安装XposedInstaller(DownloadsUtil下的setUrl的mUrl改为虚拟机下载)进入Install界面进行安装xposed框架</p><p>adb install xposed_checker_app 过检测</p><p>开发新的xposed模块时，移除libs下的api.jar使用XposedBridge通过jarStubs生成的api.jar，更改代码中的de.robv.android.xppsed…</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xposed主动调用开发</title>
      <link href="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/"/>
      <url>/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p>相比于Frida，Xposed在参数的构造上是更有优势的,因为它就是使用的Java进行的开发；</p><p>hook(想通过hook的方式得到一个obj的话需要hook一个实例方法)</p><ol><li><p>constructor.newInstance         </p></li><li><p>xposed.newInstance</p></li></ol><h1 id="案例Qualification"><a href="#案例Qualification" class="headerlink" title="案例Qualification"></a>案例Qualification</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>adb install Qualification-1.3-easy-release.apk  目标就是找到pin的真实值</p><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210501160104595.png" alt="image-20210501160104595"></p><p>jadx-gui Qualification-1.3-easy-release.apk  搜索not the 找不到可能的结果，弹窗可能存在于dialog_failure或者dialog_success</p><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210501155903377.png" alt="image-20210501155903377"></p><p>查看strings.xml中定义的变量，<code>&lt;string name=&quot;dialog_failure&quot;&gt;Unfortunately, not the right PIN :(&lt;/string&gt;</code></p><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210501160334072.png" alt="image-20210501160334072"></p><p>通过hookEvent.js进行hook所有动作触发的组件，找到<code>android.support.v7.app.AppCompatViewInflater$DeclaredOnClickListener</code></p><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210501220605705.png" alt="image-20210501220605705"></p><p>jadx中搜索<code>android.support.v7.app.AppCompatViewInflater.DeclaredOnClickListener</code>,使用了系统框架，无法准确定位最近的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objection -g org.teamsik.ahe17.qualification.easy explore -P ~&#x2F;.objection&#x2F;plugins   AndroidManifest.xml拿到包名开始objection</span><br><span class="line">android hooking search classes MainActivity</span><br><span class="line">android hooking list class_methods org.teamsik.ahe17.qualification.MainActivity </span><br><span class="line">android hooking watch class org.teamsik.ahe17.qualification.MainActivity  点击VERIFY PIN按钮触发事件</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210501221658530.png" alt="image-20210501221658530"></p><p>根据<code>org.teamsik.ahe17.qualification.MainActivity.verifyPasswordClick</code>触发hook verifyPasswordClick</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method org.teamsik.ahe17.qualification.MainActivity.verifyPasswordClick --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210501222041222.png" alt="image-20210501222041222"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch android.support.v7.app.AppCompatViewInflater$DeclaredOnClickListener </span><br><span class="line">plugin wallbreaker objectdump --fullname 0x227a  使用反射进行调用的框架</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210501222956442.png" alt="image-20210501222956442"></p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>校验秘钥逻辑如下，通过调用逻辑改写verifyPassword实现解密。</p><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210501224643323.png" alt="image-20210501224643323"></p><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210501224633987.png" alt="image-20210501224633987"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes Verifier  最好从内存中捞这个类，而非根据静态反编译，hook方法也最好从内存中获取，不要从静态编译结果中获取不准确</span><br></pre></td></tr></table></figure><h3 id="反射调用encodePassword"><a href="#反射调用encodePassword" class="headerlink" title="反射调用encodePassword"></a>反射调用encodePassword</h3><p>f (v[i] != p[i])</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">if (loadPackageParam.packageName.equals(&quot;org.teamsik.ahe17.qualification.easy&quot;)) &#123;</span><br><span class="line">&#x2F;&#x2F; 安装xposed1点击button触发反射调用</span><br><span class="line">    XposedBridge.log(&quot;inner&quot; + loadPackageParam.processName);</span><br><span class="line">    Class clazz &#x3D; loadPackageParam.classLoader.loadClass(&quot;org.teamsik.ahe17.qualification.Verifier&quot;);</span><br><span class="line">    Method encodePassword &#x3D; clazz.getDeclaredMethod(&quot;encodePassword&quot;, String.class);</span><br><span class="line">    encodePassword.setAccessible(true);</span><br><span class="line">    byte[] p &#x3D; &quot;09042ec2c2c08c4cbece042681caf1d13984f24a&quot;.getBytes();</span><br><span class="line">    &#x2F;&#x2F; XposedBridge.log(&quot;result i is &#x3D;&gt; &quot; + new String(p)); 打印字节数组</span><br><span class="line">    String pStr &#x3D; new String((p));</span><br><span class="line">    for (int i &#x3D; 999; i &lt; 10000; i++) &#123;</span><br><span class="line">        byte[] v &#x3D; (byte[]) encodePassword.invoke(null, String.valueOf(i));</span><br><span class="line">        if (v.length !&#x3D; p.length) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        String vStr &#x3D; new String(v);</span><br><span class="line">        if (vStr &#x3D;&#x3D; pStr) &#123;</span><br><span class="line">            XposedBridge.log(&quot;Current i is &#x3D;&gt; &quot; + String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射调用verifyPassword"><a href="#反射调用verifyPassword" class="headerlink" title="反射调用verifyPassword"></a>反射调用verifyPassword</h3><p>if (!Verifier.verifyPassword(this, this.txPassword.getText().toString())) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if (loadPackageParam.packageName.equals(&quot;org.teamsik.ahe17.qualification.easy&quot;)) &#123;</span><br><span class="line">    XposedBridge.log(&quot;inner&quot; + loadPackageParam.processName);</span><br><span class="line">    Class clazz &#x3D; loadPackageParam.classLoader.loadClass(&quot;org.teamsik.ahe17.qualification.Verifier&quot;);</span><br><span class="line">&#x2F;&#x2F; public 方法不需要getDeclaredMethod和setAccessible，反射拿到verifyPassword</span><br><span class="line">    Method verifyPassword &#x3D; clazz.getMethod(&quot;verifyPassword&quot;, Context.class, String.class);</span><br><span class="line">    Context context &#x3D; AndroidAppHelper.currentApplication();</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 999; i &lt; 10000; i++) &#123;</span><br><span class="line">        if ((boolean) verifyPassword.invoke(null, context, String.valueOf(i))) &#123;</span><br><span class="line">            XposedBridge.log(&quot;Current i is &#x3D;&gt; &quot; + String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="callStaticMethod-verifyPassword"><a href="#callStaticMethod-verifyPassword" class="headerlink" title="callStaticMethod verifyPassword"></a>callStaticMethod verifyPassword</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (loadPackageParam.packageName.equals(&quot;org.teamsik.ahe17.qualification.easy&quot;)) &#123;</span><br><span class="line">    XposedBridge.log(&quot;inner&quot;+loadPackageParam.processName);</span><br><span class="line">    Class clazz &#x3D; XposedHelpers.findClass(&quot;org.teamsik.ahe17.qualification.Verifier&quot;,loadPackageParam.classLoader);</span><br><span class="line">&#x2F;&#x2F; hook Verifier类，并直接调用静态方法verifyPassword</span><br><span class="line">    Context context &#x3D; AndroidAppHelper.currentApplication();</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 999;i&lt;10000;i++)&#123;</span><br><span class="line">        if((boolean) XposedHelpers.callStaticMethod(clazz,&quot;verifyPassword&quot;,context,String.valueOf(i)))&#123;</span><br><span class="line">            XposedBridge.log(&quot;Current i is &#x3D;&gt; &quot;+ String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="findAndHookMethod-encodePassword"><a href="#findAndHookMethod-encodePassword" class="headerlink" title="findAndHookMethod encodePassword"></a>findAndHookMethod encodePassword</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if (loadPackageParam.packageName.equals(&quot;org.teamsik.ahe17.qualification.easy&quot;)) &#123;</span><br><span class="line">    XposedBridge.log(&quot;inner&quot; + loadPackageParam.processName);</span><br><span class="line">    Class clazz &#x3D; XposedHelpers.findClass(&quot;org.teamsik.ahe17.qualification.Verifier&quot;, loadPackageParam.classLoader);</span><br><span class="line">    XposedHelpers.findAndHookMethod(clazz, &quot;encodePassword&quot;, String.class, new XC_MethodHook() &#123;</span><br><span class="line">&#x2F;&#x2F; hook encodePassword后拿到所在类，调用该类的verifyPassword</span><br><span class="line">        protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">            Context context &#x3D; AndroidAppHelper.currentApplication();</span><br><span class="line">            for (int i &#x3D; 999; i &lt; 10000; i++) &#123;</span><br><span class="line">                if ((boolean) XposedHelpers.callMethod(param.thisObject, &quot;verifyPassword&quot;, context, String.valueOf(i))) &#123;</span><br><span class="line">                    XposedBridge.log(&quot;Current i is &#x3D;&gt; &quot; + String.valueOf(i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(&quot;getResult is &#x3D;&gt; &quot;, (String) param.getResult());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="newInstance-Verifier"><a href="#newInstance-Verifier" class="headerlink" title="newInstance Verifier"></a>newInstance Verifier</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (loadPackageParam.packageName.equals(&quot;org.teamsik.ahe17.qualification.easy&quot;)) &#123;</span><br><span class="line"></span><br><span class="line">    XposedBridge.log(&quot;inner&quot; + loadPackageParam.processName);</span><br><span class="line">    Class clazz &#x3D; XposedHelpers.findClass(&quot;org.teamsik.ahe17.qualification.Verifier&quot;, loadPackageParam.classLoader);</span><br><span class="line">    &#x2F;&#x2F; newInstance拿到Verifier类并调用verifyPassword</span><br><span class="line">    Object Verifier &#x3D; XposedHelpers.newInstance(clazz);</span><br><span class="line">    Context context &#x3D; AndroidAppHelper.currentApplication();</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 999; i &lt; 10000; i++) &#123;</span><br><span class="line">        if ((boolean) XposedHelpers.callMethod(Verifier, &quot;verifyPassword&quot;, context, String.valueOf(i))) &#123;</span><br><span class="line">            XposedBridge.log(&quot;Current i is &#x3D;&gt; &quot; + String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="findConstructorExact-Verifier"><a href="#findConstructorExact-Verifier" class="headerlink" title="findConstructorExact Verifier"></a>findConstructorExact Verifier</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if (loadPackageParam.packageName.equals(&quot;org.teamsik.ahe17.qualification.easy&quot;)) &#123;</span><br><span class="line"></span><br><span class="line">    XposedBridge.log(&quot;inner&quot; + loadPackageParam.processName);</span><br><span class="line">&#x2F;&#x2F; Constructor获取构造器newInstance拿到Verifier并调用verifyPassword</span><br><span class="line">    Constructor cons &#x3D; XposedHelpers.findConstructorExact(&quot;org.teamsik.ahe17.qualification.Verifier&quot;,loadPackageParam.classLoader);</span><br><span class="line">    Object Verifier &#x3D; cons.newInstance();</span><br><span class="line">    Context context &#x3D; AndroidAppHelper.currentApplication();</span><br><span class="line">    for (int i &#x3D; 999; i &lt; 10000; i++) &#123;</span><br><span class="line">        if ((boolean) XposedHelpers.callMethod(Verifier, &quot;verifyPassword&quot;, context, String.valueOf(i))) &#123;</span><br><span class="line">            XposedBridge.log(&quot;Current i is &#x3D;&gt; &quot; + String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hookAllMethods-onCreate"><a href="#hookAllMethods-onCreate" class="headerlink" title="hookAllMethods onCreate"></a>hookAllMethods onCreate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if (loadPackageParam.packageName.equals(&quot;org.teamsik.ahe17.qualification.easy&quot;)) &#123;</span><br><span class="line"></span><br><span class="line">    XposedBridge.log(&quot;inner&quot; + loadPackageParam.processName);</span><br><span class="line"></span><br><span class="line">    Class clazz &#x3D; loadPackageParam.classLoader.loadClass(&quot;org.teamsik.ahe17.qualification.MainActivity&quot;);</span><br><span class="line">&#x2F;&#x2F; 直接调用verifyPassword成功后回调的方法showSuccessDialog</span><br><span class="line">    XposedBridge.hookAllMethods(clazz, &quot;onCreate&quot;,new XC_MethodHook() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">            super.afterHookedMethod(param);</span><br><span class="line">            Object mMainAciticity &#x3D; param.thisObject;</span><br><span class="line">            XposedHelpers.callMethod(mMainAciticity,&quot;showSuccessDialog&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例demoso1"><a href="#案例demoso1" class="headerlink" title="案例demoso1"></a>案例demoso1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;fs1426arm64 </span><br><span class="line">pyenv local 3.9.0</span><br><span class="line">objection -g com.example.demoso1 explore </span><br><span class="line">android hooking search classes MainActivity</span><br><span class="line">android hooking list class_methods com.example.demoso1.MainActivity  查看该类中所有函数</span><br><span class="line">android hooking watch class com.example.demoso1.MainActivity</span><br><span class="line">android hooking watch class_method com.example.demoso1.MainActivity.$init  查看构造函数的参数</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210503174025839.png" alt="image-20210503174025839"></p><blockquote><ol><li>给android hooking list class_methods 加上构造函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.pyenv</span><br><span class="line">tree -NCfhl|grep objection</span><br><span class="line">cd .&#x2F;versions&#x2F;3.9.0&#x2F;lib&#x2F;python3.9&#x2F;site-packages</span><br><span class="line">tree -NCfhl |grep -i agent.js</span><br><span class="line">vi .&#x2F;objection&#x2F;agent.js</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210503182639000.png" alt="image-20210503182639000"></p><p>//android hooking list class_methods com.example.demoso1.MainActivity<br>//protected void com.example.demoso1.MainActivity.onCreate(android.os.Bundle)<br>//public native int com.example.demoso1.MainActivity.init()<br>//public native int com.example.demoso1.MainActivity.myfirstjni()<br>//public native java.lang.String com.example.demoso1.MainActivity.method02(java.lang.String)<br>//public static native java.lang.String com.example.demoso1.MainActivity.method01(java.lang.String)<br>//public static native java.lang.String com.example.demoso1.MainActivity.myfirstjniJNI(java.lang.String)<br>//public static native java.lang.String com.example.demoso1.MainActivity.stringFromJNI()<br>//public static native java.lang.String com.example.demoso1.MainActivity.stringFromJNI2()<br>//public void com.example.demoso1.MainActivity.testField()<br>//public void com.example.demoso1.MainActivity.testMethod()<br>//        Found 10 method(s)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">if (loadPackageParam.packageName.equals(&quot;com.example.demoso1&quot;)) &#123;</span><br><span class="line">    XposedBridge.log(&quot;inner&quot; + loadPackageParam.processName);</span><br><span class="line">    final Class clazz &#x3D; loadPackageParam.classLoader.loadClass(&quot;com.example.demoso1.MainActivity&quot;);</span><br><span class="line">    &#x2F;&#x2F;得到对象：hook(想通过hook的方式得到一个obj的话得hook一个实例方法) onCreate 循环调用method01和method02，onCreate执行后再触发</span><br><span class="line">    XposedBridge.hookAllMethods(clazz, &quot;onCreate&quot;, new XC_MethodHook() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">            super.beforeHookedMethod(param);</span><br><span class="line">            Object mMainAciticity &#x3D; param.thisObject;</span><br><span class="line">            String cipherText &#x3D; (String) XposedHelpers.callMethod(mMainAciticity, &quot;method01&quot;, &quot;roysue&quot;);</span><br><span class="line">            String clearText &#x3D; (String) XposedHelpers.callMethod(mMainAciticity, &quot;method02&quot;, &quot;47fcda3822cd10a8e2f667fa49da783f&quot;);</span><br><span class="line">            XposedBridge.log(&quot;Cipher text is &#x3D;&gt; &quot; + cipherText);</span><br><span class="line">            XposedBridge.log(&quot;Clear text is &#x3D;&gt; &quot; + clearText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;xposed.newInstance获取对象 毕竟在hook中，进行主动调用的话，触发条件需要将mMainActivity进行newInstance，包只要打开就会触发</span><br><span class="line">    Object newMainActivity &#x3D; XposedHelpers.newInstance(clazz);</span><br><span class="line">    String cipherText &#x3D; (String) XposedHelpers.callMethod(newMainActivity, &quot;method01&quot;, &quot;roysue&quot;);</span><br><span class="line">    String clearText &#x3D; (String) XposedHelpers.callMethod(newMainActivity, &quot;method02&quot;, &quot;47fcda3822cd10a8e2f667fa49da783f&quot;);</span><br><span class="line">    XposedBridge.log(&quot;Cipher text 2 is &#x3D;&gt; &quot; + cipherText);</span><br><span class="line">    XposedBridge.log(&quot;Clear text 2 is &#x3D;&gt; &quot; + clearText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210503183616411.png" alt="image-20210503183616411"></p><h2 id="Nanohttpd"><a href="#Nanohttpd" class="headerlink" title="Nanohttpd"></a>Nanohttpd</h2><p><a href="https://curz0n.github.io/2018/05/31/nanohttpd_encrypt/" target="_blank" rel="noopener">利用NanoHTTPD反射调用Android APP加密函数</a></p><p>build.gradle添加依赖<code>implementation &#39;org.nanohttpd:nanohttpd:2.3.1&#39;</code></p><p>AndroidManifest.xml添加网络权限声明<code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">Object mMainActivity &#x3D; null;</span><br><span class="line"></span><br><span class="line">public void setActivity(Object obj) &#123;</span><br><span class="line">    mMainActivity &#x3D; obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Object getActivity() &#123;</span><br><span class="line">    return mMainActivity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (loadPackageParam.packageName.equals(&quot;com.example.demoso1&quot;)) &#123;</span><br><span class="line">    XposedBridge.log(&quot;inner&quot; + loadPackageParam.processName);</span><br><span class="line">    final Class clazz &#x3D; loadPackageParam.classLoader.loadClass(&quot;com.example.demoso1.MainActivity&quot;);</span><br><span class="line">    &#x2F;&#x2F;得到对象：hook(想通过hook的方式得到一个obj的话得hook一个实例方法) onCreate 循环调用method01和method02</span><br><span class="line">    XposedBridge.hookAllMethods(clazz, &quot;onCreate&quot;, new XC_MethodHook() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">            super.beforeHookedMethod(param);</span><br><span class="line">            Object mMainAciticity &#x3D; param.thisObject;</span><br><span class="line">            String cipherText &#x3D; (String) XposedHelpers.callMethod(mMainAciticity, &quot;method01&quot;, &quot;roysue&quot;);</span><br><span class="line">            String clearText &#x3D; (String) XposedHelpers.callMethod(mMainAciticity, &quot;method02&quot;, &quot;47fcda3822cd10a8e2f667fa49da783f&quot;);</span><br><span class="line">            XposedBridge.log(&quot;Cipher text is &#x3D;&gt; &quot; + cipherText);</span><br><span class="line">            XposedBridge.log(&quot;Clear text is &#x3D;&gt; &quot; + clearText);</span><br><span class="line">&#x2F;&#x2F;                    setActivity(mMainAciticity);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;xposed.newInstance获取对象 毕竟在hook中，进行主动调用的话，触发条件需要将mMainActivity进行newInstance</span><br><span class="line">    Object newMainActivity &#x3D; XposedHelpers.newInstance(clazz);</span><br><span class="line">    String cipherText &#x3D; (String) XposedHelpers.callMethod(newMainActivity, &quot;method01&quot;, &quot;roysue&quot;);</span><br><span class="line">    String clearText &#x3D; (String) XposedHelpers.callMethod(newMainActivity, &quot;method02&quot;, &quot;47fcda3822cd10a8e2f667fa49da783f&quot;);</span><br><span class="line">    XposedBridge.log(&quot;Cipher text 2 is &#x3D;&gt; &quot; + cipherText);</span><br><span class="line">    XposedBridge.log(&quot;Clear text 2 is &#x3D;&gt; &quot; + clearText);</span><br><span class="line">    setActivity(newMainActivity);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    class App extends NanoHTTPD &#123;</span><br><span class="line"></span><br><span class="line">        public App() throws IOException &#123;</span><br><span class="line">            super(8899);</span><br><span class="line">            &#x2F;&#x2F; 内部新起线程实现http，无法直接调用当前类的变量，需要在上面定义setActivity拿到callMethod里的对象</span><br><span class="line">            start(NanoHTTPD.SOCKET_READ_TIMEOUT, true);</span><br><span class="line">            XposedBridge.log(&quot;\nRunning! Point your browsers to http:&#x2F;&#x2F;localhost:8899&#x2F; \n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public NanoHTTPD.Response serve(IHTTPSession session) &#123;</span><br><span class="line"></span><br><span class="line">            Method method &#x3D; session.getMethod();</span><br><span class="line">            String uri &#x3D; session.getUri();</span><br><span class="line">            String RemoteIP &#x3D; session.getRemoteIpAddress();</span><br><span class="line">            String RemoteHostName &#x3D; session.getRemoteHostName();</span><br><span class="line">            Log.i(&quot;r0ysue nanohttpd &quot;,&quot;Method &#x3D;&gt; &quot;+method + &quot; ;Url &#x3D;&gt; &quot; + uri + &quot;&#39; &quot;);</span><br><span class="line">            Log.i(&quot;r0ysue nanohttpd &quot;,&quot;Remote IP  &#x3D;&gt; &quot;+RemoteIP + &quot; ;RemoteHostName &#x3D;&gt; &quot; + RemoteHostName + &quot;&#39; &quot;);</span><br><span class="line"></span><br><span class="line">            String paramBody &#x3D; &quot;&quot;;</span><br><span class="line">            Map&lt;String, String&gt; files &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">            try &#123;</span><br><span class="line">                session.parseBody(files);</span><br><span class="line">                paramBody &#x3D; session.getQueryParameterString();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (ResponseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            Log.i(&quot;Nano_post_param &#x3D;&gt; &quot;, paramBody);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;                    String msg &#x3D; &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello server&lt;&#x2F;h1&gt;\n&quot;;</span><br><span class="line">&#x2F;&#x2F;                    Map&lt;String, String&gt; parms &#x3D; session.getParms();</span><br><span class="line">&#x2F;&#x2F;                    if (parms.get(&quot;username&quot;) &#x3D;&#x3D; null) &#123;</span><br><span class="line">&#x2F;&#x2F;                        msg +&#x3D; &quot;&lt;form action&#x3D;&#39;?&#39; method&#x3D;&#39;get&#39;&gt;\n  &lt;p&gt;Your name: &lt;input type&#x3D;&#39;text&#39; name&#x3D;&#39;username&#39;&gt;&lt;&#x2F;p&gt;\n&quot; + &quot;&lt;&#x2F;form&gt;\n&quot;;</span><br><span class="line">&#x2F;&#x2F;                    &#125; else &#123;</span><br><span class="line">&#x2F;&#x2F;                        msg +&#x3D; &quot;&lt;p&gt;Hello, &quot; + parms.get(&quot;username&quot;) + &quot;!&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#x2F;&#x2F;                    &#125;</span><br><span class="line">            String result &#x3D; &quot;&quot;;</span><br><span class="line">            result &#x3D;  (String) XposedHelpers.callMethod(getActivity(), &quot;method01&quot;, &quot;r0ysue&quot;);</span><br><span class="line">            return newFixedLengthResponse(Response.Status.OK, NanoHTTPD.MIME_PLAINTEXT, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    new App();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>curl -s -X POST “<a href="http://192.168.0.103:8899/&quot;" target="_blank" rel="noopener">http://192.168.0.103:8899/&quot;</a> -d ‘{“data”:onejane}’</p><p><strong>python调用实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def encrypt(enParam):</span><br><span class="line">&#x2F;&#x2F; xposed1 app所在手机ip</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;192.168.0.103:8899&quot;</span><br><span class="line">    param &#x3D; enParam</span><br><span class="line">    headers &#x3D; &#123;&quot;Content-Type&quot;:&quot;application&#x2F;x-www-form-urlencoded&quot;&#125;</span><br><span class="line">    r &#x3D; requests.post(url &#x3D; url ,data&#x3D;param,headers &#x3D; headers)</span><br><span class="line">    print(r.content)</span><br><span class="line">    return r.content</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39; :</span><br><span class="line">    encrypt(&quot;onejane&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210503191723155.png" alt="image-20210503191723155"></p><p>apt install siege <a href="https://www.jianshu.com/p/74c465ff136f" target="_blank" rel="noopener">https://www.jianshu.com/p/74c465ff136f</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">siege -c5 -r10 &quot;http:&#x2F;&#x2F;192.168.0.103:8899 POST &lt;.&#x2F;iloveroysue.json &quot;   压测</span><br></pre></td></tr></table></figure><blockquote><p>iloveroysue.json</p><p>{</p><p>  “data”:”iloveroysue”</p><p>}</p></blockquote><p>adb forward tcp:8899 tcp:8899  将手机8899转发到电脑8899</p><p>siege -c5 -r10 “<a href="http://127.0.0.1:8899/" target="_blank" rel="noopener">http://127.0.0.1:8899</a> POST &lt;./iloveroysue.json “</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(uri.contains(&quot;encrypt&quot;))&#123;</span><br><span class="line">    result &#x3D; (String) XposedHelpers.callMethod(getActivity(), &quot;method01&quot;, paramBody);</span><br><span class="line">&#125;else if (uri.contains(&quot;decrypt&quot;))&#123;</span><br><span class="line">    result &#x3D; (String) XposedHelpers.callMethod(getActivity(), &quot;method02&quot;, paramBody);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    result &#x3D; paramBody;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>curl -s -X POST “<a href="http://192.168.0.103:8899/encrypt&quot;" target="_blank" rel="noopener">http://192.168.0.103:8899/encrypt&quot;</a> -d ‘{“data”:onejane}’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.example.demoso1 explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">plugin wallbreaker classsearch Session</span><br><span class="line">android hooking watch class fi.iki.elonen.NanoHTTPD$IHTTPSession   该类不在目标进程中，在xposed的classloader中，可以hook但是objection没有切classloader的功能</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210503211850723.png" alt="image-20210503211850723"></p><h2 id="暴露公网"><a href="#暴露公网" class="headerlink" title="暴露公网"></a>暴露公网</h2><p>手机：npc   <code>file npc</code> 查看该文件格式基本信息，执行客户端命令暴露一个公网ip出去，端口为58899</p><p>服务器：nps </p><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210503221235226.png" alt="image-20210503221235226"></p><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210503220423867.png" alt="image-20210503220423867"></p><p>curl -s -X POST  “<a href="http://118.126.66.193:58899/encrypt&quot;" target="_blank" rel="noopener">http://118.126.66.193:58899/encrypt&quot;</a> -d ‘{“data”:onejane}’</p><p>siege -c5 -r10 “<a href="http://118.126.66.193:8899/" target="_blank" rel="noopener">http://118.126.66.193:8899</a> POST &lt;./iloveroysue.json “</p><h1 id="案例movetv"><a href="#案例movetv" class="headerlink" title="案例movetv"></a>案例movetv</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.cz.babySister explore</span><br><span class="line">android hooking search classes MainActivity </span><br><span class="line">android hooking list class_methods com.cz.babySister.activity.MainActivity</span><br><span class="line">android hooking watch class com.cz.babySister.activity.MainActivity  将所有MainActivity的方法进行hook，做任意操作打印调用方法</span><br><span class="line">android hooking search classes loadedapk   搜索类名包括loadedapk的类</span><br><span class="line">plugin wallbreaker objectsearch android.app.LoadedApk   内存漫游查找android.app.LoadedApk</span><br><span class="line">plugin wallbreaker objectdump 0x240a  可视化内存中类的信息</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210504123451127.png" alt="image-20210504123451127"></p><p>jadx-gui Desktop/movetv.apk  腾讯加固</p><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210504124146972.png" alt="image-20210504124146972"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (loadPackageParam.packageName.equals(&quot;com.cz.babySister&quot;)) &#123;</span><br><span class="line">    Class clazz &#x3D; loadPackageParam.classLoader.loadClass(&quot;com.cz.babySister.activity.MainActivity&quot;);</span><br><span class="line"></span><br><span class="line">    XposedHelpers.findAndHookMethod(clazz, &quot;getJiFen&quot;, float.class, new XC_MethodHook() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">            super.afterHookedMethod(param);</span><br><span class="line">            XposedBridge.log(&quot;float is &quot;+ String.valueOf( (float) param.args[0]));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210504125110937.png" alt="image-20210504125110937"></p><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p><a href="https://bbs.pediy.com/thread-246767.html" target="_blank" rel="noopener">使用frida来hook加固的Android应用的java层</a>，<a href="https://shuwoom.com/?p=142" target="_blank" rel="noopener">APP的启动过程</a>，<a href="https://bbs.pediy.com/thread-252284.html" target="_blank" rel="noopener">Android万能脱壳机</a>，<a href="https://bbs.pediy.com/thread-252630.html" target="_blank" rel="noopener">FART：ART环境下基于主动调用的自动化脱壳方案</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch android.app.ActivityThread </span><br><span class="line">plugin wallbreaker objectdump --fullname 0x2a6a  取mInitialApplication的内存地址</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x10094e</span><br><span class="line">android hooking list class_methods java.lang.ClassLoader  有findClass方法</span><br></pre></td></tr></table></figure><p>首先，对于获取Classloader的时机点的选择。在第一节的App启动流程以及第三节中APP加壳原理和执行流程的介绍中，可以看到，APP中的Application类中的attachBaseContext和onCreate函数是app中最先执行的方法。壳都是通过替换APP的Application类并自己实现这两个函数，并在这两个函数中实现dex的解密加载，hook系统中Class和method加载执行流程中的关键函数，最后通过反射完成关键变量如最终的Classloader，Application等的替换从而完成执行权的交付。因此，我们可以选在任意一个在Application的onCreate函数执行之后才开始被调用的任意一个函数中。众所周知，对于一个正常的应用来说，最终都要由一个个的Activity来展示应用的界面并和用户完成交互，那么我们就可以选择在ActivityThread中的performLaunchActivity函数作为时机，来获取最终的应用的Classloader。选择该函数还有一个好处在于该函数和应用的最终的application同在ActivityThread类中，可以很方便获取到该类的成员。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) &#123;</span><br><span class="line">        ......</span><br><span class="line">        </span><br><span class="line">Activity activity &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            java.lang.ClassLoader cl &#x3D; r.packageInfo.getClassLoader();</span><br><span class="line">&#x2F;&#x2F;下面通过application的getClassLoader()获取最终的Classloader，并开启线程，在新线程中完成内存中的dex的dump以及主动调用过程，由于该过程相对耗时，为了防止应用出现ANR，从而开启新线程，在新线程中进行，主要的工作都在getDexFilesByClassLoader_23</span><br><span class="line">            &#x2F;&#x2F;addstart</span><br><span class="line">            packagename&#x3D;r.packageInfo.getPackageName();</span><br><span class="line">            &#x2F;&#x2F;mInitialApplication</span><br><span class="line">            &#x2F;&#x2F;final java.lang.ClassLoader finalcl&#x3D;cl</span><br><span class="line">            if(mInitialApplication!&#x3D;null)&#123;</span><br><span class="line">            final java.lang.ClassLoader finalcl&#x3D;mInitialApplication.getClassLoader();</span><br><span class="line">            new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;              </span><br><span class="line">                                getDexFilesByClassLoader_23(finalcl);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;).start();</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;addend</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wget <a href="https://github.com/hanbinglengyue/FART/blob/master/FART_6.0_sourcecode.zip" target="_blank" rel="noopener">https://github.com/hanbinglengyue/FART/blob/master/FART_6.0_sourcecode.zip</a>   套用FART_6.0_sourcecod/frameworks/base/core/java/android/app/ActivityThread.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">if (loadPackageParam.packageName.equals(&quot;com.cz.babySister&quot;)) &#123;</span><br><span class="line"></span><br><span class="line">    XposedBridge.log(&quot; has Hooked!&quot;);</span><br><span class="line">    XposedBridge.log(&quot;inner  &#x3D;&gt; &quot; + loadPackageParam.processName);</span><br><span class="line"></span><br><span class="line">    Class ActivityThread &#x3D; XposedHelpers.findClass(&quot;android.app.ActivityThread&quot;,loadPackageParam.classLoader);</span><br><span class="line">    XposedBridge.hookAllMethods(ActivityThread, &quot;performLaunchActivity&quot;, new XC_MethodHook() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">            super.afterHookedMethod(param);</span><br><span class="line">            Object mInitialApplication &#x3D; (Application) XposedHelpers.getObjectField(param.thisObject,&quot;mInitialApplication&quot;);</span><br><span class="line">            ClassLoader finalCL &#x3D; (ClassLoader) XposedHelpers.callMethod(mInitialApplication,&quot;getClassLoader&quot;);</span><br><span class="line">            XposedBridge.log(&quot;found classload is &#x3D;&gt; &quot;+finalCL.toString());</span><br><span class="line">            Class BabyMain &#x3D; (Class)XposedHelpers.callMethod(finalCL,&quot;findClass&quot;,&quot;com.cz.babySister.activity.MainActivity&quot;);</span><br><span class="line">            XposedBridge.log(&quot;found final class is &#x3D;&gt; &quot;+BabyMain.getName().toString());</span><br><span class="line">            fart(finalCL);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">public static Object invokeStaticMethod(String class_name,</span><br><span class="line">                                        String method_name, Class[] pareTyple, Object[] pareVaules) &#123;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        Class obj_class &#x3D; Class.forName(class_name);</span><br><span class="line">        Method method &#x3D; obj_class.getMethod(method_name, pareTyple);</span><br><span class="line">        return method.invoke(null, pareVaules);</span><br><span class="line">    &#125; catch (SecurityException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public static Object getFieldOjbect(String class_name, Object obj,</span><br><span class="line">                                    String filedName) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Class obj_class &#x3D; Class.forName(class_name);</span><br><span class="line">        Field field &#x3D; obj_class.getDeclaredField(filedName);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        return field.get(obj);</span><br><span class="line">    &#125; catch (SecurityException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public static Field getClassField(ClassLoader classloader, String class_name,</span><br><span class="line">                                  String filedName) &#123;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        Class obj_class &#x3D; classloader.loadClass(class_name);</span><br><span class="line">        Field field &#x3D; obj_class.getDeclaredField(filedName);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        return field;</span><br><span class="line">    &#125; catch (SecurityException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public static ClassLoader getClassloader() &#123;</span><br><span class="line">    ClassLoader resultClassloader &#x3D; null;</span><br><span class="line"></span><br><span class="line">    Object currentActivityThread &#x3D; invokeStaticMethod(</span><br><span class="line">            &quot;android.app.ActivityThread&quot;, &quot;currentActivityThread&quot;,</span><br><span class="line">            new Class[]&#123;&#125;, new Object[]&#123;&#125;);</span><br><span class="line">    Object mBoundApplication &#x3D; getFieldOjbect(</span><br><span class="line">            &quot;android.app.ActivityThread&quot;, currentActivityThread,</span><br><span class="line">            &quot;mBoundApplication&quot;);</span><br><span class="line">    Object loadedApkInfo &#x3D; getFieldOjbect(</span><br><span class="line">            &quot;android.app.ActivityThread$AppBindData&quot;,</span><br><span class="line">            mBoundApplication, &quot;info&quot;);</span><br><span class="line">    Application mApplication &#x3D; (Application) getFieldOjbect(&quot;android.app.LoadedApk&quot;, loadedApkInfo, &quot;mApplication&quot;);</span><br><span class="line">    resultClassloader &#x3D; mApplication.getClassLoader();</span><br><span class="line">    return resultClassloader;</span><br><span class="line">&#125;</span><br><span class="line">public static Object getClassFieldObject(ClassLoader classloader, String class_name, Object obj,</span><br><span class="line">                                         String filedName) &#123;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        Class obj_class &#x3D; classloader.loadClass(class_name);</span><br><span class="line">        Field field &#x3D; obj_class.getDeclaredField(filedName);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        Object result &#x3D; null;</span><br><span class="line">        result &#x3D; field.get(obj);</span><br><span class="line">        return result;</span><br><span class="line">    &#125; catch (SecurityException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public static void fart(ClassLoader clzloader) throws IOException &#123;</span><br><span class="line">    ClassLoader appClassloader &#x3D; clzloader;</span><br><span class="line">    List&lt;Object&gt; dexFilesArray &#x3D; new ArrayList&lt;Object&gt;();</span><br><span class="line">    Field pathList_Field &#x3D; (Field) getClassField(appClassloader, &quot;dalvik.system.BaseDexClassLoader&quot;, &quot;pathList&quot;);</span><br><span class="line">    Object pathList_object &#x3D; getFieldOjbect(&quot;dalvik.system.BaseDexClassLoader&quot;, appClassloader, &quot;pathList&quot;);</span><br><span class="line">    Object[] ElementsArray &#x3D; (Object[]) getFieldOjbect(&quot;dalvik.system.DexPathList&quot;, pathList_object, &quot;dexElements&quot;);</span><br><span class="line">    Field dexFile_fileField &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        dexFile_fileField &#x3D; (Field) getClassField(appClassloader, &quot;dalvik.system.DexPathList$Element&quot;, &quot;dexFile&quot;);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Class DexFileClazz &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        DexFileClazz &#x3D; appClassloader.loadClass(&quot;dalvik.system.DexFile&quot;);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Method getClassNameList_method &#x3D; null;</span><br><span class="line">    Method defineClass_method &#x3D; null;</span><br><span class="line">    Method dumpDexFile_method &#x3D; null;</span><br><span class="line">    Method dumpMethodCode_method &#x3D; null;</span><br><span class="line"></span><br><span class="line">    for (Method field : DexFileClazz.getDeclaredMethods()) &#123;</span><br><span class="line">        if (field.getName().equals(&quot;getClassNameList&quot;)) &#123;</span><br><span class="line">            getClassNameList_method &#x3D; field;</span><br><span class="line">            getClassNameList_method.setAccessible(true);</span><br><span class="line">        &#125;</span><br><span class="line">        if (field.getName().equals(&quot;defineClassNative&quot;)) &#123;</span><br><span class="line">            defineClass_method &#x3D; field;</span><br><span class="line">            defineClass_method.setAccessible(true);</span><br><span class="line">        &#125;</span><br><span class="line">        if (field.getName().equals(&quot;dumpMethodCode&quot;)) &#123;</span><br><span class="line">            dumpMethodCode_method &#x3D; field;</span><br><span class="line">            dumpMethodCode_method.setAccessible(true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Field mCookiefield &#x3D; getClassField(appClassloader, &quot;dalvik.system.DexFile&quot;, &quot;mCookie&quot;);</span><br><span class="line">    for (int j &#x3D; 0; j &lt; ElementsArray.length; j++) &#123;</span><br><span class="line">        Object element &#x3D; ElementsArray[j];</span><br><span class="line">        Object dexfile &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            dexfile &#x3D; (Object) dexFile_fileField.get(element);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        if (dexfile &#x3D;&#x3D; null) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (dexfile !&#x3D; null) &#123;</span><br><span class="line">            dexFilesArray.add(dexfile);</span><br><span class="line">            Object mcookie &#x3D; getClassFieldObject(appClassloader, &quot;dalvik.system.DexFile&quot;, dexfile, &quot;mCookie&quot;);</span><br><span class="line">            if (mcookie &#x3D;&#x3D; null) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] classnames &#x3D; null;</span><br><span class="line">            try &#123;</span><br><span class="line">                classnames &#x3D; (String[]) getClassNameList_method.invoke(dexfile, mcookie);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                continue;</span><br><span class="line">            &#125; catch (Error e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (classnames !&#x3D; null) &#123;</span><br><span class="line">                File file &#x3D; new File(&quot;&#x2F;sdcard&#x2F;Download&#x2F;dumpClass1122.txt&quot;);</span><br><span class="line">                if (!file.exists()) &#123;</span><br><span class="line">                    Log.d(&quot;TestFile&quot;, &quot;Create the file:&quot; );</span><br><span class="line">                    file.createNewFile();</span><br><span class="line">                &#125;</span><br><span class="line">                RandomAccessFile raf &#x3D; new RandomAccessFile(file, &quot;rw&quot;);</span><br><span class="line">                raf.seek(file.length());</span><br><span class="line"></span><br><span class="line">                for (String eachclassname : classnames) &#123;</span><br><span class="line">                    String log &#x3D; &quot;ClassNameis::&quot; +eachclassname +&quot;  :: &quot;+ dumpMethodCode_method +&quot;::&quot;+appClassloader.toString() +&quot;\n&quot;;</span><br><span class="line">                    raf.write(log.getBytes());</span><br><span class="line">                    Log.i(&quot;classes&#x3D;&gt;&quot;,log);</span><br><span class="line">                &#125;</span><br><span class="line">                raf.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cat dumpClass1122.txt |grep MainActivity   脱壳拿到类包括子类，完成trace到classloader所有类的功能</p><p><img src="/2021/05/01/Xposed%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91/image-20210504161102667.png" alt="image-20210504161102667"></p><ul><li><a href="https://bbs.pediy.com/thread-218798.html" target="_blank" rel="noopener">安卓逆向之基于Xposed-ZjDroid脱壳</a></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之房天下pwd</title>
      <link href="/2021/04/29/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%88%BF%E5%A4%A9%E4%B8%8Bpwd/"/>
      <url>/2021/04/29/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%88%BF%E5%A4%A9%E4%B8%8Bpwd/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p><a href="https://passport.fang.com/?backurl=https://suzhou.fang.com/" target="_blank" rel="noopener">https://passport.fang.com/?backurl=https%3A%2F%2Fsuzhou.fang.com%2F</a></p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>POST <a href="https://passport.fang.com/login.api" target="_blank" rel="noopener">https://passport.fang.com/login.api</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uid: 15806204095@163.com</span><br><span class="line">pwd: 3854d2ef8cc2455ed263a3a697414c6f59043010efba9b24da93c6596123fee5fded0d948bc9148beaa5f58756817725617bb3c09ade11e5586e6430392a27db28005ebcfc442d8cf64c0369d439b17011c88e89a57914d78f45a7bba9a7c9e95b75e9fcb4cccbc4c6d65b3e0d3257d183ff2ba35bf3eb70e6bf0b50d4ffdaa1</span><br><span class="line">Service: soufun-passport-web</span><br><span class="line">AutoLogin: 1</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>搜索login.api，并打上断点，重新登录时可以知道pwd是由key_to_encode和我们输入的密码<code>123456</code>经过encryptedString函数生成<img src="/2021/04/29/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%88%BF%E5%A4%A9%E4%B8%8Bpwd/image-20210429173847817.png" alt="image-20210429173847817"></p><p>搜索key_to_encode，通过RSAKeyPair构造函数返回key_to_encode</p><p><img src="/2021/04/29/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%88%BF%E5%A4%A9%E4%B8%8Bpwd/image-20210429174305829.png" alt="image-20210429174305829"></p><p>进入RSAKeyPair的构造函数中，正好encryptedString方法也在其中，我们将整个RSA.min.js:formatted拷贝下来命名fang.js，添加新方法getpwd，实现通过传入的<code>123456</code>加密生成pwd。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function getpwd(pwd) &#123;</span><br><span class="line">    var key_to_encode &#x3D; new RSAKeyPair(&quot;010001&quot;, &quot;&quot;, &quot;978C0A92D2173439707498F0944AA476B1B62595877DD6FA87F6E2AC6DCB3D0BF0B82857439C99B5091192BC134889DFF60C562EC54EFBA4FF2F9D55ADBCCEA4A2FBA80CB398ED501280A007C83AF30C3D1A142D6133C63012B90AB26AC60C898FB66EDC3192C3EC4FF66925A64003B72496099F4F09A9FB72A2CF9E4D770C41&quot;);</span><br><span class="line">    return encryptedString(key_to_encode, pwd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h1><p>拷贝参数到sublime中，使用ctrl+H正则替换功能将<code>(.*?):\s(.*?)\n </code>改成<code>&#39;$1&#39;:&#39;$2&#39;,\n</code>,或者通过请求头加参数.py修改格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uid: 15806204095@163.com</span><br><span class="line">pwd: 3854d2ef8cc2455ed263a3a697414c6f59043010efba9b24da93c6596123fee5fded0d948bc9148beaa5f58756817725617bb3c09ade11e5586e6430392a27db28005ebcfc442d8cf64c0369d439b17011c88e89a57914d78f45a7bba9a7c9e95b75e9fcb4cccbc4c6d65b3e0d3257d183ff2ba35bf3eb70e6bf0b50d4ffdaa1</span><br><span class="line">Service: soufun-passport-web</span><br><span class="line">AutoLogin: 1</span><br></pre></td></tr></table></figure><p>接下来再通过exec执行扣下的js并利用requests库实现post请求完成登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def get_pwd():</span><br><span class="line">    with open(&quot;fang.js&quot;, &quot;r&quot;) as f:</span><br><span class="line">        js_code &#x3D; f.read()</span><br><span class="line">    results &#x3D; execjs.compile(js_code).call(&quot;getpwd&quot;, password)</span><br><span class="line">    return results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    url &#x3D; &#39;https:&#x2F;&#x2F;passport.fang.com&#x2F;login.api&#39;</span><br><span class="line">    pwd &#x3D; get_pwd()</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &#39;uid&#39;: account,</span><br><span class="line">        &#39;pwd&#39;: pwd,</span><br><span class="line">        &#39;Service&#39;: &#39;soufun-passport-web&#39;,</span><br><span class="line">        &#39;AutoLogin&#39;: &#39;1&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.111 Safari&#x2F;537.36&#39;,</span><br><span class="line">        &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,</span><br><span class="line">        &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&#39;,</span><br><span class="line">        &#39;Host&#39;: &#39;passport.fang.com&#39;,</span><br><span class="line">        &#39;Origin&#39;: &#39;https:&#x2F;&#x2F;passport.fang.com&#39;,</span><br><span class="line">        &#39;Pragma&#39;: &#39;no-cache&#39;,</span><br><span class="line">        &#39;Referer&#39;: &#39;https:&#x2F;&#x2F;passport.fang.com&#x2F;?backurl&#x3D;https%3A%2F%2Fsuzhou.fang.com%2F&#39;,</span><br><span class="line">        &#39;Sec-Fetch-Dest&#39;: &#39;empty&#39;,</span><br><span class="line">        &#39;Sec-Fetch-Mode&#39;: &#39;cors&#39;,</span><br><span class="line">        &#39;Sec-Fetch-Site&#39;: &#39;same-origin&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">    response &#x3D; requests.post(url, data, headers&#x3D;headers)</span><br><span class="line">    print(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure><p><strong>完整源码请关注微信公众号：ReverseCode，回复：JS逆向</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇之多途径抓取失信人名单</title>
      <link href="/2021/04/27/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E9%80%94%E5%BE%84%E6%8A%93%E5%8F%96%E5%A4%B1%E4%BF%A1%E4%BA%BA%E5%90%8D%E5%8D%95/"/>
      <url>/2021/04/27/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E9%80%94%E5%BE%84%E6%8A%93%E5%8F%96%E5%A4%B1%E4%BF%A1%E4%BA%BA%E5%90%8D%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>继<a href="https://blog.csdn.net/welggy/article/details/116023394?spm=1001.2014.3001.5501" target="_blank" rel="noopener">爬虫基础篇之Scrapy抓取京东</a>之后，我们对scrapy有了一定的掌握，接下来通过多渠道汇总对失信人信息抓取入库。</p><ol><li>抓取百度失信人名单</li><li>抓取最高人民法院失信人名单</li><li>抓取国家企业信用公示系统失信人公告</li><li>把上面三个来源的失信人信息进行合并,去重</li></ol><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><ul><li><p>搜索失信人名单</p></li><li><p>抓取数据:  失信人名称, 失信人号码,法人(企业),  年龄(企业的年龄为0), 区域,失信内容, 公布日期, 公布执行单位, 创建日期, 更新日期</p></li></ul><p><img src="/2021/04/27/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E9%80%94%E5%BE%84%E6%8A%93%E5%8F%96%E5%A4%B1%E4%BF%A1%E4%BA%BA%E5%90%8D%E5%8D%95/image-20210427202346052.png" alt="image-20210427202346052"></p><h3 id="企业信用信息公示系统"><a href="#企业信用信息公示系统" class="headerlink" title="企业信用信息公示系统"></a>企业信用信息公示系统</h3><ul><li>访问<a href="http://www.gsxt.gov.cn/corp-query-entprise-info-xxgg-100000.html" target="_blank" rel="noopener">http://www.gsxt.gov.cn/corp-query-entprise-info-xxgg-100000.html</a></li><li>抓取: 失信人名称, 失信人号码,  年龄(企业的年龄为0), 区域,  失信内容, 公布日期, 公布单位,  类型(个人/企业), 创建日期, 更新日期</li></ul><p><img src="/2021/04/27/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E9%80%94%E5%BE%84%E6%8A%93%E5%8F%96%E5%A4%B1%E4%BF%A1%E4%BA%BA%E5%90%8D%E5%8D%95/image-20210427202703732.png" alt="image-20210427202703732"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>把抓取的数据, 统一存储到同一个数据库的, 同一张表中.</li><li>如何去重?<ul><li>对于个人: 根据失信人号码, 检查一下, 如果不存在才插入.</li><li>对于企业/组织: <ul><li>失信人证件号, 有的是组织机构代码, 有的是信用号, 企业信用信息公示系统的失信人公告有的没有证件号, 所以无法进行准确判断.</li><li>区域 和 企业名称进行检查, 如果有就重复了, 没有才插入. </li></ul></li></ul></li></ul><h1 id="百度-1"><a href="#百度-1" class="headerlink" title="百度"></a>百度</h1><p><code>scrapy startproject dishonest</code>  创建爬虫项目</p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>定义数据模型继承自scrapy.Item的数据模型DishonestItem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class DishonestItem(scrapy.Item):</span><br><span class="line">    # define the fields for your item here like:</span><br><span class="line">    # 失信人名称</span><br><span class="line">    name &#x3D; scrapy.Field()</span><br><span class="line">    # 失信人证件号</span><br><span class="line">    card_num &#x3D; scrapy.Field()</span><br><span class="line">    # 失信人年龄, 企业年龄都是0</span><br><span class="line">    age &#x3D; scrapy.Field()</span><br><span class="line">    # 区域</span><br><span class="line">    area &#x3D; scrapy.Field()</span><br><span class="line">    # 法人(企业)</span><br><span class="line">    business_entity &#x3D; scrapy.Field()</span><br><span class="line">    # 失信内容</span><br><span class="line">    content &#x3D; scrapy.Field()</span><br><span class="line">    # 公布日期</span><br><span class="line">    publish_date &#x3D; scrapy.Field()</span><br><span class="line">    # 公布&#x2F;执行单位</span><br><span class="line">    publish_unit &#x3D; scrapy.Field()</span><br><span class="line">    # 创建日期</span><br><span class="line">    create_date &#x3D; scrapy.Field()</span><br><span class="line">    # 更新日期</span><br><span class="line">    update_date &#x3D; scrapy.Field()</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>通过翻页发起请求，在控制台的All请求下出现了<code>https://sp0.baidu.com/8aQDcjqpAAV3otqbppnN2DJv/api.php?resource_id=6899&amp;query=失信人名单&amp;pn=0&amp;ie=utf-8&amp;oe=utf-8&amp;format=json</code>的目标地址</p><p>参数:</p><ul><li>resource_id=6899: 资源id, 固定值</li><li>query=失信人名单: 查询内容, 固定值</li><li>pn=0: 数据起始号码</li><li>ie=utf-8&amp;oe=utf-8: 指定数据的编码方式, 固定值</li><li>format=json: 数据格式, 固定值</li></ul><p>我们可以根据第一次请求, 获取到总的数据条数, 生成所有页面的URL. </p><p><img src="/2021/04/27/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E9%80%94%E5%BE%84%E6%8A%93%E5%8F%96%E5%A4%B1%E4%BF%A1%E4%BA%BA%E5%90%8D%E5%8D%95/image-20210427203819189.png" alt="image-20210427203819189"></p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;sp0.baidu.com&#x2F;8aQDcjqpAAV3otqbppnN2DJv&#x2F;api.php?resource_id&#x3D;6899&amp;query&#x3D;失信人&amp;pn&#x3D;10&amp;rn&#x3D;10&amp;ie&#x3D;utf-8&amp;oe&#x3D;utf-8&#39;</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.110 Safari&#x2F;537.36&#39;,</span><br><span class="line">    &#39;Referer&#39;: &#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;s?ie&#x3D;UTF-8&amp;wd&#x3D;%E5%A4%B1%E4%BF%A1%E4%BA%BA&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line">print(response.status_code)</span><br><span class="line">print(response.content.decode())</span><br></pre></td></tr></table></figure><p><img src="/2021/04/27/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E9%80%94%E5%BE%84%E6%8A%93%E5%8F%96%E5%A4%B1%E4%BF%A1%E4%BA%BA%E5%90%8D%E5%8D%95/image-20210427204510667.png" alt="image-20210427204510667"></p><h2 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h2><ol><li>设置默认请求头, 在<code>settings.py</code>文件中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_REQUEST_HEADERS &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.110 Safari&#x2F;537.36&#39;,</span><br><span class="line">    &#39;Referer&#39;: &#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;s?ie&#x3D;UTF-8&amp;wd&#x3D;%E5%A4%B1%E4%BF%A1%E4%BA%BA&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>scrapy genspider baidu baidu.com</code>  创建爬虫</li><li>分页实现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class BaiduSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;baidu&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;baidu.com&#39;]</span><br><span class="line">    start_urls &#x3D; [&#39;https:&#x2F;&#x2F;sp0.baidu.com&#x2F;8aQDcjqpAAV3otqbppnN2DJv&#x2F;api.php?resource_id&#x3D;6899&amp;query&#x3D;失信人&amp;pn&#x3D;0&amp;rn&#x3D;10&amp;ie&#x3D;utf-8&amp;oe&#x3D;utf-8&#39;]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        # 构建所有页面请求</span><br><span class="line">        # 把响应内容的json字符串, 转为字典</span><br><span class="line">        results &#x3D; json.loads(response.text)</span><br><span class="line">        # 取出总数据条数</span><br><span class="line">        disp_num &#x3D; jsonpath(results, &#39;$..dispNum&#39;)[0]</span><br><span class="line">        # print(disp_num)</span><br><span class="line">        # URL模板</span><br><span class="line">        url_pattern &#x3D; &#39;https:&#x2F;&#x2F;sp0.baidu.com&#x2F;8aQDcjqpAAV3otqbppnN2DJv&#x2F;api.php?resource_id&#x3D;6899&amp;query&#x3D;失信人&amp;pn&#x3D;&#123;&#125;&amp;rn&#x3D;10&amp;ie&#x3D;utf-8&amp;oe&#x3D;utf-8&#39;</span><br><span class="line">        # 每隔10条数据, 构建一个请求</span><br><span class="line">        for pn in range(0, disp_num, 10):</span><br><span class="line">            # 构建URL</span><br><span class="line">            url &#x3D; url_pattern.format(pn)</span><br><span class="line">            # 创建请求, 交给引擎</span><br><span class="line">            yield scrapy.Request(url, callback&#x3D;self.parse_data)</span><br><span class="line"></span><br><span class="line">    def parse_data(self, response):</span><br><span class="line">        &quot;&quot;&quot;解析数据&quot;&quot;&quot;</span><br><span class="line">        # 响应数据</span><br><span class="line">        datas &#x3D; json.loads(response.text)</span><br><span class="line">        results &#x3D; jsonpath(datas, &#39;$..result&#39;)[0]</span><br><span class="line">        # 遍历结果列表</span><br><span class="line">        for result in results:</span><br><span class="line">            item &#x3D; DishonestItem()</span><br><span class="line">            #  失信人名称</span><br><span class="line">            item[&#39;name&#39;] &#x3D; result[&#39;iname&#39;]</span><br><span class="line">            # 失信人号码</span><br><span class="line">            item[&#39;card_num&#39;] &#x3D; result[&#39;cardNum&#39;]</span><br><span class="line">            # 失信人年龄</span><br><span class="line">            item[&#39;age&#39;] &#x3D; int(result[&#39;age&#39;])</span><br><span class="line">            # 区域</span><br><span class="line">            item[&#39;area&#39;] &#x3D; result[&#39;areaName&#39;]</span><br><span class="line">            # 法人(企业)</span><br><span class="line">            item[&#39;business_entity&#39;] &#x3D; result[&#39;businessEntity&#39;]</span><br><span class="line">            # 失信内容</span><br><span class="line">            item[&#39;content&#39;] &#x3D; result[&#39;duty&#39;]</span><br><span class="line">            # 公布日期</span><br><span class="line">            item[&#39;publish_date&#39;] &#x3D; result[&#39;publishDate&#39;]</span><br><span class="line">            # 公布&#x2F;执行单位</span><br><span class="line">            item[&#39;publish_unit&#39;] &#x3D; result[&#39;courtName&#39;]</span><br><span class="line">            # 创建日期</span><br><span class="line">            item[&#39;create_date&#39;] &#x3D; datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</span><br><span class="line">            # 更新日期</span><br><span class="line">            item[&#39;update_date&#39;] &#x3D; datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</span><br><span class="line">            # print(item)</span><br><span class="line">            # 把数据交给引擎</span><br><span class="line">            yield item</span><br></pre></td></tr></table></figure><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><ol><li>创建数据库表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> -- 创建数据库</span><br><span class="line">create database dishonest;</span><br><span class="line">-- 如果表存在就删除</span><br><span class="line">drop table if exists dishonest;</span><br><span class="line">-- 创建表</span><br><span class="line">create table dishonest(</span><br><span class="line">dishonest_id INT NOT NULL AUTO_INCREMENT, -- id主键</span><br><span class="line">age INT NOT NULL, -- 年龄, 自然人年龄都是&gt;0的, 企业的年龄等于0</span><br><span class="line">name VARCHAR(200) NOT NULL,   -- 失信人名称</span><br><span class="line">card_num VARCHAR(50) , -- 失信人号码</span><br><span class="line">area VARCHAR(50) NOT NULL, -- 区域</span><br><span class="line">content VARCHAR(2000) NOT NULL, -- 失信内容</span><br><span class="line">business_entity VARCHAR(20), -- 企业法人</span><br><span class="line">publish_unit VARCHAR(200),  -- 发布单位</span><br><span class="line">publish_date VARCHAR(20),  -- 发布单位</span><br><span class="line">create_date DATETIME, -- 创建日期</span><br><span class="line">update_date DATETIME, -- 更新日期</span><br><span class="line">PRIMARY KEY (dishonest_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li>在settings中配置数据库信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 配置MYSQL</span><br><span class="line"># MYSQL的主机IP地址</span><br><span class="line">MYSQL_HOST &#x3D; &#39;127.0.0.1&#39;</span><br><span class="line"># MYSQL端口号</span><br><span class="line">MYSQL_PORT &#x3D; 3306</span><br><span class="line"># MYSQL用户名</span><br><span class="line">MYSQL_USER &#x3D; &#39;root&#39;</span><br><span class="line"># MYSQL密码</span><br><span class="line">MYSQL_PASSWORD &#x3D; &#39;&#39;</span><br><span class="line"># MYSQL数据库名</span><br><span class="line">MYSQL_DB &#x3D; &#39;dishonest&#39;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用pipeline存储数据到mysql</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">class DishonestListPipeline(object):</span><br><span class="line"></span><br><span class="line">        def open_spider(self, spider):</span><br><span class="line">            # 创建数据链接</span><br><span class="line">            self.connect &#x3D; pymysql.connect(host&#x3D;&quot;127.0.0.1&quot;,user&#x3D;&quot;root&quot;, password&#x3D;&quot;123&quot;,</span><br><span class="line">                                db&#x3D;&quot;dishonest&quot;,port&#x3D;3306)</span><br><span class="line">            # 获取执行SQL的cursor</span><br><span class="line">            self.cursor &#x3D; self.connect.cursor()</span><br><span class="line">        </span><br><span class="line">        def close_spider(self, spider):</span><br><span class="line">                    # 释放游标</span><br><span class="line">                    self.cursor.close()</span><br><span class="line">                    # 释放链接</span><br><span class="line">                    self.connect.close()</span><br><span class="line"></span><br><span class="line">        def process_item(self, item, spider):</span><br><span class="line">           </span><br><span class="line">            if item[&#39;age&#39;] &#x3D;&#x3D; 0:</span><br><span class="line">                # 如果年龄 &#x3D;&#x3D; 0 , 就是企业, 就根据公司名和区域进行查询</span><br><span class="line">                name &#x3D; item[&#39;name&#39;]</span><br><span class="line">                area_name &#x3D; item[&#39;area&#39;]</span><br><span class="line">                select_sql &#x3D; &quot;select count(1) from t_dishonest where name&#x3D;&#39;&#123;&#125;&#39; and area &#x3D; &#39;&#123;&#125;&#39;&quot;.format(name, area)</span><br><span class="line">            else:</span><br><span class="line">                # 如果是个人根据证件号, 数据条数</span><br><span class="line">                select_sql &#x3D; &quot;select count(1) from t_dishonest where card_num&#x3D;&#39;&#123;&#125;&#39;&quot;.format(item[&#39;card_num&#39;] )</span><br><span class="line"></span><br><span class="line">            # 根据证件号, 数据条数</span><br><span class="line">            select_sql &#x3D; &quot;select count(1) from dishonest where card_num&#x3D;&#39;&#123;&#125;&#39;&quot;.format(item[&#39;card_num&#39;])</span><br><span class="line">            # 执行查询SQL</span><br><span class="line">            self.cursor.execute(select_sql)</span><br><span class="line">            # 获取查询结果</span><br><span class="line">            count &#x3D; self.cursor.fetchone()[0]</span><br><span class="line">            # 如果查询的数量为0, 说明该人不存在, 不存在就插入</span><br><span class="line">            if count &#x3D;&#x3D; 0:</span><br><span class="line">                # 获取当前的时间, 为插入数据库的时间</span><br><span class="line">                item[&#39;create_date&#39;] &#x3D; datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</span><br><span class="line">                item[&#39;update_date&#39;] &#x3D; datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</span><br><span class="line">                # 把数据转换为键, 值的格式, 方便插入数据库</span><br><span class="line">                keys, values &#x3D; zip(*dict(item).items())</span><br><span class="line">                # 插入数据库SQL</span><br><span class="line">                insert_sql &#x3D; &#39;insert into dishonest (&#123;&#125;) values(&#123;&#125;)&#39;.format(</span><br><span class="line">                    &#39;,&#39;.join(keys),</span><br><span class="line">                    &#39;,&#39;.join([&#39;%s&#39;] * len(values))</span><br><span class="line">                )</span><br><span class="line">                # 执行插入数据SQL</span><br><span class="line">                self.cursor.execute(insert_sql, values)</span><br><span class="line">                # 提交</span><br><span class="line">                self.connect.commit()</span><br><span class="line">            else:</span><br><span class="line">                spider.logger.info(&#39;&#123;&#125;  重复&#39;.format(item))</span><br><span class="line"></span><br><span class="line">            return item</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    pipeline &#x3D;  DishonestListPipeline()</span><br><span class="line">    pipeline.open_spider(&#39;xx&#39;)</span><br><span class="line">    item &#x3D; &#123;</span><br><span class="line">        &#39;card_num&#39;: &#39;12345&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    pipeline.process_item(item, &#39;&#39;)</span><br></pre></td></tr></table></figure><h2 id="随机User-Agent反反爬"><a href="#随机User-Agent反反爬" class="headerlink" title="随机User-Agent反反爬"></a>随机User-Agent反反爬</h2><ol><li>在settings.py中添加USER_AGENTS列表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENTS &#x3D; [</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident&#x2F;4.0; WOW64; Trident&#x2F;4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit&#x2F;523.15 (KHTML, like Gecko, Safari&#x2F;419.3) Arora&#x2F;0.3 (Change: 287 c9dfb30)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (X11; U; Linux; en-US) AppleWebKit&#x2F;527+ (KHTML, like Gecko, Safari&#x2F;419.3) Arora&#x2F;0.6&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko&#x2F;20070215 K-Ninja&#x2F;2.1.1&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko&#x2F;20080705 Firefox&#x2F;3.0 Kapiko&#x2F;3.0&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (X11; Linux i686; U;) Gecko&#x2F;20070322 Kazehakase&#x2F;0.4.5&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora&#x2F;1.9.0.8-1.fc10 Kazehakase&#x2F;0.5.6&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;535.11 (KHTML, like Gecko) Chrome&#x2F;17.0.963.56 Safari&#x2F;535.11&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit&#x2F;535.20 (KHTML, like Gecko) Chrome&#x2F;19.0.1036.7 Safari&#x2F;535.20&quot;,</span><br><span class="line">    &quot;Opera&#x2F;9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto&#x2F;2.9.168 Version&#x2F;11.52&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;536.11 (KHTML, like Gecko) Chrome&#x2F;20.0.1132.11 TaoBrowser&#x2F;2.0 Safari&#x2F;536.11&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.1 (KHTML, like Gecko) Chrome&#x2F;21.0.1180.71 Safari&#x2F;537.1 LBBROWSER&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident&#x2F;5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;535.11 (KHTML, like Gecko) Chrome&#x2F;17.0.963.84 Safari&#x2F;535.11 LBBROWSER&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident&#x2F;5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident&#x2F;5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser&#x2F;7.0.3698.400)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident&#x2F;4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident&#x2F;5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 5.1) AppleWebKit&#x2F;537.1 (KHTML, like Gecko) Chrome&#x2F;21.0.1180.89 Safari&#x2F;537.1&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.1 (KHTML, like Gecko) Chrome&#x2F;21.0.1180.89 Safari&#x2F;537.1&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit&#x2F;533.17.9 (KHTML, like Gecko) Version&#x2F;5.0.2 Mobile&#x2F;8C148 Safari&#x2F;6533.18.5&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko&#x2F;20110307 Firefox&#x2F;4.0b13pre&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko&#x2F;20100101 Firefox&#x2F;16.0&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.11 (KHTML, like Gecko) Chrome&#x2F;23.0.1271.64 Safari&#x2F;537.11&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko&#x2F;20100922 Ubuntu&#x2F;10.10 (maverick) Firefox&#x2F;3.6.10&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="2"><li>实现随机User-Agent下载器中间件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class RandomUserAgent(object):</span><br><span class="line"></span><br><span class="line">    def process_request(self, request, spider):</span><br><span class="line">        # 如果spider是公示系统爬虫, 就直接跳过</span><br><span class="line">        if isinstance(spider, GsxtSpider):</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        #  3. 实现process_request方法, 设置随机的User-Agent</span><br><span class="line">        request.headers[&#39;User-Agent&#39;] &#x3D; random.choice(USER_AGENTS)</span><br><span class="line">        return None</span><br></pre></td></tr></table></figure><ol start="3"><li>settings.py中开启中间件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 开启下载器中间件</span><br><span class="line">DOWNLOADER_MIDDLEWARES &#x3D; &#123;</span><br><span class="line">    &#39;dishonest.dishonest.middlewares.RandomUserAgent&#39;: 543,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理IP反反爬"><a href="#代理IP反反爬" class="headerlink" title="代理IP反反爬"></a>代理IP反反爬</h2><p>实现代理IP下载器中间件，在settings.py中开启, 并配置重试次数，继<a href="https://blog.csdn.net/welggy/article/details/115358013?spm=1001.2014.3001.5501" target="_blank" rel="noopener">爬虫基础篇之IP代理池</a>实现的动态IP代理池启动用于本次失信人抓取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class ProxyMiddleware(object):</span><br><span class="line"></span><br><span class="line">    def process_request(self, request, spider):</span><br><span class="line">        # 实现process_request方法, 设置代理IP</span><br><span class="line">        # 如果spider是公示系统爬虫, 就直接跳过</span><br><span class="line">        if isinstance(spider, GsxtSpider):</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        # 1. 获取协议头</span><br><span class="line">        protocol &#x3D; request.url.split(&#39;:&#x2F;&#x2F;&#39;)[0]</span><br><span class="line">        # 2. 构建代理IP请求的URL</span><br><span class="line">        proxy_url &#x3D; &#39;http:&#x2F;&#x2F;localhost:16888&#x2F;random?protocol&#x3D;&#123;&#125;&#39;.format(protocol)</span><br><span class="line">        # 3. 发送请求, 获取代理IP</span><br><span class="line">        response &#x3D; requests.get(proxy_url)</span><br><span class="line">        # 4. 把代理IP设置给request.meta[&#39;proxy&#39;]</span><br><span class="line">        request.meta[&#39;proxy&#39;] &#x3D; response.content.decode()</span><br><span class="line"></span><br><span class="line">        return None</span><br></pre></td></tr></table></figure><p>配置代理池中间件及重试次数(毕竟免费ip不稳定)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 开启下载器中间件</span><br><span class="line">DOWNLOADER_MIDDLEWARES &#x3D; &#123;</span><br><span class="line">   &#39;dishonest.dishonest.middlewares.ProxyMiddleware&#39;: 500,</span><br><span class="line">   &#39;dishonest.dishonest.middlewares.RandomUserAgent&#39;: 543,</span><br><span class="line">&#125;</span><br><span class="line"># 配置重试次数, 当使用不稳定代理的时候,可能会导致请求失败</span><br><span class="line">RETRY_TIMES &#x3D; 6</span><br></pre></td></tr></table></figure><p>![百度爬虫](爬虫基础篇之多途径抓取失信人名单/GIF 2021-4-27 22-15-36.gif)</p><h1 id="国家企业信用公示系统"><a href="#国家企业信用公示系统" class="headerlink" title="国家企业信用公示系统"></a>国家企业信用公示系统</h1><p>继<a href="https://blog.csdn.net/welggy/article/details/116175773?spm=1001.2014.3001.5501" target="_blank" rel="noopener">JS逆向之国家企业信用信息公示系统Cookie传递</a>完成了cookie的逆向分析，本文利用Cookie的实现逻辑，在scrapy中实现公示系统的爬虫入库。</p><p><code>scrapy genspider gsxt gsxt.gov.cn</code>  创建爬虫</p><p>准备起始URL, 打印响应内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class GsxtSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;gsxt&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;gsxt.gov.cn&#39;]</span><br><span class="line">    # 准备起始</span><br><span class="line">    start_urls &#x3D; [&#39;http:&#x2F;&#x2F;www.gsxt.gov.cn&#x2F;corp-query-entprise-info-xxgg-100000.html&#39;]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        # 打印状态吗</span><br><span class="line">        print(response.status)</span><br><span class="line">        # 内容</span><br><span class="line">        print(response.text)</span><br></pre></td></tr></table></figure><p>修改原来的随机User-Agent, 和随机代理的下载器中间件类, 如果是<code>公示系统</code>爬虫直接跳过.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 随机User-Agent下载器中间件</span><br><span class="line">class RandomUserAgent(object):</span><br><span class="line"></span><br><span class="line">    def process_request(self, request, spider):</span><br><span class="line"></span><br><span class="line">        # 国家企业信用信息系统爬虫, 每次发送请求必须携带cookie信息</span><br><span class="line">        if isinstance(spider, GsxtSpider):</span><br><span class="line">            return</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"># 代理下载器中间件</span><br><span class="line">class ProxyMiddleware(object):</span><br><span class="line"></span><br><span class="line">    def process_request(self, request, spider):</span><br><span class="line">        # 发送请求获取代理IP</span><br><span class="line">        # 如果是国家企业信用信息系统爬虫, 直接返回 </span><br><span class="line">        if isinstance(spider, GsxtSpider):</span><br><span class="line">            return</span><br></pre></td></tr></table></figure><h2 id="定制cookie"><a href="#定制cookie" class="headerlink" title="定制cookie"></a>定制cookie</h2><p>为了实现代理IP, User-Agent, cookie信息生成, 绑定和重用，实现步骤如下：</p><ul><li><p><code>步骤</code>:</p><ul><li>实现生成cookie的脚本<ul><li>用于生成多套代理IP, User-Agent, Cookie信息, 放到Redis</li></ul></li><li>实现公示系统中间件类, <ul><li>实现<code>process_request</code>方法, 从Redis中随机取出Cookie来使用, 关闭页面重定向. </li><li>实现<code>process_response</code>方法, 如果响应码不是200 或 没有内容重试</li><li>在setting.py文件件中配置, 开启该下载器中间</li></ul></li></ul></li><li><p>实现生成cookie的脚本</p><ul><li>创建<code>gen_gsxt_cookies.py</code>文件, 在其中创建<code>GenGsxtCookie</code>的类</li><li>实现一个方法, 用于把一套代理IP, User-Agent, Cookie绑定在一起的信息放到Redis的list中<ul><li>随机获取一个User-Agent</li><li>随机获取一个代理IP</li><li>获取request的session对象</li><li>把User-Agent, 通过请求头, 设置给session对象</li><li>把代理IP, 通过proxies, 设置给session对象</li><li>使用session对象, 发送请求, 获取需要的cookie信息</li><li>把代理IP, User-Agent, Cookie放到字典中, 序列化后, 存储到Redis的list中</li></ul></li><li>实现一个run方法, 用于开启多个异步来执行这个方法. </li><li><code>注</code>: 为了和下载器中间件交互方便, 需要在settings.py中配置一些常量.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">def push_cookie_to_redis(self):</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            2. 实现一个方法, 用于把一套代理IP, User-Agent, Cookie绑定在一起的信息放到Redis的list中</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            # 1. 随机获取一个User-Agent</span><br><span class="line">            user_agent &#x3D; random.choice(USER_AGENTS)</span><br><span class="line">            # 2. 随机获取一个代理IP</span><br><span class="line">            # response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;localhost:16888&#x2F;random?protocol&#x3D;http&#39;)</span><br><span class="line">            # proxy &#x3D; response.content.decode()</span><br><span class="line">            # 3. 获取requests的session对象</span><br><span class="line">            session &#x3D; requests.session()</span><br><span class="line">            # 4. 把User-Agent, 通过请求头, 设置给session对象</span><br><span class="line">            session.headers &#x3D; &#123;</span><br><span class="line">                &#39;User-Agent&#39;: user_agent</span><br><span class="line">            &#125;</span><br><span class="line">            # 5. 把代理IP, 通过proxies, 设置给session对象</span><br><span class="line">            # session.proxies &#x3D; &#123;</span><br><span class="line">            #     &#39;http&#39;: proxy</span><br><span class="line">            # &#125;</span><br><span class="line">            # 6. 使用session对象, 发送请求, 获取需要的cookie信息</span><br><span class="line">            index_url &#x3D; &#39;http:&#x2F;&#x2F;www.gsxt.gov.cn&#x2F;corp-query-entprise-info-xxgg-100000.html&#39;</span><br><span class="line">            # 获取request的session对象, 可以自动合并cookie信息</span><br><span class="line"></span><br><span class="line">            # ######################################################使用session发送index_url请求###########################</span><br><span class="line">            response &#x3D; session.get(index_url)</span><br><span class="line">            print(response.status_code)</span><br><span class="line">            # 第一次请求521 服务器借助这个请求设置一个Set-Cookie: __jsluid_h&#x3D;8af7a39f7cdb1c46f8f624c972968c8f; max-age&#x3D;31536000; path&#x3D;&#x2F;; HttpOnly到本地，并返回一段js</span><br><span class="line">            ########################################################拿到第一个cookie########################</span><br><span class="line">            # 1. 提取script标签中的js</span><br><span class="line">            js1 &#x3D; re.findall(&#39;&lt;script&gt;(.+?)&lt;&#x2F;script&gt;&#39;, response.content.decode())[0].replace(&#39;document.cookie&#x3D;&#39;,</span><br><span class="line">                                                                                             &#39;&#39;).replace(</span><br><span class="line">                &#39;location.href&#x3D;location.pathname+location.search&#39;, &#39;&#39;)</span><br><span class="line">            context &#x3D; js2py.EvalJs()</span><br><span class="line">            ###################################################根据第一个请求返回的js生成第二个cookie###############################</span><br><span class="line">            context.execute(&#39;cookies2 &#x3D;&#39; + js1)</span><br><span class="line">            cookies &#x3D; context.cookies2.split(&#39;;&#39;)[0].split(&#39;&#x3D;&#39;)</span><br><span class="line">            session.cookies.set(cookies[0], cookies[1])  # 到此拿到第两个cookie</span><br><span class="line">            ######################################################拿到第二个cookie############################</span><br><span class="line"></span><br><span class="line">            # 第二次请求携带Cookie: __jsluid_h&#x3D;6ed2648e0a734bc66e3011d648f6f1ab; __jsl_clearance&#x3D;1619152879.013|-1|aS3lFknWlGtD%2FADiygf7vxl4yqk%3D返回一段js</span><br><span class="line">            # 添加jsdom实现浏览器上下文</span><br><span class="line">            js2 &#x3D; &#39;&#39;&#39;const jsdom &#x3D; require(&quot;jsdom&quot;);const &#123;JSDOM&#125; &#x3D; jsdom;const dom &#x3D; new JSDOM();window &#x3D; dom.window;document &#x3D; window.document;location &#x3D; new Array();&#39;&#39;&#39; + \</span><br><span class="line">                  re.findall(&#39;&lt;script&gt;(.+?)&lt;&#x2F;script&gt;&#39;, session.get(index_url).content.decode(&#39;utf-8&#39;))[0]</span><br><span class="line">            # 正则获取document[&#39;cookie&#39;]，由于每次个数不一样我们取最后一个</span><br><span class="line">            cookies2_1 &#x3D; re.findall(r&quot;document\[.*?\]&#x3D;(.*?)location&quot;, js2, re.S)[-1]</span><br><span class="line">            # 将document[&#39;cookie&#39;]内容返回给go函数</span><br><span class="line">            js3 &#x3D; re.sub(&quot;&#125;;go&quot;, &quot;return &quot; + cookies2_1 + &quot;&#125;;go&quot;, js2, 1)</span><br><span class="line">            # 获取调用go函数时里面的参数</span><br><span class="line">            request &#x3D; re.findall(r&quot;go\(&#123;(.*?)&#125;\)&quot;, js3, re.S)[-1]</span><br><span class="line">            # 通过python修改js生成一个request方法</span><br><span class="line">            final_js &#x3D; js3 + &quot;\nfunction request() &#123;return go(&#123;&quot; + request + &quot;&#125;)&#125;&quot;</span><br><span class="line">            # js调用request方法返回cookie并将新的__jsl_clearance塞给session中</span><br><span class="line">            cookies3 &#x3D; execjs.compile(final_js).call(&#39;request&#39;).split(&#39;;&#39;)[0].split(&#39;&#x3D;&#39;)</span><br><span class="line">            session.cookies.set(cookies3[0], cookies3[1])</span><br><span class="line"></span><br><span class="line">            # 第三次请求 修改了__jsl_clearance后服务端向客户端设置新cookie的SECTOKEN</span><br><span class="line">            session.get(index_url)</span><br><span class="line">            cookies &#x3D; requests.utils.dict_from_cookiejar(session.cookies)</span><br><span class="line">            # print(cookies)</span><br><span class="line">            # 7. 把代理IP, User-Agent, Cookie放到字典中, 序列化后, 存储到Redis的list中</span><br><span class="line">            cookies_dict &#x3D; &#123;</span><br><span class="line">                COOKIES_KEY:cookies,</span><br><span class="line">                COOKIES_USER_AGENT_KEY:user_agent,</span><br><span class="line">                # COOKIES_PROXY_KEY:proxy</span><br><span class="line">            &#125;</span><br><span class="line">            # 序列化后, 存储到Redis的list中</span><br><span class="line">            self.redis.lpush(REDIS_COOKIES_KEY, pickle.dumps(cookies_dict))</span><br><span class="line">            print(cookies_dict)</span><br><span class="line">            break</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(&quot;error&quot;,ex)</span><br></pre></td></tr></table></figure><p><code>settings.py</code>中配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 定义cookie的键</span><br><span class="line">COOKIE_KEY &#x3D; &#39;COOKIE&#39; # 字典中Cookie键</span><br><span class="line">COOKIE_PROXY_KEY &#x3D; &#39;COOKIE_PROXY&#39; # 字典中代理IP的键</span><br><span class="line">COOKIE_USER_AGENT_KEY &#x3D; &#39;COOKIE_USER_AGENT&#39; # 字典中User-Agent的键</span><br><span class="line">REDIS_COOKIES_KEY &#x3D; &#39;REDIS_COOKIES&#39; # Redis的cookie列表的键</span><br><span class="line">REDIS_URL &#x3D; &#39;redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;0&#39; # Redis数据库的链接</span><br></pre></td></tr></table></figure><h2 id="定制中间件"><a href="#定制中间件" class="headerlink" title="定制中间件"></a>定制中间件</h2><ul><li><code>步骤</code><ul><li>实现process_request方法, 从Redis中随机取出Cookie来使用, 关闭页面重定向.</li><li>实现process_response方法, 如果响应码不是200 或 没有内容重试    </li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class GsxtCookieMiddleware(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        &quot;&quot;&quot;建立Redis数据库连接&quot;&quot;&quot;</span><br><span class="line">        self.redis &#x3D; StrictRedis.from_url(REDIS_URL)</span><br><span class="line"></span><br><span class="line">    def process_request(self, request, spider):</span><br><span class="line">        &quot;&quot;&quot;从Redis中随机取出Cookie来使用, 关闭页面重定向.&quot;&quot;&quot;</span><br><span class="line">        count &#x3D; self.redis.llen(REDIS_COOKIES_KEY)</span><br><span class="line">        random_index &#x3D; random.randint(0, count-1)</span><br><span class="line">        cookie_data &#x3D; self.redis.lindex(REDIS_COOKIES_KEY, random_index)</span><br><span class="line">        # 反序列化, 把二进制转换为字典</span><br><span class="line">        cookie_dict &#x3D; pickle.loads(cookie_data)</span><br><span class="line"></span><br><span class="line">        # 把cookie信息设置request</span><br><span class="line">        request.headers[&#39;User-Agent&#39;] &#x3D; cookie_dict[COOKIES_USER_AGENT_KEY]</span><br><span class="line">        # 设置请求代理IP</span><br><span class="line">        request.meta[&#39;proxy&#39;] &#x3D; cookie_dict[COOKIES_PROXY_KEY]</span><br><span class="line">        # 设置cookie信息</span><br><span class="line">        request.cookies &#x3D; cookie_dict[COOKIES_KEY]</span><br><span class="line">        # 设置不要重定向</span><br><span class="line">        request.meta[&#39;dont_redirect&#39;] &#x3D; True</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response, spider):</span><br><span class="line">        &quot;&quot;&quot;如果响应码不是200 或 没有内容重试&quot;&quot;&quot;</span><br><span class="line">        # print(response.status)</span><br><span class="line">        if response.status !&#x3D; 200 or response.body &#x3D;&#x3D; b&#39;&#39;:</span><br><span class="line">            # 备份请求</span><br><span class="line">            req &#x3D; request.copy()</span><br><span class="line">            # 设置请求不过滤</span><br><span class="line">            req.dont_filter &#x3D; True</span><br><span class="line">            # 把请求交给引擎</span><br><span class="line">            return req</span><br><span class="line"></span><br><span class="line">        return response</span><br></pre></td></tr></table></figure><p>在setting.py文件件中配置中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES &#x3D; &#123;</span><br><span class="line">   &#39;dishonest.dishonest.middlewares.GsxtCookieMiddleware&#39;: 10,</span><br><span class="line">   &#39;dishonest.dishonest.middlewares.ProxyMiddleware&#39;: 500,</span><br><span class="line">   &#39;dishonest.dishonest.middlewares.RandomUserAgent&#39;: 543,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完善爬虫"><a href="#完善爬虫" class="headerlink" title="完善爬虫"></a>完善爬虫</h2><ul><li>解析页面中的城市名称和id, 构建公告信息的URL</li><li>解析失信企业公告信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">class GsxtSpider(scrapy.Spider):</span><br><span class="line">        name &#x3D; &#39;gsxt&#39;</span><br><span class="line">        allowed_domains &#x3D; [&#39;gsxt.gov.cn&#39;]</span><br><span class="line">        # 准备起始</span><br><span class="line">        start_urls &#x3D; [&#39;http:&#x2F;&#x2F;www.gsxt.gov.cn&#x2F;corp-query-entprise-info-xxgg-100000.html&#39;]</span><br><span class="line"></span><br><span class="line">        custom_settings &#x3D; &#123;</span><br><span class="line">            &#39;DOWNLOAD_DELAY&#39; : 5</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        def parse(self, response):</span><br><span class="line"></span><br><span class="line">            # 获取城市标签的div列表</span><br><span class="line">            divs &#x3D; response.xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;qysx&quot;]&#x2F;div[3]&#x2F;div&#39;)</span><br><span class="line">            # 遍历divs, 获取城市id和名称</span><br><span class="line">            for div in divs:</span><br><span class="line">                area_id &#x3D; div.xpath(&#39;.&#x2F;@id&#39;).extract_first()</span><br><span class="line">                area_name &#x3D; div.xpath(&#39;.&#x2F;label&#x2F;text()&#39;).extract_first()</span><br><span class="line">                # 准备请求的URL</span><br><span class="line">                url &#x3D; &#39;http:&#x2F;&#x2F;www.gsxt.gov.cn&#x2F;affiche-query-area-info-paperall.html?&#39; \</span><br><span class="line">                    &#39;noticeType&#x3D;11&amp;areaid&#x3D;100000&amp;noticeTitle&#x3D;&amp;regOrg&#x3D;&#123;&#125;&#39;.format(area_id)</span><br><span class="line">                # 一个城市最多能够获取50条数据.</span><br><span class="line">                for i in range(0, 50, 10):</span><br><span class="line">                    data &#x3D; &#123;</span><br><span class="line">                        &#39;start&#39;: str(i)</span><br><span class="line">                    &#125;</span><br><span class="line">                    # 构建请求, 交给引擎</span><br><span class="line">                    yield scrapy.FormRequest(url, formdata&#x3D;data, callback&#x3D;self.parse_data,</span><br><span class="line">                                            meta&#x3D;&#123;&#39;area_name&#39;: area_name&#125;)</span><br><span class="line"></span><br><span class="line">        def parse_data(self, response):</span><br><span class="line">            # print(response.text)</span><br><span class="line">            &quot;&quot;&quot;解析页面中的城市&quot;&quot;&quot;</span><br><span class="line">            area_name &#x3D; response.meta[&#39;area_name&#39;]</span><br><span class="line">            result &#x3D; json.loads(response.text)</span><br><span class="line">            datas &#x3D; result[&#39;data&#39;]</span><br><span class="line">            for data in datas:</span><br><span class="line">                item &#x3D; DishonestItem()</span><br><span class="line">                # 区域名称</span><br><span class="line">                item[&#39;area_name&#39;] &#x3D; area_name</span><br><span class="line">                # 公告标题</span><br><span class="line">                notice_title &#x3D; data[&#39;noticeTitle&#39;]</span><br><span class="line">                name &#x3D; re.findall(&#39;关?于?(.+?)的?列入.*&#39;, notice_title)[0]</span><br><span class="line">                item[&#39;name&#39;] &#x3D; name</span><br><span class="line">                # 由于抓取的是失信企业公告, 所以抓到都是企业; 年龄设置为0</span><br><span class="line">                item[&#39;age&#39;] &#x3D; 0</span><br><span class="line">                notice_content &#x3D; data[&#39;noticeContent&#39;]</span><br><span class="line">                card_id &#x3D; re.findall(&#39;经查.+[（\(]统一社会信用码&#x2F;注册号：(\w+)[）\)]&#39;, notice_content)</span><br><span class="line">                item[&#39;card_num&#39;] &#x3D; card_id[0] if len(card_id) !&#x3D; 0 else &#39;&#39;</span><br><span class="line">                item[&#39;content&#39;] &#x3D; notice_content</span><br><span class="line">                # 公布单位</span><br><span class="line">                item[&#39;publish_unit&#39;] &#x3D; data[&#39;judAuth_CN&#39;]</span><br><span class="line">                # 获取到的时间, 是1970年1月1日 0时0分0秒 到发布时间的毫秒数</span><br><span class="line">                publish_ms &#x3D; data[&#39;noticeDate&#39;]</span><br><span class="line">                # 转换为日期类型</span><br><span class="line">                publish_date &#x3D; datetime.fromtimestamp(publish_ms &#x2F; 1000)</span><br><span class="line">                item[&#39;publish_date&#39;] &#x3D; publish_date.strftime(&#39;%Y年%m月%d日&#39;)</span><br><span class="line">                yield item</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 爬虫基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之国家企业信用信息公示系统Cookie传递</title>
      <link href="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/"/>
      <url>/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p><a href="http://www.gsxt.gov.cn/corp-query-entprise-info-xxgg-100000.html" target="_blank" rel="noopener">http://www.gsxt.gov.cn/corp-query-entprise-info-xxgg-100000.html</a></p><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426212409306.png" alt="image-20210426212409306"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>POST <a href="http://www.gsxt.gov.cn/affiche-query-area-info-paperall.html?noticeType=21&amp;areaid=100000&amp;noticeTitle=&amp;regOrg=110000" target="_blank" rel="noopener">http://www.gsxt.gov.cn/affiche-query-area-info-paperall.html?noticeType=21&amp;areaid=100000&amp;noticeTitle=&amp;regOrg=110000</a></p><ul><li>参数:<ul><li>noticeType=21 通知类型, 失信企业固定21</li><li>areaid=100000 无论在哪个区域, 固定是<code>100000</code></li><li>noticeTitle= 通知标题, 可以为空</li><li>regOrg=  通知的区域id, 可以从省份标签上获取</li></ul></li><li>请求体数据:<ul><li>draw: 1 点击分页按钮的次数, 可以省略</li><li>start: 0 起始索引号</li><li>length: 10 长度, 固定是10, 设置多了也无效</li></ul></li></ul><p>直接访问该接口时，状态521，返回如下js混淆加密代码。</p><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426212523507.png" alt="image-20210426212523507"></p><p>尝试给请求头中加上cookie<code>__jsluid_h=f6db0fc02adff8425bebcd8ed1b5fffc; SECTOKEN=7445298838033400749; __jsl_clearance=1619443187.64|0|nGqWRKwajO%2BeHI6CP7Mt50EbdcU%3D;</code>，正常返回如下结果。</p><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426212723697.png" alt="image-20210426212723697"></p><h2 id="jsluid-h"><a href="#jsluid-h" class="headerlink" title="__jsluid_h"></a>__jsluid_h</h2><p>打开fiddler，刷新页面抓包<code>http://www.gsxt.gov.cn/corp-query-entprise-info-xxgg-100000.html</code>,一共访问了三次该页面，前两次521第三次正场返回请求页面。</p><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426213449809.png" alt="image-20210426213449809"></p><p>第一次请求时服务端向服务器塞入第一个__jsluid_h关键cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: __jsluid_h&#x3D;01737b0139a221e260d1061c68b4232f; max-age&#x3D;31536000; path&#x3D;&#x2F;; HttpOnly</span><br></pre></td></tr></table></figure><p>并向浏览器返回一段混淆过的js，内容如下，主要功能应该是设置cookie。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;document.cookie&#x3D;(&#39;_&#39;)+(&#39;_&#39;)+(&#39;j&#39;)+(&#39;s&#39;)+(&#39;l&#39;)+(&#39;_&#39;)+(&#39;c&#39;)+(&#39;l&#39;)+(&#39;e&#39;)+(&#39;a&#39;)+(&#39;r&#39;)+(&#39;a&#39;)+(&#39;n&#39;)+(&#39;c&#39;)+(&#39;e&#39;)+(&#39;&#x3D;&#39;)+((+true)+&#39;&#39;)+((1+[2])&#x2F;[2]+&#39;&#39;)+(-~false+&#39;&#39;)+(3+6+&#39;&#39;)+(2+2+&#39;&#39;)+(-~[2]+&#39;&#39;)+(~~false+&#39;&#39;)+((2)*[4]+&#39;&#39;)+((1+[0])&#x2F;[2]+&#39;&#39;)+(9-1*2+&#39;&#39;)+(&#39;.&#39;)+((2)*[2]+&#39;&#39;)+(6+&#39;&#39;)+(1+6+&#39;&#39;)+(&#39;|&#39;)+(&#39;-&#39;)+(-~0+&#39;&#39;)+(&#39;|&#39;)+(&#39;w&#39;)+(&#39;Y&#39;)+(&#39;p&#39;)+(&#39;A&#39;)+(&#39;F&#39;)+(&#39;R&#39;)+(&#39;%&#39;)+(1+1+&#39;&#39;)+(&#39;B&#39;)+(-~(4)+&#39;&#39;)+(&#39;X&#39;)+(&#39;x&#39;)+(&#39;m&#39;)+(&#39;W&#39;)+(&#39;Y&#39;)+((1&lt;&lt;2)+&#39;&#39;)+(&#39;j&#39;)+(&#39;P&#39;)+(&#39;a&#39;)+(&#39;Q&#39;)+([3]*(3)+&#39;&#39;)+(&#39;t&#39;)+(&#39;Q&#39;)+(1+7+&#39;&#39;)+(&#39;T&#39;)+(&#39;P&#39;)+(&#39;Z&#39;)+(&#39;i&#39;)+(&#39;E&#39;)+(&#39;%&#39;)+(3+&#39;&#39;)+(&#39;D&#39;)+(&#39;;&#39;)+(&#39;m&#39;)+(&#39;a&#39;)+(&#39;x&#39;)+(&#39;-&#39;)+(&#39;a&#39;)+(&#39;g&#39;)+(&#39;e&#39;)+(&#39;&#x3D;&#39;)+(3+&#39;&#39;)+(3+3+&#39;&#39;)+(~~&#39;&#39;+&#39;&#39;)+(~~false+&#39;&#39;)+(&#39;;&#39;)+(&#39;p&#39;)+(&#39;a&#39;)+(&#39;t&#39;)+(&#39;h&#39;)+(&#39;&#x3D;&#39;)+(&#39;&#x2F;&#39;);location.href&#x3D;location.pathname+location.search&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>我们将这段js放入浏览器中执行，如我们所料，正是返回第二个__jsl_clearance关键性cookie。</p><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426213656188.png" alt="image-20210426213656188"></p><h2 id="jsl-clearance"><a href="#jsl-clearance" class="headerlink" title="__jsl_clearance"></a>__jsl_clearance</h2><p>第二次请求<code>http://www.gsxt.gov.cn/corp-query-entprise-info-xxgg-100000.html</code>时，浏览器发送了__jsl_clearance和__jsluid_h两个关键cookie，服务端接收后并返回了一段混淆后的js，这次没有向浏览器塞入cookie。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: __jsluid_h&#x3D;01737b0139a221e260d1061c68b4232f; __jsl_clearance&#x3D;1619430857.467|-1|wYpAFR%2B5XxmWY4jPaQ9tQ8TPZiE%3D</span><br></pre></td></tr></table></figure><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426214109519.png" alt="image-20210426214109519"></p><h2 id="SECTOKEN"><a href="#SECTOKEN" class="headerlink" title="SECTOKEN"></a>SECTOKEN</h2><p>第三次请求<code>http://www.gsxt.gov.cn/corp-query-entprise-info-xxgg-100000.html</code>时，浏览器携带了两个关键性Cookie，不过这次__jsl_clearance和之前的值发生变化，怀疑是第二次请求返回的js做了手脚。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: __jsluid_h&#x3D;01737b0139a221e260d1061c68b4232f; __jsl_clearance&#x3D;1619430857.529|0|WGn9gKxiPtYUHAGBZ1a%2B%2F3o9sJE%3D</span><br></pre></td></tr></table></figure><p>这次请求不仅正常的返回了页面内容，而且还往请求头中塞入了第三个SECTOKEN关键性Cookie。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: SECTOKEN&#x3D;7448433543385710812; Expires&#x3D;Sat, 14-May-2089 13:03:34 GMT; Path&#x3D;&#x2F;; HttpOnly</span><br></pre></td></tr></table></figure><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426214705754.png" alt="image-20210426214705754"></p><h2 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h2><p>在上面的三个cookie加持下，终于成功的返回了我们想要的数据，接下来就是分析这三个cookie在代码中如何拿到。</p><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426214745787.png" alt="image-20210426214745787"></p><h1 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h1><p>通过requests的session对象，自动合并cookie信息，并设置请求头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;78.0.3904.70 Safari&#x2F;537.36&#39;,</span><br><span class="line">&#125;</span><br><span class="line">session &#x3D; requests.session()</span><br><span class="line">session.headers &#x3D; headers</span><br></pre></td></tr></table></figure><h2 id="第一次请求"><a href="#第一次请求" class="headerlink" title="第一次请求"></a>第一次请求</h2><p>通过第一次请求，服务端往客户端返回__jsluid_h作为第一个关键cookie，根据返回的js通过正则表达式拿到script标签中的js逻辑，并去除后面无用js<code>location.href...</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response &#x3D; session.get(index_url)</span><br><span class="line">js1 &#x3D; re.findall(&#39;&lt;script&gt;(.+?)&lt;&#x2F;script&gt;&#39;, response.content.decode())[0].replace(&#39;document.cookie&#x3D;&#39;, &#39;&#39;).replace(</span><br><span class="line">    &#39;location.href&#x3D;location.pathname+location.search&#39;, &#39;&#39;)</span><br><span class="line">context &#x3D; js2py.EvalJs()    </span><br><span class="line">context.execute(&#39;cookies2 &#x3D;&#39; + js1)</span><br><span class="line">cookies &#x3D; context.cookies2.split(&#39;;&#39;)[0].split(&#39;&#x3D;&#39;)</span><br><span class="line">session.cookies.set(cookies[0], cookies[1])  # 到此拿到第两个cookie</span><br><span class="line">print(session.cookies)</span><br></pre></td></tr></table></figure><h2 id="第二次请求"><a href="#第二次请求" class="headerlink" title="第二次请求"></a>第二次请求</h2><p>第二次请求携带了前面两个关键性cookie，并返回了一段js。这里我们的cookie都存在了session中，所以不用额外处理。通过正则取出第二次返回的js中script标签中的内容。</p><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426215550092.png" alt="image-20210426215550092"></p><p>就算格式化后这段代码都难以阅读，我们通过<a href="http://tool.yuanrenxue.com/decode_obfuscator" target="_blank" rel="noopener">ob混淆专解测试版V0.1</a>进行反混淆，重新审视这段js。</p><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426215722445.png" alt="image-20210426215722445"></p><p>逻辑就是通过调用go函数往document中塞入cookie，我们在<code>function go(_0x2323c8)</code>最后返回<code>document[&#39;cookie&#39;]</code>,把setTimeout的时间设置久一点。</p><p><img src="/2021/04/26/JS%E9%80%86%E5%90%91%E4%B9%8B%E5%9B%BD%E5%AE%B6%E4%BC%81%E4%B8%9A%E4%BF%A1%E7%94%A8%E4%BF%A1%E6%81%AF%E5%85%AC%E7%A4%BA%E7%B3%BB%E7%BB%9FCookie/image-20210426215953431.png" alt="image-20210426215953431"></p><p>通过上面分析我们可以通过第二次请求返回的js进行修改后，python调用生成cookie传递后被修改的__jsl_clearance关键cookie。不过很多对象在python调用时不可用，如window，document，location等等，我们可以通过jsdom库<code>npm install jsdom</code>实现浏览器的上下文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const jsdom &#x3D; require(&quot;jsdom&quot;);</span><br><span class="line">const &#123;JSDOM&#125; &#x3D; jsdom;</span><br><span class="line">const dom &#x3D; new JSDOM();</span><br><span class="line">window &#x3D; dom.window;</span><br><span class="line">document &#x3D; window.document;</span><br><span class="line">location &#x3D; new Array();</span><br></pre></td></tr></table></figure><p>就这段js存入文件后，python读取文件，使用execjs实现调用，返回第二个__jsl_clearance关键性cookie，为获取SECTOKEN埋下伏笔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">with open(r&#39;第二次请求.js&#39;, encoding&#x3D;&#39;utf-8&#39;, mode&#x3D;&#39;r&#39;) as f:</span><br><span class="line">    JsData &#x3D; f.read()</span><br><span class="line">cookie &#x3D; execjs.compile(JsData).call(&#39;request&#39;)</span><br><span class="line">print(cookie)</span><br></pre></td></tr></table></figure><p>在python中为了调用go函数，还需要在js中新创建一个request函数，让go函数的数据返回给python作为cookie存入session中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加jsdom实现浏览器上下文</span></span><br><span class="line">js2 = <span class="string">'''const jsdom = require("jsdom");const &#123;JSDOM&#125; = jsdom;const dom = new JSDOM();window = dom.window;document = window.document;location = new Array();'''</span> + \</span><br><span class="line">      re.findall(<span class="string">'&lt;script&gt;(.+?)&lt;/script&gt;'</span>, session.get(index_url).content.decode(<span class="string">'utf-8'</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 正则获取document['cookie']，由于每次个数不一样我们取最后一个</span></span><br><span class="line">cookies2_1 = re.findall(<span class="string">r"document\[.*?\]=(.*?)location"</span>, js2, re.S)[<span class="number">-1</span>]</span><br><span class="line"><span class="comment"># 将document['cookie']内容返回给go函数</span></span><br><span class="line">js3 = re.sub(<span class="string">"&#125;;go"</span>, <span class="string">"return "</span> + cookies2_1 + <span class="string">"&#125;;go"</span>, js2, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 获取调用go函数时里面的参数</span></span><br><span class="line">request = re.findall(<span class="string">r"go\(&#123;(.*?)&#125;\)"</span>, js3, re.S)[<span class="number">-1</span>]</span><br><span class="line"><span class="comment"># 通过python修改js生成一个request方法</span></span><br><span class="line">final_js = js3+<span class="string">"\nfunction request() &#123;return go(&#123;"</span>+request+<span class="string">"&#125;)&#125;"</span></span><br><span class="line"><span class="comment"># js调用request方法返回cookie并将新的__jsl_clearance塞给session中</span></span><br><span class="line">cookies3 = execjs.compile(final_js).call(<span class="string">'request'</span>).split(<span class="string">';'</span>)[<span class="number">0</span>].split(<span class="string">'='</span>)</span><br><span class="line">session.cookies.set(cookies3[<span class="number">0</span>], cookies3[<span class="number">1</span>])</span><br><span class="line">print(cookies3)</span><br></pre></td></tr></table></figure><h2 id="第三次请求"><a href="#第三次请求" class="headerlink" title="第三次请求"></a>第三次请求</h2><p>利用新的__jsl_clearance和__jsluid_h发送第三次请求，服务端会向客户端返回新Cookie SECTOKEN，接下来我们打印出所有的cookie。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.get(index_url)</span><br><span class="line">cookies &#x3D; requests.utils.dict_from_cookiejar(session.cookies)</span><br><span class="line">print(cookies)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#39;__jsl_clearance&#39;: &#39;1619446283.778|0|DFaPnxb5OqsBcRBkaxTSCax2qLA%3D&#39;,</span><br><span class="line">&#39;HttpOnly&#39;: None,</span><br><span class="line">&#39;JSESSIONID&#39;: &#39;e80d7db0e1fe65e65ab6a29e8cc4&#39;,</span><br><span class="line">&#39;SECTOKEN&#39;: &#39;7448640433386424422&#39;,</span><br><span class="line">&#39;__jsluid_h&#39;: &#39;2c8e0b64535955d16c6db3072464d199&#39;,</span><br><span class="line">&#39;tlb_cookie&#39;: &#39;S172.16.12.67&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据抓取"><a href="#数据抓取" class="headerlink" title="数据抓取"></a>数据抓取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;www.gsxt.gov.cn&#x2F;affiche-query-area-info-paperall.html?noticeType&#x3D;21&amp;areaid&#x3D;100000&amp;noticeTitle&#x3D;&amp;regOrg&#x3D;110000&#39;</span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">    # &#39;draw&#39;: &#39;0&#39;,</span><br><span class="line">    &#39;start&#39;: &#39;0&#39;,</span><br><span class="line">    &#39;length&#39;: &#39;10&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 准备请求头</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;78.0.3904.70 Safari&#x2F;537.36&#39;,</span><br><span class="line">    # &#39;User-Agent&#39;: &#39;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&#39;,</span><br><span class="line">    # &#39;Referer&#39;: &#39;http:&#x2F;&#x2F;www.gsxt.gov.cn&#x2F;corp-query-entprise-info-xxgg-100000.html&#39;,</span><br><span class="line">    # &#39;Cookie&#39;: &#39;__jsluid&#x3D;fb0718dce34ccf53c4b94d15e9ab13d5; SECTOKEN&#x3D;7178252594204902863; __jsl_clearance&#x3D;1546475343.133|0|QZ7AOWMecndqD4CZG4hqoBAHtVw%3D;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response &#x3D; requests.post(url, cookies&#x3D;cookies, data&#x3D;data, headers&#x3D;headers)</span><br><span class="line">print(response.status_code)</span><br><span class="line">print(response.content.decode())</span><br></pre></td></tr></table></figure><p><strong>完整源码请关注微信公众号：ReverseCode，回复：JS逆向</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之淘宝h5视频sign破解</title>
      <link href="/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/"/>
      <url>/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>最近需要抓取一些淘宝商品的首图视频，比如<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.31.7ebfcec2qmczgd&amp;id=641116554739&amp;ns=1&amp;abbucket=2#detail%EF%BC%8C%E8%AF%A5%E9%A1%B5%E9%9D%A2%E9%A6%96%E5%9B%BE%E8%A7%86%E9%A2%91%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E6%98%AFblob%E5%8D%8F%E8%AE%AE%E5%8A%A0%E5%AF%86%EF%BC%8C%E8%AF%A5%E5%8D%8F%E8%AE%AE%E8%BF%94%E5%9B%9E%E5%A4%A7%E5%A4%9A%E6%98%AFm3u8%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%A7%86%E9%A2%91%EF%BC%8C%E5%B9%B6%E8%A2%AB%E5%88%87%E5%88%86%E4%B8%BA%E5%A4%9A%E4%B8%AAts%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%B0%8F%E6%AE%B5%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88%E3%80%82" target="_blank" rel="noopener">https://item.taobao.com/item.htm?spm=a230r.1.14.31.7ebfcec2qmczgd&amp;id=641116554739&amp;ns=1&amp;abbucket=2#detail，该页面首图视频页面元素是blob协议加密，该协议返回大多是m3u8格式的视频，并被切分为多个ts格式的小段视频集合。</a></p><p><img src="/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/image-20210425195135891.png" alt="image-20210425195135891"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过chrome抓包果然找到了m3u8视频请求，第一个请求返回ts文件列表，紧接着发起视频请求返回ts视频数据。</p><p><img src="/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/image-20210425195624728.png" alt="image-20210425195624728"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># EXTM3U：.m3u8文件的格式定义</span><br><span class="line"># EXT-X-KEY： 密钥的信息</span><br><span class="line"># METHOD： 加密的方法，这里采用的是AES-128的加密方式</span><br><span class="line"># URI： 密钥的地址，需要获取访问得到密钥的信息</span><br><span class="line"># IV： 偏移量，AES加密的方法，通过这个密钥就可以解密，获取正确的视频信息</span><br></pre></td></tr></table></figure><p>数据来源找到了，那么紧跟着就是找到这些链接的组成字段，如首个链接<code>https://tbm-auth.alicdn.com/e99361edd833010b/1Ptetzs7wLumqr8DVXj/IZAAx7ivPbWWLLDYpm0_275076925941___hd.m3u8?auth_key=1619353994-0-0-7eac2e2d00d26717d7aad9746575f99f</code>中大部分url参数都是加密串，通过搜索其中的<code>1Ptetzs7wLumqr8DVXj</code>，找到了多条符合条件的请求。</p><p><img src="/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/image-20210425200200727.png" alt="image-20210425200200727"></p><p>第一条请求中返回的数据中有两个参数的video_url，分别是hlsResources和mp4Resources，返回了m3u8和mp4格式，好家伙，这样省去了合并m3u8个流程，直接拿mp4格式的视频即可。</p><h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><p>拿到返回video_url的请求的参数，通过逐条过滤参数发现，最终生效的参数只有四个，分别是appKey,t,sign,data，每次请求都有失效时间。</p><p><img src="/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/image-20210425203715490.png" alt="image-20210425203715490"></p><p>其中appKey固定为12574478，t为精确到毫秒的时间戳，sign是今天的逆向主角参数，data动态内容为<code>&#39;{&quot;videoId&quot;: &quot;%s&quot;,&quot;from&quot;:&quot;detail&quot;}&#39; % &quot;301079547561&quot;</code>,其中<code>301079547561</code>作为videoId在页面请求时直接返回在页面js中。</p><h2 id="sign"><a href="#sign" class="headerlink" title="sign"></a>sign</h2><p>无痕浏览器清空页面缓存，搜索sign，从众多页面中找到可能出现的位置，sign就是j，而<code> j = h(d.token + &quot;&amp;&quot; + i + &quot;&amp;&quot; + g + &quot;&amp;&quot; + c.data)</code>,其中d.token是加密字符串，i为时间戳，g为固定值12574478，c.data为{“videoId”:”275076925941”,”from”:”detail”}</p><p><img src="/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/image-20210425210119516.png" alt="image-20210425210119516"></p><p>在控制台中调用h函数返回32位字符串，猜测是md5加密，就不扣h函数的js了。</p><p><img src="/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/image-20210425210755226.png" alt="image-20210425210755226"></p><p>接下来就是分析这些参数中唯一变的参数d.token的来源。</p><h2 id="d-token"><a href="#d-token" class="headerlink" title="d.token"></a>d.token</h2><p>第一次断点时d.token为undefined。</p><p>放开断点后搜索d.token的值<code>0027f0b395e6356158d06d22da238855</code>,第一次出现在了返回video_url的请求返回时set-cookie中，作为Response Cookie返回了两个cookie，一个是_m_h5_tk，一个是_m_h5_tk_enc，_分割的前面一段就是d.token的值。</p><p><img src="/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/image-20210425221325428.png" alt="image-20210425221325428"></p><p><img src="/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/image-20210425224123071.png" alt="image-20210425224123071"></p><p>第二次进入断点时<code>d.token=0027f0b395e6356158d06d22da238855</code>,放开断点后搜索<code>0027f0b395e6356158d06d22da238855</code>出现在了同一个请求的Request Cookie中。</p><p><img src="/2021/04/25/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B7%98%E5%AE%9Dh5%E8%A7%86%E9%A2%91sign%E7%A0%B4%E8%A7%A3/image-20210425224612523.png" alt="image-20210425224612523"></p><h2 id="逻辑梳理"><a href="#逻辑梳理" class="headerlink" title="逻辑梳理"></a>逻辑梳理</h2><p>大概思路清晰了，对同一个请求多次访问，第一次返回cookie作为第二次请求的cookie，cookie中的_m_h5_tk_enc通过_分割的前半段字符串作为d.token，根据<code>d.token + &quot;&amp;&quot; + i + &quot;&amp;&quot; + g + &quot;&amp;&quot; + c.data</code>进行md5得到sign，请求时加上两个cookie，完成video_url的请求，从而实现淘宝商品首图的视频抓取。</p><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">APPKEY &#x3D; &#39;12574478&#39;</span><br><span class="line">DATA &#x3D; &#39;&#123;&quot;videoId&quot;: &quot;%s&quot;,&quot;from&quot;:&quot;detail&quot;&#125;&#39; % &quot;301079547561&quot;</span><br><span class="line">URL &#x3D; &#39;https:&#x2F;&#x2F;h5api.m.taobao.com&#x2F;h5&#x2F;mtop.taobao.cloudvideo.video.queryforh5&#x2F;1.0&#x2F;&#39;</span><br><span class="line">params &#x3D; &#123;&#39;jsv&#39;: &#39;2.4.11&#39;, &#39;appKey&#39;: APPKEY, &#39;t&#39;: int(time.time() * 1000),</span><br><span class="line">          &#39;sign&#39;: &#39;FAKE_SIGN_WITH_ANYTHING&#39;, &#39;api&#39;: &#39;mtop.wdetail.getItemDescx&#39;, &#39;callback&#39;: &#39;mtopjsonp1&#39;,&#39;v&#39;: &#39;4.9&#39;,</span><br><span class="line">          &#39;type&#39;: &#39;jsonp&#39;, &#39;dataType&#39;: &#39;jsonp&#39;,</span><br><span class="line">          &#39;data&#39;: DATA&#125;</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 9_3_4 like Mac OS X) AppleWebKit&#x2F;601.1.46 &#39; + \</span><br><span class="line">                  &#39;(KHTML, like Gecko) Version&#x2F;9.0 Mobile&#x2F;13G35 Safari&#x2F;601.1&#39;,</span><br><span class="line">&#125;</span><br><span class="line">images &#x3D; []</span><br><span class="line"># get token in first request</span><br><span class="line">r1 &#x3D; requests.get(URL, params&#x3D;params, headers&#x3D;headers)</span><br><span class="line">token_with_time &#x3D; r1.cookies.get(&#39;_m_h5_tk&#39;)</span><br><span class="line">token &#x3D; token_with_time.split(&#39;_&#39;)[0]</span><br><span class="line">enc_token &#x3D; r1.cookies.get(&#39;_m_h5_tk_enc&#39;)</span><br><span class="line"># get results in second request</span><br><span class="line">t2 &#x3D; str(int(time.time() * 1000))</span><br><span class="line">c &#x3D; &#39;&amp;&#39;.join([token, t2, APPKEY, DATA])</span><br><span class="line">m &#x3D; hashlib.md5()</span><br><span class="line">m.update(c.encode(&#39;utf-8&#39;))</span><br><span class="line">params.update(&#123;&#39;t&#39;: t2, &#39;sign&#39;: m.hexdigest()&#125;)</span><br><span class="line">cookies &#x3D; &#123;&#39;_m_h5_tk&#39;: token_with_time, &#39;_m_h5_tk_enc&#39;: enc_token&#125;</span><br><span class="line">r2 &#x3D; requests.get(URL, params&#x3D;params, headers&#x3D;headers, cookies&#x3D;cookies)</span><br><span class="line">results&#x3D;json.loads(re.match(r&#39; mtopjsonp1\((.*?)\)&#39;, r2.text).group(1))</span><br><span class="line">video_url &#x3D; jsonpath(results, &#39;$..video_url&#39;)[1]</span><br><span class="line">print(video_url)</span><br></pre></td></tr></table></figure><p><strong>完整源码请关注微信公众号：ReverseCode，回复：JS逆向</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xposed搭建开发</title>
      <link href="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/"/>
      <url>/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="pixel刷安卓7"><a href="#pixel刷安卓7" class="headerlink" title="pixel刷安卓7"></a>pixel刷安卓7</h1><p>proxychains wget <a href="https://dl.google.com/dl/android/aosp/sailfish-n2g47o-factory-f2bc8024.zip" target="_blank" rel="noopener">https://dl.google.com/dl/android/aosp/sailfish-n2g47o-factory-f2bc8024.zip</a></p><p>proxychains wget <a href="https://forum.xda-developers.com/attachments/xposedinstaller_3-1-5-apk.4393082/" target="_blank" rel="noopener">https://forum.xda-developers.com/attachments/xposedinstaller_3-1-5-apk.4393082/</a></p><p>proxychains wget <a href="https://supersuroot.org/downloads/supersu-pro.apk" target="_blank" rel="noopener">https://supersuroot.org/downloads/supersu-pro.apk</a></p><p>proxychains wget <a href="https://dl.twrp.me/sailfish/twrp-3.3.0-0-sailfish.img" target="_blank" rel="noopener">https://dl.twrp.me/sailfish/twrp-3.3.0-0-sailfish.img</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd sailfish-opm4.171019.021.p1 &amp;&amp; adb reboot bootloader &amp;&amp;  .&#x2F;flash-all.sh</span><br><span class="line">adb push SR5-SuperSU-v2.82-SR5-20171001224502.zip  &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">adb reboot bootloader &amp;&amp; fastboot boot twrp-3.3.0-0-sailfish.img   刷入twrp后安装supersu</span><br><span class="line">adb install XposedInstaller_3.1.5.apk  常见模块https:&#x2F;&#x2F;github.com&#x2F;WrBug&#x2F;GravityBox.git</span><br><span class="line">adb push timeadjust.sh &#x2F;data&#x2F;local&#x2F;tmp &amp;&amp; sh timeadjust.sh  时间修改正确</span><br><span class="line">adb install com.ttxapps.wifiadb_2.1.3-810031745_minAPI15.apk</span><br></pre></td></tr></table></figure><h1 id="xposed"><a href="#xposed" class="headerlink" title="xposed"></a>xposed</h1><p><a href="https://api.xposed.info/reference/android/app/AndroidAppHelper.html" target="_blank" rel="noopener">xposed api</a></p><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210423225219896.png" alt="image-20210423225219896"></p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>过滤子进程：loadPackageParam.processName,可以通过hook参数、调用栈、返回值 ，打印和修改，Xposed的开发，本质上就是Java的开发。</p><ol><li><p><strong>创建安卓项目xposed1</strong></p></li><li><p><strong>build.gradle引入xposed api依赖</strong></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#39;com.android.application&#39;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 30</span><br><span class="line">    buildToolsVersion &quot;30.0.2&quot;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.roysue.xposed1&quot;</span><br><span class="line">        minSdkVersion 16</span><br><span class="line">        targetSdkVersion 30</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly &#39;de.robv.android.xposed:api:82&#39;</span><br><span class="line">    compileOnly &#39;de.robv.android.xposed:api:82:sources&#39;</span><br><span class="line">    implementation fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class="line">    implementation &#39;androidx.appcompat:appcompat:1.2.0&#39;</span><br><span class="line">    implementation &#39;androidx.constraintlayout:constraintlayout:2.0.2&#39;</span><br><span class="line">    testImplementation &#39;junit:junit:4.12&#39;</span><br><span class="line">    androidTestImplementation &#39;androidx.test.ext:junit:1.1.2&#39;</span><br><span class="line">    androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.3.0&#39;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>AndroidManifest.xml添加xposed项目基本配置</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    package&#x3D;&quot;com.roysue.xposed1&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup&#x3D;&quot;true&quot;</span><br><span class="line">        android:icon&#x3D;&quot;@mipmap&#x2F;ic_launcher&quot;</span><br><span class="line">        android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class="line">        android:roundIcon&#x3D;&quot;@mipmap&#x2F;ic_launcher_round&quot;</span><br><span class="line">        android:supportsRtl&#x3D;&quot;true&quot;</span><br><span class="line">        android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot;&gt;</span><br><span class="line">        &lt;meta-data</span><br><span class="line">            android:name&#x3D;&quot;xposedmodule&quot;</span><br><span class="line">            android:value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;meta-data</span><br><span class="line">            android:name&#x3D;&quot;xposeddescription&quot;</span><br><span class="line">            android:value&#x3D;&quot;这是一个Xposed例程&quot; &#x2F;&gt;</span><br><span class="line">        &lt;meta-data</span><br><span class="line">            android:name&#x3D;&quot;xposedminversion&quot;</span><br><span class="line">            android:value&#x3D;&quot;53&quot; &#x2F;&gt;</span><br><span class="line">        &lt;activity android:name&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class="line">                &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;intent-filter&gt;</span><br><span class="line">        &lt;&#x2F;activity&gt;</span><br><span class="line">    &lt;&#x2F;application&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>activity_main.xml添加按钮组件</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;Hello World!&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintLeft_toLeftOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintRight_toRightOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;button&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;Button&quot;</span><br><span class="line">        tools:layout_editor_absoluteX&#x3D;&quot;158dp&quot;</span><br><span class="line">        tools:layout_editor_absoluteY&#x3D;&quot;238dp&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>MainActivity调用Button组件，实现被hook方法toastMessage</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private Button button;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        button &#x3D; (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Toast.makeText(MainActivity.this, toastMessage(&quot;我未被劫持&quot;), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public String toastMessage(String message) &#123;</span><br><span class="line">        return message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>继承IXposedHookLoadPackage实现hook</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class HookTest implements IXposedHookLoadPackage &#123;</span><br><span class="line">    &#x2F;&#x2F; 堆栈打印</span><br><span class="line">    public void PrintStack()&#123;</span><br><span class="line"></span><br><span class="line">        XposedBridge.log(&quot;Dump Stack: &quot;+ &quot;---------------start----------------&quot;);</span><br><span class="line">        Throwable ex &#x3D; new Throwable();</span><br><span class="line">        StackTraceElement[] stackElements &#x3D; ex.getStackTrace();</span><br><span class="line">        if (stackElements !&#x3D; null) &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; stackElements.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">                XposedBridge.log(&quot;Dump Stack&quot;+i+&quot;: &quot;+ stackElements[i].getClassName()</span><br><span class="line">                        +&quot;----&quot;+stackElements[i].getFileName()</span><br><span class="line">                        +&quot;----&quot; + stackElements[i].getLineNumber()</span><br><span class="line">                        +&quot;----&quot; +stackElements[i].getMethodName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        XposedBridge.log(&quot;Dump Stack: &quot;+ &quot;---------------over----------------&quot;);</span><br><span class="line">        RuntimeException e &#x3D; new RuntimeException(&quot;&lt;Start dump Stack !&gt;&quot;);</span><br><span class="line">        e.fillInStackTrace();</span><br><span class="line">        Log.i(&quot;&lt;Dump Stack&gt;:&quot;, &quot;++++++++++++&quot;, e);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F;XposedBridge.log(loadPackageParam.processName);</span><br><span class="line">        if (loadPackageParam.packageName.equals(&quot;com.roysue.xposed1&quot;)) &#123;</span><br><span class="line">            XposedBridge.log(&quot; has Hooked!&quot;);</span><br><span class="line">            XposedBridge.log(&quot;inner&quot;+loadPackageParam.processName);</span><br><span class="line">            Class clazz &#x3D; loadPackageParam.classLoader.loadClass(&quot;com.roysue.xposed1.MainActivity&quot;);</span><br><span class="line">            XposedHelpers.findAndHookMethod(clazz, &quot;toastMessage&quot;, String.class,new XC_MethodHook() &#123;</span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                &#x2F;&#x2F; 原始参数</span><br><span class="line">                    String oldText &#x3D; (String) param.args[0];</span><br><span class="line">                    Log.d(&quot;din not hijacked&#x3D;&gt;&quot;, oldText);</span><br><span class="line">                    &#x2F;&#x2F;param.args[0] &#x3D; &quot;test&quot;;</span><br><span class="line">                    &#x2F;&#x2F; 修改新参数</span><br><span class="line">                    param.args[0] &#x3D; &quot;你已被劫持&quot;;</span><br><span class="line">                    PrintStack();</span><br><span class="line">                    &#x2F;&#x2F;super.beforeHookedMethod(param);</span><br><span class="line">                    &#x2F;&#x2F;XposedBridge.log(&quot; has Hooked!&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    Log.d(&quot;getResult is &#x3D;&gt; &quot;,(String) param.getResult());</span><br><span class="line">                    param.setResult(&quot;你已被劫持2&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><strong>xposed_init配置hook方法</strong><br><code>com.roysue.xposed1.HookTest</code></li></ol><p>编译启动该app，注入Xposed</p><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210423225205264.png" alt="image-20210423225205264"></p><p>点击按钮查看log及调用栈</p><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210423233543529.png" alt="image-20210423233543529"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.roysue.xposed1 explore</span><br><span class="line">android hooking search classes HookTest </span><br><span class="line">android hooking list class_methods com.roysue.xposed1.HookTest  找不到该类，原因是实现了接口IXposedHookLoadPackage，HookTest不在接口包中，需要在xposed_init里指定路径</span><br></pre></td></tr></table></figure><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><h3 id="Hook-HookTest"><a href="#Hook-HookTest" class="headerlink" title="Hook HookTest"></a>Hook HookTest</h3><p>objection无法找到，通过frida进行hook拿到HookTest，frida -UF -l hookXposed.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function hook() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.log(&quot;start&quot;)</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch: function (loader) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if(loader.findClass(&quot;com.roysue.xposed1.HookTest&quot;))&#123;</span><br><span class="line">                        console.log(&quot;Successfully found loader&quot;)</span><br><span class="line">                        console.log(loader);</span><br><span class="line">                        Java.classFactory.loader &#x3D; loader ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch(error)&#123;</span><br><span class="line">                    console.log(&quot;find error:&quot; + error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line">                console.log(&quot;end1&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    Java.use(&quot;com.roysue.xposed1.HookTest&quot;).PrintStack.implementation &#x3D; function (param)&#123;</span><br><span class="line">        console.log(&quot;entering PrintStack&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&quot;end2&quot;) </span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    hook()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210501135526330.png" alt="image-20210501135526330"></p><h3 id="Hook-XposedBridge"><a href="#Hook-XposedBridge" class="headerlink" title="Hook XposedBridge"></a>Hook XposedBridge</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function hook() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.log(&quot;start&quot;)</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch: function (loader) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    &#x2F;&#x2F; if (loader.findClass(&quot;com.roysue.xposed1.HookTest&quot;)) &#123;</span><br><span class="line">                    if(loader.findClass(&quot;de.robv.android.xposed.XposedBridge&quot;))&#123;                        </span><br><span class="line">                        console.log(&quot;Successfully found loader&quot;)</span><br><span class="line">                        console.log(loader);</span><br><span class="line">                        Java.classFactory.loader &#x3D; loader;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (error) &#123;</span><br><span class="line">                    console.log(&quot;find error:&quot; + error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line">                console.log(&quot;end1&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        Java.use(&quot;de.robv.android.xposed.XposedBridge&quot;).log.overload(&#39;java.lang.String&#39;).implementation &#x3D; function (str) &#123;</span><br><span class="line">            console.log(&quot;entering XposedBridge.log&quot;,str.toString());</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&quot;end2&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210501140005696.png" alt="image-20210501140005696"></p><h3 id="Hook-All-Methods"><a href="#Hook-All-Methods" class="headerlink" title="Hook All Methods"></a>Hook All Methods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">function uniqBy(array, key) &#123;</span><br><span class="line">    var seen &#x3D; &#123;&#125;;</span><br><span class="line">    return array.filter(function (item) &#123;</span><br><span class="line">        var k &#x3D; key(item);</span><br><span class="line">        return seen.hasOwnProperty(k) ? false : (seen[k] &#x3D; true);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; trace a specific Java Method</span><br><span class="line">function traceMethod(targetClassMethod) &#123;</span><br><span class="line">    var delim &#x3D; targetClassMethod.lastIndexOf(&quot;.&quot;);</span><br><span class="line">    if (delim &#x3D;&#x3D;&#x3D; -1) return;</span><br><span class="line"></span><br><span class="line">    var targetClass &#x3D; targetClassMethod.slice(0, delim)</span><br><span class="line">    var targetMethod &#x3D; targetClassMethod.slice(delim + 1, targetClassMethod.length)</span><br><span class="line"></span><br><span class="line">    var hook &#x3D; Java.use(targetClass);</span><br><span class="line">    var overloadCount &#x3D; hook[targetMethod].overloads.length;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Tracing &quot; + targetClassMethod + &quot; [&quot; + overloadCount + &quot; overload(s)]&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;* </span><br><span class="line">    &#x2F;&#x2F; hook all class_method</span><br><span class="line">    for (var i &#x3D; 0; i &lt; overloadCount; i++) &#123;</span><br><span class="line"></span><br><span class="line">        hook[targetMethod].overloads[i].implementation &#x3D; function () &#123;</span><br><span class="line">            console.warn(&quot;\n*** entered &quot; + targetClassMethod);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; print backtrace</span><br><span class="line">            &#x2F;&#x2F; Java.perform(function() &#123;</span><br><span class="line">            &#x2F;&#x2F;var bt &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new());</span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;\nBacktrace:\n&quot; + bt);</span><br><span class="line">            &#x2F;&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; print args</span><br><span class="line">            if (arguments.length) console.log();</span><br><span class="line">            for (var j &#x3D; 0; j &lt; arguments.length; j++) &#123;</span><br><span class="line">                console.log(&quot;arg[&quot; + j + &quot;]: &quot; + arguments[j]);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; print retval</span><br><span class="line">            var retval &#x3D; this[targetMethod].apply(this, arguments); &#x2F;&#x2F; rare crash (Frida bug?)</span><br><span class="line">            console.log(&quot;\nretval: &quot; + retval);</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">            console.warn(&quot;\n*** exiting &quot; + targetClassMethod);</span><br><span class="line">            return retval;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *&#x2F;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function traceClass(targetClass) &#123;</span><br><span class="line">    &#x2F;&#x2F;Java.use是新建一个对象哈，大家还记得么？</span><br><span class="line">    var hook &#x3D; Java.use(targetClass);</span><br><span class="line">    &#x2F;&#x2F;利用反射的方式，拿到当前类的所有方法</span><br><span class="line">    var methods &#x3D; hook.class.getDeclaredMethods();</span><br><span class="line">    &#x2F;&#x2F; var methods &#x3D; hook.class.getMethods();</span><br><span class="line">    &#x2F;&#x2F;建完对象之后记得将对象释放掉哈</span><br><span class="line">    hook.$dispose;</span><br><span class="line">    &#x2F;&#x2F;将方法名保存到数组中</span><br><span class="line">    var parsedMethods &#x3D; [];</span><br><span class="line">    methods.forEach(function (method) &#123;</span><br><span class="line">        parsedMethods.push(method.toString().replace(targetClass + &quot;.&quot;, &quot;TOKEN&quot;).match(&#x2F;\sTOKEN(.*)\(&#x2F;)[1]);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F;去掉一些重复的值</span><br><span class="line">    var targets &#x3D; uniqBy(parsedMethods, JSON.stringify);</span><br><span class="line">    &#x2F;&#x2F;对数组中所有的方法进行hook，traceMethod也就是第一小节的内容</span><br><span class="line">    targets.forEach(function (targetMethod) &#123;</span><br><span class="line">        traceMethod(targetClass + &quot;.&quot; + targetMethod);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>traceClass(“de.robv.android.xposed.XposedBridge”);</p><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210501141314991.png" alt="image-20210501141314991"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (loader.findClass(&quot;com.roysue.xposed1.HookTest$1&quot;)) &#123;   </span><br><span class="line">traceClass(&quot;com.roysue.xposed1.HookTest$1&quot;);</span><br></pre></td></tr></table></figure><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210501141552600.png" alt="image-20210501141552600"></p><p>说明<code>com.roysue.xposed1.HookTest$1</code>就是<code>XposedHelpers.findAndHookMethod(clazz, &quot;toastMessage&quot;, String.class,new XC_MethodHook() {</code>中的XC_MethodHook内部类</p><p><strong>hook afterHookedMethod</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function hook() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.log(&quot;start&quot;)</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch: function (loader) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    &#x2F;&#x2F; if (loader.findClass(&quot;com.roysue.xposed1.HookTest&quot;)) &#123;</span><br><span class="line">                    if(loader.findClass(&quot;com.roysue.xposed1.HookTest$1&quot;))&#123;                        </span><br><span class="line">                        console.log(&quot;Successfully found loader&quot;)</span><br><span class="line">                        console.log(loader);</span><br><span class="line">                        Java.classFactory.loader &#x3D; loader;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (error) &#123;</span><br><span class="line">                    console.log(&quot;find error:&quot; + error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line">                console.log(&quot;end1&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        Java.use(&quot;com.roysue.xposed1.HookTest$1&quot;).afterHookedMethod.implementation &#x3D; function (param) &#123;</span><br><span class="line">            console.log(&quot;entering afterHookedMethod param is &quot;,param);</span><br><span class="line">            return this.afterHookedMethod(param);</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&quot;end2&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210501142210586.png" alt="image-20210501142210586"></p><p>通过<code>traceClass(&quot;de.robv.android.xposed.XC_MethodHook$MethodHookParam&quot;)</code>拿到所有的类方法，在classloader中而不是在app中</p><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210501142632392.png" alt="image-20210501142632392"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java.use(&quot;de.robv.android.xposed.XC_MethodHook$MethodHookParam&quot;).setResult.implementation &#x3D; function (param) &#123;</span><br><span class="line">console.log(&quot;entering XC_MethodHook$MethodHookParam setResult param is &quot;,param);</span><br><span class="line">&#x2F;&#x2F; 打印调用栈</span><br><span class="line">console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new())); </span><br><span class="line">return this.setResult(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210501143142237.png" alt="image-20210501143142237"></p><p>XC_MethodHook是抽象类不能直接hook，需要hook实现。</p><p>traceClass(“com.roysue.xposed1.HookTest$1”)</p><p><img src="/2021/04/23/Xposed%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/image-20210501143735138.png" alt="image-20210501143735138"></p><h1 id="GravityBox"><a href="#GravityBox" class="headerlink" title="GravityBox"></a>GravityBox</h1><p>git clone <a href="https://github.com/GravityBox/GravityBox.git" target="_blank" rel="noopener">https://github.com/GravityBox/GravityBox.git</a></p><p>修改app/build.gradle  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">compileSdkVersion 23</span><br><span class="line">targetSdkVersion 23</span><br><span class="line">        debug &#123;  避免打包需要秘钥</span><br><span class="line">&#x2F;&#x2F;            versionNameSuffix &quot;-Dev&quot; </span><br><span class="line">&#x2F;&#x2F;            if (signingConfigs.releaseConfig !&#x3D; null) &#123;</span><br><span class="line">&#x2F;&#x2F;                signingConfig signingConfigs.releaseConfig</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">compile &#39;com.android.support:appcompat-v7:26.0.2&#39;         指定版本</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        google()  添加google镜像源</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#39;com.android.tools.build:gradle:2.3.3&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        google()</span><br><span class="line">        maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>src/assets/xposed_init 文件中提供了入口类<code>com.wrbug.gravitybox.nougat.GravityBox</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class GravityBox implements IXposedHookZygoteInit, IXposedHookInitPackageResources, IXposedHookLoadPackage</span><br></pre></td></tr></table></figure><p>入口类中实现了三个接口<a href="https://api.xposed.info/reference/de/robv/android/xposed/IXposedHookInitPackageResources.html" target="_blank" rel="noopener">IXposedHookInitPackageResources</a>，<a href="https://api.xposed.info/reference/de/robv/android/xposed/IXposedHookLoadPackage.html" target="_blank" rel="noopener">IXposedHookLoadPackage</a>，<a href="https://api.xposed.info/reference/de/robv/android/xposed/IXposedHookZygoteInit.html" target="_blank" rel="noopener">IXposedHookZygoteInit</a></p><blockquote><p><strong>IXposedHookZygoteInit</strong>  所有的进程</p><p>Hook the initialization of ** <strong>(es), from which **all the apps</strong> are forked.</p><p>Implement this interface in your module’s main class in order to be notified when <strong>Android is starting up</strong>. In <code>IXposedHookZygoteInit</code>, you can modify objects and place hooks that should be applied <strong>for every app</strong>. <strong>Only the Android framework/system classes are available</strong> at that point in time. Use <code>null</code> as class loader for <code>XposedHelpers.findAndHookMethod(String, ClassLoader, String, Object...)</code> and its variants.</p><p>If you want to hook one/multiple specific apps, use <code>IXposedHookLoadPackage</code> instead.</p><p>说明initZygote只有在系统启动的时候执行一遍，只有系统框架库可以使用。</p></blockquote><p>XposedBridge.log(“GB:Hardware: “ + Build.HARDWARE);  代码中调用了Build.HARDWARE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U|grep gravity</span><br><span class="line">objection -g com.ceco.nougat.gravitybox explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">plugin wallbreaker classdump --fullname android.os.Build</span><br></pre></td></tr></table></figure><blockquote><p>**IXposedHookInitPackageResources ** 所有的资源</p><p>Get notified when the resources for an app are initialized. In <code>handleInitPackageResources(XC_InitPackageResources.InitPackageResourcesParam)</code>, resource replacements can be created.</p><p>This interface should be implemented by the module’s main class. Xposed will take care of registering it as a callback automatically.</p><p>说明handleInitPackageResources实现的回调在创建之后就会得到通知</p></blockquote><blockquote><p>**IXposedHookLoadPackage ** 所有的包</p><p>Get notified when an app (“Android package”) is loaded. This is especially useful to hook some app-specific methods.</p><p>This interface should be implemented by the module’s main class. Xposed will take care of registering it as a callback automatically.</p><p>xposed会将handleLoadPackage注册成为回调，app在加载时都会经过该回调，主要用来实现具体的hook逻辑。</p></blockquote><p>在handleLoadPackage中调用了ModStatusbarColor.init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (lpparam.packageName.equals(ModStatusbarColor.PACKAGE_NAME)) &#123;</span><br><span class="line">    ModStatusbarColor.init(prefs, lpparam.classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public static final String PACKAGE_NAME &#x3D; &quot;com.android.systemui&quot;; </span><br><span class="line">private static final String CLASS_PHONE_STATUSBAR &#x3D; &quot;com.android.systemui.statusbar.phone.PhoneStatusBar&quot;;</span><br><span class="line">   public static void init(final XSharedPreferences prefs, final ClassLoader classLoader) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           &#x2F;&#x2F; findClass底层通过反射获取CLASS_PHONE_STATUSBAR类</span><br><span class="line">           final Class&lt;?&gt; phoneStatusbarClass &#x3D; XposedHelpers.findClass(CLASS_PHONE_STATUSBAR, classLoader);</span><br><span class="line">           final Class&lt;?&gt; statusbarIconViewClass &#x3D; XposedHelpers.findClass(CLASS_STATUSBAR_ICON_VIEW, classLoader);</span><br><span class="line">           final Class&lt;?&gt; sbTransitionsClass &#x3D; XposedHelpers.findClass(CLASS_SB_TRANSITIONS, classLoader);</span><br><span class="line"></span><br><span class="line">           XposedHelpers.findAndHookMethod(phoneStatusbarClass, </span><br><span class="line">           &#x2F;&#x2F; hook相同的类时XCallback.PRIORITY_LOWEST最低,优先级最高</span><br><span class="line">           &#x2F;&#x2F; https:&#x2F;&#x2F;api.xposed.info&#x2F;reference&#x2F;de&#x2F;robv&#x2F;android&#x2F;xposed&#x2F;XC_MethodHook.html</span><br><span class="line">                   &quot;makeStatusBarView&quot;, new XC_MethodHook(XCallback.PRIORITY_LOWEST) &#123;</span><br><span class="line">               @Override</span><br><span class="line">               protected void afterHookedMethod(final MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                   mPhoneStatusBar &#x3D; param.thisObject;</span><br><span class="line">                   &#x2F;&#x2F; getObjectField获取对象的属性值</span><br><span class="line">                   &#x2F;&#x2F; https:&#x2F;&#x2F;api.xposed.info&#x2F;reference&#x2F;de&#x2F;robv&#x2F;android&#x2F;xposed&#x2F;XposedHelpers.html</span><br><span class="line">                   Context context &#x3D; (Context) XposedHelpers.getObjectField(param.thisObject, &quot;mContext&quot;);</span><br><span class="line"></span><br><span class="line">                   if (SysUiManagers.IconManager !&#x3D; null) &#123;</span><br><span class="line">                       SysUiManagers.IconManager.registerListener(mIconManagerListener);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   Intent i &#x3D; new Intent(ACTION_PHONE_STATUSBAR_VIEW_MADE);</span><br><span class="line">                   context.sendBroadcast(i);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125; catch (Throwable t) &#123;</span><br><span class="line">           GravityBox.log(TAG, t);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>由于<code>com.android.systemui</code>和当前hook的包在不同进程中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.android.systemui explore</span><br><span class="line">android hooking search classes com.android.systemui ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">plugin wallbreaker classdump --fullname com.android.systemui.statusbar.phone.PhoneStatusBar</span><br></pre></td></tr></table></figure><p><strong>静态域</strong></p><p><a href="https://api.xposed.info/reference/de/robv/android/xposed/XposedHelpers.html" target="_blank" rel="noopener">https://api.xposed.info/reference/de/robv/android/xposed/XposedHelpers.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BRIGHTNESS_ON &#x3D; XposedHelpers.getStaticIntField(powerManagerClass, &quot;BRIGHTNESS_ON&quot;);</span><br><span class="line">plugin wallbreaker classdump --fullname android.os.PowerManager  查看静态域</span><br><span class="line">(int[])XposedHelpers.getStaticObjectField(classAudioService, &quot;MAX_STREAM_VOLUME&quot;);</span><br><span class="line">XposedHelpers.getStaticLongField(param.thisObject.getClass(),&quot;SWIPE_TIMEOUT_MS&quot;)</span><br><span class="line">(boolean) XposedHelpers.getStaticBooleanField(mDisplayPowerController.getClass(), &quot;MTK_ULTRA_DIMMING_SUPPORT&quot;);</span><br></pre></td></tr></table></figure><p><strong>动态域</strong></p><p><a href="https://api.xposed.info/reference/de/robv/android/xposed/XposedHelpers.html" target="_blank" rel="noopener">https://api.xposed.info/reference/de/robv/android/xposed/XposedHelpers.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XposedHelpers.getObjectField(param.thisObject, &quot;mNotification&quot;) &#x3D;&#x3D; null</span><br><span class="line">objection -g com.ceco.nougat.gravitybox explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">android heap search instances com.android.systemui.statusbar.phone.PhoneStatusBar  内存搜索PhoneStatusBar类实例</span><br><span class="line">plugin wallbreaker objectsearch com.android.systemui.statusbar.phone.PhoneStatusBar  内存搜索对象</span><br><span class="line">plugin wallbreaker objectiondump --fullname 0x100e6e  查看类内容中的动态域mNotification</span><br></pre></td></tr></table></figure><p><strong>主动调用</strong></p><p><a href="https://api.xposed.info/reference/de/robv/android/xposed/XposedHelpers.html" target="_blank" rel="noopener">https://api.xposed.info/reference/de/robv/android/xposed/XposedHelpers.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Float) XposedHelpers.callMethod(param.thisObject, &quot;getNonBatteryClockAlphaFor&quot;, (Integer) param.args[0]);</span><br><span class="line">XposedHelpers.callStaticMethod(mClsPhoneFactory, &quot;getPhone&quot;, mSimSlot);</span><br><span class="line">plugin wallbreaker objectsearch com.android.systemui.statusbar.phone.PhoneStatusBarTransitions</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x10141e   查找getNonBatteryClockAlphaFor方法</span><br><span class="line">int phoneId &#x3D; XposedHelpers.getIntField(param.thisObject, &quot;mPhoneId&quot;);</span><br><span class="line">Context context &#x3D; (Context) XposedHelpers.getObjectField(param.thisObject, &quot;mContext&quot;);</span><br></pre></td></tr></table></figure><p><strong>构造函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">XposedHelpers.findAndHookConstructor(&quot;android.media.AudioManager&quot;, classLoader, Context.class,</span><br><span class="line">        new XC_MethodHook() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        Object objService &#x3D; XposedHelpers.callMethod(param.thisObject, &quot;getService&quot;);</span><br><span class="line">        Context mApplicationContext &#x3D; (Context) XposedHelpers.getObjectField(param.thisObject,</span><br><span class="line">                &quot;mApplicationContext&quot;);</span><br><span class="line">        if (objService !&#x3D; null &amp;&amp; mApplicationContext !&#x3D; null) &#123;</span><br><span class="line">            XposedHelpers.callMethod(param.thisObject, &quot;disableSafeMediaVolume&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">android hooking search classes android.media.AudioManger</span><br><span class="line">plugin wallbreaker objectsearch android.media.AudioManager</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x186e  查看getService和disableSafeMediaVolume和mApplicationContext</span><br></pre></td></tr></table></figure><h2 id="Not-In-Frida"><a href="#Not-In-Frida" class="headerlink" title="Not In Frida"></a>Not In Frida</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">setAdditionalInstanceField(param.thisObject, &quot;mVolumeUpLongPress&quot;, mVolumeUpLongPress);  给对象加静态域</span><br><span class="line">Object ls &#x3D; XposedHelpers.getSurroundingThis(mLight);  内部类对象返回给外部类</span><br><span class="line">Class[] params &#x3D; method.getParameterTypes();  获取参数列表</span><br><span class="line">UserHandle uh &#x3D; (UserHandle) uhConst.newInstance(-2);  创建新实例对象</span><br><span class="line">Constructor&lt;?&gt; uhConst &#x3D; XposedHelpers.findConstructorExact(UserHandle.class, int.class);  查找一个构造函数让其可用</span><br><span class="line">XposedBridge.hookAllConstructors(XposedHelpers.findClass(  hook所有构造函数</span><br><span class="line">        CLASS_TRUST_MANAGER_SERVICE, classLoader), new XC_MethodHook() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void afterHookedMethod(final MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        mTrustManager &#x3D; param.thisObject;</span><br><span class="line">        Context context &#x3D; (Context) XposedHelpers.getObjectField(param.thisObject, &quot;mContext&quot;);</span><br><span class="line">        mWifiManager &#x3D; new WifiManagerWrapper(context, null);</span><br><span class="line">        mConnectivityManager &#x3D; (ConnectivityManager) context.getSystemService(</span><br><span class="line">                Context.CONNECTIVITY_SERVICE);</span><br><span class="line"></span><br><span class="line">        IntentFilter intentFilter &#x3D; new IntentFilter();</span><br><span class="line">        intentFilter.addAction(WifiPriorityActivity.ACTION_WIFI_TRUSTED_CHANGED);</span><br><span class="line">        intentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class="line">        context.registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class="line"></span><br><span class="line">        if (DEBUG) log(&quot;Trust manager constructed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">XposedBridge.hookMethod(mtdHandlePlay, new XC_MethodHook() &#123;   hook所有方法并创建回调</span><br><span class="line">    @Override</span><br><span class="line">    protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        qhPrefs.reload();</span><br><span class="line">        QuietHours qh &#x3D; new QuietHours(qhPrefs);</span><br><span class="line">        if (qh.isSystemSoundMuted(QuietHours.SystemSound.RINGER)) &#123;</span><br><span class="line">            param.setResult(null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        if (!mRingerConfig.enabled) return;</span><br><span class="line"></span><br><span class="line">        mRingtone &#x3D; (Ringtone) XposedHelpers.getObjectField(mAsyncRinger, &quot;mRingtone&quot;);</span><br><span class="line">        if (mRingtone &#x3D;&#x3D; null) &#123;</span><br><span class="line">            if (DEBUG) log(&quot;handlePlay called but ringtone is null&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setVolume(mRingerConfig.minVolume);</span><br><span class="line">        mIncrementAmount &#x3D; (1f - mRingerConfig.minVolume) &#x2F; (float) mRingerConfig.rampUpDuration;</span><br><span class="line">        mCurrentIncrementVolume &#x3D; mRingerConfig.minVolume;</span><br><span class="line">        mHandler &#x3D; (Handler) XposedHelpers.getObjectField(mAsyncRinger, &quot;mHandler&quot;);</span><br><span class="line">        mHandler.postDelayed(mRunnable, 1000);</span><br><span class="line">        if (DEBUG) log(&quot;Starting increasing ring&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>set(get)AdditionalInstanceField</li><li>getMD5Sum</li><li>getMethodDepth</li><li>getParameterTypes</li><li>getSurroundingThis</li><li>hookMethod</li><li>系统级别的，过滤所有的进程</li><li>只要Xposed生效了，可以把Xposed理解为系统框架，作为系统的本身来考虑没有关系。</li></ul><h2 id="Not-In-Xposed"><a href="#Not-In-Xposed" class="headerlink" title="Not In Xposed"></a>Not In Xposed</h2><ul><li>Java.choose</li><li>rpc</li><li>热重载/加载</li><li>单进程级别的，只能在hook的进程内生效</li></ul><h2 id="hook-1"><a href="#hook-1" class="headerlink" title="hook"></a>hook</h2><p>本项目中 xposed 系统级别的，过滤所有的进程，入口类中实现了三个接口，hook了所有的资源，进程，包。只会hook进程中的包等于ModStatusbarColor.PACKAGE_NAME即<code>com.android.systemui</code>时，才启动hook。所有逻辑不在GravityBox中，也不在xposed.jar中，而是在com.android.systemui</p><pre><code>if (lpparam.packageName.equals(ModStatusbarColor.PACKAGE_NAME)) {    ModStatusbarColor.init(prefs, lpparam.classLoader);}</code></pre><p>frida-ps -U |grep com.android.systemui</p><p>在app逆向中遇到interface搜索其实现还是一顿乱搜，可以使用反射getInterfaces得到实现的接口数组，然后打印出来即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">function hook() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.log(&quot;start&quot;)</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch: function (loader) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (loader.findClass(&quot;com.ceco.nougat.gravitybox.ModStatusbarColor$1&quot;)) &#123;</span><br><span class="line">                        &#x2F;&#x2F; if(loader.findClass(&quot;de.robv.android.xposed.XC_MethodHook&quot;))&#123;</span><br><span class="line">                        &#x2F;&#x2F; if(loader.findClass(&quot;com.roysue.xposed1.HookTest&quot;))&#123;</span><br><span class="line">                        &#x2F;&#x2F; if(loader.findClass(&quot;de.robv.android.xposed.XposedBridge&quot;))&#123;</span><br><span class="line">                        &#x2F;&#x2F;if(loader.findClass(&quot;com.android.internal.statusbar.StatusBarIcon&quot;))&#123;</span><br><span class="line"></span><br><span class="line">                        console.log(&quot;Successfully found loader&quot;)</span><br><span class="line">                        console.log(loader);</span><br><span class="line">                        Java.classFactory.loader &#x3D; loader;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (error) &#123;</span><br><span class="line">                    console.log(&quot;find error:&quot; + error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line">                console.log(&quot;end1&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F; Java.use(&quot;de.robv.android.xposed.XposedBridge&quot;).log.overload(&#39;java.lang.String&#39;).implementation &#x3D; function (str) &#123;</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;entering Xposedbridge.log &quot;,str.toString())</span><br><span class="line">        &#x2F;&#x2F;     return true</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line">        &#x2F;&#x2F;traceClass(&quot;com.ceco.nougat.gravitybox.ModStatusbarColor&quot;)</span><br><span class="line">        &#x2F;&#x2F; Java.use(&quot;com.roysue.xposed1.HookTest$1&quot;).afterHookedMethod.implementation &#x3D; function (param)&#123;</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;entering afterHookedMethod param is &#x3D;&gt; &quot;,param);</span><br><span class="line">        &#x2F;&#x2F;     return this.afterHookedMethod(param);</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line">        &#x2F;&#x2F; traceClass(&quot;de.robv.android.xposed.XC_MethodHook&quot;)</span><br><span class="line">        &#x2F;&#x2F; Java.use(&quot;de.robv.android.xposed.XC_MethodHook$MethodHookParam&quot;).setResult.implementation &#x3D; function(str)&#123;</span><br><span class="line">        &#x2F;&#x2F;     console.log(&quot;entersing de.robv.android.xposed.XC_MethodHook$MethodHookParam setResult &#x3D;&gt; &quot;,str)</span><br><span class="line">        &#x2F;&#x2F;     console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">        &#x2F;&#x2F;     return this.setResult(str);</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch: function (className) &#123;</span><br><span class="line">                if (className.toString().indexOf(&quot;gravitybox&quot;) &gt; 0 &amp;&amp;</span><br><span class="line">                    className.toString().indexOf(&quot;$&quot;) &gt; 0</span><br><span class="line">                ) &#123;</span><br><span class="line">                    console.log(&quot;found &#x3D;&gt; &quot;, className)</span><br><span class="line">                    &#x2F;&#x2F; var interFaces &#x3D; Java.use(className).class.getInterfaces();</span><br><span class="line">                    &#x2F;&#x2F; if(interFaces.length&gt;0)&#123;</span><br><span class="line">                    &#x2F;&#x2F;     console.log(&quot;interface is &#x3D;&gt; &quot;);</span><br><span class="line">                    &#x2F;&#x2F;     for(var i in interFaces)&#123;</span><br><span class="line">                    &#x2F;&#x2F;         console.log(&quot;\t&quot;,interFaces[i].toString())</span><br><span class="line">                    &#x2F;&#x2F;     &#125;</span><br><span class="line">                    &#x2F;&#x2F; &#125;</span><br><span class="line">                    if (Java.use(className).class.getSuperclass()) &#123;</span><br><span class="line">                        var superClass &#x3D; Java.use(className).class.getSuperclass().getName();</span><br><span class="line">                        &#x2F;&#x2F; console.log(&quot;superClass is &#x3D;&gt; &quot;,superClass);</span><br><span class="line">                        if (superClass.indexOf(&quot;XC_MethodHook&quot;) &gt; 0) &#123;</span><br><span class="line">                            console.log(&quot;found class is &#x3D;&gt; &quot;, className.toString())</span><br><span class="line">                            traceClass(className);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, onComplete: function () &#123;</span><br><span class="line">                console.log(&quot;search completed!&quot;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        console.log(&quot;end2&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>违法应用移动TV取证分析</title>
      <link href="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/"/>
      <url>/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><h2 id="应用层抓包"><a href="#应用层抓包" class="headerlink" title="应用层抓包"></a><strong>应用层抓包</strong></h2><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/t01c2d220dfd81d4d18.png" alt="img"></p><h2 id="传输层抓包"><a href="#传输层抓包" class="headerlink" title="传输层抓包"></a><strong>传输层抓包</strong></h2><p>charles开启Enable socks proxy</p><p>wget  <a href="https://www.charlesproxy.com/assets/release/4.6.1/charles-proxy-4.6.1_amd64.tar.gz?k=17bcbd3dc2" target="_blank" rel="noopener">https://www.charlesproxy.com/assets/release/4.6.1/charles-proxy-4.6.1_amd64.tar.gz?k=17bcbd3dc2</a></p><p>tar zxf charles-proxy-4.6.1_amd64.tar.gz &amp;&amp; ./charles 通过<a href="https://www.charles.ren/" target="_blank" rel="noopener">注册码</a>注册或生成加权<a href="https://www.zzzmode.com/mytools/charles/" target="_blank" rel="noopener">jar包</a>破解</p><p>vim ~/.zshrc  并source ~/.zshrc  使得charles在任意路径可启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&quot;&#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;ndk-bundle:&#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;platform-tools:$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH:&#x2F;root&#x2F;Desktop&#x2F;charles&#x2F;bin:&#x2F;root&#x2F;Desktop&#x2F;jadx-1.2.0&#x2F;bin&quot;</span><br></pre></td></tr></table></figure><p>htop   查看破解情况</p><p>电脑：192.168.0.106</p><p>手机：192.168.0.102</p><p>虚拟机：192.168.0.107</p><p>虚拟网络编辑器选择获取ip的网卡，保证这三台机器在同一局域网内且互相ping通。</p><h3 id="配置charles"><a href="#配置charles" class="headerlink" title="配置charles"></a>配置charles</h3><p>socks proxy工作于传输层，更好的观察应用层协议和socks抓包。</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422211129237.png" alt="image-20210422211129237"></p><p>开启ssl</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422211216544.png" alt="image-20210422211216544"></p><h3 id="postern"><a href="#postern" class="headerlink" title="postern"></a>postern</h3><p>adb install 0714com.tunnelworkshop.postern_2018-10-07.apk</p><p>QtScrcpy 设置投屏</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422211526433.png" alt="image-20210422211526433"></p><p>配置socks5抓包代理</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422211731524.png" alt="image-20210422211731524"></p><p>配置socks5抓包配置规则</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422211826284.png" alt="image-20210422211826284"></p><p>打开socks vpn连接虚拟机抓包，虚拟机收到连接请求后点击Allow</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422212010520.png" alt="image-20210422212010520"></p><p>在手机浏览器输入地址 chls.pro/ssl 或者 charlesproxy.com/getssl ，出现证书安装页面，点击安装，如果依旧app抓不到，需要把个人证书放到系统根目录</p><blockquote><p>Android8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;</span><br><span class="line">mount -o remount,rw &#x2F;</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">mount -o remount,ro &#x2F;</span><br></pre></td></tr></table></figure><p>Android 7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;</span><br><span class="line">mount -o rw,remount &#x2F;system</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">mount -o ro,remount &#x2F;system</span><br></pre></td></tr></table></figure></blockquote><h2 id="movetv分析"><a href="#movetv分析" class="headerlink" title="movetv分析"></a>movetv分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;fs1428arm64 </span><br><span class="line">pyenv local 3.8.5</span><br><span class="line">frida -UF -l hookSocket.js -o moveTV.txt  attach方式hook登录抓包，基于socks层抓包无法对抗，除非做了VPN检测</span><br><span class="line">frida -U -f com.cz.babySister -l hookSocket.js -o moveTV.txt   spawn方式hook，输入%resume重新启动，或者直接在命令后加--no-pause</span><br></pre></td></tr></table></figure><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422213451714.png" alt="image-20210422213451714"></p><p>jadx-gui movetv.apk 已经加壳一个Activity都找不到</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422214547118.png" alt="image-20210422214547118"></p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><h2 id="FRIDA-DEXDump"><a href="#FRIDA-DEXDump" class="headerlink" title="FRIDA-DEXDump"></a>FRIDA-DEXDump</h2><p>git clone <a href="https://github.com/hluwa/FRIDA-DEXDump.git" target="_blank" rel="noopener">https://github.com/hluwa/FRIDA-DEXDump.git</a>  启动app放在前台</p><p>cd ~/Desktop/FRIDA-DEXDump/frida_dexdump &amp;&amp; python main.py 开始脱壳</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422220211650.png" alt="image-20210422220211650"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities  查看所有Activity</span><br><span class="line">grep -ril &quot;MainActivity&quot; *  从脱下的dex中查找MainActivity</span><br><span class="line">grep -ril &quot;LoginActivity&quot; *</span><br><span class="line">jadx-gui com.cz.babySister&#x2F;0x748d44201c.dex</span><br></pre></td></tr></table></figure><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422220645424.png" alt="image-20210422220645424"></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>抓登录包获取memi1字段其实来源于android-id</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423013934848.png" alt="image-20210423013934848"></p><p>android hooking watch class com.cz.babySister.activity.LoginActivity –dump-args  –dump-backtrace –dump-return  hook类中所有方法</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423014732415.png" alt="image-20210423014732415"></p><p>android hooking watch class_method com.cz.babySister.activity.LoginActivity.b –dump-args –dump-backtrace –dump-return  hook登录b方法</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423014946081.png" alt="image-20210423014946081"></p><p>进入b方法中调用的RunnableC0042q类中</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423015105146.png" alt="image-20210423015105146"></p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423015154139.png" alt="image-20210423015154139"></p><p>android hooking watch class_method com.cz.babySister.c.a.a –dump-args –dump-backtrace –dump-return    hook方法a</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423015411937.png" alt="image-20210423015411937"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.cz.babySister explore</span><br><span class="line">android hooking search classes Settings </span><br><span class="line">android hooking list class_methods android.provider.Settings </span><br><span class="line">android hooking list class_methods android.provider.Settings$Secure</span><br><span class="line">android hooking watch class_method android.provider.Settings$Secure.getString --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423013626273.png" alt="image-20210423013626273"></p><p>通过hook获取返回的结果50463fa80244d95f和chales中抓包的memi1完全一致</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423014359588.png" alt="image-20210423014359588"></p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>android hooking watch class_method com.cz.babySister.c.a.a –dump-args –dump-backtrace –dump-return</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423015832197.png" alt="image-20210423015832197"></p><p>对比抓包结果</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423015906716.png" alt="image-20210423015906716"></p><h3 id="取证实现"><a href="#取证实现" class="headerlink" title="取证实现"></a>取证实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">class tv:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.root &#x3D; &#39;http:&#x2F;&#x2F;39.108.64.125&#x2F;WebRoot&#x2F;superMaster&#x2F;Server&#39;</span><br><span class="line">        self.memi1 &#x3D; &quot;50463fa80244d95f&quot;</span><br><span class="line">        self.rightkey &#x3D; &quot;376035775&quot;</span><br><span class="line">        self.key &#x3D; &quot;308202d5308201bda00302010202041669d9bf300d06092a864886f70d01010b0500301b310b3009060355040613023836310c300a06035504031303776569301e170d3136303731383038313935395a170d3431303731323038313935395a301b310b3009060355040613023836310c300a0603550403130377656930820122300d06092a864886f70d01010105000382010f003082010a028201010095f85892400aae03ca4ed9dcd838d162290ae8dd51939aac6ecfde8282f207c4cd9e507929a279e0a36f1e4847330cb53908c92915b2c6a93d7064be452d073a472093f7ca14f4ab68f827582fe0988e9e4bc8a6ea3b56001cbbbb760f9eec571b0bbc97392e65aaf08c686f0e2ba353896d48a37c36716239977bd0e4dd878025cab497d8164537aec9f6599eefb98577dce972a1b794e211226520e23497beec3fd8548bb5b4d263120d40115cca28116bac32378df5033f536a0d7367fef78c587fefed28c5c9b35ba684ed6e46d9369c40950cf7ad7236d10b7a51dfd2a8f218db72323bbd19f46947410b1191f263012ad4ba8f749223e37591254ee7f50203010001a321301f301d0603551d0e041604143d43284bd5e4b0d322c9962a5b70aad4dcbc3634300d06092a864886f70d01010b050003820101000f04c51ff763311aa011777ba2842b441b15c316373d1e1ed4116cf86e29d55c6ed3fa4c475251b1fb4fac57195dbca0166ebe565d9834552a3758b97c4528bab1f7ab82bb3a9faa932f5bc10943f3daf52e0fe5889ffb58a6be67ea1c9a2fb37dc8aa6f3af476039a467336991a4e52dccd520195cd473eb5b984e702ed9ff638a14c3abb575a7a80ae4062084d1138a06a20e173be9df32df631311b07352898706198ddebaaa011f0da8e5f288f7cfb77505bc943f6476d6cc1feef56b68137aad91f23c4bb772169539d05653a6f0d75f7192164e822b934322f3a975df677903b1667f5dc1e9ddb185da3281d31bfb8f67a84bd23bbcb398f8bb637dd72&quot;</span><br><span class="line"></span><br><span class="line">    def post(self, data&#x3D;None):</span><br><span class="line">        if data is None:</span><br><span class="line">            data &#x3D; &#123;&#125;</span><br><span class="line">        return requests.post(url&#x3D;self.root, data&#x3D;data)</span><br><span class="line"></span><br><span class="line">    def query(self, name, password):</span><br><span class="line">        ret &#x3D; self.post(&#123;&#39;name&#39;: name, &#39;pass&#39;: password&#125;)</span><br><span class="line">        print(&quot;query result is : &quot;)</span><br><span class="line">        print(ret.content.decode(&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line">    def register(self, name, password):</span><br><span class="line">        ret &#x3D; self.post(&#123;&#39;name&#39;: name, &#39;pass&#39;: password, &#39;memi1&#39;: self.memi1,</span><br><span class="line">                        &#39;key&#39;: self.key, &#39;rightkey&#39;: self.rightkey, &#39;register&#39;: &#39;register&#39;&#125;)</span><br><span class="line">        print(&quot;Register response data: &quot;)</span><br><span class="line">        print(ret.content.decode(&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line">    def login(self, name, password):</span><br><span class="line">        ret &#x3D; self.post(&#123;&#39;name&#39;: name, &#39;pass&#39;: password, &#39;memi1&#39;: self.memi1,</span><br><span class="line">                        &#39;key&#39;: self.key, &#39;rightkey&#39;: self.rightkey, &#39;login&#39;: &#39;login&#39;&#125;)</span><br><span class="line">        print(&quot;Login response data: &quot;)</span><br><span class="line">        print(ret.content.decode(&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line">    def updateSocre(self, name, password, jifen):</span><br><span class="line">        t &#x3D; int(round(time.time() * 1000))</span><br><span class="line">        sign &#x3D; base64.b64encode(str(5 * t).encode(&#39;utf-8&#39;)).decode(&#39;utf-8&#39;)</span><br><span class="line">        ret &#x3D; self.post(&#123;&#39;name&#39;: name, &#39;pass&#39;: password,</span><br><span class="line">                        &#39;jifen&#39;: jifen, &#39;time&#39;: t, &#39;sign&#39;: sign&#125;)</span><br><span class="line">        print(&quot;UpdataScore response data: &quot;)</span><br><span class="line">        print(ret.content.decode(&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    tv &#x3D; tv()</span><br><span class="line"></span><br><span class="line">    # print(tv.query(&quot;eeeeffff&quot;, &quot;gggghhhh&quot;))</span><br><span class="line"></span><br><span class="line">    # 注册账号</span><br><span class="line"></span><br><span class="line">    print(tv.register(&quot;onejane3&quot;, &quot;123456&quot;))</span><br><span class="line"></span><br><span class="line">    # time.sleep(3)</span><br><span class="line"></span><br><span class="line">    # 登录账号</span><br><span class="line">    print(tv.login(&quot;onejane3&quot;, &quot;123456&quot;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 更新积分</span><br><span class="line">    # print(tv.updateSocre(&quot;mee4&quot;,&quot;mee4&quot;,&quot;1000&quot;))</span><br></pre></td></tr></table></figure><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423020347585.png" alt="image-20210423020347585"></p><h2 id="Youpk"><a href="#Youpk" class="headerlink" title="Youpk"></a>Youpk</h2><p><a href="https://bbs.pediy.com/thread-259854.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-259854.htm</a></p><p>linux平台下载最新的platform-tools刷机的时候，fastboot会报各种unknow command或接近的错误，把fastboot文件替换成以下随着aosp一起编译出来的即可：</p><blockquote><p>fastboot_aosp7.1.zip</p><p>fastboot6.0.zip</p><p>fastboot8.1.0r1.zip</p></blockquote><p>下载Youpk_v1.1</p><ol><li>重启至bootloader: <code>adb reboot bootloader</code></li><li>解压 Youpk_sailfish.zip 并双击 <code>flash-all.bat</code>,（尽量在kali上刷机，<code>./flash-all.sh</code>,因为windows会给我们的编程生涯带来80%的苦难）</li></ol><blockquote><p>adb install movetv.apk</p><p>adb shell “echo com.cz.babySister &gt;&gt; /data/local/tmp/unpacker.config”</p></blockquote><ol start="3"><li>启动apk等待脱壳，每隔10秒将自动重新脱壳(已完全dump的dex将被忽略), 当日志打印unpack end时脱壳完成</li></ol><blockquote><p>adb pull /data/data/com.cz.babySister/unpacker/</p><p>mv unpacker youpk/    </p></blockquote><ol start="4"><li>调用修复工具 dexfixer.jar, 两个参数, 第一个为dump文件目录(必须为有效路径), 第二个为重组后的DEX目录(不存在将会创建)<blockquote><pre><code>java -jar dexfixer.jar youpk/ youpk_out/jadx-gui _data_app_com.cz.babySister-1_base.apk_54276.dex  查看脱壳后的dex </code></pre></blockquote></li></ol><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422224021639.png" alt="image-20210422224021639"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>整体加固</li><li>抽取:<ul><li>nop占坑型(类似某加密)</li><li>naitve化, 在<clinit>中解密(类似早期阿里)</clinit></li><li>goto解密型(类似新版某加密?najia): <a href="https://bbs.pediy.com/thread-259448.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-259448.htm</a></li></ul></li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>dump中途退出或卡死，重新启动进程，再次等待脱壳即可</li><li>当前仅支持被壳保护的dex, 不支持App动态加载的dex/jar</li></ol><h2 id="fart"><a href="#fart" class="headerlink" title="fart"></a>fart</h2><p>脱抽取型壳并回填dex</p><h3 id="安装新环境"><a href="#安装新环境" class="headerlink" title="安装新环境"></a>安装新环境</h3><p>vim /etc/proxychains4.conf  配置代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socks5  192.168.0.106 1080</span><br><span class="line">#http 127.0.0.1 12333</span><br></pre></td></tr></table></figure><p>主机192.168.0.106 ssr开启运行局域网连接</p><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210423001429267.png" alt="image-20210423001429267"></p><p>配置新环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PYTHON_CONFIGURE_OPTS&#x3D;&quot;--disable-ipv6&quot; proxychains pyenv install 3.9.0  创建python3.9.0环境</span><br><span class="line">PYTHON_CONFIGURE_OPTS&#x3D;&quot;--disable-ipv6&quot; proxychains pip install objection&#x3D;&#x3D;1.9.5  安装objection 1.9.5套件包括frida-tools 9.2.4，frida 14.2.16</span><br></pre></td></tr></table></figure><p>wget <a href="https://github.com/frida/frida/releases/download/14.2.16/frida-server-14.2.16-android-arm64.xz" target="_blank" rel="noopener">frida-server-14.2.16-android-arm64.xz</a></p><p>7z x <a href="https://github.com/frida/frida/releases/download/14.2.16/frida-server-14.2.16-android-arm64.xz" target="_blank" rel="noopener">frida-server-14.2.16-android-arm64.xz</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb push ~&#x2F;Desktop&#x2F;frida-server-14.2.16-android-arm64 &#x2F;data&#x2F;local&#x2F;tmp&#x2F;</span><br><span class="line">adb shell</span><br><span class="line">mv &#x2F;data&#x2F;local&#x2F;tmp&#x2F;frida-server-14.2.16-android-arm64 &#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs1426arm64  </span><br><span class="line">chmod 777 &#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs1426arm64</span><br><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs1426arm64</span><br></pre></td></tr></table></figure><p>事实证明，新版本不兼容还是用12.8.0的frida吧</p><h3 id="调用fart"><a href="#调用fart" class="headerlink" title="调用fart"></a>调用fart</h3><p>基于hook和反射脱壳，对比发现youpk最优秀。</p><blockquote><p>adb reboot bootloader</p><p>cd ~/Desktop/sailfish-nzh54d  安卓8.0</p><p>./flash-all.sh  刷回去</p><p><a href="https://onejane.github.io/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#Pixel">root及基础配置</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">adb push Magisk-v20.4.zip &#x2F;sdcard    </span><br><span class="line">adb push magisk-riru-v21.3.zip &#x2F;sdcard&#x2F;Download 使用magisk模块安装并重启</span><br><span class="line">adb push magisk-EdXposed-SandHook-v0.4.5.1_beta.4463.-release.zip &#x2F;sdcard&#x2F;Download  使用magisk模块安装并重启</span><br><span class="line">adb install EdXposedManager-4.5.7-45700-org.meowcat.edxposed.manager-release.apk    安装xposed</span><br><span class="line">adb push MagiskHidePropsConf-v5.3.4.zip &#x2F;sdcard&#x2F;Download   </span><br><span class="line">adb install JustTrustMePlus-debug.apk  用于结合xposed突破SSL Pinning抓包限制</span><br><span class="line">adb reboot bootloader</span><br><span class="line">fastboot boot twrp-3.4.0-0-sailfish.img   进入recovery mode</span><br><span class="line">install Magisk-v20.4.zip</span><br><span class="line">adb install MagiskManager-v7.5.1.apk  模块安装MagiskHidePropsConf，riru，EdXposed，</span><br><span class="line">adb shell su通过Magisk获取root权限</span><br><span class="line">settings put global captive_portal_http_url https:&#x2F;&#x2F;www.google.cn&#x2F;generate_204  去除wifi上的×</span><br><span class="line">settings put global captive_portal_https_url https:&#x2F;&#x2F;www.google.cn&#x2F;generate_204</span><br><span class="line">settings put global ntp_server 1.hk.pool.ntp.org  修改时区</span><br><span class="line">props  Edit MagiskHide props--ro.debuggable  设置全局可调试，getprop ro.debuggable 即可查看1,开启全局可调试</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.0</span><br><span class="line">proxychains4 wget https:&#x2F;&#x2F;github.com&#x2F;hanbinglengyue&#x2F;FART.git</span><br><span class="line">7z x frida_fart.zip  &amp;&amp; adb push lib&#x2F;fart* &#x2F;data&#x2F;app &amp;&amp; chmod 777 *.so   如果没有权限，放到&#x2F;sdcard中再放入&#x2F;data&#x2F;app</span><br><span class="line">cd Desktop&#x2F;FART-master&#x2F;frida_fart&#x2F; &amp;&amp; frida -UF -l frida_fart_reflection.js   attach模式启动</span><br><span class="line">frida -U -f com.cz.babySister -l frida_fart_reflection.js --no-pause  spawn模式启动</span><br><span class="line">fart() 全量主动调用</span><br><span class="line">frida -U -f com.cz.babySister -l frida_fart_hook.js --no-pause  基于安卓8，生成dex，hook连壳一起脱</span><br></pre></td></tr></table></figure><p><img src="/2021/04/21/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8%E7%A7%BB%E5%8A%A8TV%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210422234838689.png" alt="image-20210422234838689"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb pull &#x2F;sdcard&#x2F;com.cz.babySister.activity</span><br><span class="line">grep -ril &quot;LoginActivity&quot; *.dex</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fart </tag>
            
            <tag> postern </tag>
            
            <tag> charles </tag>
            
            <tag> youpk </tag>
            
            <tag> dexdump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇之selenium登陆获取阿里腾讯cookie</title>
      <link href="/2021/04/21/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8Bselenium%E7%99%BB%E9%99%86%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E8%85%BE%E8%AE%AFcookie/"/>
      <url>/2021/04/21/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8Bselenium%E7%99%BB%E9%99%86%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E8%85%BE%E8%AE%AFcookie/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>selenium本身是自动化测试框架，只是在爬虫领域更能够显示出其一把梭的威力，所有网站比如淘宝，微博等必须登录状态才能访问页面，对数据进行抓取时，逆向分析js将是一条不归路，而自动化测试框架selenium完全模拟人的行为模式，对网站按钮的点击，元素的获取，内容文本的输入有着得天独厚的优势。不过相对于逆向加密参数执行的爬虫程序来说，selenium还是太过效率低下了，常规套路一般是通过selenium拿到cookie或者token后，再通过爬虫程序去抓取页面，事半功倍。</p><h1 id="Alimama实战"><a href="#Alimama实战" class="headerlink" title="Alimama实战"></a>Alimama实战</h1><p>以阿里妈妈后台为例，通过分析我们拿到了请求json来自于<a href="https://pub.alimama.com/campaign/joinedSpecialCampaigns.json?toPage=1&amp;status=2&amp;perPageSize=40" target="_blank" rel="noopener">https://pub.alimama.com/campaign/joinedSpecialCampaigns.json?toPage=1&amp;status=2&amp;perPageSize=40</a></p><p>不过单独访问该页面，会将我们地址重定向到登录界面，这种网站就必须我们登录再发起请求抓取数据了。</p><p><img src="/2021/04/21/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8Bselenium%E7%99%BB%E9%99%86%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E8%85%BE%E8%AE%AFcookie/image-20210421103951060.png" alt="image-20210421103951060"></p><h2 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h2><p>该登录页面是淘宝的统一登录框架，右键重新加载时抓包拿到框架地址，去除无用参数拿到原始地址<a href="https://login.taobao.com/member/login.jhtml?style=mini&amp;newMini2=true&amp;from=alimama%EF%BC%8C%E9%81%BF%E5%85%8D%E5%85%B6%E4%BB%96%E8%AF%B7%E6%B1%82%E5%B9%B2%E6%89%B0%E6%88%91%E4%BB%AC%E7%9A%84%E5%88%A4%E6%96%AD%E3%80%82" target="_blank" rel="noopener">https://login.taobao.com/member/login.jhtml?style=mini&amp;newMini2=true&amp;from=alimama，避免其他请求干扰我们的判断。</a></p><p><img src="/2021/04/21/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8Bselenium%E7%99%BB%E9%99%86%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E8%85%BE%E8%AE%AFcookie/image-20210421104149706.png" alt="image-20210421104149706"></p><p>步骤如下：</p><ol><li>获取账户，密码，滑块，按钮的元素位置</li><li>输入账户密码</li><li>判断滑块存在并滑动滑块</li><li>点击登录</li><li>保存cookie并调用cookie发起请求</li></ol><h2 id="chromedriver初始化"><a href="#chromedriver初始化" class="headerlink" title="chromedriver初始化"></a>chromedriver初始化</h2><p>根据本机的chrome版本获取selenium的驱动程序chromedriver版本</p><p><img src="/2021/04/21/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8Bselenium%E7%99%BB%E9%99%86%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E8%85%BE%E8%AE%AFcookie/1191440-20180518111350337-1231574403.png" alt="img"></p><h3 id="特征隐藏"><a href="#特征隐藏" class="headerlink" title="特征隐藏"></a>特征隐藏</h3><p>面对一些网站通过ajax请求，同时携带一些难以破解加密参数，虽然selenium模拟浏览器行为操作，绕过这些反爬虫的手段，不过依旧有一些站点通过JavaScript 探测到Selenium启动的浏览器的天生存在的几十个特征来屏蔽这些爬虫的运行。通过<a href="https://bot.sannysoft.com/" target="_blank" rel="noopener">https://bot.sannysoft.com/</a> 可以查看当前浏览器的一些特征值，正常浏览器打开如下：</p><p><img src="/2021/04/21/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8Bselenium%E7%99%BB%E9%99%86%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E8%85%BE%E8%AE%AFcookie/image-20210421110722900.png" alt="image-20210421110722900"></p><p>而通过selenium打开该网站时，部分特征被检测到，这就被安全人员拿来作为关键参数，禁止改浏览器的数据请求。</p><p><img src="/2021/04/21/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8Bselenium%E7%99%BB%E9%99%86%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E8%85%BE%E8%AE%AFcookie/image-20210421110939009.png" alt="image-20210421110939009"></p><ol><li><p>比如某平台中对selenium的属性$cdc_asdjflasutopfhvcZLmcfl_做了校验，应对解决方案使用HexEdit 4.2修改chromedriver.exe 的$cdc_asdjflasutopfhvcZLmcfl_修改为同长度的字符串,如$ccccccccccccccccccccccccccc。</p></li><li><p>针对chrome弹窗请停用以开发者模式运行插件，可以通过Chrome.dll-patch75and76.exe放入chrome文件夹下包含包含chrome.dll文件的目录下并管理员身份执行。</p></li><li><p>针对CHROME正受到组件控制的提示，可以通过<code>chrome_options.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])</code>实现屏蔽’CHROME正受到组件控制’的提示。</p></li><li><p>针对chrome自带密码保存对爬虫的干扰影响，通过<code>chrome_options.add_experimental_option(&quot;prefs&quot;, prefs)</code>屏蔽。</p></li><li><p>针对封禁ip可以通过<code>chrome_options.add_argument(&quot;--proxy-server=http://58.243.205.102:4543&quot;)</code>开启ip代理。</p></li><li><p>设置请求头UA,<code>browser.execute_cdp_cmd(&#39;Network.setUserAgentOverride&#39;, {&quot;userAgent&quot;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&#39;})</code></p></li><li><p>针对navigator属性中存在webdriver，新页面加载后<code>browser.execute_script(&#39;Object.defineProperty(navigator,&quot;webdriver&quot;,{get:() =&gt; false,});&#39;)</code>去除特征无效，可以通过CDP协议<code>browser.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, {&quot;source&quot;: &quot;&quot;&quot;Object.defineProperty(navigator, &#39;webdriver&#39;, {get: () =&gt; undefined})&quot;&quot;&quot;, })</code></p></li></ol><p>不过仅仅靠隐藏几个特征是毫无意义的，针对众多的特征已经有大牛为我们做了完美隐藏，那就是stealth.min.js</p><p>道高一尺魔高一丈，完整隐藏特征代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># chrome 版本78.0.3904.70，chromedriver版本78.0.3904.70</span><br><span class="line"># 设置代理</span><br><span class="line"># chrome_options.add_argument(&quot;--proxy-server&#x3D;http:&#x2F;&#x2F;58.243.205.102:4543&quot;)</span><br><span class="line"># chrome.exe --remote-debugging-port&#x3D;7222  本地启动selenium</span><br><span class="line"># chrome_options.add_experimental_option(&quot;debuggerAddress&quot;, &quot;127.0.0.1:7222&quot;)</span><br><span class="line">chrome_options &#x3D; Options()</span><br><span class="line"># 设置无头</span><br><span class="line">chrome_options.add_argument(&quot;--headless&quot;)</span><br><span class="line">chrome_options.add_argument(</span><br><span class="line">    &#39;user-agent&#x3D;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.198 Safari&#x2F;537.36&#39;)</span><br><span class="line"># 屏蔽&#39;CHROME正受到组件控制&#39;的提示</span><br><span class="line">chrome_options.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])</span><br><span class="line"># 屏蔽保存密码</span><br><span class="line">prefs &#x3D; &#123;&quot;&quot;: &quot;&quot;&#125;</span><br><span class="line">prefs[&quot;credentials_enable_service&quot;] &#x3D; False</span><br><span class="line">prefs[&quot;profile.password_manager_enabled&quot;] &#x3D; False</span><br><span class="line">chrome_options.add_experimental_option(&quot;prefs&quot;, prefs)</span><br><span class="line">driver &#x3D; Chrome(&#39;.&#x2F;chromedriver&#39;, options&#x3D;chrome_options)</span><br><span class="line">#driver.execute_script(&#39;Object.defineProperty(navigator,&quot;webdriver&quot;,&#123;get:() &#x3D;&gt; false,&#125;);&#39;)</span><br><span class="line">#driver.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, &#123;&quot;source&quot;: &quot;&quot;&quot;Object.defineProperty(navigator, &#39;webdriver&#39;, &#123;get: () &#x3D;&gt; undefined&#125;)&quot;&quot;&quot;, &#125;)</span><br><span class="line">#driver.execute_cdp_cmd(&#39;Network.setUserAgentOverride&#39;, &#123;&quot;userAgent&quot;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;83.0.4103.97 Safari&#x2F;537.36&#39;&#125;)</span><br><span class="line">    </span><br><span class="line">driver.set_page_load_timeout(10)</span><br><span class="line">with open(&#39;.&#x2F;stealth.min.js&#39;) as f:</span><br><span class="line">    js &#x3D; f.read()</span><br><span class="line"></span><br><span class="line">driver.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, &#123;</span><br><span class="line">    &quot;source&quot;: js</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="保存cookie"><a href="#保存cookie" class="headerlink" title="保存cookie"></a>保存cookie</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def save_cookies(self):</span><br><span class="line">    # 隐式等待，设置了一个最长等待时间</span><br><span class="line">    self.browser.implicitly_wait(10)</span><br><span class="line">    # 最大化窗口</span><br><span class="line">    self.browser.maximize_window()</span><br><span class="line">    # 向文本框发送账户密码</span><br><span class="line">    self.browser.find_element_by_xpath(&#39;&#x2F;&#x2F;input[@name&#x3D;&quot;fm-login-id&quot;]&#39;).send_keys(&#39;***&#39;)</span><br><span class="line">    self.browser.find_element_by_xpath(&#39;&#x2F;&#x2F;input[@name&#x3D;&quot;fm-login-password&quot;]&#39;).send_keys(&#39;***&#39;)</span><br><span class="line">    # 解决滑块</span><br><span class="line">    slide_block &#x3D; self.browser.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;nc_1_n1z&quot;]&#39;)</span><br><span class="line">    if (slide_block.is_displayed()):</span><br><span class="line">        # 点击移动滑块</span><br><span class="line">        action &#x3D; ActionChains(self.browser)</span><br><span class="line">        action.click_and_hold(on_element&#x3D;slide_block)</span><br><span class="line">        action.move_by_offset(xoffset&#x3D;258, yoffset&#x3D;0)</span><br><span class="line">        action.pause(0.5).release().perform()  # perform指定动作链</span><br><span class="line">    self.browser.find_element_by_xpath(&#39;&#x2F;&#x2F;button[@class&#x3D;&quot;fm-button fm-submit password-login&quot;]&#39;).click()</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    if &quot;login_unusual&quot; in self.browser.current_url:</span><br><span class="line">        print(&quot;gg了，要手机验证码了，救命啊啊啊啊啊&quot;)</span><br><span class="line">        input(&quot;输入手机验证码啦：&quot;)</span><br><span class="line">    self.cookies &#x3D; &#39;; &#39;.join(</span><br><span class="line">        item for item in [item[&quot;name&quot;] + &quot;&#x3D;&quot; + item[&quot;value&quot;] for item in self.browser.get_cookies()])</span><br><span class="line">    with open(COOKIES_FILE_PATH, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;) as file:</span><br><span class="line">        file.write(self.cookies)</span><br><span class="line">        print(&quot;cookie写入成功：&quot;, self.cookies)</span><br></pre></td></tr></table></figure><h2 id="使用cookie登录"><a href="#使用cookie登录" class="headerlink" title="使用cookie登录"></a>使用cookie登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def taobao_login(self):</span><br><span class="line">    print(&quot;登录中。。。。。&quot;)</span><br><span class="line">    ok &#x3D; False</span><br><span class="line">    while not ok:</span><br><span class="line">        with open(COOKIES_FILE_PATH, &#39;r+&#39;, encoding&#x3D;&#39;utf-8&#39;) as file:</span><br><span class="line">            self.headers[&quot;cookie&quot;] &#x3D; file.read()</span><br><span class="line">        response &#x3D; self.session.get(self.shop_plan_url, headers&#x3D;self.headers, verify&#x3D;False)</span><br><span class="line">        try:</span><br><span class="line">            ok &#x3D; json.loads(response.text)</span><br><span class="line">        except:</span><br><span class="line">            self.browser.get(self.alimama_login_url)</span><br><span class="line">            self.browser.delete_all_cookies()</span><br><span class="line">            self.save_cookies()</span><br><span class="line">        self.browser.close()</span><br><span class="line">        self.browser.quit()</span><br></pre></td></tr></table></figure><h1 id="Tencent实战"><a href="#Tencent实战" class="headerlink" title="Tencent实战"></a>Tencent实战</h1><p>由于腾讯优量汇中的报表不提供api，本次目标是抓取该报表中的广告收益数据。</p><p><img src="/2021/04/21/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8Bselenium%E7%99%BB%E9%99%86%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E8%85%BE%E8%AE%AFcookie/image-20210429170106300.png" alt="image-20210429170106300"></p><p>通过抓包分析最关键的cookie为adnet_sso，只要拿到该cookie就可以成功请求数据，该cookie经过了cookie传递层层更新，太烦了，干脆selenium一把梭，登陆后拿到cookie存到文件中，访问api时添加cookie到header中即可。</p><h2 id="模拟登录-1"><a href="#模拟登录-1" class="headerlink" title="模拟登录"></a>模拟登录</h2><p><a href="https://sso.e.qq.com/login/hub?sso_redirect_uri=https://e.qq.com/dev/login&amp;service_tag=14" target="_blank" rel="noopener">https://sso.e.qq.com/login/hub?sso_redirect_uri=https%3A%2F%2Fe.qq.com%2Fdev%2Flogin&amp;service_tag=14</a></p><p><img src="/2021/04/21/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8Bselenium%E7%99%BB%E9%99%86%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E8%85%BE%E8%AE%AFcookie/image-20210429170627325.png" alt="image-20210429170627325"></p><p>我们肯定是避免扫码登录了，登录流程是当<code>QQ账号登录</code>界面出现时，点击<code>账号密码登录</code>，找到文本框输入qq号及密码后点击<code>授权并登录</code>按钮，获取selenium的cookie并保存到文件中，访问api数据时读取该cookie即可，如果异常则删除selenium的cookie重新登录保存cookie。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def adnet_login(self):</span><br><span class="line">    print(&quot;登录中。。。。。&quot;)</span><br><span class="line">    ok &#x3D; False</span><br><span class="line">    while not ok:</span><br><span class="line">        with open(COOKIES_FILE_PATH, &#39;r+&#39;, encoding&#x3D;&#39;utf-8&#39;) as file:</span><br><span class="line">            self.headers[&quot;cookie&quot;] &#x3D; file.read()</span><br><span class="line">        response &#x3D; self.session.post(self.get_date_url, data&#x3D;json.dumps(self.data), headers&#x3D;self.headers, verify&#x3D;False)</span><br><span class="line">        try:</span><br><span class="line">            res &#x3D; json.loads(response.text)</span><br><span class="line">            ok &#x3D; True</span><br><span class="line">        except:</span><br><span class="line">            self.browser.get(self.adnet_login_url)</span><br><span class="line">            self.browser.delete_all_cookies()</span><br><span class="line">            self.save_cookies()</span><br><span class="line">        self.browser.close()</span><br><span class="line">        self.browser.quit()</span><br></pre></td></tr></table></figure><p>初始化selenium的流程和Alimama的一致，腾讯广告的登录界面藏在<code>id=&quot;qqLoginFrame&quot;</code>的frame中的<code>id=&quot;ptlogin_iframe&quot;</code>的frame中，通过switch_to.frame直接切换到frame中获取元素，填写帐密实现登录保存cookie。</p><p><img src="/2021/04/21/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8Bselenium%E7%99%BB%E9%99%86%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E8%85%BE%E8%AE%AFcookie/image-20210429171239101.png" alt="image-20210429171239101"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def save_cookies(self):</span><br><span class="line">    self.browser.implicitly_wait(10)</span><br><span class="line">    self.browser.maximize_window()</span><br><span class="line">    self.browser.find_element_by_xpath(&#39;&#x2F;&#x2F;a[@id&#x3D;&quot;qqLogin&quot;]&#39;).click()</span><br><span class="line">    # el_frame &#x3D; self.browser.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;qqLoginFrame&quot;]&#39;)</span><br><span class="line">    # print(self.browser.page_source)</span><br><span class="line">    self.browser.switch_to.frame(&#39;qqLoginFrame&#39;)</span><br><span class="line">    self.browser.switch_to.frame(&#39;ptlogin_iframe&#39;)</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    self.browser.find_element_by_xpath(&#39;&#x2F;&#x2F;a[contains(text(),&quot;帐号密码登录&quot;)]&#39;).click()</span><br><span class="line">    self.browser.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;u&quot;]&#39;).send_keys(&#39;*&#39;)</span><br><span class="line">    self.browser.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;p&quot;]&#39;).send_keys(&#39;*&#39;)</span><br><span class="line">    self.browser.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;loginform&quot;]&#x2F;div[@class&#x3D;&quot;submit&quot;]&#x2F;a&#39;).click()</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    self.cookies &#x3D; &#39;; &#39;.join(</span><br><span class="line">        item for item in [item[&quot;name&quot;] + &quot;&#x3D;&quot; + item[&quot;value&quot;] for item in self.browser.get_cookies()])</span><br><span class="line">    with open(COOKIES_FILE_PATH, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;) as file:</span><br><span class="line">        file.write(self.cookies)</span><br><span class="line">        print(&quot;cookie写入成功：&quot;, self.cookies)</span><br></pre></td></tr></table></figure><h2 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h2><p>api请求是通过post提交payload格式的参数，爬虫实现如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def get_report_list(self):</span><br><span class="line">    # 获取所有shop plan</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            response &#x3D; self.session.post(self.get_date_url, data&#x3D;json.dumps(self.data), headers&#x3D;self.headers, verify&#x3D;False)</span><br><span class="line">            print(json.loads(response.text)[&quot;data&quot;][&quot;list&quot;])</span><br><span class="line">            response.raise_for_status()</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&#39;获取优量汇主页请求失败！&#39;)</span><br><span class="line">            self.adnet_login()</span><br><span class="line">            raise e</span><br></pre></td></tr></table></figure><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="不同系统"><a href="#不同系统" class="headerlink" title="不同系统"></a>不同系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chrome_options &#x3D; webdriver.ChromeOptions()</span><br><span class="line">if platform.system() &#x3D;&#x3D; &quot;Windows&quot;:</span><br><span class="line">    driver &#x3D; webdriver.Chrome(&#39;chromedriver.exe&#39;, chrome_options&#x3D;chrome_options)</span><br><span class="line">elif platform.system() &#x3D;&#x3D; &quot;Linux&quot;:</span><br><span class="line">    chrome_options.add_argument(&quot;--headless&quot;)</span><br><span class="line">    chrome_options.add_argument(&#39;--disable-gpu&#39;)</span><br><span class="line">    chrome_options.add_argument(&#39;--no-sandbox&#39;)</span><br><span class="line">    driver &#x3D; webdriver.Chrome(</span><br><span class="line">        executable_path&#x3D;&quot;&#x2F;usr&#x2F;bin&#x2F;chromedriver&quot;,</span><br><span class="line">        chrome_options&#x3D;chrome_options)</span><br></pre></td></tr></table></figure><h2 id="获取元素信息"><a href="#获取元素信息" class="headerlink" title="获取元素信息"></a>获取元素信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def get_data():</span><br><span class="line">    divs &#x3D; driver.find_elements_by_xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;items&quot;]&#x2F;div[@class&#x3D;&quot;item J_MouserOnverReq  &quot;]&#39;)</span><br><span class="line">    for div in divs:</span><br><span class="line">        info &#x3D; div.find_element_by_xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;row row-2 title&quot;]&#x2F;a&#39;).text</span><br><span class="line">        price &#x3D; div.find_element_by_xpath(&#39;.&#x2F;&#x2F;strong&#39;).text</span><br><span class="line">        deal &#x3D; div.find_element_by_xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;deal-cnt&quot;]&#39;).text</span><br><span class="line">        shop &#x3D; div.find_element_by_xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;shop&quot;]&#x2F;a&#39;).text</span><br><span class="line">        print(info, price, deal, shop, sep&#x3D;&quot;|&quot;)</span><br><span class="line">        with open(&#39;taobao.csv&#39;, mode&#x3D;&#39;a&#39;, newline&#x3D;&quot;&quot;) as csvfile:</span><br><span class="line">            csvwrite &#x3D; csv.writer(csvfile, delimiter&#x3D;&#39;,&#39;)</span><br><span class="line">            csvwrite.writerow([info, price, deal, shop])</span><br><span class="line">browser.find_elements_by_xpath(&quot;&#x2F;&#x2F;div[@id&#x3D;&#39;J_DivItemDesc&#39;]&#x2F;descendant::*&#x2F;img&quot;)  查找后代元素      </span><br><span class="line">browser.find_elements_by_xpath(&quot;&#x2F;&#x2F;div[@id&#x3D;&#39;J_DivItemDesc&#39;]&#x2F;descendant::*&#x2F;img&quot;).tag_name  获取标签</span><br><span class="line">browser.find_elements_by_xpath(&quot;&#x2F;&#x2F;div[@id&#x3D;&#39;J_DivItemDesc&#39;]&#x2F;descendant::*&#x2F;img&quot;).get_attribute(&#39;value&#39;)  获取属性value信息或文本框信息</span><br><span class="line">js &#x3D; &#39;return document.getElementById(&quot;su&quot;).getAttribute(&quot;value&quot;)&#39;</span><br><span class="line">res &#x3D; driver.excute_script(js)  利用js获取元素属性值</span><br></pre></td></tr></table></figure><h2 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def get_data():</span><br><span class="line">    # 移动鼠标到距离元素的位置</span><br><span class="line">    title &#x3D; browser.find_element_by_xpath(&quot;&#x2F;&#x2F;div[@class&#x3D;&#39;title-bar&#39;]&quot;)</span><br><span class="line">    ActionChains(browser).move_to_element_with_offset(title, 100, 600).perform()</span><br><span class="line">    # 键盘指令</span><br><span class="line">    # browser.find_element_by_tag_name(&#39;body&#39;).send_keys(Keys.CONTROL + Keys.SHIFT + &#39;J&#39;)</span><br><span class="line">    # hover到指定元素</span><br><span class="line">    # ActionChains(browser).move_to_element(browser.find_elements_by_xpath(&#39;&#x2F;&#x2F;tbody[@mx-ie&#x3D;&quot;mouseover&quot;]&#x2F;tr&#39;)[1]).perform()</span><br><span class="line">    # 页面双击操作才能获取列表</span><br><span class="line">    ActionChains(browser).double_click(browser.find_element_by_xpath(&quot;&#x2F;&#x2F;body&quot;)).perform()</span><br><span class="line">    tr_list &#x3D; browser.find_elements_by_xpath(&#39;&#x2F;&#x2F;tbody[contains(@mx-ie,&quot;mouseover&quot;)]&#x2F;tr&#39;)</span><br><span class="line">    if len(tr_list) &#x3D;&#x3D; 0:</span><br><span class="line">        # 页面重载</span><br><span class="line">        browser.execute_script(&quot;location.reload()&quot;)</span><br><span class="line">        title &#x3D; browser.find_element_by_xpath(&quot;&#x2F;&#x2F;div[@class&#x3D;&#39;title-bar&#39;]&quot;)</span><br><span class="line">        # 鼠标移动位置</span><br><span class="line">        ActionChains(browser).move_to_element_with_offset(title, 100, 600).perform()</span><br><span class="line">        # 双击</span><br><span class="line">        ActionChains(browser).double_click(browser.find_element_by_xpath(&quot;&#x2F;&#x2F;body&quot;)).perform()</span><br><span class="line">        # 判断元素属性是否包含</span><br><span class="line">        tr_list &#x3D; browser.find_elements_by_xpath(&#39;&#x2F;&#x2F;tbody[contains(@mx-ie,&quot;mouseover&quot;)]&#x2F;tr&#39;)</span><br><span class="line">        # 滚轮直接滑到底部</span><br><span class="line">        browser.execute_script(&quot;window.scrollTo(0,document.body.scrollHeight);&quot;)</span><br></pre></td></tr></table></figure><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 通过不同的方式查找界面元素</span><br><span class="line">def findElement(by, value):</span><br><span class="line">    if (by &#x3D;&#x3D; &quot;id&quot;):</span><br><span class="line">        element &#x3D; browser.find_element_by_id(value)</span><br><span class="line">        return element</span><br><span class="line">    elif (by &#x3D;&#x3D; &quot;name&quot;):</span><br><span class="line">        element &#x3D; browser.find_element_by_name(value)</span><br><span class="line">        return element</span><br><span class="line">    elif (by &#x3D;&#x3D; &quot;xpath&quot;):</span><br><span class="line">        element &#x3D; browser.find_element_by_xpath(value)</span><br><span class="line">        return element</span><br><span class="line">    elif (by &#x3D;&#x3D; &quot;classname&quot;):</span><br><span class="line">        element &#x3D; browser.find_element_by_class_name(value)</span><br><span class="line">        return element</span><br><span class="line">    elif (by &#x3D;&#x3D; &quot;css&quot;):</span><br><span class="line">        element &#x3D; browser.find_element_by_css_selector(value)</span><br><span class="line">        return element</span><br><span class="line">    elif (by &#x3D;&#x3D; &quot;link_text&quot;):</span><br><span class="line">        element &#x3D; browser.find_element_by_link_text(value)</span><br><span class="line">        return element</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;无对应方法，请检查&quot;)</span><br><span class="line">        return None</span><br></pre></td></tr></table></figure><h2 id="元素存在"><a href="#元素存在" class="headerlink" title="元素存在"></a>元素存在</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.support.ui import WebDriverWait</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line">def is_element_present(locator):</span><br><span class="line">    wait &#x3D; WebDriverWait(browser, 2)</span><br><span class="line">    try:</span><br><span class="line">       # 显式等待</span><br><span class="line">        wait.until(EC.visibility_of_element_located(locator))</span><br><span class="line">    except TimeoutException:</span><br><span class="line">        return False</span><br><span class="line">    return True</span><br><span class="line">is_element_present((By.XPATH, &#39;&#x2F;&#x2F;*[@id&#x3D;\&quot;sufei-dialog-content\&quot;]&#39;))</span><br></pre></td></tr></table></figure><h2 id="点击元素"><a href="#点击元素" class="headerlink" title="点击元素"></a>点击元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def move_element_click(xpath):</span><br><span class="line">    if is_element_present((By.XPATH, xpath)):</span><br><span class="line">        ele_loc &#x3D; browser.find_element_by_xpath(xpath)</span><br><span class="line">        browser.execute_script(&quot;arguments[0].scrollIntoView();&quot;, ele_loc)</span><br><span class="line">        ActionChains(browser).move_to_element(ele_loc).click().perform()</span><br><span class="line">        time.sleep(random.randint(1, 3))</span><br><span class="line">move_element_click(&quot;&#x2F;&#x2F;div[@class&#x3D;&#39;dialog-contentbox&#39;]&#x2F;vframe&#x2F;div&#x2F;div&#x2F;button&quot;)</span><br></pre></td></tr></table></figure><h2 id="hover元素"><a href="#hover元素" class="headerlink" title="hover元素"></a>hover元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def hover(by, value):</span><br><span class="line">    element &#x3D; findElement(by, value)</span><br><span class="line">    ActionChains(browser).move_to_element(element).perform()</span><br><span class="line">hover(&quot;xpath&quot;, &#39;&#x2F;&#x2F;tbody[contains(@mx-ie,&quot;mouseover&quot;)]&#x2F;tr[&#39; + str(tr_list.index(tr) + 1) + &#39;]&#39;)</span><br></pre></td></tr></table></figure><p><strong>完整源码请关注微信公众号：ReverseCode，回复：爬虫基础</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 爬虫基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之红岭创投encryption</title>
      <link href="/2021/04/19/JS%E9%80%86%E5%90%91%E4%B9%8B%E7%BA%A2%E5%B2%AD%E5%88%9B%E6%8A%95encryption/"/>
      <url>/2021/04/19/JS%E9%80%86%E5%90%91%E4%B9%8B%E7%BA%A2%E5%B2%AD%E5%88%9B%E6%8A%95encryption/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p><a href="https://sso.my089.com/sso/login" target="_blank" rel="noopener">https://sso.my089.com/sso/login</a></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>登录url：</p><p>POST <a href="https://sso.my089.com/sso/login" target="_blank" rel="noopener">https://sso.my089.com/sso/login</a></p><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">username: 15806204095</span><br><span class="line">phone: </span><br><span class="line">encryption: e10adc3949ba59abbe56e057f20f883e</span><br><span class="line">password: </span><br><span class="line">password2: </span><br><span class="line">randomPageId: dc88cc75d91f4ecaa519f232a9a66361</span><br><span class="line">checkCode: 4ctk</span><br><span class="line">session_kept: 30</span><br><span class="line">loginCategory: 0</span><br><span class="line">back_url: </span><br><span class="line">app_key: 16ae450f970448619c3ce7193982089e</span><br><span class="line">ltcc: </span><br><span class="line">requestId: my089-21041920-0757-0529-1535-632509802406</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>搜索sso/login，进入了html页面，点击登录或者回车跳转到loginSubmit方法</p><p><img src="/2021/04/19/JS%E9%80%86%E5%90%91%E4%B9%8B%E7%BA%A2%E5%B2%AD%E5%88%9B%E6%8A%95encryption/image-20210419201127276.png" alt="image-20210419201127276"></p><p>搜索loginSubmit</p><p><img src="/2021/04/19/JS%E9%80%86%E5%90%91%E4%B9%8B%E7%BA%A2%E5%B2%AD%E5%88%9B%E6%8A%95encryption/image-20210419201318273.png" alt="image-20210419201318273"></p><p>加密方法在jQuery.md5.js中，将js整个拷出，修改得到md5方法，完成encryption的解密。</p><p><strong>完整源码请关注微信公众号：ReverseCode，回复：JS逆向</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之万创帮sign</title>
      <link href="/2021/04/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%87%E5%88%9B%E5%B8%AEsign/"/>
      <url>/2021/04/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%87%E5%88%9B%E5%B8%AEsign/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p><a href="https://m.wcbchina.com/invite/invite.html" target="_blank" rel="noopener">https://m.wcbchina.com/invite/invite.html</a></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><h2 id="注册url"><a href="#注册url" class="headerlink" title="注册url"></a>注册url</h2><p>POST <a href="https://m.wcbchina.com/api/userRegister/registerByInvite?rnd=0.5886187290129845" target="_blank" rel="noopener">https://m.wcbchina.com/api/userRegister/registerByInvite?rnd=0.5886187290129845</a></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>{“auth”:{“timestamp”:1618717702730,”sign”:”81D4F3A45B3202E33971304201135FE5”},”phone”:”15806204095”,”validateCode”:”123”,”inviteCode”:””}</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>搜索userRegister/registerByInvite，进入函数中，打上断点，发起注册请求，此刻的参数中害没有出现加密参数sign，postJson时传递了一个大json数据包括参数service,data和方法success,error</p><p><img src="/2021/04/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%87%E5%88%9B%E5%B8%AEsign/image-20210418121513116.png" alt="image-20210418121513116"></p><p>进入postJson方法，发现重组了请求地址，这就是为什么搜索<code>api/userRegister/registerByInvite</code>不到的原因</p><p><img src="/2021/04/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%87%E5%88%9B%E5%B8%AEsign/image-20210418124035654.png" alt="image-20210418124035654"></p><p>跟进A(a)函数，发现其中的h对象中是data参数有W()构成，W()正是构成sign的关键函数</p><p><img src="/2021/04/18/JS%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%87%E5%88%9B%E5%B8%AEsign/image-20210418125251298.png" alt="image-20210418125251298"></p><p><strong>完整源码请关注微信公众号：ReverseCode，回复：JS逆向</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之5173password</title>
      <link href="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/"/>
      <url>/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>登录URL：</p><p>POST <a href="https://passport.5173.com/?returnUrl=http://www.5173.com/" target="_blank" rel="noopener">https://passport.5173.com/?returnUrl=http%3A//www.5173.com/</a></p><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">smsLogin: 0</span><br><span class="line">userName: 15806204095</span><br><span class="line">password: 6a771c7ecf7ebe2c3d4c0075cdb96ae5</span><br><span class="line">mobileNo: </span><br><span class="line">smsCaptcha: </span><br><span class="line">category: </span><br><span class="line">passpod: </span><br><span class="line">__validationToken__: 1680e6a3947c43aea45d83e69b0d7291</span><br><span class="line">__validationDna__:</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="password"><a href="#password" class="headerlink" title="password"></a>password</h2><p>password有32位，有可能是md5</p><p>搜索password，出现的地方太多了，懒得看，放弃。</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417101520224.png" alt="image-20210417101520224"></p><p>点击登录按钮，肯定触发事件发送请求，搜索<code>submit-btn</code>无效结果。</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417101653242.png" alt="image-20210417101653242"></p><p>搜索<code>tnSubmit</code>加上断点，点击登录按钮时，果然断在了这个function中，不过此刻Network面板的请求包已经发送出去了，gg了，没能拦截到<code>https://passport.5173.com/?returnUrl=http%3a%2f%2fwww.5173.com%2f</code>请求发送前的时间点。</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417101856138.png" alt="image-20210417101856138"></p><p>再一次尝试，在加密password时肯定要获取该输入框的值，通过id获取元素的话，我们搜索<code>#txtPass</code>在所出现的位置都打上断点</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417102111667.png" alt="image-20210417102111667"></p><p>点击登录时查看Network已经拦截在了ValidateSlide请求，还没有到登录请求</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417102439074.png" alt="image-20210417102439074"></p><p>查看断点时打印o为<code>aec712a02d8c835b92369e5d7e5494cf</code>,并直接跳到<code>return $[[&quot;ajax&quot;]]</code>处，查看此时提交的data中的<code>a[[&quot;serialize&quot;]]()</code>为<code>&quot;smsLogin=0&amp;userName=15806204095&amp;password=aec712a02d8c835b92369e5d7e5494cf&amp;mobileNo=&amp;smsCaptcha=&amp;category=&amp;passpod=&amp;__validationToken__=31004cd552c94687ba27d1c7258576f7&amp;__validationDna__=&quot;</code>,其中的password就是之前打印的o参数。</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417102816463.png" alt="image-20210417102816463"></p><p>由于password=o，现在只需要追踪这个o参数来源即可。往上追溯是<code>onsubmit: function(f, o)</code>中作为第二个参数o传递进来的，通过调用的堆栈查看上一级调用方法submitHandle。</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417103714227.png" alt="image-20210417103714227"></p><p>submitHandler这段代码返回a.onsubmit(a, c)，其中c就是<code>onsubmit: function(f, o) </code>中的o=password。由于<code>a.usingTpm || a.passwordHash</code>是true，那么这个c就是通过<code>a.getPassword(a.pkey)</code>获取。</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417104004461.png" alt="image-20210417104004461"></p><p>进入getPassword后，<code>this.ready &amp;&amp; this.activeTpm &amp;&amp; this.usingTpm</code>为false，必然进入的是else中的<code>c = hex_md5(hex_md5(c).substr(8, 16) + a);</code>实现加密。</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417112035000.png" alt="image-20210417112035000"></p><p><code>(c = b(&quot;#&quot; + this.passwordControlId).val()) &amp;&amp; this.passwordHash</code>赋值必然是true，其中<code>(c = b(&quot;#&quot; + this.passwordControlId).val())</code>的结果为123456，即我们输入的密码，由于传入的a为<code>42m2gl</code>，所以加密逻辑整理为<code>c = hex_md5(hex_md5(&quot;123456&quot;).substr(8, 16) + &quot;42m2gl&quot;)</code></p><p>那么问题来了，传入的a是哪里来的，通过搜索42m2gl，原来每次页面生成的时候页面会加载PasswordKey，通过PasswordKey和SecurityToken等key实现相互验证进行校验。</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417113103632.png" alt="image-20210417113103632"></p><h2 id="validationToken"><a href="#validationToken" class="headerlink" title="__validationToken__"></a><strong>__validationToken__</strong></h2><p><strong>__validationToken__</strong>这个字段<code>6b16902a6b134dc9a2c333b965c9405f</code>在请求里面无法搜到是因为页面已经刷新，通过fiddler抓包<code>https://passport.5173.com/?returnUrl=http%3a%2f%2fwww.5173.com%2f</code>历史可以看到首页加载时传入该参数</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B5173password/image-20210417113838930.png" alt="image-20210417113838930"></p><h1 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h1><p>首次先请求<a href="https://passport.5173.com/?returnUrl=http://www.5173.com/" target="_blank" rel="noopener">https://passport.5173.com/?returnUrl=http%3a%2f%2fwww.5173.com%2f</a></p><p>获取页面中的PasswordKey的值和SecurityToken的值，通过两次md5密码<code>hex_md5(hex_md5(&quot;123456&quot;).substr(8, 16) + &quot;42m2gl&quot;)</code>拿到password加密结果，发起请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">def hex_md5(s):</span><br><span class="line">    m &#x3D; hashlib.md5()</span><br><span class="line">    m.update(str(s).encode(&quot;utf-8&quot;))</span><br><span class="line">    return m.hexdigest()</span><br><span class="line"></span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;Host&#39;: &#39;passport.5173.com&#39;,</span><br><span class="line">    &#39;Origin&#39;: &#39;https:&#x2F;&#x2F;passport.5173.com&#39;,</span><br><span class="line">    &#39;Pragma&#39;: &#39;no-cache&#39;,</span><br><span class="line">    &#39;Referer&#39;: &#39;https:&#x2F;&#x2F;passport.5173.com&#x2F;?returnUrl&#x3D;http%3A&#x2F;&#x2F;www.5173.com&#x2F;&#39;,</span><br><span class="line">    &#39;Sec-Fetch-Mode&#39;: &#39;cors&#39;,</span><br><span class="line">    &#39;Sec-Fetch-Site&#39;: &#39;same-origin&#39;,</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;78.0.3904.70 Safari&#x2F;537.36&#39;,</span><br><span class="line">    &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,</span><br><span class="line">&#125;</span><br><span class="line">login_url &#x3D; &#39;https:&#x2F;&#x2F;passport.5173.com&#x2F;?returnUrl&#x3D;http%3A&#x2F;&#x2F;www.5173.com&#x2F;&#39;</span><br><span class="line">html &#x3D; requests.get(login_url).text</span><br><span class="line"># print(html)</span><br><span class="line">securityToken &#x3D; re.findall(&#39;SecurityToken:&quot;(.*?)&quot;,&#39;, html, re.M | re.S)[0]</span><br><span class="line">passwordKey &#x3D; re.findall(&#39;PasswordKey:&quot;(.*?)&quot;,&#39;, html, re.M | re.S)[0]</span><br><span class="line">print(passwordKey)</span><br><span class="line">print(securityToken)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 滑块 &#39;https:&#x2F;&#x2F;passport.5173.com&#x2F;Sso&#x2F;ValidateSlide?token&#x3D;&#123;&#125;&#39;.format(securityToken)</span><br><span class="line"># hex_md5(hex_md5(&quot;123456&quot;).substr(8, 16) + &quot;42m2gl&quot;)</span><br><span class="line">password &#x3D; hex_md5(hex_md5(&quot;123456&quot;)[8:8 + 16] + passwordKey)</span><br><span class="line">userName &#x3D; &#39;15806204096&#39;</span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">    &#39;smsLogin&#39;: &#39;0&#39;,</span><br><span class="line">    &#39;userName&#39;: userName,</span><br><span class="line">    &#39;password&#39;: password,</span><br><span class="line">    &#39;mobileNo&#39;: &#39;&#39;,</span><br><span class="line">    &#39;smsCaptcha&#39;: &#39;&#39;,</span><br><span class="line">    &#39;category&#39;: &#39;&#39;,</span><br><span class="line">    &#39;passpod&#39;: &#39;&#39;,</span><br><span class="line">    &#39;__validationToken__&#39;: securityToken,</span><br><span class="line">    &#39;__validationDna__&#39;: &#39;&#39;</span><br><span class="line">&#125;</span><br><span class="line">r &#x3D; requests.post(login_url, data, headers&#x3D;headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>虽然password逻辑已经破解，不过登录时还需要验证码滑块的校验，以后有时间再写吧。。。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之金逸电影params</title>
      <link href="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E9%87%91%E9%80%B8%E7%94%B5%E5%BD%B1params/"/>
      <url>/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E9%87%91%E9%80%B8%E7%94%B5%E5%BD%B1params/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p><a href="http://www.jycinema.com/wap/#/register" target="_blank" rel="noopener">http://www.jycinema.com/wap/#/register</a></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>登录url:</p><p>POST <a href="http://www.jycinema.com/frontUIWebapp/appserver/photoMessageService/newsSendMessage" target="_blank" rel="noopener">http://www.jycinema.com/frontUIWebapp/appserver/photoMessageService/newsSendMessage</a></p><p>参数：</p><p>params:<strong>ey</strong>622Jt557b2114Jp469bG373VO310dW8741i248ZX535Ii076Oi988Ix997NT571gw811Nj907Iw911ND991A5893NS763Is198In627Nl690bm498RU398eX141Bl991Ij727oi670cm475Vn649Ii854wi037Y2151hh831bm4625l109bE023lk146Ij946o3769LC284Jj066aG622Fu333bm353Vs667Q26149k642ZS856I6624Ik524ow241MD637A1091Ii342wi356bW787Vt825Ym215Vy105SW604Qi506Oi857Ii850<strong>fQ</strong>497==152</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>ey开头是base64中的{，fq是base64中的}，有可能是base64加密</p><p>搜索photoMessageService/newsSendMessage</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E9%87%91%E9%80%B8%E7%94%B5%E5%BD%B1params/image-20210417081614897.png" alt="image-20210417081614897"></p><p>定义了sendMg属性，那么必定被调用才发起请求，搜索.sendMg</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E9%87%91%E9%80%B8%E7%94%B5%E5%BD%B1params/image-20210417082003298.png" alt="image-20210417082003298"></p><p>点击获取验证码,请求参数中<code>$scope.registerData.tel</code>就是我们提交的手机号，那么加密必然是在<code>getData</code>中</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E9%87%91%E9%80%B8%E7%94%B5%E5%BD%B1params/image-20210417082318460.png" alt="image-20210417082318460"></p><p>跟进<code>getData</code>后对params进行处理生成<code>{&quot;mobileNumber&quot;:&quot;15806204095&quot;,&quot;sendType&quot;:&quot;reg&quot;,&quot;channelId&quot;:7,&quot;channelCode&quot;:&quot;J0005&quot;,&quot;memberId&quot;:&quot;&quot;}</code></p><p>并发现了密码加密的函数，在下方通过<code>$rootScope.getEncryption(params.params)</code>调用生成密码。</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E9%87%91%E9%80%B8%E7%94%B5%E5%BD%B1params/image-20210417082740728.png" alt="image-20210417082740728"></p><p>由于Base64.encode有utf-8乱码问题，无法直接使用，<code>var re_btou = new RegExp([&quot;[À-ß][-¿]&quot;, &quot;[à-ï][-¿]{2}&quot;, &quot;[ð-÷][-¿]{3}&quot;].join(&quot;|&quot;),&quot;g&quot;);</code>通过<a href="https://github.com/dankogai/js-base64/edit/main/base64.js" target="_blank" rel="noopener">base64.js源码</a>提供<code>Base64.encode(value)</code>实现params加密关键函数getEncryption。</p><p><img src="/2021/04/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E9%87%91%E9%80%B8%E7%94%B5%E5%BD%B1params/image-20210417092425546.png" alt="image-20210417092425546"></p><h1 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h1><p>由于个人的js学的太孬了，在python调用js时报错<code>execjs._exceptions.ProgramError: ReferenceError: Base64 is not defined</code>,那么我只能避开，使用python实现base64加密并作为参数传入调用getEncryption。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line">import execjs</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">from requests_toolbelt import MultipartEncoder</span><br><span class="line"></span><br><span class="line">username &#x3D; &quot;15806204095&quot;</span><br><span class="line">psssword &#x3D; &quot;123456&quot;</span><br><span class="line">with open(r&#39;jy_params.js&#39;, encoding&#x3D;&#39;utf-8&#39;, mode&#x3D;&#39;r&#39;) as f:</span><br><span class="line">    JsData &#x3D; f.read()</span><br><span class="line">param &#x3D; &#123;&quot;mobileNumber&quot;: &quot;15806204095&quot;, &quot;sendType&quot;: &quot;reg&quot;, &quot;channelId&quot;: 7, &quot;channelCode&quot;: &quot;J0005&quot;, &quot;memberId&quot;: &quot;&quot;&#125;</span><br><span class="line">val &#x3D; base64.b64encode(json.dumps(param).encode())</span><br><span class="line">params &#x3D; execjs.compile(JsData).call(&#39;getEncryption&#39;, val.decode())</span><br><span class="line">print(params)</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;Accept&#39;: &#39;application&#x2F;json, text&#x2F;plain, *&#x2F;*&#39;,</span><br><span class="line">    &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,</span><br><span class="line">    &#39;Accept-Language&#39;: &#39;zh-CN,zh;q&#x3D;0.9&#39;,</span><br><span class="line">    &#39;Content-Length&#39;: &#39;341&#39;,</span><br><span class="line">    &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8&#39;,</span><br><span class="line">    &#39;Cookie&#39;: &#39;JSESSIONID&#x3D;DD188088D4E4EAC0098C9CCBCC32E52F; Hm_lvt_62d04228e1f84e012c1d9c0227f722c3&#x3D;1618618136; Hm_lpvt_62d04228e1f84e012c1d9c0227f722c3&#x3D;1618618136&#39;,</span><br><span class="line">    &#39;Host&#39;: &#39;www.jycinema.com&#39;,</span><br><span class="line">    &#39;Origin&#39;: &#39;http:&#x2F;&#x2F;www.jycinema.com&#39;,</span><br><span class="line">    &#39;Proxy-Connection&#39;: &#39;keep-alive&#39;,</span><br><span class="line">    &#39;Referer&#39;: &#39;http:&#x2F;&#x2F;www.jycinema.com&#x2F;wap&#x2F;&#39;,</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Linux; Android 6.0; Nexus 5 Build&#x2F;MRA58N) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Mobile Safari&#x2F;537.36&#39;,</span><br><span class="line">&#125;</span><br><span class="line">data &#x3D; &#123;&#39;params&#39;: params&#125;</span><br><span class="line">r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;www.jycinema.com&#x2F;frontUIWebapp&#x2F;appserver&#x2F;photoMessageService&#x2F;newsSendMessage&quot;, data,</span><br><span class="line">                  headers&#x3D;headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><blockquote><p>{“msg”:”短信发送成功”,”count”:0,”status”:”S”}</p></blockquote><p><strong>完整源码请关注微信公众号：ReverseCode，回复：JS逆向</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>违法应用fulao2取证分析</title>
      <link href="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/"/>
      <url>/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="vip破解"><a href="#vip破解" class="headerlink" title="vip破解"></a>vip破解</h1><p>adb install -r -t fulao2.apk  通过jadx查询已经被混淆</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419212413059.png" alt="image-20210419212413059"></p><p>hookEvent.js实现trace系统框架库android.view.View快速定位关键代码，trace所有的mOnClickListener，hook它们的onClick函数，实现点到哪里，定位到哪个类的功能。</p><p>前台运行fulao2.apk后，frida -UF -l hookEvent.js  启动hook</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419215916951.png" alt="image-20210419215916951"></p><h2 id="清晰度切换"><a href="#清晰度切换" class="headerlink" title="清晰度切换"></a>清晰度切换</h2><p>点击切换高清标清按钮，触发了发现在q0时的com.ilulutv.fulao2.film.l$t类，根据获取的类名进入jadx中搜索t，实现bool判断，下面我们手动将内存中的q0改成true。</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419214658427.png" alt="image-20210419214658427"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.0 </span><br><span class="line">objection -g com.ilulutv.fulao2 explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">plugin wallbreaker classdump --fullname com.ilulutv.fulao2.film.l\$t</span><br><span class="line">plugin wallbreaker objectsearch com.ilulutv.fulao2.film.l\$t</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x26a2  获取到com.ilulutv.fulao2.film.l的对象实例</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419214133698.png" alt="image-20210419214133698"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectdump --fullname 0x2406  拿到内存中的对象数据</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419214241612.png" alt="image-20210419214241612"></p><p>通过内存漫游修改q0的False的默认值，frida -UF -l fulao2.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function hookq0()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.choose(&quot;com.ilulutv.fulao2.film.l&quot;,&#123;</span><br><span class="line">            onMatch:function(ins)&#123;</span><br><span class="line">                if(ins.e0.value)&#123;</span><br><span class="line"></span><br><span class="line">                    ins.q0.value &#x3D; true</span><br><span class="line">                    &#x2F;*</span><br><span class="line">                    if(ins.e0.value.toString().indexOf(&quot;宝宝睡&quot;)&gt;0)&#123;</span><br><span class="line">                        console.log(&quot;e0 value is :&quot;, ins.e0.value); </span><br><span class="line">                        &#x2F;&#x2F;ins.q0.value &#x3D; Java.use(&quot;java.lang.Boolean&quot;).\$new(&quot;true&quot;);</span><br><span class="line">                        &#x2F;&#x2F;ins.q0.value &#x3D; true</span><br><span class="line">                    &#125;</span><br><span class="line">                    *&#x2F;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&quot;search complete!&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(hookq0)</span><br></pre></td></tr></table></figure><blockquote><p>android hooking search classes Boolean   获取Boolean类全路径java.lang.Boolean</p></blockquote><p>重新调用plugin wallbreaker objectdump –fullname 0x2406 查看q0的值</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419215307695.png" alt="image-20210419215307695"></p><p>这样就实现了标清切换高清的功能，破解了vip的切换视频清晰度。这种基于本地代码判断容易破解，基于服务器判断就只能根据逻辑漏洞判断。可以通过setInterval实现不断在内存循环调用，将内存中所有实例的q0改成true。</p><h2 id="线路切换"><a href="#线路切换" class="headerlink" title="线路切换"></a>线路切换</h2><p>frida -UF -l hookEvent.js  attach模式</p><p>frida -U -f com.ilulutv.fulao2 -l hookEvent.js –no-pause spawn模式一开始把所有View的OnClick类hook上，不用从内存中枚举</p><p>点击线路切换按钮，触发了com.ilulutv.fulao2.film.l$s和com.ilulutv.fulao2.film.l$m类方法</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419220749728.png" alt="image-20210419220749728"></p><p>通过jadx查看这两个类方法</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419221125869.png" alt="image-20210419221125869"></p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419221042903.png" alt="image-20210419221042903"></p><p>由于com.ilulutv.fulao2.film.l$s和之前的com.ilulutv.fulao2.film.l$t类似，都是以q0判断，不过没有生效，现在关注com.ilulutv.fulao2.film.l$m中的OnClick里的i方法</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419221328804.png" alt="image-20210419221328804"></p><p>查看jadx的i方法</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419221417228.png" alt="image-20210419221417228"></p><p>进入g()方法</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419221924238.png" alt="image-20210419221924238"></p><p>通过hook androidx.fragment.app.Fragment.g方法，点击切换高清1的线路按钮，触发并返回了调用栈</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419222111488.png" alt="image-20210419222111488"></p><h1 id="登录抓包"><a href="#登录抓包" class="headerlink" title="登录抓包"></a>登录抓包</h1><p>frida -UF -l hookSocket.js -o login.txt  所有内容包括手机号全部加密，除了一些请求头，gzip协议头关键字是1f 8b  ，包括视频 图片都是加密的</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419231251449.png" alt="image-20210419231251449"></p><h1 id="图片下载"><a href="#图片下载" class="headerlink" title="图片下载"></a>图片下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes ImageView</span><br><span class="line">plugin wallbreaker objectsearch android.widget.ImageView</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419232424458.png" alt="image-20210419232424458"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker classsearch bitmap</span><br><span class="line">android hooking search classes bitmap   将所有相关类保存到file.txt中，sed -i -e &#39;s&#x2F;^&#x2F;android hooking watch class &#x2F;&#39; file.txt</span><br><span class="line">objection -g com.ilulutv.fulao2 explore -c file.txt 批量hook</span><br><span class="line">plugin wallbreaker objectsearch android.graphics.Bitmap</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419232701953.png" alt="image-20210419232701953"></p><p>Java.choose属于内存的搜刮，将现有内存的Bigmap对象实例保存，基于hook的话可以将未来持续增长的setInterval定时保存一份内存中的图片<code>setInterval(main,5*1000)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method android.graphics.BitmapFactory.decodeByteArray --dump-args --dump-backtrace --dump-return   通过批量hook拿到下拉触发的方法进行hook打印堆栈，glide是流式图片展示的框架</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419233511403.png" alt="image-20210419233511403"></p><p>通过jadx搜索com.ilulutv.fulao2.other.helper.glide.b.a，decodeByteArray应该是解密开始了，返回b2应该就是明文。</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419233832484.png" alt="image-20210419233832484"></p><p>开始hook Base64系统库，因为系统库不可能被混淆，下拉加载图片发现确实经过了android.util.Base64.encodeToString</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method android.util.Base64.encodeToString --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419234203880.png" alt="image-20210419234203880"></p><p>frida -UF -l fulao2.js -o /root/raw.txt  通过hook发现Base64.encodeToString得到的和SSLOutputStream得到的数据流一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">function hookImageByteCiphered()&#123; # 传输中的流</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;android.util.Base64&quot;).encodeToString.overload(&#39;[B&#39;, &#39;int&#39;).implementation &#x3D; function(bytearray,int)&#123;</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;IMAGE DATA:bytearray,int&#x3D;&gt;&quot;,ByteString.of(bytearray).hex(),int)</span><br><span class="line">            var result &#x3D; this.encodeToString(bytearray,int)</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function hook_SSLsocketandroid8()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;hook_SSLsocket&quot;)</span><br><span class="line">        </span><br><span class="line">        Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket\$SSLOutputStream&quot;).write.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function(bytearry,int1,int2)&#123;</span><br><span class="line">            var result &#x3D; this.write(bytearry,int1,int2);</span><br><span class="line">            console.log(&quot;HTTPS write result,bytearry,int1,int2&#x3D;&gt;&quot;,result,bytearry,int1,int2)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;HTTPS bytearray contents&#x3D;&gt;&quot;, ByteString.of(bytearry).hex())</span><br><span class="line">            &#x2F;&#x2F;console.log(jhexdump(bytearry,int1,int2));</span><br><span class="line">            console.log(jhexdump(bytearry));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket\$SSLInputStream&quot;).read.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function(bytearry,int1,int2)&#123;</span><br><span class="line">            var result &#x3D; this.read(bytearry,int1,int2);</span><br><span class="line">            console.log(&quot;HTTPS read result,bytearry,int1,int2&#x3D;&gt;&quot;,result,bytearry,int1,int2)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;HTTPS bytearray contents&#x3D;&gt;&quot;, ByteString.of(bytearry).hex())</span><br><span class="line">            &#x2F;&#x2F;console.log(jhexdump(bytearry,int1,int2));</span><br><span class="line">            &#x2F;&#x2F;console.log(jhexdump(bytearry));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明com.ilulutv.fulao2.other.i.b.a((ByteBuffer) obj)确实是https传输的流，也是加密前的流，ffd8ff 是png文件头，通过后面的代码实现解密。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes BitmapFactory</span><br><span class="line">android hooking watch class_method android.graphics.BitmapFactory.decodeByteArray --dump-args --dump-backtrace --dump-return  开始hook BitmapFactory.decodeByteArray(b2, 0, b2.length)</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210419235827791.png" alt="image-20210419235827791"></p><p>frida -UF -l fulao2.js        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function hookImage()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;android.graphics.BitmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;, &#39;android.graphics.BitmapFactory\$Options&#39;) .implementation &#x3D; function(data, offset, length, opts)&#123;</span><br><span class="line">            var result &#x3D; this.decodeByteArray(data, offset, length, opts);</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;data, offset, length, opts&#x3D;&gt;&quot;,data, offset, length, opts)</span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;IMAGE DATA:bytearray,int&#x3D;&gt;&quot;,ByteString.of(data).hex())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&#x2F;&quot;+guid()+&quot;.jpg&quot;</span><br><span class="line">            console.log(&quot;path&#x3D;&gt; &quot;,path)</span><br><span class="line">            var file &#x3D; Java.use(&quot;java.io.File&quot;).\$new(path)</span><br><span class="line">            var fos &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).\$new(file);</span><br><span class="line">            fos.write(data);</span><br><span class="line">            fos.close();</span><br><span class="line">            fos.close();</span><br><span class="line"></span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210420000856134.png" alt="image-20210420000856134"></p><h2 id="python调用保存"><a href="#python调用保存" class="headerlink" title="python调用保存"></a>python调用保存</h2><p>fulao2.js 将解密后的字节数组发送给python，二进制写入图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function hookImage()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;android.graphics.BitmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;, &#39;android.graphics.BitmapFactory\$Options&#39;) .implementation &#x3D; function(data, offset, length, opts)&#123;</span><br><span class="line">            var result &#x3D; this.decodeByteArray(data, offset, length, opts);</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            send(data)</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用fulao2.js发送到本机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import frida</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">import uuid</span><br><span class="line">import base64</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">def my_message_handler(message, payload):</span><br><span class="line">    print(message)</span><br><span class="line">    print(payload)</span><br><span class="line">    if message[&quot;type&quot;] &#x3D;&#x3D; &quot;send&quot;:</span><br><span class="line">        print(message[&quot;payload&quot;])</span><br><span class="line">        #image &#x3D; re.findall(&quot;(-?\d+)&quot;, message[&quot;payload&quot;])</span><br><span class="line">        image &#x3D; message[&quot;payload&quot;]</span><br><span class="line">        intArr &#x3D; []</span><br><span class="line">        for m in image:</span><br><span class="line">            ival &#x3D; int(m)</span><br><span class="line">            if ival &lt; 0:</span><br><span class="line">                ival +&#x3D; 256</span><br><span class="line">            intArr.append(ival)  </span><br><span class="line">        bs &#x3D; bytes(intArr)</span><br><span class="line">        fileName &#x3D; str(uuid.uuid1()) + &quot;.jpg&quot;</span><br><span class="line">        f &#x3D; open(fileName,&#39;wb&#39;)</span><br><span class="line">        f.write(bs)</span><br><span class="line">        f.close()</span><br><span class="line">        </span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line">target &#x3D; device.get_frontmost_application()</span><br><span class="line">session &#x3D; device.attach(target.pid)</span><br><span class="line"># 加载脚本</span><br><span class="line">with open(&quot;fulao2.js&quot;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line">script.on(&quot;message&quot; , my_message_handler) #调用错误处理</span><br><span class="line"></span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 脚本会持续运行等待输入</span><br><span class="line">input()</span><br></pre></td></tr></table></figure><p>不能够以战术的勤奋，掩盖战略的懒惰。</p><p>大多数人努力的程度还谈不上拼天分。</p><h1 id="脱机"><a href="#脱机" class="headerlink" title="脱机"></a>脱机</h1><h2 id="二进制写入图片"><a href="#二进制写入图片" class="headerlink" title="二进制写入图片"></a>二进制写入图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.ilulutv.fulao2 explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">android hooking watch class_method android.graphics.BitmapFactory.decodeByteArray --dump-args --dump-backtrace --dump-return  hook解密方法，下拉获取调用栈</span><br></pre></td></tr></table></figure><p>jadx搜索com.ilulutv.fulao2.other.helper.glide.b.a，抓包抓到的二进制数据流是encodeToString之前的b.a返回的数据，可以将协议中内容直接解密，不需要app参与，可以直接hook收发包</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210420102356732.png" alt="image-20210420102356732"></p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421195745321.png" alt="image-20210421195745321"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method com.ilulutv.fulao2.other.i.b.a --dump-args --dump-backtrace --dump-return  下拉加载图片，关注Hooking com.ilulutv.fulao2.other.i.b.a(java.nio.ByteBuffer)，可以看到其他协议的解密也通过这个方法</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210420194546464.png" alt="image-20210420194546464"></p><p>由于返回是[object Object]，看不出结果还是通过hook实现吧。尽量不要用hookImageByteCiphered，因为其他类可能也用到了Base64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function hookImageByteCiphered() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        Java.use(&quot;android.util.Base64&quot;).encodeToString.overload(&#39;[B&#39;, &#39;int&#39;).implementation &#x3D; function (bytearray, int) &#123;</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;IMAGE DATA:bytearray,int&#x3D;&gt;&quot;, ByteString.of(bytearray).hex(), int)</span><br><span class="line">            var result &#x3D; this.encodeToString(bytearray, int)</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过hook ByteBuffer获取com.ilulutv.fulao2.other.i.b.a 的入参实现hook com.ilulutv.fulao2.other.i.b.a((ByteBuffer) obj)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function hookByteBuffer() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        Java.use(&quot;com.ilulutv.fulao2.other.i.b&quot;).a.overload(&#39;java.nio.ByteBuffer&#39;).implementation &#x3D; function (bf) &#123;</span><br><span class="line">            var result &#x3D; this.a(bf)</span><br><span class="line">            &#x2F;&#x2F; [b</span><br><span class="line">            &#x2F;&#x2F;var gson &#x3D; Java.use(&#39;com.google.gson.Gson&#39;)</span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;result is &#x3D;&gt; &quot;,result);</span><br><span class="line">            send(result)</span><br><span class="line">            &#x2F;&#x2F;console.log( gson.$new().toJson(result))</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l fulao2.js  下拉显示图片，将打印返回的字节数组的结果，通过python实现解密后结果用于脱机处理。</p><p>通过hook  <code>byte[] b2 = com.ilulutv.fulao2.other.i.b.b(decode, Base64.decode(bytes2, 0), encodeToString);</code>中的com.ilulutv.fulao2.other.i.b.b</p><p>android hooking list class_methods com.ilulutv.fulao2.other.i.b  获取需要hook的方法</p><p>android hooking watch class_method net.idik.lib.cipher.so.CipherClient.decodeImgKey –dump-args –dump-backtrace –dump-return     获取hook的返回</p><p>android hooking search classes base64  获取android.util.Base64方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function hookdecodeimgkey() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var base64 &#x3D; Java.use(&quot;android.util.Base64&quot;)</span><br><span class="line">        Java.use(&quot;com.ilulutv.fulao2.other.i.b&quot;).b.overload(&#39;[B&#39;, &#39;[B&#39;, &#39;java.lang.String&#39;).implementation &#x3D; function (key, iv, image) &#123;</span><br><span class="line">            var result &#x3D; this.b(key, iv, image);</span><br><span class="line">            console.log(&quot;key&quot;, base64.encodeToString(key, 0));</span><br><span class="line">            console.log(&quot;iv&quot;, base64.encodeToString(iv, 0));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;*</span><br><span class="line">    key svOEKGb5WD0ezmHE4FXCVQ&#x3D;&#x3D;</span><br><span class="line">    iv 4B7eYzHTevzHvgVZfWVNIg&#x3D;&#x3D;</span><br><span class="line">    *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421202105675.png" alt="image-20210421202105675"><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421202624855.png" alt="image-20210421202624855"></p><p>frida -UF -l fulao2.js  下拉加载图片</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421202954986.png" alt="image-20210421202954986"></p><p>查看加密方式com.ilulutv.fulao2.other.i.b.b</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421203135967.png" alt="image-20210421203135967"></p><p>python实现解密  pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> pycrypto </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def IMGdecrypt(bytearray):</span><br><span class="line">    imgkey &#x3D; base64.decodebytes(</span><br><span class="line">        bytes(&quot;svOEKGb5WD0ezmHE4FXCVQ&#x3D;&#x3D;&quot;, encoding&#x3D;&#39;utf8&#39;))</span><br><span class="line">    </span><br><span class="line">    imgiv &#x3D; base64.decodebytes(</span><br><span class="line">        bytes(&quot;4B7eYzHTevzHvgVZfWVNIg&#x3D;&#x3D;&quot;, encoding&#x3D;&#39;utf8&#39;))</span><br><span class="line">    </span><br><span class="line">    cipher &#x3D; AES.new(imgkey, AES.MODE_CBC, imgiv)</span><br><span class="line">    # enStr +&#x3D; (len(enStr) % 4)*&quot;&#x3D;&quot;</span><br><span class="line">    # decryptByts &#x3D; base64.urlsafe_b64decode(enStr)</span><br><span class="line">    msg &#x3D; cipher.decrypt(bytearray)</span><br><span class="line"></span><br><span class="line">    def unpad(s): return s[0:-s[-1]]</span><br><span class="line">    return unpad(msg)</span><br><span class="line"></span><br><span class="line"># 拿到数据后Base64解密</span><br><span class="line">bs &#x3D; IMGdecrypt(bs)</span><br></pre></td></tr></table></figure><p>将比较耗性能的加解密计算放到电脑端处理，减少了手机端的资源损耗，实现脱机处理。抓包后直接使用以上算法解码。</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421205216372.png" alt="image-20210421205216372"></p><p>查看BitmapFactory.decodeByteArray返回的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes Bitmap</span><br><span class="line">android hooking list class_methods android.graphics.Bitmap</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function getObjClassName(obj) &#123;</span><br><span class="line">    if (!jclazz) &#123;</span><br><span class="line">        var jclazz &#x3D; Java.use(&quot;java.lang.Class&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!jobj) &#123;</span><br><span class="line">        var jobj &#x3D; Java.use(&quot;java.lang.Object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return jclazz.getName.call(jobj.getClass.call(obj));</span><br><span class="line">&#125;</span><br><span class="line">function hookImage()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;android.graphics.BitmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;, &#39;android.graphics.BitmapFactory$Options&#39;) .implementation &#x3D; function(data, offset, length, opts)&#123;</span><br><span class="line">            var result &#x3D; this.decodeByteArray(data, offset, length, opts);</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line"></span><br><span class="line">            var gson &#x3D; Java.use(&#39;com.google.gson.Gson&#39;)</span><br><span class="line"> console.log(&quot;result is &#x3D;&gt;&quot;,gson.$new().toJson(result)) &#x2F;&#x2F; 打印BitmapFactory对象属性，说明BitmapFactory.decodeByteArray返回对象</span><br><span class="line">            console.log(&quot;className is &#x3D;&gt;&quot;,getObjClassName(result))</span><br><span class="line">            console.log(&#39;Object.getOwnPropertyNames()&#x3D;&gt;&#39;,Object.getOwnPropertyNames(result.$className))</span><br><span class="line"></span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安卓保存图片"><a href="#安卓保存图片" class="headerlink" title="安卓保存图片"></a>安卓保存图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes CompressFormat</span><br><span class="line">plugin wallbreaker classdump --fullname android.graphics.Bitmap$CompressFormat</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421211014635.png" alt="image-20210421211014635"></p><p>frida -UF -l fulao2.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function hookImage()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;android.graphics.BitmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;, &#39;android.graphics.BitmapFactory$Options&#39;) .implementation &#x3D; function(data, offset, length, opts)&#123;</span><br><span class="line">            var result &#x3D; this.decodeByteArray(data, offset, length, opts);</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line"></span><br><span class="line">            var gson &#x3D; Java.use(&#39;com.google.gson.Gson&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&#x2F;&quot; + guid() + &quot;.jpg&quot;</span><br><span class="line">           console.log(&quot;path&#x3D;&gt; &quot;, path)</span><br><span class="line">           var file &#x3D; Java.use(&quot;java.io.File&quot;).$new(path)</span><br><span class="line">           var fos &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(file);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           result.compress(Java.use(&quot;android.graphics.Bitmap$CompressFormat&quot;).JPEG.value, 100, fos)</span><br><span class="line">           console.log(&quot;success!&quot;)</span><br><span class="line">           fos.flush();</span><br><span class="line">           fos.close();</span><br><span class="line"></span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421211443291.png" alt="image-20210421211443291"></p><h2 id="多线程保存"><a href="#多线程保存" class="headerlink" title="多线程保存"></a>多线程保存</h2><p>创建线程com.onejane.runnable，android hooking search classes onejane</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">function hookImage() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        var Runnable &#x3D; Java.use(&quot;java.lang.Runnable&quot;);</span><br><span class="line">        var saveImg &#x3D; Java.registerClass(&#123;</span><br><span class="line">            name: &quot;com.onejane.runnable&quot;,</span><br><span class="line">            implements: [Runnable],</span><br><span class="line">            fields: &#123;</span><br><span class="line">                bm: &quot;android.graphics.Bitmap&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                $init: [&#123;</span><br><span class="line">                    returnType: &quot;void&quot;,</span><br><span class="line">                    argumentTypes: [&quot;android.graphics.Bitmap&quot;],</span><br><span class="line">                    implementation: function (bitmap) &#123;</span><br><span class="line">                        this.bm.value &#x3D; bitmap;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;],</span><br><span class="line">                run: function () &#123;</span><br><span class="line"></span><br><span class="line">                    var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&#x2F;&quot; + guid() + &quot;.jpg&quot;</span><br><span class="line">                    console.log(&quot;path&#x3D;&gt; &quot;, path)</span><br><span class="line">                    var file &#x3D; Java.use(&quot;java.io.File&quot;).$new(path)</span><br><span class="line">                    var fos &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(file);</span><br><span class="line"></span><br><span class="line">                    this.bm.value.compress(Java.use(&quot;android.graphics.Bitmap$CompressFormat&quot;).JPEG.value, 100, fos)</span><br><span class="line">                    console.log(&quot;success!&quot;)</span><br><span class="line">                    fos.flush();</span><br><span class="line">                    fos.close();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Java.use(&quot;android.graphics.BitmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;, &#39;android.graphics.BitmapFactory$Options&#39;).implementation &#x3D; function (data, offset, length, opts) &#123;</span><br><span class="line">            var result &#x3D; this.decodeByteArray(data, offset, length, opts);</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;var gson &#x3D; Java.use(&#39;com.google.gson.Gson&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;send(gson.$new().toJson(data))</span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;data, offset, length, opts&#x3D;&gt;&quot;,data, offset, length, opts)</span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;IMAGE DATA:bytearray,int&#x3D;&gt;&quot;,ByteString.of(data).hex())</span><br><span class="line"></span><br><span class="line">            &#x2F;*</span><br><span class="line">            var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&#x2F;&quot;+guid()+&quot;.jpg&quot;</span><br><span class="line">            console.log(&quot;path&#x3D;&gt; &quot;,path)</span><br><span class="line">            var file &#x3D; Java.use(&quot;java.io.File&quot;).$new(path)</span><br><span class="line">            var fos &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(file);</span><br><span class="line">            fos.write(data);</span><br><span class="line">            fos.flush();</span><br><span class="line">            fos.close();</span><br><span class="line">            *&#x2F;</span><br><span class="line"></span><br><span class="line">            &#x2F;*var gson &#x3D; Java.use(&#39;com.google.gson.Gson&#39;)</span><br><span class="line">            console.log(&quot;result is &#x3D;&gt;&quot;,gson.$new().toJson(result)) # 打印BitmapFactory对象属性，说明BitmapFactory.decodeByteArray返回</span><br><span class="line">            console.log(&quot;className is &#x3D;&gt;&quot;,getObjClassName(result))</span><br><span class="line">            console.log(&#39;Object.getOwnPropertyNames()&#x3D;&gt;&#39;,Object.getOwnPropertyNames(result.$className))*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#x2F;*</span><br><span class="line">            var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&#x2F;&quot; + guid() + &quot;.jpg&quot;</span><br><span class="line">            console.log(&quot;path&#x3D;&gt; &quot;, path)</span><br><span class="line">            var file &#x3D; Java.use(&quot;java.io.File&quot;).$new(path)</span><br><span class="line">            var fos &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(file);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            result.compress(Java.use(&quot;android.graphics.Bitmap$CompressFormat&quot;).JPEG.value, 100, fos)</span><br><span class="line">            console.log(&quot;success!&quot;)</span><br><span class="line">            fos.flush();</span><br><span class="line">            fos.close();</span><br><span class="line">            *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var runnable &#x3D; saveImg.$new(result);</span><br><span class="line">            runnable.run()</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="so分析"><a href="#so分析" class="headerlink" title="so分析"></a>so分析</h1><p>CipherClient类中所有的返回都是CipherCore.get</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421213211293.png" alt="image-20210421213211293"></p><p>而CipherCore又加载了cipher-lib的so库</p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421213239499.png" alt="image-20210421213239499"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.ilulutv.fulao2 explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">memory list modules 搜索cipher-lib</span><br><span class="line">ls -alt &#x2F;data&#x2F;app&#x2F;com.ilulutv.fulao2-6tvMrrptF1h1A4NvQbV85A&#x3D;&#x3D;&#x2F;lib&#x2F;arm&#x2F;</span><br><span class="line">memory list exports libcipher-lib.so  查看该so中有哪些导出函数</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421213508844.png" alt="image-20210421213508844"></p><p>其中的getString对应了<code>private static native String getString(String str);</code></p><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421213823826.png" alt="image-20210421213823826"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp libcipher-lib.so &#x2F;sdcard&#x2F;Download&#x2F;  取出so后丢到IDA中分析</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421215733176.png" alt="image-20210421215733176"></p><p>通过jnitrace trace下所有native的执行流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs1428arm64 </span><br><span class="line">pyenv local 3.8.5</span><br><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple jnitrace</span><br><span class="line">jnitrace -m attach -l libcipher-lib.so com.ilulutv.fulao2  下拉加载图片 查看trace的调用栈,默认是spawn</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421220940662.png" alt="image-20210421220940662"></p><p>so层再次调用java层方法AESEncryptor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class net.idik.lib.cipher.so.encrypt.AESEncryptor 下拉图片加载，虽然到native进行转化，但是啥也没干，重新从java层调用加解密</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421221236514.png" alt="image-20210421221236514"></p><p>由于每次hook时app总是崩掉，objection在app启动时直接执行hook方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.ilulutv.fulao2 explore -P ~&#x2F;.objection&#x2F;plugins -s &quot;android hooking watch class_method net.idik.lib.cipher.so.encrypt.AESEncryptor.decrypt --dump-args --dump-backtrace --dump-return&quot;  堆栈说明确实从native层到了java层</span><br></pre></td></tr></table></figure><p><img src="/2021/04/15/%E8%BF%9D%E6%B3%95%E5%BA%94%E7%94%A8fulao2%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/image-20210421221625985.png" alt="image-20210421221625985"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之爱拍password</title>
      <link href="/2021/04/13/js%E9%80%86%E5%90%91%E4%B9%8B%E7%88%B1%E6%8B%8Dpassword/"/>
      <url>/2021/04/13/js%E9%80%86%E5%90%91%E4%B9%8B%E7%88%B1%E6%8B%8Dpassword/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p><a href="http://www.aipai.com/" target="_blank" rel="noopener">http://www.aipai.com/</a></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>登录url：</p><p>POST <a href="http://www.aipai.com/login.php" target="_blank" rel="noopener">http://www.aipai.com/login.php</a></p><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">action: loginNew</span><br><span class="line">user: 15806204095</span><br><span class="line">password: 202cb962ac59075b964b07152d234b70</span><br><span class="line">keeplogin: 1</span><br><span class="line">comouterTime: 1</span><br><span class="line">userNowTime: 1618281089</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>参数中只有password加密，搜索/login.php,出现在了sea.js,header.js?t=20210312,global.js的多个地方中</p><p><img src="/2021/04/13/js%E9%80%86%E5%90%91%E4%B9%8B%E7%88%B1%E6%8B%8Dpassword/image-20210413103749230.png" alt="image-20210413103749230"></p><p>逐步分析各个位置的/login.php,初步定位到两个地方的js处可能是加密password 的位置，因为这两处附近都有user,action等其他参数生成。</p><p><img src="/2021/04/13/js%E9%80%86%E5%90%91%E4%B9%8B%E7%88%B1%E6%8B%8Dpassword/image-20210413104218105.png" alt="image-20210413104218105"></p><p><img src="/2021/04/13/js%E9%80%86%E5%90%91%E4%B9%8B%E7%88%B1%E6%8B%8Dpassword/image-20210413104328159.png" alt="image-20210413104328159"></p><p>这两处同样的通过md5函数加密password所在id的内容，我们为这两处加上断点，重新登录发现停在了header.js?t=20210312</p><p>F10单步逐行跳过到<code>metadata=&#39;action=&#39;+ action +&#39;&amp;account=&#39;+ user +&#39;&amp;password=&#39;+ _ts.md5(pass) +&#39;&amp;keeplogin=&#39;+ keep +&#39;&amp;comouterTime=&#39;+ keep +&#39;&amp;userNowTime=&#39;+ userNowTime;</code></p><p>通过Watch面板拿到idPass，pass和_ts.md5(pass)的值</p><p><img src="/2021/04/13/js%E9%80%86%E5%90%91%E4%B9%8B%E7%88%B1%E6%8B%8Dpassword/image-20210413104814198.png" alt="image-20210413104814198"></p><p>点击进入md5方法，打上断点后，F9单步跳入后抠出md5算法js</p><p><img src="/2021/04/13/js%E9%80%86%E5%90%91%E4%B9%8B%E7%88%B1%E6%8B%8Dpassword/image-20210413105023016.png" alt="image-20210413105023016"></p><h1 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h1><p>通过python调用js实现password的逆向分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import execjs</span><br><span class="line"></span><br><span class="line">username &#x3D; &quot;15806204095&quot;</span><br><span class="line">password &#x3D; &quot;123&quot;</span><br><span class="line">with open(r&#39;aipai_password.js&#39;, encoding&#x3D;&#39;utf-8&#39;, mode&#x3D;&#39;r&#39;) as f:</span><br><span class="line">    JsData &#x3D; f.read()</span><br><span class="line">password &#x3D; execjs.compile(JsData).call(&#39;pwd&#39;, password)</span><br><span class="line">print(password)</span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">    &#39;action&#39;: &#39;loginNew&#39;,</span><br><span class="line">    &#39;user&#39;: username,</span><br><span class="line">    &#39;password&#39;: password,</span><br><span class="line">    &#39;keeplogin&#39;: &#39;1&#39;,</span><br><span class="line">    &#39;comouterTime&#39;: &#39;1&#39;,</span><br><span class="line">    &#39;userNowTime&#39;: &#39;1618281089&#39;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;www.aipai.com&#x2F;login.php&quot;, data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p><strong>完整源码请关注微信公众号：ReverseCode，回复：JS逆向</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之拉勾password</title>
      <link href="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E6%8B%89%E5%8B%BEpassword/"/>
      <url>/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E6%8B%89%E5%8B%BEpassword/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p><a href="https://www.lagou.com/" target="_blank" rel="noopener">https://www.lagou.com/</a></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>登录url:</p><p>GET <a href="https://passport.lagou.com/login/login.json" target="_blank" rel="noopener">https://passport.lagou.com/login/login.json</a></p><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jsoncallback: jQuery11130510950445912626_1618227551741</span><br><span class="line">isValidate: true</span><br><span class="line">username: 15806204095</span><br><span class="line">password: 990eb670f81e82f546cfaaae1587279a</span><br><span class="line">request_form_verifyCode: </span><br><span class="line">challenge: c7a96a290ed4d75ca2a8bf139172dbe0</span><br><span class="line">_: 1618227551745</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>参数中password和challenge看起来是加密参数，其实challenge是极验验证码请求的参数，本文针对password进行参数分析，暂时先不做讨论。</p><p><img src="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E6%8B%89%E5%8B%BEpassword/image-20210412195059257.png" alt="image-20210412195059257"></p><p>搜索login/login.json并格式化js后，发现改password通过md5实现加密，在Watch界面输入g查看g的内容</p><p><img src="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E6%8B%89%E5%8B%BEpassword/image-20210412195442176.png" alt="image-20210412195442176"></p><p>放行程序后，在<code>g.isValidate &amp;&amp; (g.password = md5(g.password)</code>处重新打上断点并登录</p><p><img src="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E6%8B%89%E5%8B%BEpassword/image-20210412195745639.png" alt="image-20210412195745639"></p><p>那么分析得出password=md5(“veenike”+md5(passwrod)+”veenike”)</p><p><img src="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E6%8B%89%E5%8B%BEpassword/image-20210412200010128.png" alt="image-20210412200010128"></p><h1 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from hashlib import md5</span><br><span class="line"></span><br><span class="line">username &#x3D; &#39;15806204095&#39;</span><br><span class="line">pwd &#x3D; &#39;123&#39;</span><br><span class="line">md5_pwd &#x3D; md5((&quot;veenike&quot; + md5(pwd.encode(&#39;utf8&#39;)).hexdigest() + &quot;veenike&quot;).encode(&quot;utf8&quot;)).hexdigest()</span><br><span class="line">print(md5_pwd)</span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;passport.lagou.com&#x2F;login&#x2F;login.json?jsoncallback&#x3D;jQuery111306946515748870927_1618229101639&amp;isValidate&#x3D;true&amp;username&#x3D;&#39;+username+&#39;&amp;password&#x3D;+&#39;+md5_pwd+&#39;+&amp;request_form_verifyCode&#x3D;&amp;challenge&#x3D;c3bebcad0648898aa58cb3f4dbf2f820&amp;_&#x3D;1618229101642&#39;</span><br><span class="line">r &#x3D;requests.get(url)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p><strong>完整源码请关注微信公众号：ReverseCode，回复：JS逆向</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之中关村在线pwd</title>
      <link href="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%AD%E5%85%B3%E6%9D%91%E5%9C%A8%E7%BA%BFpwd/"/>
      <url>/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%AD%E5%85%B3%E6%9D%91%E5%9C%A8%E7%BA%BFpwd/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p><a href="https://www.zol.com.cn/" target="_blank" rel="noopener">https://www.zol.com.cn/</a></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>本登录页面既然是框架，找到php页面，<a href="https://service.zol.com.cn/user/siteLogin.php?type=small&amp;callback=userLoginCallback&amp;backurl=https://www.zol.com.cn/" target="_blank" rel="noopener">https://service.zol.com.cn/user/siteLogin.php?type=small&amp;callback=userLoginCallback&amp;backurl=https://www.zol.com.cn/</a></p><p><img src="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%AD%E5%85%B3%E6%9D%91%E5%9C%A8%E7%BA%BFpwd/image-20210412112404348.png" alt="image-20210412112404348"></p><p>直接访问该php网址，避免其他请求干扰分析</p><p><img src="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%AD%E5%85%B3%E6%9D%91%E5%9C%A8%E7%BA%BFpwd/image-20210412112527950.png" alt="image-20210412112527950"></p><p>登录url:</p><p>POST <a href="https://service.zol.com.cn/user/ajax/siteLogin/login.php" target="_blank" rel="noopener">https://service.zol.com.cn/user/ajax/siteLogin/login.php</a></p><p>请求头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">:authority: service.zol.com.cn</span><br><span class="line">:method: POST</span><br><span class="line">:path: &#x2F;user&#x2F;ajax&#x2F;siteLogin&#x2F;login.php</span><br><span class="line">:scheme: https</span><br><span class="line">accept: application&#x2F;json, text&#x2F;javascript, *&#x2F;*; q&#x3D;0.01</span><br><span class="line">accept-encoding: gzip, deflate, br</span><br><span class="line">accept-language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">content-length: 138</span><br><span class="line">content-type: application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8</span><br><span class="line">cookie: ip_ck&#x3D;5cKC7&#x2F;vxj7QuMjUzODE2LjE2MTgxOTc3OTM%3D; lv&#x3D;1618197793; vn&#x3D;1; Hm_lvt_ae5edc2bc4fc71370807f6187f0a2dd0&#x3D;1618197793; questionnaire_pv&#x3D;1618185602; Hm_lpvt_ae5edc2bc4fc71370807f6187f0a2dd0&#x3D;1618197883</span><br><span class="line">origin: https:&#x2F;&#x2F;service.zol.com.cn</span><br><span class="line">referer: https:&#x2F;&#x2F;service.zol.com.cn&#x2F;user&#x2F;siteLogin.php?type&#x3D;small&amp;callback&#x3D;userLoginCallback&amp;backurl&#x3D;https:&#x2F;&#x2F;www.zol.com.cn&#x2F;</span><br><span class="line">sec-fetch-mode: cors</span><br><span class="line">sec-fetch-site: same-origin</span><br><span class="line">user-agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;78.0.3904.70 Safari&#x2F;537.36</span><br><span class="line">x-requested-with: XMLHttpRequest</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">userid: 15806204096</span><br><span class="line">pwd: 74ce2ba17b2c218246e778fb5e895c95</span><br><span class="line">isAuto: 1</span><br><span class="line">backurl: http:&#x2F;&#x2F;www.zol.com.cn&#x2F;</span><br><span class="line">tmallBtn: 0</span><br><span class="line">activeBtn: 0</span><br><span class="line">headPicid: 0</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>全局搜索siteLogin/login.php</p><p><img src="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%AD%E5%85%B3%E6%9D%91%E5%9C%A8%E7%BA%BFpwd/image-20210412112828654.png" alt="image-20210412112828654"></p><p>中关村非常的耿直，加密使用md5,<code>var md5Password = CryptoJS.MD5(password+&quot;zol&quot;) + &#39;&#39;;</code>输入123提交的pwd为74ce2ba17b2c218246e778fb5e895c95，通过md5比对</p><p><img src="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%AD%E5%85%B3%E6%9D%91%E5%9C%A8%E7%BA%BFpwd/image-20210412113012113.png" alt="image-20210412113012113"></p><h1 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h1><p>拷贝Form Data到请求头加引号.py中自动生成dict格式</p><p><img src="/2021/04/12/js%E9%80%86%E5%90%91%E4%B9%8B%E4%B8%AD%E5%85%B3%E6%9D%91%E5%9C%A8%E7%BA%BFpwd/image-20210412113757176.png" alt="image-20210412113757176"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from hashlib import md5</span><br><span class="line"></span><br><span class="line">username &#x3D; &#39;15806204095&#39;</span><br><span class="line">pwd &#x3D; &#39;123&#39;</span><br><span class="line">md5_pwd &#x3D; md5((pwd + &#39;zol&#39;).encode(&#39;utf8&#39;)).hexdigest()</span><br><span class="line">print(md5_pwd)</span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;service.zol.com.cn&#x2F;user&#x2F;ajax&#x2F;siteLogin&#x2F;login.php&#39;</span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">    &#39;userid&#39;: username,</span><br><span class="line">    &#39;pwd&#39;: md5_pwd,</span><br><span class="line">    &#39;isAuto&#39;: &#39;1&#39;,</span><br><span class="line">    &#39;backurl&#39;: &#39;http:&#x2F;&#x2F;www.zol.com.cn&#x2F;&#39;,</span><br><span class="line">    &#39;tmallBtn&#39;: &#39;0&#39;,</span><br><span class="line">    &#39;activeBtn&#39;: &#39;0&#39;,</span><br><span class="line">    &#39;headPicid&#39;: &#39;0&#39;,</span><br><span class="line">&#125;</span><br><span class="line">r &#x3D;requests.post(url,data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p><strong>完整源码请关注微信公众号：ReverseCode，回复：JS逆向</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之融金所sign</title>
      <link href="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/"/>
      <url>/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p><a href="https://m.rjs.com/member/user.html#1" target="_blank" rel="noopener">https://m.rjs.com/member/user.html#1</a></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>登录url:</p><p>POST <a href="https://m.rjs.com/japi/account/login.json" target="_blank" rel="noopener">https://m.rjs.com/japi/account/login.json</a></p><p>请求头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">:authority: m.rjs.com</span><br><span class="line">:method: POST</span><br><span class="line">:path: &#x2F;japi&#x2F;account&#x2F;login.json</span><br><span class="line">:scheme: https</span><br><span class="line">accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">accept-encoding: gzip, deflate, br</span><br><span class="line">accept-language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">content-length: 172</span><br><span class="line">content-type: application&#x2F;json</span><br><span class="line">cookie: riskTipTimes1&#x3D;1; Hm_lvt_7ff1e43d61e6b35b46f6bb33c3aba9bb&#x3D;1618099071; Hm_lpvt_7ff1e43d61e6b35b46f6bb33c3aba9bb&#x3D;1618099071</span><br><span class="line">datatype: json</span><br><span class="line">origin: https:&#x2F;&#x2F;m.rjs.com</span><br><span class="line">referer: https:&#x2F;&#x2F;m.rjs.com&#x2F;member&#x2F;user.html</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v&#x3D;&quot;89&quot;, &quot;Chromium&quot;;v&#x3D;&quot;89&quot;, &quot;;Not\&quot;A\\Brand&quot;;v&#x3D;&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?1</span><br><span class="line">sec-fetch-dest: empty</span><br><span class="line">sec-fetch-mode: cors</span><br><span class="line">sec-fetch-site: same-origin</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;50.0.2661.87 Safari&#x2F;537.36</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;platform&quot;:&quot;wap&quot;,&quot;session_token&quot;:&quot;&quot;,&quot;session_id&quot;:&quot;&quot;,&quot;data&quot;:&#123;&quot;userName&quot;:&quot;15806204085&quot;,&quot;password&quot;:&quot;123&quot;&#125;,&quot;sign&quot;:&quot;b6a20a0b1c82b87d65b78b2943bb3fbc&quot;,&quot;timestamp&quot;:1618099099626&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>搜索japi/account/login.json 无果</p><p>搜索account/login.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">loginAction: function() &#123;</span><br><span class="line">    if (this.checkLoginKey() &amp;&amp; this.checkLoginPwd()) &#123;</span><br><span class="line">        var e &#x3D; this;</span><br><span class="line">        c.Common.fajax(&#123;</span><br><span class="line">            url: &quot;account&#x2F;login.json&quot;,</span><br><span class="line">            easyOriginData: &#123;</span><br><span class="line">                userName: e.loginKey,</span><br><span class="line">                password: e.loginPwd</span><br><span class="line">            &#125;,</span><br><span class="line">            success: function(t) &#123;</span><br><span class="line">                1 &#x3D;&#x3D; t.status ? (c.Common.cookie.set(&quot;session_token_dp&quot;, t.data.sessionToken, &quot;&#x2F;&quot;, &quot;&#x2F;&quot;, 168),</span><br><span class="line">                c.Common.cookie.set(&quot;platform&quot;, &quot;wap&quot;, &quot;&#x2F;&quot;, &quot;&#x2F;&quot;, 168),</span><br><span class="line">                c.Common.localStore.set(&quot;session_token_dp&quot;, t.data.sessionToken),</span><br><span class="line">                c.Common.localStore.set(&quot;uid_dp&quot;, t.data.uid),</span><br><span class="line">                c.Common.cookie.set(&quot;secretKey&quot;, t.data.secretKey, &quot;&#x2F;&quot;, &quot;&#x2F;&quot;, 168),</span><br><span class="line">                c.Common.alert(&quot;simpleSuccess&quot;, &quot;登录成功&quot;, 1, e.goHref, &quot;&#x2F;member-undp&#x2F;index.html&quot;)) : e.alert(t.message)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>打上断点调试，此时并没有出现sign,说明sign应该是在fajax中生成，进入fajax中，逐步调试，<code>t[&quot;sign&quot;] = i(f + &quot;&amp;&quot; + i(o.genSignData(t.data)) + &quot;&amp;&quot; + d),</code>这一步出现了sign进行填值，f为<code>/account/login.json</code></p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411184621104.png" alt="image-20210411184621104"></p><p>d是””空字符串</p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411184650658.png" alt="image-20210411184650658"></p><p>接下来分析<code>i(o.genSignData(t.data))</code>中的<code>o.genSignData(t.data)</code>,其中t.data为账户密码的对象</p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411184839858.png" alt="image-20210411184839858"></p><h2 id="genSignData"><a href="#genSignData" class="headerlink" title="genSignData"></a>genSignData</h2><p>i(o.genSignData(t.data))分析，先进入o.genSignData函数，拆分出来js如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var genSignData &#x3D; function(e) &#123;</span><br><span class="line">    var t &#x3D; &quot;&quot;</span><br><span class="line">      , n &#x3D; [];</span><br><span class="line">    for (var r in e)</span><br><span class="line">        n.push(r);</span><br><span class="line">    n &#x3D; n.sort();</span><br><span class="line">    for (var i &#x3D; 0; i &lt; n.length; i++) &#123;</span><br><span class="line">        var o &#x3D; n[i]</span><br><span class="line">          , s &#x3D; e[o]</span><br><span class="line">          , l &#x3D; !1;</span><br><span class="line">        if (&quot;object&quot; &#x3D;&#x3D; (&quot;undefined&quot; &#x3D;&#x3D; typeof s ? &quot;undefined&quot; : (0,</span><br><span class="line">        a.default)(s))) &#123;</span><br><span class="line">            var c &#x3D; &quot;&#123;&quot;;</span><br><span class="line">            for (var u in s)</span><br><span class="line">                c +&#x3D; u + &quot;&#x3D;&quot; + s[u] + &quot;, &quot;,</span><br><span class="line">                l &#x3D; !0;</span><br><span class="line">            l &amp;&amp; (s &#x3D; c.substring(0, c.length - 2) + &quot;&#125;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        &quot;sign&quot; !&#x3D; o &amp;&amp; null !&#x3D;&#x3D; s &amp;&amp; void 0 !&#x3D;&#x3D; s &amp;&amp; &quot;&quot; !&#x3D;&#x3D; s &amp;&amp; (&quot;object&quot; !&#x3D; (&quot;undefined&quot; &#x3D;&#x3D; typeof s ? &quot;undefined&quot; : (0,</span><br><span class="line">        a.default)(s)) || l) &amp;&amp; (t +&#x3D; (0 &#x3D;&#x3D; i ? &quot;&quot; : &quot;&amp;&quot;) + o + &quot;&#x3D;&quot; + s)</span><br><span class="line">    &#125;</span><br><span class="line">    return null !&#x3D; t &amp;&amp; &quot;&quot; !&#x3D; t &amp;&amp; &quot;&amp;&quot; &#x3D;&#x3D; t.substr(0, 1) &amp;&amp; (t &#x3D; t.substr(1, t.length)),</span><br><span class="line">    t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单独运行时报错<code>Uncaught ReferenceError: a is not defined</code>,打印a.default</p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411185111684.png" alt="image-20210411185111684"></p><p>进入a.default,该三元运算所得结果即为控制台打印结果，必然前面的是完全匹配的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> t.default &#x3D; &quot;function&quot; &#x3D;&#x3D; typeof s.default &amp;&amp; &quot;symbol&quot; &#x3D;&#x3D;&#x3D; l(a.default) ? function(e) &#123;</span><br><span class="line">    return &quot;undefined&quot; &#x3D;&#x3D; typeof e ? &quot;undefined&quot; : l(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该l函数在上面也有定义如下</p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411185437746.png" alt="image-20210411185437746"></p><p>那么我们定义函数k即a.default如下,替换genSignData完成函数解密<code>password=123&amp;userName=15806204095</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var k &#x3D; function(e)&#123;</span><br><span class="line">return&quot;undefined&quot;&#x3D;&#x3D;typeof e?&quot;undefined&quot;: typeof e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="i"><a href="#i" class="headerlink" title="i"></a>i</h2><p>i(o.genSignData(t.data))分析，接下来就是i函数的分析，进入i函数</p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411124238222.png" alt="image-20210411124238222"></p><p>第一次调用i函数时，先调用o函数进行加密，再调用wordsToBytes转成字节，返回bytesToHex生成16进制字符串，整体逻辑理清后进入o函数。</p><h3 id="o"><a href="#o" class="headerlink" title="o"></a>o</h3><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411185814560.png" alt="image-20210411185814560"></p><p>该函数中引用了n(694),n(247).utf8,n(974),n(247).bin,通过debug可知以上都生成了加密函数</p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411185946412.png" alt="image-20210411185946412"></p><p>这些加密函数搜索分别发现出现在了694:function，247:function等等，可以断定，这些函数其实就是作为变量在o函数中调用</p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411190204917.png" alt="image-20210411190204917"></p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411190338395.png" alt="image-20210411190338395"></p><p>扣出694,247,974的代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">var liu94 &#x3D; function (e, t) &#123;</span><br><span class="line">        var t &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;</span><br><span class="line">            , n &#x3D; &#123;</span><br><span class="line">                rotl: function (e, t) &#123;</span><br><span class="line">                    return e &lt;&lt; t | e &gt;&gt;&gt; 32 - t</span><br><span class="line">                &#125;,</span><br><span class="line">                rotr: function (e, t) &#123;</span><br><span class="line">                    return e &lt;&lt; 32 - t | e &gt;&gt;&gt; t</span><br><span class="line">                &#125;,</span><br><span class="line">                endian: function (e) &#123;</span><br><span class="line">                    if (e.constructor &#x3D;&#x3D; Number)</span><br><span class="line">                        return 16711935 &amp; n.rotl(e, 8) | 4278255360 &amp; n.rotl(e, 24);</span><br><span class="line">                    for (var t &#x3D; 0; t &lt; e.length; t++)</span><br><span class="line">                        e[t] &#x3D; n.endian(e[t]);</span><br><span class="line">                    return e</span><br><span class="line">                &#125;,</span><br><span class="line">                randomBytes: function (e) &#123;</span><br><span class="line">                    for (var t &#x3D; []; e &gt; 0; e--)</span><br><span class="line">                        t.push(Math.floor(256 * Math.random()));</span><br><span class="line">                    return t</span><br><span class="line">                &#125;,</span><br><span class="line">                bytesToWords: function (e) &#123;</span><br><span class="line">                    for (var t &#x3D; [], n &#x3D; 0, r &#x3D; 0; n &lt; e.length; n++,</span><br><span class="line">                        r +&#x3D; 8)</span><br><span class="line">                        t[r &gt;&gt;&gt; 5] |&#x3D; e[n] &lt;&lt; 24 - r % 32;</span><br><span class="line">                    return t</span><br><span class="line">                &#125;,</span><br><span class="line">                wordsToBytes: function (e) &#123;</span><br><span class="line">                    for (var t &#x3D; [], n &#x3D; 0; n &lt; 32 * e.length; n +&#x3D; 8)</span><br><span class="line">                        t.push(e[n &gt;&gt;&gt; 5] &gt;&gt;&gt; 24 - n % 32 &amp; 255);</span><br><span class="line">                    return t</span><br><span class="line">                &#125;,</span><br><span class="line">                bytesToHex: function (e) &#123;</span><br><span class="line">                    for (var t &#x3D; [], n &#x3D; 0; n &lt; e.length; n++)</span><br><span class="line">                        t.push((e[n] &gt;&gt;&gt; 4).toString(16)),</span><br><span class="line">                            t.push((15 &amp; e[n]).toString(16));</span><br><span class="line">                    return t.join(&quot;&quot;)</span><br><span class="line">                &#125;,</span><br><span class="line">                hexToBytes: function (e) &#123;</span><br><span class="line">                    for (var t &#x3D; [], n &#x3D; 0; n &lt; e.length; n +&#x3D; 2)</span><br><span class="line">                        t.push(parseInt(e.substr(n, 2), 16));</span><br><span class="line">                    return t</span><br><span class="line">                &#125;,</span><br><span class="line">                bytesToBase64: function (e) &#123;</span><br><span class="line">                    for (var n &#x3D; [], r &#x3D; 0; r &lt; e.length; r +&#x3D; 3)</span><br><span class="line">                        for (var i &#x3D; e[r] &lt;&lt; 16 | e[r + 1] &lt;&lt; 8 | e[r + 2], a &#x3D; 0; a &lt; 4; a++)</span><br><span class="line">                            8 * r + 6 * a &lt;&#x3D; 8 * e.length ? n.push(t.charAt(i &gt;&gt;&gt; 6 * (3 - a) &amp; 63)) : n.push(&quot;&#x3D;&quot;);</span><br><span class="line">                    return n.join(&quot;&quot;)</span><br><span class="line">                &#125;,</span><br><span class="line">                base64ToBytes: function (e) &#123;</span><br><span class="line">                    e &#x3D; e.replace(&#x2F;[^A-Z0-9+\&#x2F;]&#x2F;gi, &quot;&quot;);</span><br><span class="line">                    for (var n &#x3D; [], r &#x3D; 0, i &#x3D; 0; r &lt; e.length; i &#x3D; ++r % 4)</span><br><span class="line">                        0 !&#x3D; i &amp;&amp; n.push((t.indexOf(e.charAt(r - 1)) &amp; Math.pow(2, -2 * i + 8) - 1) &lt;&lt; 2 * i | t.indexOf(e.charAt(r)) &gt;&gt;&gt; 6 - 2 * i);</span><br><span class="line">                    return n</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        return n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var er47 &#x3D; &#123;</span><br><span class="line">    utf8: &#123;</span><br><span class="line">        stringToBytes: function (e) &#123;</span><br><span class="line">            return er47.bin.stringToBytes(unescape(encodeURIComponent(e)))</span><br><span class="line">        &#125;,</span><br><span class="line">        bytesToString: function (e) &#123;</span><br><span class="line">            return decodeURIComponent(escape(er47.bin.bytesToString(e)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    bin: &#123;</span><br><span class="line">        stringToBytes: function (e) &#123;</span><br><span class="line">            for (var t &#x3D; [], n &#x3D; 0; n &lt; e.length; n++)</span><br><span class="line">                t.push(255 &amp; e.charCodeAt(n));</span><br><span class="line">            return t</span><br><span class="line">        &#125;,</span><br><span class="line">        bytesToString: function (e) &#123;</span><br><span class="line">            for (var t &#x3D; [], n &#x3D; 0; n &lt; e.length; n++)</span><br><span class="line">                t.push(String.fromCharCode(e[n]));</span><br><span class="line">            return t.join(&quot;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var jiu74 &#x3D; function (e, t) &#123;</span><br><span class="line">    function n(e) &#123;</span><br><span class="line">        return !!e.constructor &amp;&amp; &quot;function&quot; &#x3D;&#x3D; typeof e.constructor.isBuffer &amp;&amp; e.constructor.isBuffer(e)</span><br><span class="line">    &#125;</span><br><span class="line">    function r(e) &#123;</span><br><span class="line">        return &quot;function&quot; &#x3D;&#x3D; typeof e.readFloatLE &amp;&amp; &quot;function&quot; &#x3D;&#x3D; typeof e.slice &amp;&amp; n(e.slice(0, 0))</span><br><span class="line">    &#125;</span><br><span class="line">    return function (e) &#123;</span><br><span class="line">        return null !&#x3D; e &amp;&amp; (n(e) || r(e) || !!e._isBuffer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在o函数中改写t,r,i,a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var t &#x3D; liu94()</span><br><span class="line">    , r &#x3D; er47.utf8</span><br><span class="line">    , i &#x3D; jiu74()</span><br><span class="line">    , a &#x3D; er47.bin</span><br></pre></td></tr></table></figure><p>最终只要将o函数中exports的函数return出来即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">res &#x3D; function (e, n) &#123;</span><br><span class="line">console.log(e)</span><br><span class="line">if (void 0 &#x3D;&#x3D;&#x3D; e || null &#x3D;&#x3D;&#x3D; e)</span><br><span class="line">        throw new Error(&quot;Illegal argument &quot; + e);</span><br><span class="line">    var r &#x3D; t.wordsToBytes(o(e, n));</span><br><span class="line">    console.log(r)</span><br><span class="line">    return n &amp;&amp; n.asBytes ? r : n &amp;&amp; n.asString ? a.bytesToString(r) : t.bytesToHex(r)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;res(&quot;password&#x3D;123&amp;userName&#x3D;158062204095&quot;, undefined);</span><br><span class="line">&#x2F;&#x2F;console.log(&#39;--------&gt;&#39;,res(origin, undefined))</span><br><span class="line">return res;</span><br></pre></td></tr></table></figure><p>由于o(e,n)中的即为o.genSignData生成的账密参数<code>password=123&amp;userName=15806204095</code>，n为undefined，那么我们就可以直接调用该方法返回真正的sign。</p><p><code>console.log(encrypt()(&quot;/account/login.json&quot;+&quot;&amp;&quot;+encrypt()(genSignData(UP))+&quot;&amp;&quot;+&quot;&quot;));</code></p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411191326027.png" alt="image-20210411191326027"></p><p>查看抓包后的结果如下</p><p><img src="/2021/04/11/js%E9%80%86%E5%90%91%E4%B9%8B%E8%9E%8D%E9%87%91%E6%89%80sign/image-20210411191409718.png" alt="image-20210411191409718"></p><h1 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import execjs</span><br><span class="line"></span><br><span class="line">username &#x3D; &quot;15806204095&quot;</span><br><span class="line">psssword &#x3D; &quot;123&quot;</span><br><span class="line">with open(r&#39;rjs_sign.js&#39;, encoding&#x3D;&#39;utf-8&#39;, mode&#x3D;&#39;r&#39;) as f:</span><br><span class="line">    JsData &#x3D; f.read()</span><br><span class="line">sign &#x3D; execjs.compile(JsData).call(&#39;request&#39;,username,psssword)</span><br><span class="line">data &#x3D; json.dumps(&#123;&quot;platform&quot;:&quot;wap&quot;,&quot;session_token&quot;:&quot;&quot;,&quot;session_id&quot;:&quot;&quot;,&quot;data&quot;:&#123;&quot;userName&quot;:username,&quot;password&quot;:psssword&#125;,&quot;sign&quot;:sign,&quot;timestamp&quot;:1618153079455&#125;)</span><br><span class="line">r &#x3D;requests.post(&quot;https:&#x2F;&#x2F;m.rjs.com&#x2F;japi&#x2F;account&#x2F;login.json&quot;,data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p><strong>完整源码请关注微信公众号：ReverseCode，回复：JS逆向</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hook抓包trace定位实战</title>
      <link href="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/"/>
      <url>/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="移动TV"><a href="#移动TV" class="headerlink" title="移动TV"></a>移动TV</h1><p>npm install –save @types/frida-gum  配置vscode的frida自动代码提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb install movetv.apk</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;FRIDA-DEXDump.git</span><br><span class="line">python main.py  打开app操作一会积分查看视频开始脱壳</span><br><span class="line">cd com.cz.babySister</span><br><span class="line">grep -ril &quot;LoginActivity&quot; *  查看该类在那个dex中</span><br><span class="line">frida -UF -l hookEvent.js  点击登录时，触发打印LoginActivity完整路径</span><br></pre></td></tr></table></figure><p>通过jadx-gui 查看<code>com.cz.babySister.activity.LoginActivity</code>的onClick方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.cz.babySister explore</span><br><span class="line">android hooking search classes user   查找和用户相关的类</span><br><span class="line">android hooking search classes person</span><br><span class="line">android hooking watch class com.cz.babySister.javabean.UserInfo  查看该类在jadx中哪些地方调用了</span><br><span class="line">plugin load &#x2F;root&#x2F;.objection&#x2F;plugins&#x2F;Wallbreaker</span><br><span class="line">plugin wallbreaker objectsearch com.cz.babySister.javabean.UserInfo  内存搜索UserInfo</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x112swa   查看内存中UserInfo信息</span><br><span class="line">android hooking list class_methods com.cz.babySister.javabean.UserInfo</span><br></pre></td></tr></table></figure><p>frida -U -f com.cz.babySister -l jifen.js --no-pause  有壳不能spawn,从登录开始hook</p><p>frida -UF -l jifen.js    服务器检测校验了无法查看视频，客户端修改无效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function hook_jifen()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var javaString &#x3D; Java.use(&quot;java.lang.String&quot;)</span><br><span class="line">        Java.use(&quot;com.cz.babySister.javabean.UserInfo&quot;).setJifen.implementation &#x3D; function(str) &#123;</span><br><span class="line">            var result &#x3D; this.setJifen(javaString.$new(&quot;1000&quot;))</span><br><span class="line">            console.log(&quot;setJifen is :&quot; ,str)</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        Java.use(&quot;com.cz.babySister.javabean.UserInfo&quot;).setJifen.implementation &#x3D; function() &#123;</span><br><span class="line">            var result &#x3D; this.getJifen()</span><br><span class="line">            console.log(&quot;getJifen is :&quot;,result)</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">            return javaString.$new(&quot;1000&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    hook_jifen()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p>通过<code>console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</code>打印调用栈，找到最下面的<code>com.cz.babySister.alipay.k.run</code>，查看com.cz.babySister.alipay下的所有类，jadx搜索支付失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function hook_jifen2()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var javaString &#x3D; Java.use(&quot;java.lang.String&quot;)</span><br><span class="line">        Java.use(&quot;com.cz.babySister.alipay.o&quot;).b.implementation&#x3D;function()&#123;</span><br><span class="line">            console.log(&quot;success&quot;)</span><br><span class="line">            return javaString.$new(&quot;9000&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    hook_jifen2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210622084651020.png" alt="image-20210622084651020"></p><p>依旧失败，可能做了支付订单校验。</p><p>调用栈中害打印了<code>com.cz.babySister.utils.ParseJson.parseRegisterName</code>,查看com.cz.babySister.utils.ParseJson类，所有内容都是从该类中出现，jadx查看该类的调用处，出现queryJifen</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210622085318821.png" alt="image-20210622085318821"></p><p>进入a.a方法，a2就是json，所有查询从a.a中返回json，通过objection对该类进行hook，登录时查看调用的方法基本都是a.a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.cz.babySister.c.a --dump-args --dump-return  </span><br><span class="line">android hooking watch_method class com.cz.babySister.c.a.a --dump-args --dump-return</span><br></pre></td></tr></table></figure><p>每次看成人台时都会queryJifen判断积分是否不足，不过Return Value是服务器判断了积分是否充足，充足才返回可以看的地址，没有逻辑漏洞了。</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210622090559420.png" alt="image-20210622090559420"></p><p>搜索memi1的来源 </p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210622090808009.png" alt="image-20210622090808009"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method android.content.Context.getString --dump-args --dump-return</span><br><span class="line">android hooking watch class_method android.content.Context.getText --dump-args --dump-return</span><br></pre></td></tr></table></figure><p>context在app启动后立即生成且销毁，因为有壳的原因，无法hook，只有一次捕捉机会</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class android.provider.Settings$Secure --dump-args --dump-return  每次context实时获取的</span><br><span class="line">android hooking watch class_method android.provider.Settings$Secure.getString  --dump-args --dump-return --dump-backtrace</span><br><span class="line">plugin wallbreaker objectsearch android.app.ContextImpl$ApplicationContentResolver</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x2502</span><br></pre></td></tr></table></figure><p><a href="https://bbs.pediy.com/thread-258776.htm" target="_blank" rel="noopener">记一次frida实战——对某视频APP的脱壳、hook破解、模拟抓包、协议分析一条龙服务</a></p><h1 id="fulao2"><a href="#fulao2" class="headerlink" title="fulao2"></a>fulao2</h1><p>adb install -r fulao2.apk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;fs128arm64</span><br><span class="line">frida -UF -l hookSocket.js -o &#x2F;root&#x2F;Desktop&#x2F;img.txt  启动app后开始抓包，GET到的地址结合域名发现图片是被加密的</span><br><span class="line">objection -g com.ilulutv.fulao2 explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">android hooking search classes imageView</span><br><span class="line">plugin wallbreaker objectsearch android.widget.ImageView  查看内存中的对象</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x20212  打印内存对象属性内容</span><br><span class="line">android hooking search classes Bitmap  把所有Bitmap相关的类拷贝到文件bitmap.txt中，前面加上android hooking watch class</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x2045   查看内存Bitmap属性，即图片属性</span><br><span class="line">objection -g com.ilulutv.fulao2 explore -c bitmap.txt  批量hook,如果app崩了查看最后一个hook的类，在文件中删除重新挂上objection</span><br><span class="line">android hooking watch class_method android.graphics.BitmapFactory.decodeStream --dump-args --dump-backtrace --dump-return  下拉加载图片，堆栈中加载了glide图片加载库</span><br><span class="line">android hooking watch class_method android.graphics.BitmapFactory.decodeByteArray --dump-args --dump-backtrace --dump-return   堆栈中打印了业务代码com.ilulutv.fulao2.other.helper.glide.b.a</span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210624085607054.png" alt="image-20210624085607054"></p><p>jadx打开fulao2，搜索com.ilulutv.fulao2.other.helper.glide.b类的a方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list class_methods android.graphics.BigmapFactory 查看decodeByteArray返回值</span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210624090127471.png" alt="image-20210624090127471"></p><p>其中<code>byte[] c2 = com.ilulutv.fulao2.other.i.b.c(decode, Base64.decode(bytes2, 0), encodeToString);</code>解密</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210624090203616.png" alt="image-20210624090203616"></p><p><strong>hook网络流打印下载图片内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">function hookRAW()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;hooking RAW...&quot;)</span><br><span class="line">        Java.use(&quot;com.ilulutv.fulao2.other.i.b&quot;).a.overload(&#39;java.nio.ByteBuffer&#39;).implementation &#x3D; function(bytebuffer)&#123;</span><br><span class="line">            var result &#x3D;  this.a(bytebuffer)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;result is &#x3D;&gt; &quot;,ByteString.of(result).hex())</span><br><span class="line">            return result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hook_SSLsocketandroid8()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;hook_SSLsocket&quot;)</span><br><span class="line">        &#x2F;&#x2F; concrypt本质对libssl.so进行操作</span><br><span class="line">        Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream&quot;).write.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function(bytearry,int1,int2)&#123;</span><br><span class="line">            var result &#x3D; this.write(bytearry,int1,int2);</span><br><span class="line">            console.log(&quot;HTTPS write result,bytearry,int1,int2&#x3D;&gt;&quot;,result,bytearry,int1,int2)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;bytearray contents&#x3D;&gt;&quot;, ByteString.of(bytearry).hex())</span><br><span class="line">            &#x2F;&#x2F;console.log(jhexdump(bytearry,int1,int2));</span><br><span class="line">            &#x2F;&#x2F; console.log(jhexdump(bytearry));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream&quot;).read.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function(bytearry,int1,int2)&#123;</span><br><span class="line">            var result &#x3D; this.read(bytearry,int1,int2);</span><br><span class="line">            console.log(&quot;HTTPS read result,bytearry,int1,int2&#x3D;&gt;&quot;,result,bytearry,int1,int2)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;bytearray contents&#x3D;&gt;&quot;, ByteString.of(bytearry).hex())</span><br><span class="line">            &#x2F;&#x2F;console.log(jhexdump(bytearry,int1,int2));</span><br><span class="line">            &#x2F;&#x2F; console.log(jhexdump(bytearry));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    hookRAW()</span><br><span class="line">    hook_SSLsocketandroid8()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p>frida -UF -l fulao2.js -o hookRAW.txt  下拉内容查看log图片，对比抓包hook_SSLsocketandroid8结果和hookRAW结果的内容是否一致，说明<code>com.ilulutv.fulao2.other.i.b.a((ByteBuffer) obj)</code>确实是要加密的内容，明文在<code>com.ilulutv.fulao2.other.i.b.b(decode, Base64.decode(bytes2, 0), encodeToString)</code></p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210626105358553.png" alt="image-20210626105358553"></p><p>根据<code>return com.bumptech.glide.load.q.d.e.a(BitmapFactory.decodeByteArray(b2, 0, b2.length), this.f11769a);</code>,hook系统库查看解密后图片内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function hookClean()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        &#x2F;&#x2F; hook 系统库 不会被混淆 ,图片文件头jpeg都是ffd8ff</span><br><span class="line">        Java.use(&quot;android.graphics.BigmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;,&#39;int&#39;,&#39;int&#39;,&#39;android.graphics.BitmapFactory$Options&#39;).implementation &#x3D; function (ba,int1,int2,op)&#123;</span><br><span class="line">            var result &#x3D; this.decodeByteArray(ba,in1,int2,op)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;ba is&#x3D;&gt;&quot;,ByteString.of(ba).hex())</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>byte下载图片，frida -UF -l fulao2.js -o hookRAW.txt  下拉加载图片</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function guid() &#123;</span><br><span class="line">    function S4() &#123;</span><br><span class="line">      return (((1+Math.random())*0x10000)|0).toString(16).substring(1);</span><br><span class="line">    &#125;</span><br><span class="line">    return (S4()+S4()+&quot;-&quot;+S4()+&quot;-&quot;+S4()+&quot;-&quot;+S4()+&quot;-&quot;+S4()+S4()+S4());</span><br><span class="line">  &#125;</span><br><span class="line">function hookClean()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        &#x2F;&#x2F; hook 系统库 不会被混淆 ,图片文件头jpeg都是ffd8ff</span><br><span class="line">        Java.use(&quot;android.graphics.BigmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;,&#39;int&#39;,&#39;int&#39;,&#39;android.graphics.BitmapFactory$Options&#39;).implementation &#x3D; function (ba,int1,int2,op)&#123;</span><br><span class="line">            var result &#x3D; this.decodeByteArray(ba,in1,int2,op)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;ba is&#x3D;&gt;&quot;,ByteString.of(ba).hex())</span><br><span class="line">            var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&#x2F;&quot;+guid()+&quot;.jpg&quot;</span><br><span class="line">            console.log(&quot;path&#x3D;&gt; &quot;,path)</span><br><span class="line">            &#x2F;&#x2F; android hooking search classes File</span><br><span class="line">            var file &#x3D; Java.use(&quot;java.io.File&quot;).$new(path)</span><br><span class="line">            &#x2F;&#x2F; android hooking search classes FileOutputStream</span><br><span class="line">            var fos &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(file);</span><br><span class="line">            fos.write(data);</span><br><span class="line">            fos.close();</span><br><span class="line">            fos.close();</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>根据正常图片访问方式，利用安卓api，通过Bigmap对象压缩到文件输出流</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function hookClean()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        &#x2F;&#x2F; hook 系统库 不会被混淆 ,图片文件头jpeg都是ffd8ff</span><br><span class="line">        Java.use(&quot;android.graphics.BigmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;,&#39;int&#39;,&#39;int&#39;,&#39;android.graphics.BitmapFactory$Options&#39;).implementation &#x3D; function (ba,int1,int2,op)&#123;</span><br><span class="line">            var result &#x3D; this.decodeByteArray(ba,in1,int2,op)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;ba is&#x3D;&gt;&quot;,ByteString.of(ba).hex())</span><br><span class="line">            var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&#x2F;&quot;+guid()+&quot;.jpg&quot;</span><br><span class="line">            console.log(&quot;path&#x3D;&gt; &quot;,path)</span><br><span class="line">            &#x2F;&#x2F; android hooking search classes File</span><br><span class="line">            var file &#x3D; Java.use(&quot;java.io.File&quot;).$new(path)</span><br><span class="line">            &#x2F;&#x2F; android hooking search classes FileOutputStream</span><br><span class="line">            var fos &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(file);</span><br><span class="line">            &#x2F;&#x2F; android hooking list class_methods android.graphics.Bitmap 查看compress实例方法</span><br><span class="line">            result.compress(Java.use(&quot;android.graphics.Bitmap$CompressFormat&quot;).JPEG.value,100,fos)</span><br><span class="line">            &#x2F;&#x2F; fos.write(data);</span><br><span class="line">            fos.close();</span><br><span class="line">            fos.close();</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>compress占用主线程资源，阻塞主线程导致程序崩溃，可以另起线程专门用来下载图片</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function hookImage() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        var Runnable &#x3D; Java.use(&quot;java.lang.Runnable&quot;);</span><br><span class="line">        var saveImg &#x3D; Java.registerClass(&#123;</span><br><span class="line">            name: &quot;com.roysue.runnable&quot;,</span><br><span class="line">            implements: [Runnable],</span><br><span class="line">            fields: &#123;</span><br><span class="line">                bm: &quot;android.graphics.Bitmap&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                $init: [&#123;</span><br><span class="line">                    returnType: &quot;void&quot;,</span><br><span class="line">                    argumentTypes: [&quot;android.graphics.Bitmap&quot;],</span><br><span class="line">                    implementation: function (bitmap) &#123;</span><br><span class="line">                        this.bm.value &#x3D; bitmap;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;],</span><br><span class="line">                run: function () &#123;</span><br><span class="line"></span><br><span class="line">                    var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&#x2F;&quot; + guid() + &quot;.jpg&quot;</span><br><span class="line">                    console.log(&quot;path&#x3D;&gt; &quot;, path)</span><br><span class="line">                    var file &#x3D; Java.use(&quot;java.io.File&quot;).$new(path)</span><br><span class="line">                    var fos &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(file);</span><br><span class="line"></span><br><span class="line">                    this.bm.value.compress(Java.use(&quot;android.graphics.Bitmap$CompressFormat&quot;).JPEG.value, 100, fos)</span><br><span class="line">                    console.log(&quot;success!&quot;)</span><br><span class="line">                    fos.flush();</span><br><span class="line">                    fos.close();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Java.use(&quot;android.graphics.BitmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;, &#39;android.graphics.BitmapFactory$Options&#39;).implementation &#x3D; function (data, offset, length, opts) &#123;</span><br><span class="line">            var result &#x3D; this.decodeByteArray(data, offset, length, opts);</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            var runnable &#x3D; saveImg.$new(result);</span><br><span class="line">            runnable.run()</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不建议多线程在手机端运行，可以将线程发送PC端执行</strong></p><p>fulao2.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">function hookImage() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        var Runnable &#x3D; Java.use(&quot;java.lang.Runnable&quot;);</span><br><span class="line">        var saveImg &#x3D; Java.registerClass(&#123;</span><br><span class="line">            name: &quot;com.roysue.runnable&quot;,</span><br><span class="line">            implements: [Runnable],</span><br><span class="line">            fields: &#123;</span><br><span class="line">                bm: &quot;android.graphics.Bitmap&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                $init: [&#123;</span><br><span class="line">                    returnType: &quot;void&quot;,</span><br><span class="line">                    argumentTypes: [&quot;android.graphics.Bitmap&quot;],</span><br><span class="line">                    implementation: function (bitmap) &#123;</span><br><span class="line">                        this.bm.value &#x3D; bitmap;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;],</span><br><span class="line">                run: function () &#123;</span><br><span class="line"></span><br><span class="line">                    var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;tmp&#x2F;&quot; + guid() + &quot;.jpg&quot;</span><br><span class="line">                    console.log(&quot;path&#x3D;&gt; &quot;, path)</span><br><span class="line">                    var file &#x3D; Java.use(&quot;java.io.File&quot;).$new(path)</span><br><span class="line">                    var fos &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(file);</span><br><span class="line"></span><br><span class="line">                    this.bm.value.compress(Java.use(&quot;android.graphics.Bitmap$CompressFormat&quot;).JPEG.value, 100, fos)</span><br><span class="line">                    console.log(&quot;success!&quot;)</span><br><span class="line">                    fos.flush();</span><br><span class="line">                    fos.close();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Java.use(&quot;android.graphics.BitmapFactory&quot;).decodeByteArray.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;, &#39;android.graphics.BitmapFactory$Options&#39;).implementation &#x3D; function (data, offset, length, opts) &#123;</span><br><span class="line">            var result &#x3D; this.decodeByteArray(data, offset, length, opts);</span><br><span class="line">            send(data)</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    hookImage()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p>fulao2.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import frida</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">import uuid</span><br><span class="line">import base64</span><br><span class="line">import re </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def my_message_handler(message, payload):</span><br><span class="line">    print(message)</span><br><span class="line">    print(payload)</span><br><span class="line">    if message[&quot;type&quot;] &#x3D;&#x3D; &quot;send&quot;:</span><br><span class="line"></span><br><span class="line">        #image &#x3D; re.findall(&quot;(-?\d+)&quot;, message[&quot;payload&quot;])</span><br><span class="line">        image &#x3D; message[&quot;payload&quot;]</span><br><span class="line">        print(image)</span><br><span class="line"></span><br><span class="line"># 保存image</span><br><span class="line">        intArr &#x3D; []</span><br><span class="line">        # 位数的转换</span><br><span class="line">        for m in image:</span><br><span class="line">            ival &#x3D; int(m)</span><br><span class="line">            if ival &lt; 0:</span><br><span class="line">                ival +&#x3D; 256</span><br><span class="line">            intArr.append(ival)</span><br><span class="line">        bs &#x3D; bytes(intArr)</span><br><span class="line">        fileName &#x3D; str(uuid.uuid1()) + &quot;.jpg&quot;</span><br><span class="line">        f &#x3D; open(fileName, &#39;wb&#39;)</span><br><span class="line">        f.write(bs)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line">target &#x3D; device.get_frontmost_application()</span><br><span class="line">session &#x3D; device.attach(target.pid)</span><br><span class="line"># 加载脚本</span><br><span class="line">with open(&quot;fulao2.js&quot;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line">script.on(&quot;message&quot;, my_message_handler)  # 调用错误处理</span><br><span class="line"></span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 脚本会持续运行等待输入</span><br><span class="line">input()</span><br></pre></td></tr></table></figure><p><strong>接下来尝试从抓到的包中解密协议，获取解密后的图片在hookRAW中实现脱机</strong></p><p>fulao2.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function hookRAW()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;hooking RAW...&quot;)</span><br><span class="line">        Java.use(&quot;com.ilulutv.fulao2.other.i.b&quot;).a.overload(&#39;java.nio.ByteBuffer&#39;).implementation &#x3D; function(bytebuffer)&#123;</span><br><span class="line">            var result &#x3D;  this.a(bytebuffer)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;result is &#x3D;&gt; &quot;,ByteString.of(result).hex())</span><br><span class="line">            send(result)</span><br><span class="line">            return result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    hookRAW()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p>fulao2.py中<code>image = message[&quot;payload&quot;]</code>需要解密，进入decodeImageKey实现</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210626114426852.png" alt="image-20210626114426852"></p><p>进入CipherCore</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210626114509476.png" alt="image-20210626114509476"></p><p>发现从so库中加载的加密协议</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210626114547975.png" alt="image-20210626114547975"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memory list modules  找到libcipher-lib.so</span><br><span class="line">memory list exports libcipher-lib.so  搜索getString 分析拿到byte之后通过base64加密</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">import frida</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">import uuid</span><br><span class="line">import base64</span><br><span class="line">import re</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def IMGdecrypt(bytearray):</span><br><span class="line">    # hook String decodeImgKey &#x3D; CipherClient.decodeImgKey();</span><br><span class="line">    imgkey &#x3D; base64.decodebytes(</span><br><span class="line">        bytes(&quot;svOEKGb5WD0ezmHE4FXCVQ&#x3D;&#x3D;&quot;, encoding&#x3D;&#39;utf8&#39;))</span><br><span class="line">    </span><br><span class="line">    imgiv &#x3D; base64.decodebytes(</span><br><span class="line">        bytes(&quot;4B7eYzHTevzHvgVZfWVNIg&#x3D;&#x3D;&quot;, encoding&#x3D;&#39;utf8&#39;))</span><br><span class="line">    </span><br><span class="line">    cipher &#x3D; AES.new(imgkey, AES.MODE_CBC, imgiv)</span><br><span class="line">    # enStr +&#x3D; (len(enStr) % 4)*&quot;&#x3D;&quot;</span><br><span class="line">    # decryptByts &#x3D; base64.urlsafe_b64decode(enStr)</span><br><span class="line">    msg &#x3D; cipher.decrypt(bytearray)</span><br><span class="line"></span><br><span class="line">    def unpad(s): return s[0:-s[-1]]</span><br><span class="line">    return unpad(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def my_message_handler(message, payload):</span><br><span class="line">    print(message)</span><br><span class="line">    print(payload)</span><br><span class="line">    if message[&quot;type&quot;] &#x3D;&#x3D; &quot;send&quot;:</span><br><span class="line"></span><br><span class="line">        #image &#x3D; re.findall(&quot;(-?\d+)&quot;, message[&quot;payload&quot;])</span><br><span class="line">        image &#x3D; message[&quot;payload&quot;]</span><br><span class="line">        print(image)</span><br><span class="line"></span><br><span class="line">        intArr &#x3D; []</span><br><span class="line">        # 位数的转换</span><br><span class="line">        for m in image:</span><br><span class="line">            ival &#x3D; int(m)</span><br><span class="line">            if ival &lt; 0:</span><br><span class="line">                ival +&#x3D; 256</span><br><span class="line">            intArr.append(ival)</span><br><span class="line">        bs &#x3D; bytes(intArr)</span><br><span class="line">        # 拿到数据后Base64解密</span><br><span class="line">        bs &#x3D; IMGdecrypt(bs)</span><br><span class="line"></span><br><span class="line">        fileName &#x3D; str(uuid.uuid1()) + &quot;.jpg&quot;</span><br><span class="line">        f &#x3D; open(fileName, &#39;wb&#39;)</span><br><span class="line">        f.write(bs)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line">target &#x3D; device.get_frontmost_application()</span><br><span class="line">session &#x3D; device.attach(target.pid)</span><br><span class="line"># 加载脚本</span><br><span class="line">with open(&quot;fulao2.js&quot;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line">script.on(&quot;message&quot;, my_message_handler)  # 调用错误处理</span><br><span class="line"></span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 脚本会持续运行等待输入</span><br><span class="line">input()</span><br></pre></td></tr></table></figure><p><strong>VIP破解</strong></p><p>切换高清视频，提示vip限定功能，无法切换vip，尝试hook按钮点击事件，frida -UF -l  hookEvent.js,点击切换清晰度</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210626174534294.png" alt="image-20210626174534294"></p><p>jadx搜索com.ilulutv.fulao2.film.l.t</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210626174947278.png" alt="image-20210626174947278"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch com.ilulutv.fulao2.film.l$t</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x2a76</span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210626175145143.png" alt="image-20210626175145143"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectdump --fullname 0x28f2   查看在看视频实例</span><br><span class="line">android heap search instances com.ilulutv.fulao2.film.l</span><br></pre></td></tr></table></figure><p>尝试将<code>this.f11151d.q0</code>改为true,完成VIP功能中的清晰度切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function hookVIP()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.choose(&quot;com.ilulutv.fulao2.film.l&quot;,&#123;</span><br><span class="line">            onMatch:function(ins)&#123;</span><br><span class="line">                console.log(&quot;found ins:&#x3D;&gt;&quot;,ins)</span><br><span class="line">                ins.q0.value&#x3D;true;</span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&quot;search complete&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    hookVIP()</span><br><span class="line">&#125;</span><br><span class="line">setInterval(main,500)</span><br></pre></td></tr></table></figure><p>抓取所有收发包</p><p>frida -U -f com.ilulutv.fulao2 -l hookSocket.js -o traffic.txt  所有通信都是加密了，不是在https层加密，而是在业务层，那就尝试hook所有的cipher</p><p>objection -g com.ilulutv.fulao2 explore -c cipher.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.cz.babySister.c.a  </span><br><span class="line">android hooking watch class_method javax.crypto.Cipher.init  --dump-args --dump-return --dump-backtrace</span><br><span class="line">android hooking list class_methods com.ilulutv.fulao2.other.i.b  将所有的方法复制到ciph.txt中，前面添加上android hooking watch class_method,后面添加--dump-args --dump-return --dump-backtrace</span><br></pre></td></tr></table></figure><p>objection -g com.ilulutv.fulao2 explore -c cipher.txt  关闭app重新hook，打印出所有的通信内容包括加解密所有内容</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210626184550725.png" alt="image-20210626184550725"></p><p>查看com.ilulutv.fulao2.other.i.b.a ，改包将其中的vip改为true，expire修改过期时间</p><p>当所有业务返回都被加解密了，可以尝试hook系统库，不可被混淆加密</p><h1 id="第一题-apk"><a href="#第一题-apk" class="headerlink" title="第一题.apk"></a>第一题.apk</h1><p>jadx-gui 第一题.apk</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210704000228922.png" alt="image-20210704000228922"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.kanxue.pediy1 explore</span><br><span class="line">android hooking search classes com.kanxue.pediy1</span><br><span class="line">android hooking watch classe com.kanxue.pediy1.VVVV</span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210704000747817.png" alt="image-20210704000747817"></p><p>frida -UF -l question.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">var CONTEXT &#x3D; null;</span><br><span class="line">&#x2F;&#x2F; 获取类名</span><br><span class="line">function getObjClassName(obj) &#123;</span><br><span class="line">    if (!jclazz) &#123;</span><br><span class="line">        var jclazz &#x3D; Java.use(&quot;java.lang.Class&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!jobj) &#123;</span><br><span class="line">        var jobj &#x3D; Java.use(&quot;java.lang.Object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return jclazz.getName.call(jobj.getClass.call(obj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hookReturn() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        Java.use(&quot;com.kanxue.pediy1.VVVVV&quot;).VVVV.implementation &#x3D; function (context, str) &#123;</span><br><span class="line">            var result &#x3D; this.VVVV(context, str)</span><br><span class="line">            console.log(&quot;context,str,result &#x3D;&gt; &quot;, context, str, result);</span><br><span class="line">            console.log(&quot;context className is &#x3D;&gt; &quot;, getObjClassName(context));</span><br><span class="line">            CONTEXT &#x3D; context;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function invoke() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        &#x2F;&#x2F;console.log(&quot;CONTEXT IS &#x3D;&gt; &quot;,CONTEXT)</span><br><span class="line">        var MainActivity &#x3D; null;</span><br><span class="line">        Java.choose(&quot;com.kanxue.pediy1.MainActivity&quot;, &#123;</span><br><span class="line">            onMatch: function (instance) &#123;</span><br><span class="line">                MainActivity &#x3D; instance;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123; &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var CONTEXT2 &#x3D; Java.use(&quot;com.kanxue.pediy1.MainActivity$1&quot;).$new(MainActivity);</span><br><span class="line">        var javaString &#x3D; Java.use(&quot;java.lang.String&quot;).$new(&quot;12345&quot;);</span><br><span class="line">        for (var x &#x3D; 0; x &lt; (99999 + 1); x++) &#123;</span><br><span class="line">        &#x2F;&#x2F; 静态函数VVVV 使用use直接调用</span><br><span class="line">            var result &#x3D; Java.use(&quot;com.kanxue.pediy1.VVVVV&quot;).VVVV(CONTEXT2, String(x));</span><br><span class="line">            console.log(&quot;now x is &#x3D;&gt; &quot;, String(x))</span><br><span class="line">            if (result) &#123;</span><br><span class="line">                console.log(&quot;found result is &#x3D;&gt; &quot;, String(x))</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main() &#123;</span><br><span class="line">    hookReturn()</span><br><span class="line">    invoke()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p>主动调用的参数构造两种方案：</p><ul><li>一种先hook</li><li>自己单独new</li><li>域中反射获取</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.pyenv</span><br><span class="line">tree -NCfhl | grep agent.js   加上构造函数hook,如com.kanxue.pediy1.MainActivity$1</span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/FrNoA7e3wTjgYbWqCZ2-9l6eO31d" alt="img"></p><h1 id="第二题-apk"><a href="#第二题-apk" class="headerlink" title="第二题.apk"></a>第二题.apk</h1><p>jadx-gui 第二题.apk</p><p><img src="/2021/04/10/hook%E6%8A%93%E5%8C%85trace%E5%AE%9A%E4%BD%8D%E5%AE%9E%E6%88%98/image-20210704015324127.png" alt="image-20210704015324127"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">function invoke2() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        &#x2F;&#x2F; console.log(&quot;CONTEXT IS &#x3D;&gt; &quot;,CONTEXT)</span><br><span class="line">        var MainActivity &#x3D; null;</span><br><span class="line">        Java.choose(&quot;com.kanxue.pediy1.MainActivity&quot;,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                MainActivity &#x3D; instance;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete:function()&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; var CONTEXT2 &#x3D; Java.use(&quot;com.kanxue.pediy1.MainActivity$1&quot;).$new(MainActivity);</span><br><span class="line"></span><br><span class="line">        var loader1 &#x3D; null;</span><br><span class="line">        var loader2 &#x3D; null;</span><br><span class="line"></span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch: function (loader) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (loader.findClass(&quot;com.kanxue.pediy1.VVVVV&quot;)) &#123;</span><br><span class="line">                        console.log(&quot;Successfully found loader&quot;)</span><br><span class="line">                        console.log(loader);</span><br><span class="line">&#x2F;&#x2F; 切换classLoader</span><br><span class="line">                        loader2 &#x3D; loader;</span><br><span class="line">                        Java.classFactory.loader &#x3D; loader2;</span><br><span class="line">                    &#125;else if(loader.findClass(&quot;com.kanxue.pediy1.MainActivity&quot;))&#123;</span><br><span class="line">                        console.log(&quot;Successfully found loader&quot;)</span><br><span class="line">                        console.log(loader);</span><br><span class="line">                        loader1 &#x3D; loader;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                catch (error) &#123;</span><br><span class="line">                    console.log(&quot;find error:&quot; + error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line">                console.log(&quot;end1&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"> </span><br><span class="line">        var javaString &#x3D; Java.use(&quot;java.lang.String&quot;).$new(&quot;12345&quot;);</span><br><span class="line">        for (var x &#x3D; 0; x &lt; (99999 + 1); x++) &#123;</span><br><span class="line">            var result1 &#x3D; MainActivity.stringFromJNI(String(100000 - x));</span><br><span class="line"></span><br><span class="line">            var result2 &#x3D; Java.use(&quot;com.kanxue.pediy1.VVVVV&quot;).VVVV(String(result1));          </span><br><span class="line">            console.log(&quot;now x is &#x3D;&gt; &quot;, String(x))</span><br><span class="line">            if (result2) &#123;</span><br><span class="line">                console.log(&quot;found result2 is &#x3D;&gt; &quot;, String(100000 - x))</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l traceNativelibssl.js  拿到函数<code>_ZTVNST3__19strstreamE</code> ,修改<code>if(exports[j].name.indexOf(&quot;ZTVNSt3&quot;)&gt;=0){</code>,<code>if(exports[j].name.indexOf(&quot;ZTVNSt3&quot;)&gt;=0){</code>,</p><p><a href="https://bbs.pediy.com/thread-260550.htm" target="_blank" rel="noopener">举杯邀Frida，对影成三题</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; hook native函数，使其不要执行，Interceptor.replace</span><br><span class="line">function hookSTRSTR() &#123;</span><br><span class="line">    var kill_addr &#x3D; Module.findExportByName(&quot;libc.so&quot;, &quot;strcmp&quot;);</span><br><span class="line">    Interceptor.attach(strstr, &#123;</span><br><span class="line">        onEnter: function (args) &#123;</span><br><span class="line">            console.log(&quot;Entering &#x3D;&gt;&quot;)</span><br><span class="line">            console.log(&quot;args[0] &#x3D;&gt; &quot;, args[0].readCString())</span><br><span class="line">            console.log(&quot;args[1] &#x3D;&gt; &quot;, args[1].readCString())</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: function (retval) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">)&#125;</span><br><span class="line">function replaceKill()&#123;</span><br><span class="line">    var kill_addr &#x3D; Module.findExportByName(&quot;libc.so&quot;, &quot;kill&quot;);</span><br><span class="line">    &#x2F;&#x2F; var kill &#x3D; new NativeFunction(kill_addr,&quot;int&quot;,[&#39;int&#39;,&#39;int&#39;]);</span><br><span class="line">    Interceptor.replace(kill_addr,new NativeCallback(function(arg0,arg1)&#123;</span><br><span class="line">        console.log(&quot;arg0&#x3D;&gt; &quot;,arg0)</span><br><span class="line">        console.log(&quot;arg1&#x3D;&gt; &quot;,arg1)</span><br><span class="line"></span><br><span class="line">    &#125;,&quot;int&quot;,[&#39;int&#39;,&#39;int&#39;]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objection </tag>
            
            <tag> frida </tag>
            
            <tag> wallbreaker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇之Scrapy抓取京东</title>
      <link href="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/"/>
      <url>/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h1><p>同一台服务器上不同的项目可能依赖的包不同版本，新版本默认覆盖旧版本，可能导致其他项目无法运行，通过虚拟环境，完全隔离各个项目各个版本的依赖包，实现运行环境互不影响。</p><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv安装virtualenv</span><br><span class="line">python -m pip install --upgrade pip  升级pip</span><br><span class="line">pip install -i https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple&#x2F; --trusted-host pypi.doubanio.com scrapy</span><br><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple  使用清华源</span><br><span class="line">pip uninstall scrapy    卸载django </span><br><span class="line">virtualenv scrapytest   默认环境创建虚拟环境</span><br><span class="line">cd scrapytest&#x2F;Scripts &amp;&amp;  activate.bat &amp;&amp; python 进入3.7虚拟环境</span><br><span class="line">virtualenv -p D:\Python27\python.exe scrapytest</span><br><span class="line">cd scrapytest&#x2F;Scripts &amp;&amp;  activate.bat &amp;&amp; python 进入2.7虚拟环境</span><br><span class="line">deactivate.bat          退出虚拟环境</span><br><span class="line"></span><br><span class="line">apt-get install python-virtualenv       安装虚拟环境</span><br><span class="line">virtualenv py2 &amp;&amp; cd py2 &amp;&amp; cd bin &amp;&amp; source activate &amp;&amp; python 进入2.7虚拟环境</span><br><span class="line">virtualenv -p &#x2F;usr&#x2F;bin&#x2F;python3 py3 &amp;&amp; &amp;&amp; cd py3 &amp;&amp; cd bin &amp;&amp; source activate &amp;&amp; python  进入3.7虚拟环境</span><br></pre></td></tr></table></figure><h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper</span><br><span class="line">pip install virtualenvwrapper-win解决workon不是内部指令</span><br><span class="line">workon  列出所有虚拟环境</span><br><span class="line">新建环境变量   WORKON_HOME&#x3D;E:\envs</span><br><span class="line">mkvirtualenv py3scrapy  新建并进入虚拟环境</span><br><span class="line">deactivate          退出虚拟环境</span><br><span class="line">workon py3scrapy        进入指定虚拟环境</span><br><span class="line">    pip install -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple scrapy    安装scrapy源</span><br><span class="line">    若缺少lxml出错https:&#x2F;&#x2F;www.lfd.uci.edu&#x2F;~gohlke&#x2F;pythonlibs&#x2F;寻找对应版本的lxml的whl源</span><br><span class="line">    python -m pip install --upgrade pip     更新pip</span><br><span class="line">    pip install lxml-4.1.1-cp35-cp35m-win_amd64.whl</span><br><span class="line">    若缺少Twisted出错http:&#x2F;&#x2F;www.lfd.uci.edu&#x2F;~gohlke&#x2F;pythonlibs&#x2F;#lxml搜对应版本Twisted</span><br><span class="line">    pip install Twisted‑17.9.0‑cp35‑cp35m‑win_amd64.whl</span><br><span class="line">mkvirtualenv --python&#x3D;D:\Python27\python.exe py2scrapy      一般不会出问题</span><br><span class="line">    pip install -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple scrapy</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">pip install virtualenvwrapper    </span><br><span class="line">    find &#x2F; -name virualenvwrapper.sh</span><br><span class="line">    vim ~&#x2F;.bashrc</span><br><span class="line">        export WORKON_HOME&#x3D;$HOME&#x2F;.virtualenvs</span><br><span class="line">        source &#x2F;home&#x2F;wj&#x2F;.local&#x2F;bin&#x2F;virtualenvwrapper.sh</span><br><span class="line">    source ~&#x2F;.bashrc    </span><br><span class="line">mkvirtualenv py2scrapy          指向生成~&#x2F;.virtualenv</span><br><span class="line">deactivate          退出虚拟环境</span><br><span class="line">mkdirtualenv --python&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3 py3scrapy</span><br><span class="line">rmvirtualenv py3scrapy  删除虚拟环境</span><br></pre></td></tr></table></figure><h1 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h1><p><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/%E4%BA%AC%E4%B8%9C%E5%85%A8%E7%BD%91%E7%88%AC%E8%99%AB.png" alt="京东全网爬虫"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F; scrapy  安装scrapy</span><br><span class="line">scrapy startproject mall_spider  创建mall_spider项目</span><br><span class="line">scrapy genspider jd_category https:&#x2F;&#x2F;dc.3.cn&#x2F;category&#x2F;get  创建分类爬虫</span><br><span class="line">scrapy genspider --list  查看爬虫生成模板</span><br><span class="line">scrapy genspider -t crawl lagou www.lagou.com   创建全站爬虫</span><br><span class="line">pip freeze &gt; requirements.txt 生成依赖到文件</span><br><span class="line">pip install -r requirements.txt 一键安装依赖</span><br><span class="line">scrapy shell http:&#x2F;&#x2F;blog.jobbole.com&#x2F;       可以在脚本中调试xpath或者chrome浏览器右键copy xpath,chrome浏览器右键copy selector</span><br><span class="line">scrapy shell -s USER_AGENT&#x3D;&quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64; rv:51.0) Gecko&#x2F;20100101 Firefox&#x2F;51.0&quot; https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;56320032</span><br><span class="line">view(response)</span><br></pre></td></tr></table></figure><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><h3 id="1-1-抓取首页的分类信息"><a href="#1-1-抓取首页的分类信息" class="headerlink" title="1.1 抓取首页的分类信息"></a>1.1 抓取首页的分类信息</h3><ul><li>抓取数据: 各级分类的名称 和 URL<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/01_%E4%BA%AC%E4%B8%9C%E5%88%86%E7%B1%BB%E4%BF%A1%E6%81%AF.png"></li></ul><h3 id="1-2-抓取商品信息"><a href="#1-2-抓取商品信息" class="headerlink" title="1.2 抓取商品信息"></a>1.2 抓取商品信息</h3><ul><li><p>抓取: 商品名称, 商品价格, 商品评论数量, 商品店铺, 商品促销, 商品选项, 商品图片的URL<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/02_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E4%BF%A1%E6%81%AF.png"></p></li><li><p>由于全网爬虫, 抓取页面非常多, 为了提高抓的速度, 选择使用scrapy框架 + scrapy_redis分布式组件</p></li><li><p>由于京东全网的数据量达到了亿级, 存储又是结构化数据, 数据库, 选择使用MongoDB;  </p></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们采用广度优先策略, 我们把类别和商品信息的抓取分开来做. </p><p><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/image-20210422163642994.png" alt="image-20210422163642994"></p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><h4 id="类别模型"><a href="#类别模型" class="headerlink" title="类别模型"></a>类别模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Category(scrapy.Item):</span><br><span class="line">    &quot;&quot;&quot;商品类别&quot;&quot;&quot;</span><br><span class="line">    # 大分类名称</span><br><span class="line">    b_category_name &#x3D; scrapy.Field()</span><br><span class="line">    # 大分类URL</span><br><span class="line">    b_category_url &#x3D; scrapy.Field()</span><br><span class="line">    # 中分类名称</span><br><span class="line">    m_category_name &#x3D; scrapy.Field()</span><br><span class="line">    # 中分类URL</span><br><span class="line">    m_category_url &#x3D; scrapy.Field()</span><br><span class="line">    # 小分类名称</span><br><span class="line">    s_category_name &#x3D; scrapy.Field()</span><br><span class="line">    # 小分类URL</span><br><span class="line">    s_category_url &#x3D; scrapy.Field()</span><br></pre></td></tr></table></figure><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Product(scrapy.Item):</span><br><span class="line">    # 商品类别</span><br><span class="line">    product_category &#x3D; scrapy.Field()</span><br><span class="line">    # 商品ID</span><br><span class="line">    product_sku_id &#x3D; scrapy.Field()</span><br><span class="line">    # 商品名称</span><br><span class="line">    product_name &#x3D; scrapy.Field()</span><br><span class="line">    # 商品图片URL</span><br><span class="line">    product_img_url &#x3D; scrapy.Field()</span><br><span class="line">    # 商品店铺</span><br><span class="line">    product_shop &#x3D; scrapy.Field()</span><br><span class="line">    # 图书信息, 作者,出版社</span><br><span class="line">    product_book_info &#x3D; scrapy.Field()</span><br><span class="line">    # 商品选项</span><br><span class="line">    product_option &#x3D; scrapy.Field()</span><br><span class="line">    # 商品评论数量</span><br><span class="line">    product_comments &#x3D; scrapy.Field()</span><br><span class="line">    # 商品促销</span><br><span class="line">    product_ad &#x3D; scrapy.Field()</span><br><span class="line">    # 商品价格</span><br><span class="line">    product_price &#x3D; scrapy.Field()</span><br></pre></td></tr></table></figure><h3 id="分类爬虫"><a href="#分类爬虫" class="headerlink" title="分类爬虫"></a>分类爬虫</h3><h4 id="分析-分类信息的URL"><a href="#分析-分类信息的URL" class="headerlink" title="分析, 分类信息的URL"></a>分析, 分类信息的URL</h4><ul><li><code>目标</code>: <code>确定分类信息的URL</code></li><li><code>步骤</code>: <ol><li>进入到京东首页</li><li>右键检查, 打开开发者工具, 搜索 <code>家用电器</code></li><li>确定分类的URL</li></ol></li><li><code>图解</code>:<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/03_%E7%A1%AE%E5%AE%9A%E5%88%86%E7%B1%BB%E7%9A%84URL.png"></li><li><code>结论</code>:<ul><li>分类URL: <code>https://dc.3.cn/category/get</code></li></ul></li></ul><h4 id="创建爬虫-抓取数据"><a href="#创建爬虫-抓取数据" class="headerlink" title="创建爬虫, 抓取数据"></a>创建爬虫, 抓取数据</h4><ul><li><code>目标</code>: <code>抓取分类数据, 交给引擎</code></li><li><code>步骤</code>:<ol><li>创建类别爬虫</li><li>指定起始URL</li><li>解析数据, 交给引擎</li></ol></li></ul><h4 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h4><ul><li>进入项目目录: <code>cd mall_spider</code></li><li>创建爬虫: <code>scrapy genspider category_spider jd.com</code></li></ul><h4 id="指定起始URL"><a href="#指定起始URL" class="headerlink" title="指定起始URL"></a>指定起始URL</h4><ul><li>修改起始URL: <code>https://dc.3.cn/category/get</code></li></ul><h4 id="解析数据-交给引擎"><a href="#解析数据-交给引擎" class="headerlink" title="解析数据, 交给引擎"></a>解析数据, 交给引擎</h4><ul><li>分析数据格式:<ul><li>整体数据<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/05_1_%E6%95%B4%E4%BD%93%E5%88%86%E7%B1%BB%E6%A6%82%E5%86%B5.png"> </li><li>各级分类位置<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/05_2_%E5%90%84%E7%BA%A7%E5%88%86%E7%B1%BB%E4%BD%8D%E7%BD%AE.png"> </li><li>分类信息格式<ul><li>格式1: <ul><li><code>jiadian.jd.com|家用电器||0</code></li><li>特点: 第一项分类URL,第二项分类名称</li></ul></li><li>格式2: <ul><li><code>652-654|摄影摄像||0</code></li><li>对应的URL: <code>https://channel.jd.com/652-654.html</code></li><li>特点:第一项是频道ID, 包含一个 <code>-</code></li></ul></li><li>格式3: <ul><li><code>1318-2628-12131|户外风衣||0</code> </li><li>对应URL: <code>https://list.jd.com/list.html?cat=1318,2628,12131</code></li><li>特点: 第一项为分类ID, 包含两个 <code>-</code></li></ul></li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">class JdCategorySpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;jd_category&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;3.cn&#39;]</span><br><span class="line">    start_urls &#x3D; [&#39;https:&#x2F;&#x2F;dc.3.cn&#x2F;category&#x2F;get&#39;]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        # print(response.body.decode(&#39;GBK&#39;))</span><br><span class="line">        result &#x3D; json.loads(response.body.decode(&#39;GBK&#39;))</span><br><span class="line">        datas &#x3D; result[&#39;data&#39;]</span><br><span class="line">        # 遍历数据列表</span><br><span class="line">        for data in datas:</span><br><span class="line"></span><br><span class="line">            item &#x3D; Category()</span><br><span class="line"></span><br><span class="line">            b_category &#x3D; data[&#39;s&#39;][0]</span><br><span class="line">            b_category_info &#x3D; b_category[&#39;n&#39;]</span><br><span class="line">            # print(&#39;大分类: &#123;&#125;&#39;.format(b_category_info))</span><br><span class="line">            item[&#39;b_category_name&#39;], item[&#39;b_category_url&#39;] &#x3D; self.get_category_name_url(b_category_info)</span><br><span class="line"></span><br><span class="line">            # 中分类信息列表</span><br><span class="line">            m_category_s &#x3D; b_category[&#39;s&#39;]</span><br><span class="line">            # 遍历中分类列表</span><br><span class="line">            for m_category in m_category_s:</span><br><span class="line">                # 中分类信息</span><br><span class="line">                m_category_info &#x3D; m_category[&#39;n&#39;]</span><br><span class="line">                # print(&#39;中分类: &#123;&#125;&#39;.format(m_category_info))</span><br><span class="line">                item[&#39;m_category_name&#39;], item[&#39;m_category_url&#39;] &#x3D; self.get_category_name_url(m_category_info)</span><br><span class="line"></span><br><span class="line">                # 小分类数据列表</span><br><span class="line">                s_category_s &#x3D; m_category[&#39;s&#39;]</span><br><span class="line">                for s_category in s_category_s:</span><br><span class="line">                    s_category_info &#x3D; s_category[&#39;n&#39;]</span><br><span class="line">                    # print(&#39;小分类: &#123;&#125;&#39;.format(s_category_info))</span><br><span class="line">                    item[&#39;s_category_name&#39;], item[&#39;s_category_url&#39;] &#x3D; self.get_category_name_url(s_category_info)</span><br><span class="line">                    # print(item)</span><br><span class="line">                    # 把数据交给引擎</span><br><span class="line">                    yield item</span><br><span class="line"></span><br><span class="line">    def get_category_name_url(self, category_info):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        根据分类信息, 提取名称和URL</span><br><span class="line">        :param category_info:  分类信息</span><br><span class="line">        :return: 分类的名称和URL</span><br><span class="line">        分析数据格式(三类数据格式)</span><br><span class="line">        - book.jd.com&#x2F;library&#x2F;science.html|科学技术||0</span><br><span class="line">        - 1713-3287|计算机与互联网||0</span><br><span class="line">          - Https:&#x2F;&#x2F;channel.jd.com&#x2F;&#123;&#125;.html</span><br><span class="line">        - 9987-12854-12856|屏幕换新||0</span><br><span class="line">          - Https:&#x2F;&#x2F;list.jd.com&#x2F;list.html?cat&#x3D;&#123;&#125;</span><br><span class="line">          - 把 - 替换为逗号, 然后填充到占位的地方.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        category &#x3D; category_info.split(&#39;|&#39;)</span><br><span class="line">        # 分类URL</span><br><span class="line">        category_url &#x3D; category[0]</span><br><span class="line">        # 分类名称</span><br><span class="line">        category_name &#x3D; category[1]</span><br><span class="line"></span><br><span class="line">        # 处理第一类分类URL</span><br><span class="line">        if category_url.count(&#39;jd.com&#39;) &#x3D;&#x3D; 1:</span><br><span class="line">            # URL进行补全</span><br><span class="line">            category_url &#x3D; &#39;https:&#x2F;&#x2F;&#39; + category_url</span><br><span class="line">        elif category_url.count(&#39;-&#39;) &#x3D;&#x3D; 1:</span><br><span class="line">            # 1713-3287|计算机与互联网||0</span><br><span class="line">            category_url &#x3D; &#39;https:&#x2F;&#x2F;channel.jd.com&#x2F;&#123;&#125;.html&#39;.format(category_url)</span><br><span class="line">        else:</span><br><span class="line">            # 9987-12854-12856|屏幕换新||0</span><br><span class="line">            # 把URL中 &#96;-&#96; 替换为 &#96;,&#96;</span><br><span class="line">            category_url &#x3D; category_url.replace(&#39;-&#39;, &#39;,&#39;)</span><br><span class="line">            # 补全URL</span><br><span class="line">            category_url &#x3D; &#39;https:&#x2F;&#x2F;list.jd.com&#x2F;list.html?cat&#x3D;&#123;&#125;&#39;.format(category_url)</span><br><span class="line"></span><br><span class="line">        # 返回类别的名称 和 URL</span><br><span class="line">        return category_name, category_url</span><br></pre></td></tr></table></figure><h3 id="保存分类数据"><a href="#保存分类数据" class="headerlink" title="保存分类数据"></a>保存分类数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在settings.py开启, 类别的Pipeline</span><br><span class="line">ROBOTSTXT_OBEY &#x3D; False  不遵守网络协议</span><br><span class="line">ITEM_PIPELINES &#x3D; &#123;</span><br><span class="line">   &#39;mall_spider.pipelines.CategoryPipeline&#39;: 300,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>步骤</code>:</p><ol><li><code>open_spider</code>方法中, 链接MongoDB数据库, 获取要操作的集合</li><li><code>process_item</code> 方法中, 向MongoDB中插入类别数据</li><li><code>close_spider</code> 方法中, 关闭MongoDB的链接</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">实现保存分类的Pipeline类</span><br><span class="line">- open_spider方法中, 链接MongoDB数据库, 获取要操作的集合</span><br><span class="line">- process_item 方法中, 向MongoDB中插入类别数据</span><br><span class="line">- close_spider 方法中, 关闭MongoDB的链接</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">class CategoryPipeline(object):</span><br><span class="line"></span><br><span class="line">    def open_spider(self, spider):</span><br><span class="line">        &quot;&quot;&quot;当爬虫启动的时候执行1次&quot;&quot;&quot;</span><br><span class="line">        if isinstance(spider, JdCategorySpider):</span><br><span class="line">            # open_spider方法中, 链接MongoDB数据库, 获取要操作的集合</span><br><span class="line">            self.client &#x3D; MongoClient(MONGODB_URL)</span><br><span class="line">            self.collection &#x3D; self.client[&#39;jd&#39;][&#39;category&#39;]</span><br><span class="line"></span><br><span class="line">    def process_item(self, item, spider):</span><br><span class="line">        # process_item 方法中, 向MongoDB中插入类别数据</span><br><span class="line">        if isinstance(spider, JdCategorySpider):</span><br><span class="line">            self.collection.insert_one(dict(item))</span><br><span class="line"></span><br><span class="line">        return item</span><br><span class="line"></span><br><span class="line">    def close_spider(self, spider):</span><br><span class="line">        # close_spider 方法中, 关闭MongoDB的链接</span><br><span class="line">        if isinstance(spider, JdCategorySpider):</span><br><span class="line">            self.client.close()</span><br></pre></td></tr></table></figure><h3 id="商品爬虫"><a href="#商品爬虫" class="headerlink" title="商品爬虫"></a>商品爬虫</h3><p><code>总体设计</code>:</p><ol><li>把MongoDB中存储的分类信息, 放到redis_key指定列表中</li><li>支持分布式爬虫, 当然也可以在一台电脑上运行多次, 以启动多个进程,充分使用CPU的多核.</li><li>所以这里的爬虫, 先从一个分类开始抓就可以了, 后面再改造为分布式</li></ol><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li><p>列表页</p><ul><li><p>提取商品 skuid<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/07_1_%E4%BB%8E%E5%88%97%E8%A1%A8%E9%A1%B5%E6%88%96%E5%95%86%E5%93%81%E7%9A%84skuid.png">  </p></li><li><p>实现翻页</p><ul><li>获取下一页URL<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/07_2_%E8%8E%B7%E5%8F%96%E5%88%86%E9%A1%B5%E7%9A%84URL.png"></li><li>没有下一页的情况<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/07_3_%E6%B2%A1%E6%9C%89%E4%B8%8B%E4%B8%80%E9%A1%B5%E7%9A%84%E6%83%85%E5%86%B5.png"></li></ul></li></ul></li><li><p>详情页<br>由于PC和手机页面商品信息, 在js中, 且比较分散, 并且每次请求数量页比较大, 我们这里使用手机抓包, 抓到json数据. </p></li><li><p>商品基本信息</p><ul><li>图:<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/08_1_%E5%95%86%E5%93%81%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF.png"></li><li>URL: <code>https://cdnware.m.jd.com/c1/skuDetail/apple/7.3.0/32426231880.json</code>; 最后一部分是商品skuid</li><li>可以获取到的信息:  商品名称, 商品店铺信息 , 商品类别id, 商品品牌id, 商品选项</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line"><span class="attr">"code"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"wareInfo"</span>: &#123;</span><br><span class="line"><span class="attr">"recommendInfo"</span>: &#123;</span><br><span class="line"><span class="attr">"recommendList"</span>: <span class="literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line">      <span class="comment">// 商品店铺信息</span></span><br><span class="line"><span class="attr">"shopInfo"</span>: &#123;</span><br><span class="line"><span class="attr">"shop"</span>: &#123;</span><br><span class="line"><span class="attr">"shopId"</span>: <span class="number">1000000127</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"京东Apple产品专营店"</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br><span class="line">"basicInfo": &#123;</span><br><span class="line">"gift": false,</span><br><span class="line">"bookInfo": &#123;</span><br><span class="line">              <span class="comment">// 如果是书, 这里是书的选项信息</span></span><br><span class="line">"display": false</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">"colorSizeInfo": &#123;</span><br><span class="line">              <span class="comment">// 商品选项信息列表 有的没有</span></span><br><span class="line">"colorSize": [&#123;</span><br><span class="line">"buttons": [&#123;</span><br><span class="line">"no": "1",</span><br><span class="line">"skuList": ["100000177738", "100000287117", "100000287145", "100000309448", "100000309450", "100000375233", "100000435832", "100000458753", "100000458755", "100001860767", "100001860773"],</span><br><span class="line">"text": "金色"</span><br><span class="line">&#125;, &#123;</span><br><span class="line">"no": "2",</span><br><span class="line">"skuList": ["100000177764", "100000287113", "100000287135", "100000435780", "100000435816", "100000435818", "100000569049", "100000602206", "100000602208", "100001860765", "100002539302"],</span><br><span class="line">"text": "深空灰色"</span><br><span class="line">&#125;, &#123;</span><br><span class="line">"no": "3",</span><br><span class="line">"skuList": ["100000177740", "100000177784", "100000287147", "100000435834", "100000458737", "100000458739", "100000602174", "100000602176", "100000602204", "100001860789", "100002539304"],</span><br><span class="line">"text": "银色"</span><br><span class="line">&#125;],</span><br><span class="line">"title": "颜色"</span><br><span class="line">&#125;, &#123;</span><br><span class="line">"buttons": [&#123;</span><br><span class="line">"no": "1",</span><br><span class="line">"skuList": ["100000177738", "100000177740", "100000177764", "100000177784", "100000287113", "100000287117", "100000287135", "100000287145", "100000287147"],</span><br><span class="line">"text": "公开版"</span><br><span class="line">&#125;,</span><br><span class="line">                  ...</span><br><span class="line">                  ],</span><br><span class="line">"title": "版本"</span><br><span class="line">&#125;, &#123;</span><br><span class="line">"buttons": [&#123;</span><br><span class="line">"no": "1",</span><br><span class="line">"skuList": ["100000177764", "100000287145", "100000287147", "100000375233", "100000435818", "100000458739", "100000458755", "100000602204", "100000602208", "100001860765", "100001860773", "100001860789"],</span><br><span class="line">"text": "64GB"</span><br><span class="line">&#125;, </span><br><span class="line">                  ...</span><br><span class="line">                  ],</span><br><span class="line">"title": "内存"</span><br><span class="line">&#125;],</span><br><span class="line">"colorSizeTips": "#与其他已选项无法组成可售商品，请重选"</span><br><span class="line">&#125;,</span><br><span class="line">    ...</span><br><span class="line">          <span class="comment">// 品牌ID</span></span><br><span class="line">"brandID": "14026",</span><br><span class="line">          ...</span><br><span class="line">          <span class="comment">// 商品图片</span></span><br><span class="line">"wareImage": [&#123;</span><br><span class="line">"small": "https://m.360buyimg.com/mobilecms/s720x720_jfs/t1/3/15/4536/138660/5b997bf8Ed72ebce7/819dcf182d743897.jpg!q70.jpg.webp",</span><br><span class="line">              ...</span><br><span class="line">  &#125;</span><br><span class="line">            ...</span><br><span class="line">          ],</span><br><span class="line">          ...</span><br><span class="line">          <span class="comment">// 商品名称</span></span><br><span class="line">"name": "Apple iPhone XS Max (A2104) 256GB 深空灰色 移动联通电信4G手机 双卡双待",</span><br><span class="line">          <span class="comment">// 商品类别id</span></span><br><span class="line">"category": "9987;653;655"</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>商品促销信息(PC端):</p><ul><li>图:<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/08_2_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E8%8E%B7%E5%8F%96%E4%BF%83%E9%94%80%E4%BF%A1%E6%81%AF.png"></li><li>URL: <a href="https://cd.jd.com/promotion/v2?skuId=4749506&amp;area=1_72_4137_0&amp;cat=737,794,798" target="_blank" rel="noopener">https://cd.jd.com/promotion/v2?skuId=4749506&amp;area=1_72_4137_0&amp;cat=737%2C794%2C798</a><ul><li>参数<ul><li>skuId=4749506: 商品sku_id</li><li>area=1_72_4137_0: 购买者区域, 固定的</li><li>cat=737%2C794%2C798: 类别</li></ul></li></ul></li><li>数据</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 商品促销信息</span></span><br><span class="line">  "ads": [&#123;</span><br><span class="line">      "id": "AD_4749506",</span><br><span class="line">      "ad": "【即刻预约，21号秒杀到手价2999】\n1、前100名晒单送腾讯企鹅影院季卡，联系客服领取！！\n2、曲面爆款，5.5万好评推荐！&lt;a target=\"_blank\" href=\"https://item.jd.com/7055876.html\"&gt;升级55Q1D超清全面屏电视&lt;/a&gt;"</span><br><span class="line">  &#125;],</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>商品评论信息(PC端)</p><ul><li><p>图:<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/08_3_%E5%95%86%E5%93%81%E8%AF%84%E8%AE%BA%E4%BF%A1%E6%81%AFURL.png"></p></li><li><p>URL: <a href="https://club.jd.com/comment/productCommentSummaries.action?referenceIds=4749506" target="_blank" rel="noopener">https://club.jd.com/comment/productCommentSummaries.action?referenceIds=4749506</a></p><ul><li>参数<ul><li>referenceIds=4749506: 商品sku_id</li></ul></li></ul></li><li><p>数据:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"CommentsCount"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"CommentCountStr"</span>:<span class="string">"10万+"</span>, </span><br><span class="line">        <span class="attr">"CommentCount"</span>:<span class="number">100000</span>, <span class="comment">//评论数量</span></span><br><span class="line">        <span class="attr">"AverageScore"</span>:<span class="number">5</span>,</span><br><span class="line">        <span class="attr">"GoodRate"</span>:<span class="number">0.98</span>, <span class="comment">//好评率</span></span><br><span class="line">        <span class="attr">"PoorCountStr"</span>:<span class="string">"600+"</span>, </span><br><span class="line">        <span class="attr">"PoorCount"</span>:<span class="number">600</span>, <span class="comment">// 差评数量</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;]&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>商品价格信息: </p><ul><li><p>图:<br><img src="/2021/04/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BScrapy%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9C/08_4_%E5%95%86%E5%93%81%E4%BB%B7%E6%A0%BCURL.png"></p></li><li><p>URL: <a href="https://p.3.cn/prices/mgets?skuIds=J_4749506" target="_blank" rel="noopener">https://p.3.cn/prices/mgets?skuIds=J_4749506</a></p><ul><li>参数:<ul><li>skuIds=J_4749506 商品的sku_id</li></ul></li></ul></li><li><p>数据:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">"op"</span>: <span class="string">"5499.00"</span>,</span><br><span class="line">      <span class="attr">"m"</span>: <span class="string">"5999.00"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"J_4749506"</span>, <span class="comment">//商品skuid</span></span><br><span class="line">      <span class="attr">"p"</span>: <span class="string">"3299.00"</span> <span class="comment">// 商品价格</span></span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li>步骤:<ol><li>重写start_requests方法, 根据分类信息构建列表页的请求</li><li>解析列表页, 提取商品的skuid, 构建商品基本的信息请求; 实现翻页</li><li>解析商品基本信息, 构建商品促销信息的请求</li><li>解析促销信息,构建商品评价信息的请求,</li><li>解析商品评价信息, 构建价格信息的请求   </li><li>解析价格信息</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">class JdProductSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;jd_product&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;jd.com&#39;, &#39;p.3.cn&#39;]</span><br><span class="line"></span><br><span class="line">    def start_requests(self):</span><br><span class="line">        category &#x3D; &#123;  &quot;b_category_name&quot; : &quot;家用电器&quot;,</span><br><span class="line">                      &quot;b_category_url&quot; : &quot;https:&#x2F;&#x2F;jiadian.jd.com&quot;,</span><br><span class="line">                      &quot;m_category_name&quot; : &quot;洗衣机&quot;,</span><br><span class="line">                      &quot;m_category_url&quot; : &quot;https:&#x2F;&#x2F;list.jd.com&#x2F;list.html?cat&#x3D;737,794,880&quot;,</span><br><span class="line">                      &quot;s_category_name&quot; : &quot;洗衣机配件&quot;,</span><br><span class="line">                      &quot;s_category_url&quot; : &quot;https:&#x2F;&#x2F;list.jd.com&#x2F;list.html?cat&#x3D;737,794,877&quot; &#125;</span><br><span class="line"></span><br><span class="line">        yield scrapy.Request(category[&#39;s_category_url&#39;], self.parse, meta&#x3D;&#123;&#39;category&#39;: category&#125;)</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        # 获取类别信息</span><br><span class="line">        category &#x3D; response.meta[&#39;category&#39;]</span><br><span class="line">        # 获取类别的URL</span><br><span class="line">        category_url &#x3D; response.url.split(&#39;&amp;&#39;)[0]</span><br><span class="line">        # 获取所有商品的sku_ids</span><br><span class="line">        sku_ids &#x3D; response.xpath(&#39;&#x2F;&#x2F;div[contains(@class, &quot;j-sku-item&quot;)]&#x2F;@data-sku&#39;).extract()</span><br><span class="line">        # 遍历sku_ids, 构建基本详情信息的请求</span><br><span class="line">        for sku_id in sku_ids:</span><br><span class="line">            item &#x3D; &#123;</span><br><span class="line">                 &#39;product_category&#39;: category,</span><br><span class="line">                 &#39;product_sku_id&#39;:sku_id</span><br><span class="line">            &#125;</span><br><span class="line">            product_url &#x3D; &#39;https:&#x2F;&#x2F;cdnware.m.jd.com&#x2F;c1&#x2F;skuDetail&#x2F;apple&#x2F;7.3.0&#x2F;&#123;&#125;.json&#39;.format(sku_id)</span><br><span class="line">            yield scrapy.Request(product_url, callback&#x3D;self.parse_product, meta&#x3D;&#123;&#39;item&#39;: item&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # 获取下一页的URL</span><br><span class="line">        next_url &#x3D; response.xpath(&#39;&#x2F;&#x2F;a[@class&#x3D;&quot;pn-next&quot;]&#x2F;@href&#39;).extract_first()</span><br><span class="line">        if next_url:</span><br><span class="line">            # 补全URL</span><br><span class="line">            next_url &#x3D; response.urljoin(next_url)</span><br><span class="line">            # 构建下一页请求</span><br><span class="line">            yield scrapy.Request(next_url, callback&#x3D;self.parse, meta&#x3D;&#123;&#39;category&#39;: category&#125;)</span><br><span class="line"></span><br><span class="line">    def parse_product(self, response):</span><br><span class="line">        # 取出传递过来的数据</span><br><span class="line">        item &#x3D; response.meta[&#39;item&#39;]</span><br><span class="line">        # 把响应数据数据转为字典</span><br><span class="line">        product_dic &#x3D; json.loads(response.text)</span><br><span class="line"></span><br><span class="line">        # 获取商品名称</span><br><span class="line">        item[&#39;product_name&#39;] &#x3D; product_dic[&#39;wareInfo&#39;][&#39;basicInfo&#39;][&#39;name&#39;]</span><br><span class="line">        if  item[&#39;product_name&#39;]:</span><br><span class="line">            # 获取类别id, 把 &#96;;&#96; 替换为 ,</span><br><span class="line">            item[&#39;product_category_id&#39;] &#x3D; product_dic[&#39;wareInfo&#39;][&#39;basicInfo&#39;][&#39;category&#39;].replace(&#39;;&#39;, &#39;,&#39;)</span><br><span class="line">            # 获取店铺信息</span><br><span class="line">            product_shop &#x3D; jsonpath(product_dic, &#39;$..shop&#39;)</span><br><span class="line">            if product_shop:</span><br><span class="line">                product_shop &#x3D; product_shop[0]</span><br><span class="line">                if product_shop is None:</span><br><span class="line">                    item[&#39;product_shop&#39;] &#x3D; &#123;&#39;name&#39;:&#39;京东自营&#39;&#125;</span><br><span class="line">                else:</span><br><span class="line">                    item[&#39;product_shop&#39;] &#x3D; &#123;</span><br><span class="line">                        &quot;shopId&quot;: product_shop[&#39;shopId&#39;],</span><br><span class="line">                        &quot;name&quot;: product_shop[&#39;name&#39;],</span><br><span class="line">                        &quot;score&quot;: product_shop[&#39;score&#39;],</span><br><span class="line">                        &quot;url&quot;: product_shop[&#39;url&#39;],</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">            # 如果是书, 记录书的信息</span><br><span class="line">            if product_dic[&#39;wareInfo&#39;][&#39;basicInfo&#39;][&#39;bookInfo&#39;][&#39;display&#39;]:</span><br><span class="line">                item[&#39;product_book_info&#39;] &#x3D; product_dic[&#39;wareInfo&#39;][&#39;basicInfo&#39;][&#39;bookInfo&#39;]</span><br><span class="line">                # 删除display</span><br><span class="line">                del item[&#39;book_info&#39;][&#39;display&#39;]</span><br><span class="line">            # 获取商品选购信息</span><br><span class="line">            color_sizes &#x3D; jsonpath(product_dic, &#39;$..colorSize&#39;)</span><br><span class="line">            product_option &#x3D; &#123;&#125;</span><br><span class="line">            if color_sizes:</span><br><span class="line">                for color_size in color_sizes[0]:</span><br><span class="line">                    title &#x3D; color_size[&#39;title&#39;]</span><br><span class="line">                    texts &#x3D; jsonpath(color_size, &#39;$..text&#39;)</span><br><span class="line">                    product_option.update(&#123;title:texts&#125;)</span><br><span class="line">                    # print(product_option)</span><br><span class="line">            item[&#39;product_option&#39;] &#x3D; product_option</span><br><span class="line">            # 商品图片</span><br><span class="line">            item[&#39;product_img_url&#39;] &#x3D; jsonpath(product_dic, &#39;$..wareImage[0].small&#39;)[0]</span><br><span class="line"></span><br><span class="line">            # 构建促销信息的请求</span><br><span class="line">            ad_url &#x3D; &#39;https:&#x2F;&#x2F;cd.jd.com&#x2F;promotion&#x2F;v2?skuId&#x3D;&#123;&#125;&amp;area&#x3D;1_72_4137_0&amp;cat&#x3D;&#123;&#125;&#39;.format(item[&#39;product_sku_id&#39;], item[&#39;product_category_id&#39;])</span><br><span class="line">            yield scrapy.Request(ad_url, callback&#x3D;self.parse_ad, meta&#x3D;&#123;&#39;item&#39;: item&#125;)</span><br><span class="line"></span><br><span class="line">    def parse_ad(self, response):</span><br><span class="line">        &quot;&quot;&quot;获取商品促销&quot;&quot;&quot;</span><br><span class="line">        item &#x3D; response.meta[&#39;item&#39;]</span><br><span class="line">        ad_dic &#x3D; json.loads(response.body.decode(&#39;GB18030&#39;))</span><br><span class="line">        ad &#x3D;  ad_dic[&#39;ads&#39;][0][&#39;ad&#39;]</span><br><span class="line">        item[&#39;product_ad&#39;] &#x3D; ad</span><br><span class="line"></span><br><span class="line">        # for key, value in item.items():</span><br><span class="line">        #     print(&#39;&#123;&#125; &#x3D; &#123;&#125;&#39;.format(key, value))</span><br><span class="line"></span><br><span class="line">        # 构建平均信息请求</span><br><span class="line">        comments_url &#x3D; &#39;https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productCommentSummaries.action?referenceIds&#x3D;&#123;&#125;&#39;.format(item[&#39;product_sku_id&#39;])</span><br><span class="line">        yield scrapy.Request(comments_url, callback&#x3D;self.parse_comments, meta&#x3D;&#123;&#39;item&#39;: item&#125;)</span><br><span class="line"></span><br><span class="line">    def parse_comments(self, response):</span><br><span class="line">        &quot;&quot;&quot;解析商品评论信息&quot;&quot;&quot;</span><br><span class="line">        item &#x3D; response.meta[&#39;item&#39;]</span><br><span class="line">        comments_dic &#x3D; json.loads(response.text)</span><br><span class="line">        comments &#x3D; &#123;</span><br><span class="line">            &#39;comment_count&#39;: jsonpath(comments_dic, &#39;$..CommentCount&#39;)[0],</span><br><span class="line">            &#39;good_rate&#39;: jsonpath(comments_dic, &#39;$..GoodRate&#39;)[0],</span><br><span class="line">            &#39;poor_count&#39;: jsonpath(comments_dic, &#39;$..PoorCount&#39;)[0],</span><br><span class="line">        &#125;</span><br><span class="line">        item[&#39;product_comments&#39;] &#x3D; comments</span><br><span class="line">        # print(item)</span><br><span class="line">        # 构建价格请求</span><br><span class="line">        price_url &#x3D; &#39;https:&#x2F;&#x2F;p.3.cn&#x2F;prices&#x2F;mgets?skuIds&#x3D;J_&#123;&#125;&#39;.format(item[&#39;product_sku_id&#39;])</span><br><span class="line">        yield scrapy.Request(price_url, callback&#x3D;self.parse_price, meta&#x3D;&#123;&#39;item&#39;: item&#125;)</span><br><span class="line"></span><br><span class="line">    def parse_price(self, response):</span><br><span class="line">        &quot;&quot;&quot;解析价格&quot;&quot;&quot;</span><br><span class="line">        item &#x3D; response.meta[&#39;item&#39;]</span><br><span class="line">        item[&#39;product_price&#39;] &#x3D; json.loads(response.text)[0][&#39;p&#39;]</span><br><span class="line">        # print(item)</span><br><span class="line">        yield item</span><br></pre></td></tr></table></figure><h4 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h4><ul><li><code>步骤</code>:<ol><li>修改爬虫类</li><li>在settings文件中配置scrapy_redis</li><li>写一个程序用于把MongoDB中分类信息, 放入到爬虫redis_key指定的列表中</li></ol></li></ul><p><strong>修改爬虫类</strong></p><ul><li><code>步骤</code>:<ol><li>修改继承关系: 继承RedisSpider</li><li>指定redis_key</li><li>把重写start_requests 改为 重写 make_request_from_data</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from scrapy_redis.spiders import RedisSpider</span><br><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">#  1. 修改继承关系: 继承RedisSpider</span><br><span class="line">class JdProductSpider(RedisSpider):</span><br><span class="line">    name &#x3D; &#39;jd_product&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;jd.com&#39;, &#39;p.3.cn&#39;]</span><br><span class="line">    # 2. 指定redis_key</span><br><span class="line">    redis_key &#x3D; &#39;jd_product:start_category&#39;</span><br><span class="line"></span><br><span class="line">    # 3. 把重写start_requests 改为 重写 make_request_from_data</span><br><span class="line">    def make_request_from_data(self, data):</span><br><span class="line">        # 把从Redis中读取到分类信息, 转换为字典</span><br><span class="line">        category &#x3D; pickle.loads(data)</span><br><span class="line">        return scrapy.Request(category[&#39;s_category_url&#39;], self.parse, meta&#x3D;&#123;&#39;category&#39;: category&#125;)</span><br></pre></td></tr></table></figure><p><code>注意</code>: 在<code>make_request_from_data</code>不能使用 <code>yield</code> 必须使用 <code>return</code></p><p><strong>在settings文件中配置scrapy_redis</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># MongoDB数据库的URL</span><br><span class="line">MONGO_URL &#x3D; &#39;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#39;</span><br><span class="line"></span><br><span class="line"># REDIS数据链接</span><br><span class="line">REDIS_URL &#x3D; &#39; redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;0&#39;</span><br><span class="line"></span><br><span class="line"># 去重容器类: 用于把已爬指纹存储到基于Redis的set集合中</span><br><span class="line">DUPEFILTER_CLASS &#x3D; &quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span><br><span class="line"># 调度器: 用于把待爬请求存储到基于Redis的队列</span><br><span class="line">SCHEDULER &#x3D; &quot;scrapy_redis.scheduler.Scheduler&quot;</span><br><span class="line"># 是不进行调度持久化:</span><br><span class="line"># 如果是True, 当程序结束的时候, 会保留Redis中已爬指纹和待爬的请求</span><br><span class="line"># 如果是False, 当程序结束的时候, 会清空Redis中已爬指纹和待爬的请求</span><br><span class="line">SCHEDULER_PERSIST &#x3D; True</span><br></pre></td></tr></table></figure><p><strong>把MongoDB中分类信息, 放入到爬虫redis_key指定的列表中</strong></p><ul><li><p><code>步骤</code>:</p><ul><li><ol><li>在项目文件夹下创建 <code>add_category_to_redis.py</code></li></ol></li><li><ol start="2"><li>实现方法 <code>add_category_to_redis</code>:<ol><li>链接MongoDB</li><li>链接Redis</li><li>读取MongoDB中分类信息, 序列化后, 添加到商品爬虫redis_key指定的list</li><li>关闭MongoDB</li></ol></li></ol></li><li><ol start="3"><li>在<code>if __name__ == &#39;__main__&#39;:</code>中调用<code>add_category_to_redis</code>方法</li></ol></li></ul></li><li><p><code>代码</code></p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mall_spider.settings <span class="keyword">import</span> MONGO_URL, REDIS_URL</span><br><span class="line"><span class="keyword">from</span> mall_spider.spiders.jd_product <span class="keyword">import</span> JdProductSpider</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把MongoDB中分类信息, 添加到Redis中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_category_to_redis</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 链接MongoDB</span></span><br><span class="line">    client = MongoClient(MONGO_URL)</span><br><span class="line">    <span class="comment"># 链接Redis</span></span><br><span class="line">    redis = StrictRedis.from_url(REDIS_URL)</span><br><span class="line"></span><br><span class="line">    cursor = client[<span class="string">'jd'</span>][<span class="string">'category'</span>].find()</span><br><span class="line">    <span class="comment"># 读取MongoDB中分类信息, 序列化后, 添加到商品爬虫redis_key指定的list</span></span><br><span class="line">    <span class="keyword">for</span> category <span class="keyword">in</span> cursor:</span><br><span class="line">        redis.rpush(JdProductSpider.redis_key, pickle.dumps(category))</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 关闭MongoDB的链接</span></span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    add_category_to_redis()</span><br></pre></td></tr></table></figure><h3 id="保存商品数据"><a href="#保存商品数据" class="headerlink" title="保存商品数据"></a>保存商品数据</h3><p><code>步骤</code></p><ul><li><p>在 open_spider方法, 建立MongoDB数据库连接, 获取要操作的集合</p></li><li><p>在 process_item方法, 把数据插入到MongoDB中</p></li><li><p>在close_spider方法, 关闭数据库连接</p></li><li><p>代码</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(spider, JdProductSpider):</span><br><span class="line">            <span class="comment"># 建立MongoDB数据库链接</span></span><br><span class="line">            self.client = MongoClient(MONGO_URL)</span><br><span class="line">            <span class="comment"># 获取要操作集合</span></span><br><span class="line">            self.category = self.client[<span class="string">'jd'</span>][<span class="string">'product'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(spider, JdProductSpider):</span><br><span class="line">            <span class="comment"># 把数据插入到mongo中</span></span><br><span class="line">            self.category.insert_one(dict(item))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="string">"""关闭"""</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(spider, JdProductSpider):</span><br><span class="line">            self.client.close()</span><br></pre></td></tr></table></figure><p><strong>在settings.py中开启这个管道</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">'mall_spider.pipelines.CategoryPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="comment"># 开启商品管道</span></span><br><span class="line">   <span class="string">'mall_spider.pipelines.ProductPipeline'</span>: <span class="number">301</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反爬"><a href="#反爬" class="headerlink" title="反爬"></a>反爬</h3><p>为了避免IP反爬, 我们实现随机User-Agent和代理IP的中间件</p><ul><li><code>步骤</code>: <ol><li>实现随机User-Agent的中间件</li><li>实现代理IP中间件</li><li>在settings.py 文件开启, 下载器中间件</li></ol></li></ul><h4 id="实现随机User-Agent的中间件"><a href="#实现随机User-Agent的中间件" class="headerlink" title="实现随机User-Agent的中间件"></a>实现随机User-Agent的中间件</h4><ul><li><p><code>步骤</code></p><ul><li>准备User-Agent列表</li><li>在middlewares.py中, 实现RandomUserAgent类</li><li>实现process_request方法<ul><li>如果是请求是 <code>https://cdnware.m.jd.com</code> 开头的, 就是设置一个iPhone的user-agent</li><li>否则从User-Agent列表中随机取出一个</li></ul></li></ul></li><li><p>代码</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备请求头</span></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.url.startswith(<span class="string">'https://cdnware.m.jd.com'</span>):</span><br><span class="line">            <span class="comment"># 如果使用手机抓包, 获取到商品信息; 生成请求请求头</span></span><br><span class="line">            request.headers[<span class="string">'user-agent'</span>] = <span class="string">'JD4iPhone/164880 (iPhone; iOS 12.1.2; Scale/2.00)'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 随机获取一个请求头, 进行设置</span></span><br><span class="line">            request.headers[<span class="string">'user-agent'</span>] = random.choice(USER_AGENTS)</span><br></pre></td></tr></table></figure><h4 id="实现代理IP中间件"><a href="#实现代理IP中间件" class="headerlink" title="实现代理IP中间件"></a>实现代理IP中间件</h4><ul><li><p><code>步骤</code>:</p><ul><li>在middlewares.py中, 实现ProxyMiddleware类</li><li>实现process_request方法<ul><li>从代理池中获取一个随机的代理IP, 需指定代理IP的协议, 和访问的域名</li><li>设置给request.meta[‘proxy’]</li></ul></li><li>实现process_exception方法</li><li>当请求出现异常的时候, 代理池哪些代理IP在本域名下是不可以用的</li></ul></li><li><p><code>代码</code></p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">9.2. 实现代理IP中间件</span></span><br><span class="line"><span class="string">步骤:</span></span><br><span class="line"><span class="string">    在middlewares.py中, 实现ProxyMiddleware类</span></span><br><span class="line"><span class="string">    实现process_request方法</span></span><br><span class="line"><span class="string">    从代理池中获取一个随机的代理IP</span></span><br><span class="line"><span class="string">    设置给request.meta['proxy']</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> defer</span><br><span class="line"><span class="keyword">from</span> twisted.internet.error <span class="keyword">import</span> TimeoutError, DNSLookupError, \</span><br><span class="line">        ConnectionRefusedError, ConnectionDone, ConnectError, \</span><br><span class="line">        ConnectionLost, TCPTimedOutError</span><br><span class="line"><span class="keyword">from</span> twisted.web.client <span class="keyword">import</span> ResponseFailed</span><br><span class="line"><span class="keyword">from</span> scrapy.core.downloader.handlers.http11 <span class="keyword">import</span> TunnelError</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    EXCEPTIONS_TO_RETRY = (defer.TimeoutError, TimeoutError, DNSLookupError,</span><br><span class="line">                           ConnectionRefusedError, ConnectionDone, ConnectError,</span><br><span class="line">                           ConnectionLost, TCPTimedOutError, ResponseFailed,</span><br><span class="line">                           IOError, TunnelError)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         从代理池中获取一个随机的代理IP</span></span><br><span class="line"><span class="string">         设置给request.meta['proxy']</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        response = requests.get(<span class="string">'http://localhost:6868/random?protocol=https&amp;domain=jd.com'</span>)</span><br><span class="line">        request.meta[<span class="string">'proxy'</span>] = response.content.decode()</span><br><span class="line">        request.meta[<span class="string">'dont_redirect'</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(exception, self.EXCEPTIONS_TO_RETRY):</span><br><span class="line">            <span class="comment"># 获取代理IP</span></span><br><span class="line">            proxy = request.meta[<span class="string">'proxy'</span>]</span><br><span class="line">            <span class="comment"># 提取IP地址</span></span><br><span class="line">            ip = re.findall(<span class="string">'https://(.+):\d+'</span>, proxy)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            params = &#123;</span><br><span class="line">              <span class="string">'ip'</span>: ip,</span><br><span class="line">              <span class="string">'domain'</span>: <span class="string">'jd.com'</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            requests.get(<span class="string">'http://localhost:6868/disable_domain'</span>, params=params)</span><br><span class="line">            <span class="comment"># 构建请求返回</span></span><br><span class="line">            req = request.copy()</span><br><span class="line">            req.dont_filter = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> req</span><br></pre></td></tr></table></figure><p><strong>在settings.py中开启上面的两个下载器中间件</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置下载器中间件</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line"><span class="string">'mall_spider.middlewares.RandomUserAgent'</span>: <span class="number">500</span>,</span><br><span class="line"><span class="string">'mall_spider.middlewares.ProxyMiddl eware'</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>完整源码请关注微信公众号：ReverseCode，回复：爬虫基础</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 爬虫基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
            <tag> scrapy_redis </tag>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇之斗鱼弹幕</title>
      <link href="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/"/>
      <url>/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><blockquote><p><code>asyncore</code> 模块为异步socket的服务器客户端通信提供简单的接口。该模块提供了异步socket服务客户端和服务器的基础架构。</p><p>相比python原生的socket api，asyncore具备有很大的优势，asyncore对原生的socket进行封装，提供非常简洁优秀的接口，利用asyncore覆写相关需要处理的接口方法，就可以完成一个socket的网络编程，从而不需要处理复杂的socket网络状况以及多线程处理等等。</p></blockquote><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/asyncore%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B.png" alt="asyncore实现流程"></p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netcat-win32-1.12&gt;nc -l -p 9000  启动服务端</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>telnet 127.0.0.1 9000 客户端连接到服务器  发送信息</p><ol><li><p>定义类继承自<code>asyncore.dispatcher</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span><span class="params">(asyncore.dispatcher)</span>:</span></span><br></pre></td></tr></table></figure></li><li><p>实现类中的回调代码</p><ul><li><p>实现构造函数</p><ul><li><p>调用父类方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asyncore.dispatcher.__init__(self)</span><br></pre></td></tr></table></figure></li><li><p>创建 Socket 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.create_socket()</span><br></pre></td></tr></table></figure></li><li><p>连接服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">address = (host,port)</span><br><span class="line">self.connect(address)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实现 <code>handle_connect</code> 回调函数</p><blockquote><p>当 <code>Socket</code> 连接服务器成功时回调该函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_connect</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"连接成功"</span>)</span><br></pre></td></tr></table></figure></li><li><p>实现 <code>writable</code> 回调函数</p><blockquote><p>描述是否有数据需要被发送到服务器。返回值为 <code>True</code> 表示可写，<code>False</code> 表示不可写，如果不实现默认返回为 <code>True</code>，当返回 <code>True</code> 时，回调函数 <code>handle_write</code> 将被触发</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writable</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>实现 <code>handle_write</code> 回调函数</p><blockquote><p>当有数据需要发送时（<code>writable </code>回调函数返回True时），该函数被触发，通常情况下在该函数中编写 send 方法发送数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_write</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 内部实现对服务器发送数据的代码</span></span><br><span class="line">    <span class="comment"># 调用 send 方法发送数据，参数是字节数据</span></span><br><span class="line">    self.send(<span class="string">'hello world\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></li><li><p>实现 <code>readable</code> 回调函数</p><blockquote><p>描述是否有数据从服务端读取。返回 <code>True</code> 表示有数据需要读取，<code>False</code> 表示没有数据需要被读取，当不实现默认返回为 <code>True</code>，当返回 <code>True</code> 时，回调函数 <code>handle_read</code> 将被触发</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readable</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>实现 <code>handle_read</code> 回调函数</p><blockquote><p>当有数据需要读取时触发（<code>readable</code> 回调函数返回 <code>True</code> 时），该函数被触发，通常情况下在该函数中编写 <code>recv</code> 方法接收数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_read</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 主动接收数据，参数是需要接收数据的长度</span></span><br><span class="line">    <span class="comment"># 返回的数据是字节数据</span></span><br><span class="line">    result = self.recv(<span class="number">1024</span>)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure></li><li><p>实现 <code>handle_error</code> 回调函数</p><blockquote><p>当程序运行过程发生异常时回调</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_error</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 编写处理错误方法</span></span><br><span class="line">    t,e,trace = sys.exc_info()</span><br><span class="line">    self.close()</span><br></pre></td></tr></table></figure></li><li><p>实现 <code>handle_close</code> 回调函数</p><blockquote><p>当连接被关闭时触发</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_close</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"连接关闭"</span>)</span><br><span class="line">    self.close()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建对象并且执行 <code>asyncore.loop</code> 进入运行循环</p><ul><li><p><code>timeout</code> 表示一次循环所需要的时长</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client = SocketClient(<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>)</span><br><span class="line"><span class="comment"># 开始启动运行循环</span></span><br><span class="line">asyncore.loop(timeout=<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="抓取弹幕"><a href="#抓取弹幕" class="headerlink" title="抓取弹幕"></a>抓取弹幕</h2><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><p>根据<code>斗鱼弹幕服务器第三方接入协议v1.6.2.pdf</code> 官方提供协议文档建立弹幕客户端开发流程。</p><ul><li>连接初始化<ul><li>使用TCP连接服务器<ul><li>IP地址：openbarrage.douyutv.com</li><li>端口：8601</li></ul></li><li>客户端向弹幕服务器发送登录请求，登录弹幕服务器</li><li>弹幕服务器收到客户端登录请求并完成登录后，返回登录成功消息给客户端</li><li>客户端收到登录成功消息后发送进入弹幕分组请求给弹幕服务器</li><li>弹幕服务器接受到客户端弹幕分组请求后将客户端添加到请求指定的弹幕分组中</li></ul></li><li>服务过程<ul><li>客户端每隔 45 秒发送心跳给弹幕服务器，弹幕服务器回复心跳信息给客户端</li><li>弹幕服务器如有广播信息，则推送给客户端，服务器消息协议</li></ul></li><li>断开连接<ul><li>客户端发送登出消息</li><li>客户端关闭 TCP 连接</li></ul></li></ul><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E6%B5%81%E7%A8%8B.png" alt="数据包发送和接收流程"></p><h3 id="数据包结构"><a href="#数据包结构" class="headerlink" title="数据包结构"></a>数据包结构</h3><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F.png" alt="协议格式"></p><ul><li>消息长度:4 字节小端整数，表示整条消息(包括自身)长度(字节数)。 消息长度出现两遍，二者相同。</li><li>消息类型:2 字节小端整数，表示消息类型。取值如下:<ul><li>689 客户端发送给弹幕服务器的文本格式数据</li><li>690 弹幕服务器发送给客户端的文本格式数据。</li></ul></li><li>加密字段:1字节，暂时未用，默认为 0。</li><li>保留字段:1字节，暂时未用，默认为 0。</li><li>数据部分:n字节+1字节，斗鱼独创序列化文本数据，结尾必须为‘\0’。(所有协议内容均为 UTF-8 编码)</li></ul><h3 id="数据包封装"><a href="#数据包封装" class="headerlink" title="数据包封装"></a>数据包封装</h3><blockquote><p>对数据包进行对象化封装，对数据的封装方便以后使用，实现对象和二进制数据之间的转换</p></blockquote><ul><li>通过参数构建数据包对象</li><li>实现获取数据包长度的方法</li><li>实现获取二进制数据的方法</li></ul><h3 id="实现发送数据包"><a href="#实现发送数据包" class="headerlink" title="实现发送数据包"></a>实现发送数据包</h3><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="发送数据流程图"></p><ul><li><p>构建发送数据包的队列容器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.send_queue = Queue()</span><br></pre></td></tr></table></figure></li><li><p>实现回调函数，判断容器中有数据就发送没有数据不发送</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writable</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.send_queue.qsize() &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_write</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从发送数据包队列中获取数据包对象</span></span><br><span class="line">    dp = self.send_queue.get()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据包的长度，并且发送给服务器</span></span><br><span class="line">    dp_length = dp.get_length()</span><br><span class="line">    dp_length_data = dp_length.to_bytes(<span class="number">4</span>,byteorder=<span class="string">'little'</span>,signed=<span class="literal">False</span>)</span><br><span class="line">    self.send(dp_length_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送数据包二进制数据</span></span><br><span class="line">    self.send(dp.get_bytes())</span><br><span class="line">    self.send_queue.task_done()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>实现登录函数</p><ul><li><p>构建登录数据包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">content = <span class="string">"type@=loginreq/roomid@=&#123;&#125;/"</span>.format(room_id)</span><br><span class="line">login_dp = DataPacket(DATA_PACKET_TYPE_SEND,content=content)</span><br></pre></td></tr></table></figure></li><li><p>把数据包添加到发送数据包容器中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把数据包添加到发送数据包容器中</span></span><br><span class="line"> self.send_queue.put(login_dp)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="实现接收数据"><a href="#实现接收数据" class="headerlink" title="实现接收数据"></a>实现接收数据</h3><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="接收数据流程图"></p><ul><li><p>构建接收数据包队列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存放接收的数据包对象</span></span><br><span class="line">self.recv_queue = Queue()</span><br></pre></td></tr></table></figure></li><li><p>读取回调函数中读取数据</p><ul><li><p>读取长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取长度,二进制数据</span></span><br><span class="line">data_length_data = self.recv(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 通过二进制获取length 具体数据</span></span><br><span class="line">data_length = int.from_bytes(data_length_data,byteorder=<span class="string">'little'</span>,signed=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li><li><p>读取内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过数据包的长度获取数据</span></span><br><span class="line">data = self.recv(data_length)</span><br></pre></td></tr></table></figure></li><li><p>构建数据包对象</p><ul><li><p>数据包构造函数中解析二进制来构建数据包对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self.type = int.from_bytes(data_bytes[<span class="number">4</span>:<span class="number">6</span>],byteorder=<span class="string">'little'</span>,signed=<span class="literal">False</span>)</span><br><span class="line">self.encrypt_flag = int.from_bytes(data_bytes[<span class="number">6</span>:<span class="number">7</span>],byteorder=<span class="string">'little'</span>,signed=<span class="literal">False</span>)</span><br><span class="line">self.preserve_flag = int.from_bytes(data_bytes[<span class="number">7</span>:<span class="number">8</span>],byteorder=<span class="string">'little'</span>,signed=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 构建数据部分</span></span><br><span class="line">self.content = str(data_bytes[<span class="number">8</span>:<span class="number">-1</span>],encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过二进制数据构建数据包对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过二进制数据构建数据包对象</span></span><br><span class="line">dp = DataPacket(data_bytes=data)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>把数据包放入接收数据包容器中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把数据包放入接收数据包容器中</span></span><br><span class="line">self.recv_queue.put(dp)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>构建处理线程专门处理接收数据包容器中数据</p><ul><li><p>构建线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建一个专门处理接收数据包容器中的数据包的线程</span></span><br><span class="line">self.callback_thread = threading.Thread(target=self.do_callback)</span><br><span class="line">self.callback_thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">self.callback_thread.start()</span><br></pre></td></tr></table></figure></li><li><p>实现回调函数处理接收的数据包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_callback</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        专门负责处理接收数据包容器中的数据</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 从接收数据包容器中获取数据包</span></span><br><span class="line">        dp = self.recv_queue.get()</span><br><span class="line">        <span class="comment"># 对数据进行处理</span></span><br><span class="line">        print(dp.content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="实现外部传入回调函数"><a href="#实现外部传入回调函数" class="headerlink" title="实现外部传入回调函数"></a>实现外部传入回调函数</h3><blockquote><p>通过外部指定回调函数实现自定义数据处理</p></blockquote><ul><li><p>添加参数 <code>callback</code></p><ul><li><p>构造函数中添加参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,host,port,callback=None)</span>:</span></span><br><span class="line"><span class="comment"># 定义外部传入的自定义回调函数</span></span><br><span class="line">self.callback = callback</span><br></pre></td></tr></table></figure></li><li><p>外部传入自定义回调函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_callback</span><span class="params">(dp)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    自定义回调函数</span></span><br><span class="line"><span class="string">    :param dp: 数据包对象</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">"data_callback:"</span>,dp.content)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    client = DouyuClient(<span class="string">'openbarrage.douyutv.com'</span>,<span class="number">8601</span>,callback=data_callback)</span><br><span class="line"></span><br><span class="line">    client.login_room_id(<span class="number">4494106</span>)</span><br><span class="line"></span><br><span class="line">    asyncore.loop(timeout=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在处理接收数据包的线程中调用回调函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_callback</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        专门负责处理接收数据包容器中的数据</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 从接收数据包容器中获取数据包</span></span><br><span class="line">        dp = self.recv_queue.get()</span><br><span class="line">        <span class="comment"># 对数据进行处理</span></span><br><span class="line">        <span class="keyword">if</span> self.callback <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.callback(dp)</span><br><span class="line">        self.recv_queue.task_done()</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据内容序列化与反序列化"><a href="#数据内容序列化与反序列化" class="headerlink" title="数据内容序列化与反序列化"></a>数据内容序列化与反序列化</h3><ol><li>键 key 和值 value 直接采用‘@=’分割</li><li>数组采用‘/’分割</li><li>如果 key 或者 value 中含有字符‘/’，则使用‘@S’转义</li><li>如果 key 或者 value 中含有字符‘@’，使用‘@A’转义</li></ol><blockquote><p>例子</p><p>多个键值对数据:key1@=value1/key2@=value2/key3@=value3/</p><p>数组数据:value1/value2/value3/</p></blockquote><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/%E7%99%BB%E5%BD%95.png" alt="登录.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def login_room_id(self, room_id):</span><br><span class="line">    # 2.客户端向弹幕服务器发送登录请求，登录弹幕服务器</span><br><span class="line">    self.room_id &#x3D; room_id</span><br><span class="line"></span><br><span class="line">    send_data &#x3D; &#123;</span><br><span class="line">        &quot;type&quot;: &quot;loginreq&quot;,</span><br><span class="line">        &quot;roomid&quot;: str(room_id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 构建登录数据包</span><br><span class="line">    content &#x3D; encode_content(send_data)</span><br><span class="line">    login_dp &#x3D; DataPacket(DATA_PACKET_TYPE_SEND, content&#x3D;content)</span><br><span class="line"></span><br><span class="line">    # 把数据包添加到发送数据包容器中</span><br><span class="line">    self.send_queue.put(login_dp)</span><br></pre></td></tr></table></figure><h3 id="加入弹幕分组"><a href="#加入弹幕分组" class="headerlink" title="加入弹幕分组"></a>加入弹幕分组</h3><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/%E5%BC%B9%E5%B9%95%E5%88%86%E7%BB%84.png" alt="弹幕分组.png"></p><blockquote><p>参看斗鱼弹幕文档,<code>-9999</code> 为海量弹幕</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def join_room_group(self):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    4.客户端收到登录成功消息后发送进入弹幕分组请求给弹幕服务器</span><br><span class="line">    :return:</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    send_data &#x3D; &#123;</span><br><span class="line">        &quot;type&quot;: &quot;joingroup&quot;,</span><br><span class="line">        &quot;rid&quot;: str(self.room_id),</span><br><span class="line">        &quot;gid&quot;: &#39;-9999&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    content &#x3D; encode_content(send_data)</span><br><span class="line"></span><br><span class="line">    dp &#x3D; DataPacket(type&#x3D;DATA_PACKET_TYPE_SEND, content&#x3D;content)</span><br><span class="line">    self.send_queue.put(dp)</span><br><span class="line"></span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h3 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h3><blockquote><p>作用是让服务器解决假死连接问题，客户端必须每隔45秒发送一次请求，否则就会被主动断开。</p></blockquote><ul><li>实现发送心跳函数<ul><li>构建心跳数据包</li><li>把数据包添加到发送数据包容器队列中</li></ul></li><li>构建心跳线程<ul><li>构建心跳线程</li><li>添加触发机制</li><li>添加暂停机制</li></ul></li></ul><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6.png" alt="心跳机制.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def send_heart_data_packet(self):</span><br><span class="line">    # 6.客户端每隔 45 秒发送心跳给弹幕服务器，弹幕服务器回复心跳信息给客户端</span><br><span class="line">    send_data &#x3D; &#123;</span><br><span class="line">        &quot;type&quot;: &quot;mrkl&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    content &#x3D; encode_content(send_data)</span><br><span class="line">    dp &#x3D; DataPacket(type&#x3D;DATA_PACKET_TYPE_SEND, content&#x3D;content)</span><br><span class="line">    self.send_queue.put(dp)</span><br></pre></td></tr></table></figure><h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>以上方案已经失效，斗鱼弹幕已使用websocket实现，不过都是协议而已，基础逻辑没有变化。</p><p>通过抓包获取wss的地址及端口</p><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/websocket2.png" alt="websocket1"></p><p>查看抓包中的Messages中的二进制信息，数据格式和1.6.2保持一致。</p><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/websocket1.png" alt="websocket2"></p><p>run_forever是核心逻辑通过while循环实现自动重连，建立_job_open时调用_one_hello登录加入群组，通过_job_heartbeat持续接受心跳机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">async def run_forever(self) -&gt; None:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    重写</span><br><span class="line">    @return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    self._waiting_end &#x3D; self._loop.create_future()</span><br><span class="line">    while not self._closed:</span><br><span class="line">        self._logger_info(f&#39;正在启动 &#123;self._area_id&#125; 号数据连接&#39;)</span><br><span class="line">        if self._waiting_pause is not None:</span><br><span class="line">            self._logger_info(f&#39;暂停启动 &#123;self._area_id&#125; 号数据连接，等待 RESUME 指令&#39;)</span><br><span class="line">            await self._waiting_pause</span><br><span class="line">        </span><br><span class="line">        async with self._opening_lock:</span><br><span class="line">            if self._closed:</span><br><span class="line">                self._logger_info(f&#39;&#123;self._area_id&#125; 号数据连接确认收到关闭信号，正在处理&#39;)</span><br><span class="line">                break</span><br><span class="line">            # 未成功建立数据连接，循环重试</span><br><span class="line">            if await self._prepare_client() and await self._job_open():</span><br><span class="line">                tasks &#x3D; [self._loop.create_task(i()) for i in self._funcs_task]</span><br><span class="line"></span><br><span class="line">                self._task_main &#x3D; self._loop.create_task(self._job_main())</span><br><span class="line">                tasks.append(self._task_main)</span><br><span class="line"></span><br><span class="line">                task_heartbeat &#x3D; self._loop.create_task(self._job_heartbeat())</span><br><span class="line">                tasks.append(task_heartbeat)</span><br><span class="line">            else:</span><br><span class="line">                continue</span><br><span class="line">            </span><br><span class="line">        _, pending &#x3D; await asyncio.wait(tasks, return_when&#x3D;asyncio.FIRST_COMPLETED)</span><br><span class="line">        self._logger_info(f&#39;&#123;self._area_id&#125; 号数据连接异常或主动断开，正在处理剩余信息&#39;)</span><br><span class="line">        for i in pending:</span><br><span class="line">            if i !&#x3D; self._task_main:</span><br><span class="line">                i.cancel()</span><br><span class="line">        await self._job_close()</span><br><span class="line">        if pending:</span><br><span class="line">            await asyncio.wait(pending)</span><br><span class="line">        self._logger_info(f&#39;&#123;self._area_id&#125; 号数据连接退出，剩余任务处理完毕&#39;)</span><br><span class="line">    await self._conn.clean()</span><br><span class="line">    self._waiting_end.set_result(True)</span><br></pre></td></tr></table></figure><p><img src="/2021/04/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95/websocket%E6%8A%93%E5%8F%96%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95.gif" alt="websocket抓取斗鱼弹幕"></p><p><strong>完整源码请关注微信公众号：ReverseCode，回复：爬虫基础</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 爬虫基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncore </tag>
            
            <tag> socket </tag>
            
            <tag> asyncio </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇之IP代理池</title>
      <link href="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BIP%E4%BB%A3%E7%90%86%E6%B1%A0/"/>
      <url>/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BIP%E4%BB%A3%E7%90%86%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="代理池介绍"><a href="#代理池介绍" class="headerlink" title="代理池介绍"></a>代理池介绍</h1><p>由众多ip组成提供多个稳定可用代理IP的ip池。</p><p>当我们做爬虫时，最常见的反爬手段就是IP反爬，当同一个IP访问网站超出频控限制，将会被限制访问，那么代理IP池应运而生。资金充足的情况下个人建议还是付费ip代理池，比较免费ip时效性低，且难以维护。</p><p>本文将介绍通过requests库多线程抓取多个免费代理ip网站数据落库mongo后并动态维护保证IP高度可用，以API形式暴露接口获取代理IP的解决方案。</p><h2 id="爬取流程"><a href="#爬取流程" class="headerlink" title="爬取流程"></a>爬取流程</h2><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BIP%E4%BB%A3%E7%90%86%E6%B1%A0/%E4%BB%A3%E7%90%86%E6%B1%A0%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%E5%9B%BE%E8%A7%A3.png" alt="代理池设计思路图解"></p><ul><li>代理IP采集模块： 采集代理IP -&gt; 检测代理IP -&gt;如果不可用用, 直接过滤掉, 如果可用, 指定默认分数 -&gt; 存入数据库中</li><li>代理IP检测模块： 从数据库中获取所有代理IP -&gt; 检测代理IP -&gt; 如果代理IP不可用用, 就把分数-1, 如果分数为0从数据库中删除, 否则更新数据库, 如果代理IP可用, 恢复为默认分值,更新数据库</li><li>代理API模块：从数据库中高可用的代理IP给爬虫使用; </li></ul><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="爬虫模块"><a href="#爬虫模块" class="headerlink" title="爬虫模块"></a><strong>爬虫模块</strong></h3><p>从代理IP网站上采集代理IP ,对抓取的ip进行校验(获取代理响应速度, 协议类型, 匿名类型), 并存储到数据库中。</p><h3 id="校验模块"><a href="#校验模块" class="headerlink" title="校验模块"></a><strong>校验模块</strong></h3><p>网站上所标注的响应速度,协议类型和匿名类型是不准确的，通过httpbin.org进行检测，获取指定代理的响应速度, 支持的协议以及匿名程度。</p><h3 id="数据库模块"><a href="#数据库模块" class="headerlink" title="数据库模块"></a><strong>数据库模块</strong></h3><p>使用MongoDB来存储代理IP并实现对代理IP的增删改查操作。</p><h3 id="检测模块"><a href="#检测模块" class="headerlink" title="检测模块"></a><strong>检测模块</strong></h3><p>定时从数据库读取所有的代理IP，对代理IP进行逐一检测, 开启多个协程, 以提高检测速度，如果该代理不可用, 就让这个代理分数-1, 当代理的分数到0了, 就删除该代理; 如果检测到代理可用就恢复为满分。</p><h3 id="API模块"><a href="#API模块" class="headerlink" title="API模块"></a><strong>API模块</strong></h3><p>根据协议类型和域名获取多个随机的高质量代理IP，根据代理IP不可用域名, 告诉代理池这个代理IP在该域名下不可用, 下次获取这个域名的代理IP时候, 就不会再获取这个代理IP了, 从而保证代理IP高可用性。</p><h3 id="其他模块"><a href="#其他模块" class="headerlink" title="其他模块"></a><strong>其他模块</strong></h3><p><strong>数据模型</strong></p><p>代理IP的数据模型, 用于封装代理IP相关信息, 比如ip,端口号, 响应速度, 协议类型, 匿名类型,分数等。</p><p><strong>程序入口</strong></p><p>代理池提供一个统一的启动入口</p><p><strong>工具模块</strong></p><ul><li><p>日志模块: 用于记录日志信息</p></li><li><p>http模块: 用于获取随机User-Agent的请求头</p></li></ul><p><strong>配置文件</strong></p><p>用于默认代理的分数, 配置日志格式, 文件, 启动的爬虫, 检验的间隔时间 等。</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>思路1：依据流程图，逐步实现各个模块，当需要依赖其他模块时，暂停当前模块，开发其他模块功能，实现完毕再回头开发联调。</p><p>思路2：先实现不依赖其他模块的基础模块，再逐步实现具体的功能模块，比如爬虫模块, 检测模块, 代理API模块。</p><p>这里我们选择思路2实现爬虫代理IP池，因为思路1适合个人完成，不适合分工合作，且不易维护，思路跳来跳去，必须逻辑清晰。</p><h2 id="数据模型domain"><a href="#数据模型domain" class="headerlink" title="数据模型domain"></a>数据模型domain</h2><p>settings.py 中 定义MAX_SCORE = 50, 表示代理IP的默认最高分数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Proxy(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, ip, port, protocol&#x3D;-1, nick_type&#x3D;-1, speed&#x3D;-1, area&#x3D;None, score&#x3D;MAX_SCORE, disable_domains&#x3D;[]):</span><br><span class="line">        # ip: 代理的IP地址</span><br><span class="line">        self.ip &#x3D; ip</span><br><span class="line">        # port: 代理IP的端口号</span><br><span class="line">        self.port &#x3D; port</span><br><span class="line">        # protocol: 代理IP支持的协议类型, http是0, https是1, https和http都支持是2，-1不可用</span><br><span class="line">        self.protocol &#x3D; protocol</span><br><span class="line">        # nick_type: 代理IP的匿名程度, 高匿: 0, 匿名: 1, 透明: 2</span><br><span class="line">        self.nick_type &#x3D; nick_type</span><br><span class="line">        # speed: 代理IP的响应速度, 单位s</span><br><span class="line">        self.speed &#x3D; speed</span><br><span class="line">        # area: 代理IP所在地区</span><br><span class="line">        self.area &#x3D; area</span><br><span class="line">        # score: 代理IP的评分, 用于衡量代理的可用性;</span><br><span class="line">        self.score &#x3D; score</span><br><span class="line">        # 默认分值可以通过配置文件进行配置.在进行代理可用性检查的时候, 每遇到一次请求失败就减1份, 减到0的时候从池中删除.如果检查代理可用, 就恢复默认分值</span><br><span class="line">        # disable_domains: 不可用域名列表, 有些代理IP在某些域名下不可用, 但是在其他域名下可用</span><br><span class="line">        self.disable_domains &#x3D; disable_domains</span><br><span class="line"></span><br><span class="line">    # 3. 提供 __str__ 方法, 返回数据字符串</span><br><span class="line">    def __str__(self):</span><br><span class="line">        # 返回数据字符串</span><br><span class="line">        return str(self.__dict__)</span><br></pre></td></tr></table></figure><h2 id="日志模块log"><a href="#日志模块log" class="headerlink" title="日志模块log"></a>日志模块log</h2><p>导入settings中日志配置信息,如下<br>LOG_LEVEL = logging.DEBUG    # 默认等级<br>LOG_FMT = ‘%(asctime)s %(filename)s [line:%(lineno)d] %(levelname)s: %(message)s’   # 默认日志格式<br>LOG_DATEFMT = ‘%Y-%m-%d %H:%M:%S’  # 默认时间格式<br>LOG_FILENAME = ‘log.log’    # 默认日志文件名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Logger(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 1. 获取一个logger对象</span><br><span class="line">        self._logger &#x3D; logging.getLogger()</span><br><span class="line">        # 2. 设置format对象</span><br><span class="line">        self.formatter &#x3D; logging.Formatter(fmt&#x3D;LOG_FMT,datefmt&#x3D;LOG_DATEFMT)</span><br><span class="line">        # 3. 设置日志输出</span><br><span class="line">        # 3.1 设置文件日志模式</span><br><span class="line">        self._logger.addHandler(self._get_file_handler(LOG_FILENAME))</span><br><span class="line">        # 3.2 设置终端日志模式</span><br><span class="line">        self._logger.addHandler(self._get_console_handler())</span><br><span class="line">        # 4. 设置日志等级</span><br><span class="line">        self._logger.setLevel(LOG_LEVEL)</span><br><span class="line"></span><br><span class="line">    def _get_file_handler(self, filename):</span><br><span class="line">        &#39;&#39;&#39;返回一个文件日志handler&#39;&#39;&#39;</span><br><span class="line">        # 1. 获取一个文件日志handler</span><br><span class="line">        filehandler &#x3D; logging.FileHandler(filename&#x3D;filename,encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">        # 2. 设置日志格式</span><br><span class="line">        filehandler.setFormatter(self.formatter)</span><br><span class="line">        # 3. 返回</span><br><span class="line">        return filehandler</span><br><span class="line"></span><br><span class="line">    def _get_console_handler(self):</span><br><span class="line">        &#39;&#39;&#39;返回一个输出到终端日志handler&#39;&#39;&#39;</span><br><span class="line">        # 1. 获取一个输出到终端日志handler</span><br><span class="line">        console_handler &#x3D; logging.StreamHandler(sys.stdout)</span><br><span class="line">        # 2. 设置日志格式</span><br><span class="line">        console_handler.setFormatter(self.formatter)</span><br><span class="line">        # 3. 返回handler</span><br><span class="line">        return console_handler</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def logger(self):</span><br><span class="line">        return self._logger</span><br><span class="line"></span><br><span class="line"># 初始化并配一个logger对象，达到单例的</span><br><span class="line"># 使用时，直接导入logger就可以使用</span><br><span class="line">logger &#x3D; Logger().logger</span><br></pre></td></tr></table></figure><h2 id="请求模块http"><a href="#请求模块http" class="headerlink" title="请求模块http"></a>请求模块http</h2><p>返回随机请求头和随机User-Agent,对抗反爬</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#   1. 准备User-Agent的列表</span><br><span class="line">USER_AGENTS &#x3D; [</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident&#x2F;4.0; WOW64; Trident&#x2F;4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit&#x2F;523.15 (KHTML, like Gecko, Safari&#x2F;419.3) Arora&#x2F;0.3 (Change: 287 c9dfb30)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (X11; U; Linux; en-US) AppleWebKit&#x2F;527+ (KHTML, like Gecko, Safari&#x2F;419.3) Arora&#x2F;0.6&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko&#x2F;20070215 K-Ninja&#x2F;2.1.1&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko&#x2F;20080705 Firefox&#x2F;3.0 Kapiko&#x2F;3.0&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (X11; Linux i686; U;) Gecko&#x2F;20070322 Kazehakase&#x2F;0.4.5&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora&#x2F;1.9.0.8-1.fc10 Kazehakase&#x2F;0.5.6&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;535.11 (KHTML, like Gecko) Chrome&#x2F;17.0.963.56 Safari&#x2F;535.11&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit&#x2F;535.20 (KHTML, like Gecko) Chrome&#x2F;19.0.1036.7 Safari&#x2F;535.20&quot;,</span><br><span class="line">    &quot;Opera&#x2F;9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto&#x2F;2.9.168 Version&#x2F;11.52&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;536.11 (KHTML, like Gecko) Chrome&#x2F;20.0.1132.11 TaoBrowser&#x2F;2.0 Safari&#x2F;536.11&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.1 (KHTML, like Gecko) Chrome&#x2F;21.0.1180.71 Safari&#x2F;537.1 LBBROWSER&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident&#x2F;5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;535.11 (KHTML, like Gecko) Chrome&#x2F;17.0.963.84 Safari&#x2F;535.11 LBBROWSER&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident&#x2F;5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident&#x2F;5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser&#x2F;7.0.3698.400)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident&#x2F;4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident&#x2F;5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 5.1) AppleWebKit&#x2F;537.1 (KHTML, like Gecko) Chrome&#x2F;21.0.1180.89 Safari&#x2F;537.1&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.1 (KHTML, like Gecko) Chrome&#x2F;21.0.1180.89 Safari&#x2F;537.1&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit&#x2F;533.17.9 (KHTML, like Gecko) Version&#x2F;5.0.2 Mobile&#x2F;8C148 Safari&#x2F;6533.18.5&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko&#x2F;20110307 Firefox&#x2F;4.0b13pre&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko&#x2F;20100101 Firefox&#x2F;16.0&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.11 (KHTML, like Gecko) Chrome&#x2F;23.0.1271.64 Safari&#x2F;537.11&quot;,</span><br><span class="line">    &quot;Mozilla&#x2F;5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko&#x2F;20100922 Ubuntu&#x2F;10.10 (maverick) Firefox&#x2F;3.6.10&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 实现一个方法, 获取随机User-Agent的请求头</span><br><span class="line">def get_request_headers():</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;User-Agent&#39;: random.choice(USER_AGENTS),</span><br><span class="line">        &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&#39;,</span><br><span class="line">        &#39;Accept-Language&#39;: &#39;en-US,en;q&#x3D;0.5&#39;,</span><br><span class="line">        &#39;Connection&#39;: &#39;keep-alive&#39;,</span><br><span class="line">        &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return headers</span><br></pre></td></tr></table></figure><h2 id="校验模块httpbin-validator"><a href="#校验模块httpbin-validator" class="headerlink" title="校验模块httpbin_validator"></a>校验模块httpbin_validator</h2><ul><li>检查代理IP速度 和 匿名程度; <ul><li>代理IP速度: 就是从发送请求到获取响应的时间间隔</li><li>匿名程度检查: <ul><li>对 <code>http://httpbin.org/get</code> 或 <code>https://httpbin.org/get</code> 发送请求</li><li>如果 响应的<code>origin</code> 中有’,’分割的两个IP就是透明代理IP</li><li>如果 响应的<code>headers</code> 中包含 <code>Proxy-Connection</code> 说明是匿名代理IP </li><li>否则就是高匿代理IP</li></ul></li></ul></li><li>检查代理IP协议类型<ul><li>如果 <code>http://httpbin.org/get</code> 发送请求可以成功, 说明支持http协议</li><li>如果 <code>https://httpbin.org/get</code> 发送请求可以成功, 说明支持https协议 </li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">def check_proxy(proxy):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用于检查指定 代理IP 响应速度, 匿名程度, 支持协议类型</span><br><span class="line">    :param proxy: 代理IP模型对象</span><br><span class="line">    :return: 检查后的代理IP模型对象</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # 准备代理IP字典</span><br><span class="line">    proxies &#x3D; &#123;</span><br><span class="line">        &#39;http&#39;:&#39;http:&#x2F;&#x2F;&#123;&#125;:&#123;&#125;&#39;.format(proxy.ip, proxy.port),</span><br><span class="line">        &#39;https&#39;:&#39;https:&#x2F;&#x2F;&#123;&#125;:&#123;&#125;&#39;.format(proxy.ip, proxy.port),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 测试该代理IP</span><br><span class="line">    http, http_nick_type, http_speed &#x3D; __check_http_proxies(proxies)</span><br><span class="line">    https, https_nick_type, https_speed &#x3D; __check_http_proxies(proxies, False)</span><br><span class="line">    # 代理IP支持的协议类型, http是0, https是1, https和http都支持是2</span><br><span class="line">    if http and https:</span><br><span class="line">        proxy.protocol &#x3D; 2</span><br><span class="line">        proxy.nick_type &#x3D; http_nick_type</span><br><span class="line">        proxy.speed &#x3D; http_speed</span><br><span class="line">    elif http:</span><br><span class="line">        proxy.protocol &#x3D; 0</span><br><span class="line">        proxy.nick_type &#x3D; http_nick_type</span><br><span class="line">        proxy.speed &#x3D; http_speed</span><br><span class="line">    elif https:</span><br><span class="line">        proxy.protocol &#x3D; 1</span><br><span class="line">        proxy.nick_type &#x3D; https_nick_type</span><br><span class="line">        proxy.speed &#x3D; https_speed</span><br><span class="line">    else:</span><br><span class="line">        proxy.protocol &#x3D; -1</span><br><span class="line">        proxy.nick_type &#x3D; -1</span><br><span class="line">        proxy.speed &#x3D; -1</span><br><span class="line"></span><br><span class="line">    return proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def __check_http_proxies(proxies, is_http&#x3D;True):</span><br><span class="line">    # 匿名类型: 高匿: 0, 匿名: 1, 透明: 2</span><br><span class="line">    nick_type &#x3D; -1</span><br><span class="line">    # 响应速度, 单位s</span><br><span class="line">    speed &#x3D; -1</span><br><span class="line"></span><br><span class="line">    if is_http:</span><br><span class="line">        test_url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;</span><br><span class="line">    else:</span><br><span class="line">        test_url &#x3D; &#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        # 获取开始时间</span><br><span class="line">        start &#x3D; time.time()</span><br><span class="line">        # 发送请求, 获取响应数据</span><br><span class="line">        response &#x3D; requests.get(test_url, headers&#x3D;get_request_headers(), proxies&#x3D;proxies, timeout&#x3D;TEST_TIMEOUT)</span><br><span class="line"></span><br><span class="line">        if response.ok:</span><br><span class="line">            # 计算响应速度</span><br><span class="line">            speed &#x3D;  round(time.time() - start, 2)</span><br><span class="line">            # 匿名程度</span><br><span class="line">            # 把响应的json字符串, 转换为字典</span><br><span class="line">            dic &#x3D; json.loads(response.text)</span><br><span class="line">            # 获取来源IP: origin</span><br><span class="line">            origin &#x3D; dic[&#39;origin&#39;]</span><br><span class="line">            proxy_connection &#x3D; dic[&#39;headers&#39;].get(&#39;Proxy-Connection&#39;, None)</span><br><span class="line">            if &#39;,&#39; in origin:</span><br><span class="line">                #    1. 如果 响应的origin 中有&#39;,&#39;分割的两个IP就是透明代理IP</span><br><span class="line">                nick_type &#x3D; 2</span><br><span class="line">            elif proxy_connection:</span><br><span class="line">                #    2. 如果 响应的headers 中包含 Proxy-Connection 说明是匿名代理IP</span><br><span class="line">                nick_type &#x3D; 1</span><br><span class="line">            else:</span><br><span class="line">                #  3. 否则就是高匿代理IP</span><br><span class="line">                nick_type &#x3D; 0</span><br><span class="line"></span><br><span class="line">            return True, nick_type, speed</span><br><span class="line">        return False, nick_type, speed</span><br><span class="line">    except Exception as ex:</span><br><span class="line">        # logger.exception(ex)</span><br><span class="line">        return False, nick_type, speed</span><br></pre></td></tr></table></figure><h2 id="数据库模块mongo-pool"><a href="#数据库模块mongo-pool" class="headerlink" title="数据库模块mongo_pool"></a>数据库模块mongo_pool</h2><ol><li>在<code>init</code>中, 建立数据连接, 获取要操作的集合, 在 <code>del</code> 方法中关闭数据库连接</li><li>提供基础的增删改查功能</li><li>提供代理API模块使用的功能</li><li>实现查询功能: 根据条件进行查询, 可以指定查询数量, 先分数降序, 速度升序排, 保证优质的代理IP在上面. </li><li>实现根据协议类型 和 要访问网站的域名, 获取代理IP列表</li><li>实现根据协议类型 和 要访问网站的域名, 随机获取一个代理IP </li><li>实现把指定域名添加到指定IP的disable_domain列表中.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">class MongoPool(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 1.1. 在init中, 建立数据连接</span><br><span class="line">        self.client &#x3D; MongoClient(MONGO_URL)</span><br><span class="line">        # 1.2  获取要操作的集合</span><br><span class="line">        self.proxies &#x3D; self.client[&#39;proxies_pool&#39;][&#39;proxies&#39;]</span><br><span class="line"></span><br><span class="line">    def __del__(self):</span><br><span class="line">        # 1.3 关闭数据库连接</span><br><span class="line">        self.client.close()</span><br><span class="line"></span><br><span class="line">    def insert_one(self, proxy):</span><br><span class="line">        &quot;&quot;&quot;2.1 实现插入功能&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        count &#x3D; self.proxies.count_documents(&#123;&#39;_id&#39;: proxy.ip&#125;)</span><br><span class="line">        if count &#x3D;&#x3D; 0:</span><br><span class="line">            # 我们使用proxy.ip作为, MongoDB中数据的主键: _id</span><br><span class="line">            dic &#x3D; proxy.__dict__</span><br><span class="line">            dic[&#39;_id&#39;] &#x3D; proxy.ip</span><br><span class="line">            self.proxies.insert_one(dic)</span><br><span class="line">            logger.info(&#39;插入新的代理:&#123;&#125;&#39;.format(proxy))</span><br><span class="line">        else:</span><br><span class="line">            logger.warning(&quot;已经存在的代理:&#123;&#125;&quot;.format(proxy))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def update_one(self, proxy):</span><br><span class="line">        &quot;&quot;&quot;2.2 实现修改该功能&quot;&quot;&quot;</span><br><span class="line">        self.proxies.update_one(&#123;&#39;_id&#39;: proxy.ip&#125;, &#123;&#39;$set&#39;:proxy.__dict__&#125;)</span><br><span class="line"></span><br><span class="line">    def delete_one(self, proxy):</span><br><span class="line">        &quot;&quot;&quot;2.3 实现删除代理: 根据代理的IP删除代理&quot;&quot;&quot;</span><br><span class="line">        self.proxies.delete_one(&#123;&#39;_id&#39;: proxy.ip&#125;)</span><br><span class="line">        logger.info(&quot;删除代理IP: &#123;&#125;&quot;.format(proxy))</span><br><span class="line"></span><br><span class="line">    def find_all(self):</span><br><span class="line">        &quot;&quot;&quot;2.4 查询所有代理IP的功能&quot;&quot;&quot;</span><br><span class="line">        cursor &#x3D; self.proxies.find()</span><br><span class="line">        for item in cursor:</span><br><span class="line">            # 删除_id这个key</span><br><span class="line">            item.pop(&#39;_id&#39;)</span><br><span class="line">            proxy &#x3D; Proxy(**item)</span><br><span class="line">            yield proxy</span><br><span class="line"></span><br><span class="line">    def find(self, conditions&#x3D;&#123;&#125;, count&#x3D;0):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        3.1 实现查询功能: 根据条件进行查询, 可以指定查询数量, 先分数降序, 速度升序排, 保证优质的代理IP在上面.</span><br><span class="line">        :param conditions: 查询条件字典</span><br><span class="line">        :param count: 限制最多取出多少个代理IP</span><br><span class="line">        :return: 返回满足要求代理IP(Proxy对象)列表</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        cursor &#x3D; self.proxies.find(conditions, limit&#x3D;count).sort([</span><br><span class="line">            (&#39;score&#39;, pymongo.DESCENDING),(&#39;speed&#39;, pymongo.ASCENDING)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        # 准备列表, 用于存储查询处理代理IP</span><br><span class="line">        proxy_list &#x3D; []</span><br><span class="line">        # 遍历 cursor</span><br><span class="line">        for item in cursor:</span><br><span class="line">            item.pop(&#39;_id&#39;)</span><br><span class="line">            proxy &#x3D; Proxy(**item)</span><br><span class="line">            proxy_list.append(proxy)</span><br><span class="line"></span><br><span class="line">        # 返回满足要求代理IP(Proxy对象)列表</span><br><span class="line">        return proxy_list</span><br><span class="line"></span><br><span class="line">    def get_proxies(self, protocol&#x3D;None, domain&#x3D;None, count&#x3D;0, nick_type&#x3D;0):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        3.2 实现根据协议类型 和 要访问网站的域名, 获取代理IP列表</span><br><span class="line">        :param protocol: 协议: http, https</span><br><span class="line">        :param domain: 域名: jd.com</span><br><span class="line">        :param count:  用于限制获取多个代理IP, 默认是获取所有的</span><br><span class="line">        :param nick_type: 匿名类型, 默认, 获取高匿的代理IP</span><br><span class="line">        :return: 满足要求代理IP的列表</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 定义查询条件</span><br><span class="line">        conditions &#x3D; &#123;&#39;nick_type&#39;: nick_type&#125;</span><br><span class="line">        # 根据协议, 指定查询条件</span><br><span class="line">        if protocol is None:</span><br><span class="line">            # 如果没有传入协议类型, 返回支持http和https的代理IP</span><br><span class="line">            conditions[&#39;protocol&#39;] &#x3D; 2</span><br><span class="line">        elif protocol.lower() &#x3D;&#x3D; &#39;http&#39;:</span><br><span class="line">            conditions[&#39;protocol&#39;] &#x3D; &#123;&#39;$in&#39;: [0, 2]&#125;</span><br><span class="line">        else:</span><br><span class="line">            conditions[&#39;protocol&#39;] &#x3D; &#123;&#39;$in&#39;: [1, 2]&#125;</span><br><span class="line"></span><br><span class="line">        if domain:</span><br><span class="line">            conditions[&#39;disable_domains&#39;] &#x3D; &#123;&#39;$nin&#39;: [domain]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # 满足要求代理IP的列表</span><br><span class="line">        return self.find(conditions, count&#x3D;count)</span><br><span class="line"></span><br><span class="line">    def random_proxy(self, protocol&#x3D;None, domain&#x3D;None, count&#x3D;0, nick_type&#x3D;0):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        3.3 实现根据协议类型 和 要访问网站的域名, 随机获取一个代理IP</span><br><span class="line">        :param protocol: 协议: http, https</span><br><span class="line">        :param domain: 域名: jd.com</span><br><span class="line">        :param count:  用于限制获取多个代理IP, 默认是获取所有的</span><br><span class="line">        :param nick_type: 匿名类型, 默认, 获取高匿的代理IP</span><br><span class="line">        :return: 满足要求的随机的一个代理IP(Proxy对象)</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        proxy_list &#x3D; self.get_proxies(protocol&#x3D;protocol, domain&#x3D;domain, count&#x3D;count, nick_type&#x3D;nick_type)</span><br><span class="line">        # 从proxy_list列表中, 随机取出一个代理IP返回</span><br><span class="line">        return random.choice(proxy_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def disable_domain(self, ip, domain):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        3.4 实现把指定域名添加到指定IP的disable_domain列表中.</span><br><span class="line">        :param ip: IP地址</span><br><span class="line">        :param domain: 域名</span><br><span class="line">        :return: 如果返回True, 就表示添加成功了, 返回False添加失败了</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # print(self.proxies.count_documents(&#123;&#39;_id&#39;: ip, &#39;disable_domains&#39;:domain&#125;))</span><br><span class="line"></span><br><span class="line">        if self.proxies.count_documents(&#123;&#39;_id&#39;: ip, &#39;disable_domains&#39;:domain&#125;) &#x3D;&#x3D; 0:</span><br><span class="line">            # 如果disable_domains字段中没有这个域名, 才添加</span><br><span class="line">            self.proxies.update_one(&#123;&#39;_id&#39;:ip&#125;, &#123;&#39;$push&#39;: &#123;&#39;disable_domains&#39;: domain&#125;&#125;)</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure><h2 id="爬虫模块base-spider"><a href="#爬虫模块base-spider" class="headerlink" title="爬虫模块base_spider"></a>爬虫模块base_spider</h2><ol><li>在base_spider.py文件中,定义一个BaseSpider类, 继承object</li><li>提供三个类成员变量:<ul><li>urls: 代理IP网址的URL的列表</li><li>group_xpath: 分组XPATH, 获取包含代理IP信息标签列表的XPATH</li><li>detail_xpath: 组内XPATH, 获取代理IP详情的信息XPATH, 格式为: {‘ip’:’xx’, ‘port’:’xx’, ‘area’:’xx’}</li></ul></li><li>提供初始方法, 传入爬虫URL列表, 分组XPATH, 详情(组内)XPATH</li><li>对外提供一个获取代理IP的方法 <ul><li>遍历URL列表, 获取URL</li><li>根据发送请求, 获取页面数据</li><li>解析页面, 提取数据, 封装为Proxy对象</li><li>返回Proxy对象列表</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># 1. 在base_spider.py文件中,定义一个BaseSpider类, 继承object</span><br><span class="line">class BaseSpider(object):</span><br><span class="line"></span><br><span class="line">    # 2. 提供三个类成员变量:</span><br><span class="line">    # urls: 代理IP网址的URL的列表</span><br><span class="line">    urls &#x3D; []</span><br><span class="line">    # group_xpath: 分组XPATH, 获取包含代理IP信息标签列表的XPATH</span><br><span class="line">    group_xpath &#x3D; &#39;&#39;</span><br><span class="line">    # detail_xpath: 组内XPATH, 获取代理IP详情的信息XPATH, 格式为: &#123;&#39;ip&#39;:&#39;xx&#39;, &#39;port&#39;:&#39;xx&#39;, &#39;area&#39;:&#39;xx&#39;&#125;</span><br><span class="line">    detail_xpath &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    # 3. 提供初始方法, 传入爬虫URL列表, 分组XPATH, 详情(组内)XPATH</span><br><span class="line">    def __init__(self, urls&#x3D;[], group_xpath&#x3D;&#39;&#39;, detail_xpath&#x3D;&#123;&#125;):</span><br><span class="line"></span><br><span class="line">        if urls:</span><br><span class="line">            self.urls &#x3D; urls</span><br><span class="line"></span><br><span class="line">        if group_xpath:</span><br><span class="line">            self.group_xpath &#x3D; group_xpath</span><br><span class="line"></span><br><span class="line">        if detail_xpath:</span><br><span class="line">            self.detail_xpath &#x3D; detail_xpath</span><br><span class="line"></span><br><span class="line">    def get_page_from_url(self, url):</span><br><span class="line">        &quot;&quot;&quot;根据URL 发送请求, 获取页面数据&quot;&quot;&quot;</span><br><span class="line">        response &#x3D; requests.get(url, headers&#x3D;get_request_headers())</span><br><span class="line">        print(url)</span><br><span class="line">        print(response.status_code)</span><br><span class="line">        return response.content</span><br><span class="line"></span><br><span class="line">    def get_first_from_list(self, lis):</span><br><span class="line">        # 如果列表中有元素就返回第一个, 否则就返回空串</span><br><span class="line">        return lis[0] if len(lis) !&#x3D; 0 else &#39;&#39;</span><br><span class="line"></span><br><span class="line">    def get_proxies_from_page(self, page):</span><br><span class="line">        &quot;&quot;&quot;解析页面, 提取数据, 封装为Proxy对象&quot;&quot;&quot;</span><br><span class="line">        element &#x3D; etree.HTML(page)</span><br><span class="line">        # 获取包含代理IP信息的标签列表</span><br><span class="line">        trs &#x3D; element.xpath(self.group_xpath)</span><br><span class="line">        # 遍历trs, 获取代理IP相关信息</span><br><span class="line">        for tr in trs:</span><br><span class="line">            ip &#x3D; self.get_first_from_list(tr.xpath(self.detail_xpath[&#39;ip&#39;]))</span><br><span class="line">            port &#x3D; self.get_first_from_list(tr.xpath(self.detail_xpath[&#39;port&#39;]))</span><br><span class="line">            area &#x3D; self.get_first_from_list(tr.xpath(self.detail_xpath[&#39;area&#39;]))</span><br><span class="line">            proxy &#x3D; Proxy(ip, port, area&#x3D;area)</span><br><span class="line">            # print(proxy)</span><br><span class="line">            # 使用yield返回提取到的数据</span><br><span class="line">            yield proxy</span><br><span class="line"></span><br><span class="line">    def get_proxies(self):</span><br><span class="line">        # 4. 对外提供一个获取代理IP的方法</span><br><span class="line">        # 4.1 遍历URL列表, 获取URL</span><br><span class="line">        for url in self.urls:</span><br><span class="line">            # print(url)</span><br><span class="line">            # 4.2 根据发送请求, 获取页面数据</span><br><span class="line">            page &#x3D; self.get_page_from_url(url)</span><br><span class="line">            # 4.3 解析页面, 提取数据, 封装为Proxy对象</span><br><span class="line">            proxies &#x3D; self.get_proxies_from_page(page)</span><br><span class="line">            # 4.4 返回Proxy对象列表</span><br><span class="line">            yield from proxies</span><br></pre></td></tr></table></figure><h2 id="具体爬虫实现proxy-spiders"><a href="#具体爬虫实现proxy-spiders" class="headerlink" title="具体爬虫实现proxy_spiders"></a>具体爬虫实现proxy_spiders</h2><ol><li><p><del>实现<code>西刺代理</code>爬虫: <code>http://www.xicidaili.com/nn/1</code></del></p><ul><li><del>定义一个类,继承通用爬虫类(BasicSpider)</del></li><li><del>提供urls, group_xpath 和 detail_xpath</del></li></ul></li><li><p>实现<code>ip3366代理</code>爬虫: <code>http://www.ip3366.net/free/?stype=1&amp;page=1</code></p><ul><li>定义一个类,继承通用爬虫类(BasicSpider)</li><li>提供urls, group_xpath 和 detail_xpath</li></ul></li><li><p>实现<code>快代理</code>爬虫:   <code>https://www.kuaidaili.com/free/inha/1/</code></p><ul><li>定义一个类,继承通用爬虫类(BasicSpider)</li><li>提供urls, group_xpath 和 detail_xpath</li></ul></li><li><p>实现<code>proxylistplus代理</code>爬虫: <code>https://list.proxylistplus.com/Fresh-HTTP-Proxy-List-1</code></p><ul><li>定义一个类,继承通用爬虫类(BasicSpider)</li><li>提供urls, group_xpath 和 detail_xpath</li></ul></li><li><p>实现<code>66ip</code>爬虫: <code>http://www.66ip.cn/1.html</code></p><ul><li>定义一个类,继承通用爬虫类(BasicSpider)</li><li>提供urls, group_xpath 和 detail_xpath</li><li>由于66ip网页进行js + cookie反爬, 需要重写父类的<code>get_page_from_url</code>方法</li></ul><p>访问<a href="http://www.66ip.cn/1.html" target="_blank" rel="noopener">http://www.66ip.cn/1.html</a> 时返回一堆js，并不返回具体ip信息，通过逐步增加请求头中的Cookie时发现真正生效的Cookie为_ydclearance，控制台打开Preserve log发现页面第一次1.html做了跳转，历史请求中都没有出现_ydclearance的cookie，第二次请求1.html时已经携带了_ydclearance说明该cookie已经不是服务端响应生成，而是由客户端js生成。</p></li></ol><blockquote><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BIP%E4%BB%A3%E7%90%86%E6%B1%A0/66ip%E9%80%86%E5%90%91%E5%88%86%E6%9E%90.png" alt="66ip逆向分析.png"></p><p>一开始我们访问<a href="http://www.66ip.cn/1.html" target="_blank" rel="noopener">http://www.66ip.cn/1.html</a> 时返回一堆js，执行这段js，就是用来生成_ydclearance的。那么分析这段js本身做了加密，js中通过定义函数<strong>jp</strong>并调用后，由于qo=eval，那么等同于最终调用了eval(po)，真正js在 “po” 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result &#x3D; re.findall(&#39;window.onload&#x3D;setTimeout\(&quot;(.+?)&quot;, 200\);\s*(.+?)\s*&lt;&#x2F;script&gt;&#39; ,text)</span><br></pre></td></tr></table></figure><p>通过正则提取 <code>jp(107)</code> 调用函数方法, 以及函数内容<code> function jp(WI) { var qo, mo=&quot;&quot; ...</code>，通过将替换eval拿到返回的真实js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func_str &#x3D; result[0][1]</span><br><span class="line">func_str &#x3D; func_str.replace(&#39;eval(&quot;qo&#x3D;eval;qo(po);&quot;)&#39;, &#39;return po&#39;)</span><br></pre></td></tr></table></figure><p>执行js并将返回作为Cookie添加到请求头中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context &#x3D; js2py.EvalJs()</span><br><span class="line">context.execute(func_str)</span><br><span class="line">context.execute(&#39;code &#x3D; &#123;&#125;;&#39;.format(result[0][0]))</span><br><span class="line">cookie_str &#x3D; re.findall(&quot;document.cookie&#x3D;&#39;(.+?); &quot;, context.code)[0]</span><br><span class="line">headers[&#39;Cookie&#39;] &#x3D; cookie_str</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">class XiciSpider(BaseSpider):</span><br><span class="line">    # 准备URL列表</span><br><span class="line">    urls &#x3D; [&#39;https:&#x2F;&#x2F;www.xicidaili.com&#x2F;nn&#x2F;&#123;&#125;&#39;.format(i) for i in range(1, 11)]</span><br><span class="line">    # 分组的XPATH, 用于获取包含代理IP信息的标签列表</span><br><span class="line">    group_xpath &#x3D; &#39;&#x2F;&#x2F;*[@id&#x3D;&quot;ip_list&quot;]&#x2F;tr[position()&gt;1]&#39;</span><br><span class="line">    # 组内的XPATH, 用于提取 ip, port, area</span><br><span class="line">    detail_xpath &#x3D; &#123;</span><br><span class="line">        &#39;ip&#39;:&#39;.&#x2F;td[2]&#x2F;text()&#39;,</span><br><span class="line">        &#39;port&#39;:&#39;.&#x2F;td[3]&#x2F;text()&#39;,</span><br><span class="line">        &#39;area&#39;:&#39;.&#x2F;td[4]&#x2F;a&#x2F;text()&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">2. 实现ip3366代理爬虫: http:&#x2F;&#x2F;www.ip3366.net&#x2F;free&#x2F;?stype&#x3D;1&amp;page&#x3D;1</span><br><span class="line">    定义一个类,继承通用爬虫类(BasicSpider)</span><br><span class="line">    提供urls, group_xpath 和 detail_xpath</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class Ip3366Spider(BaseSpider):</span><br><span class="line">    # 准备URL列表</span><br><span class="line">    urls &#x3D; [&#39;http:&#x2F;&#x2F;www.ip3366.net&#x2F;free&#x2F;?stype&#x3D;&#123;&#125;&amp;page&#x3D;&#123;&#125;&#39;.format(i, j) for i in range(1, 4, 2) for j in range(1, 8)]</span><br><span class="line">    # # 分组的XPATH, 用于获取包含代理IP信息的标签列表</span><br><span class="line">    group_xpath &#x3D; &#39;&#x2F;&#x2F;*[@id&#x3D;&quot;list&quot;]&#x2F;table&#x2F;tbody&#x2F;tr&#39;</span><br><span class="line">    # 组内的XPATH, 用于提取 ip, port, area</span><br><span class="line">    detail_xpath &#x3D; &#123;</span><br><span class="line">        &#39;ip&#39;:&#39;.&#x2F;td[1]&#x2F;text()&#39;,</span><br><span class="line">        &#39;port&#39;:&#39;.&#x2F;td[2]&#x2F;text()&#39;,</span><br><span class="line">        &#39;area&#39;:&#39;.&#x2F;td[5]&#x2F;text()&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">3. 实现快代理爬虫: https:&#x2F;&#x2F;www.kuaidaili.com&#x2F;free&#x2F;inha&#x2F;1&#x2F;</span><br><span class="line">    定义一个类,继承通用爬虫类(BasicSpider)</span><br><span class="line">    提供urls, group_xpath 和 detail_xpath</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class KaiSpider(BaseSpider):</span><br><span class="line">    # 准备URL列表</span><br><span class="line">    urls &#x3D; [&#39;https:&#x2F;&#x2F;www.kuaidaili.com&#x2F;free&#x2F;inha&#x2F;&#123;&#125;&#x2F;&#39;.format(i) for i in range(1, 6)]</span><br><span class="line">    # # 分组的XPATH, 用于获取包含代理IP信息的标签列表</span><br><span class="line">    group_xpath &#x3D; &#39;&#x2F;&#x2F;*[@id&#x3D;&quot;list&quot;]&#x2F;table&#x2F;tbody&#x2F;tr&#39;</span><br><span class="line">    # 组内的XPATH, 用于提取 ip, port, area</span><br><span class="line">    detail_xpath &#x3D; &#123;</span><br><span class="line">        &#39;ip&#39;:&#39;.&#x2F;td[1]&#x2F;text()&#39;,</span><br><span class="line">        &#39;port&#39;:&#39;.&#x2F;td[2]&#x2F;text()&#39;,</span><br><span class="line">        &#39;area&#39;:&#39;.&#x2F;td[5]&#x2F;text()&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 当我们两个页面访问时间间隔太短了, 就报错了; 这是一种反爬手段.</span><br><span class="line">    def get_page_from_url(self, url):</span><br><span class="line">        # 随机等待1,3s</span><br><span class="line">        time.sleep(random.uniform(1, 3))</span><br><span class="line">        # 调用父类的方法, 发送请求, 获取响应数据</span><br><span class="line">        return super().get_page_from_url(url)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">4. 实现proxylistplus代理爬虫: https:&#x2F;&#x2F;list.proxylistplus.com&#x2F;Fresh-HTTP-Proxy-List-1</span><br><span class="line">    定义一个类,继承通用爬虫类(BasicSpider)</span><br><span class="line">    提供urls, group_xpath 和 detail_xpath</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">class ProxylistplusSpider(BaseSpider):</span><br><span class="line">    # 准备URL列表</span><br><span class="line">    urls &#x3D; [&#39;https:&#x2F;&#x2F;list.proxylistplus.com&#x2F;Fresh-HTTP-Proxy-List-&#123;&#125;&#39;.format(i) for i in range(1, 7)]</span><br><span class="line">    # # 分组的XPATH, 用于获取包含代理IP信息的标签列表</span><br><span class="line">    group_xpath &#x3D; &#39;&#x2F;&#x2F;*[@id&#x3D;&quot;page&quot;]&#x2F;table[2]&#x2F;tbody&#x2F;tr[position()&gt;2]&#39;</span><br><span class="line">    # 组内的XPATH, 用于提取 ip, port, area</span><br><span class="line">    detail_xpath &#x3D; &#123;</span><br><span class="line">        &#39;ip&#39;:&#39;.&#x2F;td[2]&#x2F;text()&#39;,</span><br><span class="line">        &#39;port&#39;:&#39;.&#x2F;td[3]&#x2F;text()&#39;,</span><br><span class="line">        &#39;area&#39;:&#39;.&#x2F;td[5]&#x2F;text()&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">5. 实现66ip爬虫: http:&#x2F;&#x2F;www.66ip.cn&#x2F;1.html</span><br><span class="line">    定义一个类,继承通用爬虫类(BasicSpider)</span><br><span class="line">    提供urls, group_xpath 和 detail_xpath</span><br><span class="line">    由于66ip网页进行js + cookie反爬, 需要重写父类的get_page_from_url方法</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">class Ip66Spider(BaseSpider):</span><br><span class="line">    # 准备URL列表</span><br><span class="line">    urls &#x3D; [&#39;http:&#x2F;&#x2F;www.66ip.cn&#x2F;&#123;&#125;.html&#39;.format(i) for i in range(1, 11)]</span><br><span class="line">    # # 分组的XPATH, 用于获取包含代理IP信息的标签列表</span><br><span class="line">    group_xpath &#x3D; &#39;&#x2F;&#x2F;*[@id&#x3D;&quot;main&quot;]&#x2F;div&#x2F;div[1]&#x2F;table&#x2F;tbody&#x2F;tr[position()&gt;1]&#39;</span><br><span class="line">    # 组内的XPATH, 用于提取 ip, port, area</span><br><span class="line">    detail_xpath &#x3D; &#123;</span><br><span class="line">        &#39;ip&#39;:&#39;.&#x2F;td[1]&#x2F;text()&#39;,</span><br><span class="line">        &#39;port&#39;:&#39;.&#x2F;td[2]&#x2F;text()&#39;,</span><br><span class="line">        &#39;area&#39;:&#39;.&#x2F;td[3]&#x2F;text()&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 重写方法, 解决反爬问题</span><br><span class="line">    def get_page_from_url(self, url):</span><br><span class="line">        headers &#x3D; get_request_headers()</span><br><span class="line">        response &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line">        if response.status_code &#x3D;&#x3D; 521:</span><br><span class="line">            # 生成cookie信息, 再携带cookie发送请求</span><br><span class="line">            # 生成 &#96;_ydclearance&#96; cookie信息,控制台preserve log,第一个页面就是加密页面521用来做反爬跳转</span><br><span class="line">            # 1. 确定 _ydclearance 是从哪里来的;</span><br><span class="line">            # 观察发现: 这个cookie在前两个页面都没有返回，说明信息不使用通过服务器响应设置过来的; 那么他就是通过js生成.</span><br><span class="line">            # 2. 第一次发送请求的页面中, 有一个生成这个cookie的js; 执行这段js, 生成我们需要的cookie</span><br><span class="line">            # 这段js是经过加密处理后的js, 真正js在 &quot;po&quot; 中.</span><br><span class="line">            # 提取 &#96;jp(107)&#96; 调用函数的方法, 以及函数</span><br><span class="line">            result &#x3D; re.findall(&#39;window.onload&#x3D;setTimeout\(&quot;(.+?)&quot;, 200\);\s*(.+?)\s*&lt;&#x2F;script&gt; &#39;, response.content.decode(&#39;GBK&#39;))</span><br><span class="line">            # print(result)</span><br><span class="line">            # 我希望执行js时候, 返回真正要执行的js</span><br><span class="line">            # 把 &#96;eval(&quot;qo&#x3D;eval;qo(po);&quot;)&#96; 替换为 return po</span><br><span class="line">            func_str &#x3D; result[0][1]</span><br><span class="line">            func_str &#x3D; func_str.replace(&#39;eval(&quot;qo&#x3D;eval;qo(po);&quot;)&#39;, &#39;return po&#39;)</span><br><span class="line">            # print(func_str)</span><br><span class="line">            # 获取执行js的环境</span><br><span class="line">            context &#x3D; js2py.EvalJs()</span><br><span class="line">            # 加载(执行) func_str</span><br><span class="line">            context.execute(func_str)</span><br><span class="line">            # 执行这个方法, 生成我们需要的js</span><br><span class="line">            # code &#x3D; gv(50)</span><br><span class="line">            context.execute(&#39;code &#x3D; &#123;&#125;;&#39;.format(result[0][0]))</span><br><span class="line">            # 打印最终生成的代码</span><br><span class="line">            # print(context.code)</span><br><span class="line">            cookie_str &#x3D; re.findall(&quot;document.cookie&#x3D;&#39;(.+?); &quot;, context.code)[0]</span><br><span class="line">            # print(cookie_str)</span><br><span class="line">            headers[&#39;Cookie&#39;] &#x3D; cookie_str</span><br><span class="line">            response &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line">            return response.content.decode(&#39;GBK&#39;)</span><br><span class="line">        else:</span><br><span class="line">            return response.content.decode(&#39;GBK&#39;)</span><br></pre></td></tr></table></figure><h2 id="运行爬虫模块run-spiders"><a href="#运行爬虫模块run-spiders" class="headerlink" title="运行爬虫模块run_spiders"></a>运行爬虫模块run_spiders</h2><ul><li>创建RunSpider类</li><li>提供一个运行爬虫的<code>run</code>方法</li><li>根据配置文件信息, 加载爬虫, 把爬虫对象放到列表中</li><li>遍历爬虫对象列表, 获取代理, 检测代理(代理IP检测模块), 写入数据库(数据库模块) </li><li>使用异步来执行每一个爬虫任务</li><li>每隔一定的时间, 执行一次爬取任务</li></ul><p>settings配置<code>RUN_SPIDERS_INTERVAL</code>作为爬虫运行时间间隔的配置, 单位为小时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">class RunSpider(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 创建MongoPool对象</span><br><span class="line">        self.mongo_pool &#x3D; MongoPool()</span><br><span class="line">        # 3.1 在init方法中创建协程池对象</span><br><span class="line">        self.coroutine_pool &#x3D; Pool()</span><br><span class="line"></span><br><span class="line">    def get_spider_from_settings(self):</span><br><span class="line">        &quot;&quot;&quot;根据配置文件信息, 获取爬虫对象列表.&quot;&quot;&quot;</span><br><span class="line">        # 遍历配置文件中爬虫信息, 获取每个爬虫全类名</span><br><span class="line">        for full_class_name in PROXIES_SPIDERS:</span><br><span class="line">            # core.proxy_spider.proxy_spiders.Ip66Spider</span><br><span class="line">            # 获取模块名 和 类名</span><br><span class="line">            module_name, class_name &#x3D; full_class_name.rsplit(&#39;.&#39;, maxsplit&#x3D;1)</span><br><span class="line">            # 根据模块名, 导入模块</span><br><span class="line">            module &#x3D; importlib.import_module(module_name)</span><br><span class="line">            # 根据类名, 从模块中, 获取类</span><br><span class="line">            cls &#x3D; getattr(module, class_name)</span><br><span class="line">            # 创建爬虫对象</span><br><span class="line">            spider &#x3D; cls()</span><br><span class="line">            # print(spider)</span><br><span class="line">            yield spider</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        # 2.1 根据配置文件信息, 获取爬虫对象列表.</span><br><span class="line">        spiders &#x3D; self.get_spider_from_settings()</span><br><span class="line">        # 2.2 遍历爬虫对象列表, 获取爬虫对象, 遍历爬虫对象的get_proxies方法, 获取代理IP</span><br><span class="line">        for spider in spiders:</span><br><span class="line">            #  2.5 处理异常, 防止一个爬虫内部出错了, 影响其他的爬虫.</span><br><span class="line">            # 3.3 使用异步执行这个方法</span><br><span class="line">            # self.__execute_one_spider_task(spider)</span><br><span class="line">            self.coroutine_pool.apply_async(self.__execute_one_spider_task,args&#x3D;(spider, ))</span><br><span class="line"></span><br><span class="line">        # 3.4 调用协程的join方法, 让当前线程等待 协程 任务的完成.</span><br><span class="line">        self.coroutine_pool.join()</span><br><span class="line"></span><br><span class="line">    def __execute_one_spider_task(self, spider):</span><br><span class="line">        # 3.2 把处理一个代理爬虫的代码抽到一个方法</span><br><span class="line">        # 用于处理一个爬虫任务的.</span><br><span class="line">        try:</span><br><span class="line">            # 遍历爬虫对象的get_proxies方法, 获取代理I</span><br><span class="line">            for proxy in spider.get_proxies():</span><br><span class="line">                # print(proxy)</span><br><span class="line">                # 2.3 检测代理IP(代理IP检测模块)</span><br><span class="line">                proxy &#x3D; check_proxy(proxy)</span><br><span class="line">                # 2.4 如果可用,写入数据库(数据库模块)</span><br><span class="line">                # 如果speed不为-1, 就说明可用</span><br><span class="line">                if proxy.speed !&#x3D; -1:</span><br><span class="line">                    # 写入数据库(数据库模块)</span><br><span class="line">                    self.mongo_pool.insert_one(proxy)</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            logger.exception(ex)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def start(cls):</span><br><span class="line">        # 4. 使用schedule模块, 实现每隔一定的时间, 执行一次爬取任务</span><br><span class="line">        # 4.1 定义一个start的类方法</span><br><span class="line">        # 4.2 创建当前类的对象, 调用run方法</span><br><span class="line">        rs &#x3D; RunSpider()</span><br><span class="line">        rs.run()</span><br><span class="line">        # 4.3 使用schedule模块, 每隔一定的时间, 执行当前对象的run方法</span><br><span class="line">        # 4.3.1 修改配置文件, 增加爬虫运行时间间隔的配置, 单位为小时</span><br><span class="line">        schedule.every(RUN_SPIDERS_INTERVAL).hours.do(rs.run)</span><br><span class="line">        while True:</span><br><span class="line">            schedule.run_pending()</span><br><span class="line">            time.sleep(1)</span><br></pre></td></tr></table></figure><h2 id="检测模块proxy-test"><a href="#检测模块proxy-test" class="headerlink" title="检测模块proxy_test"></a>检测模块proxy_test</h2><ol><li>创建ProxyTester类，检查代理IP可用性, 保证代理池中代理IP基本可用</li><li>提供一个 <code>run</code> 方法, 用于处理检测代理IP核心逻辑<ol><li>从数据库中获取所有代理IP</li><li>遍历代理IP列表</li><li>检查代理可用性<ul><li>如果代理不可用, 让代理分数-1, 如果代理分数等于0就从数据库中删除该代理, 否则更新该代理IP</li><li>如果代理可用, 就恢复该代理的分数, 更新到数据库中</li></ul></li></ol></li><li>为了提高检查的速度, 使用异步来执行检测任务<ol><li>把要检测的代理IP, 放到队列中</li><li>把检查一个代理可用性的代码, 抽取到一个方法中; 从队列中获取代理IP, 进行检查; 检查完毕, 调度队列的task_done方法</li><li>通过异步回调, 使用死循环不断执行这个方法,</li><li>开启多个一个异步任务, 来处理代理IP的检测; 可以通过配置文件指定异步数量 </li></ol></li><li>使用<code>schedule</code>模块, 每隔一定的时间, 执行一次检测任务<ol><li>定义类方法 <code>start</code>, 用于启动检测模块</li><li>在<code>start</code>方法中<ol><li>创建本类对象</li><li>调用run方法</li><li>每间隔一定时间, 执行一下, run方法</li></ol></li></ol></li></ol><p><code>setting.py</code> 文件, 检查代理IP可用性间隔时间的配置</p><p>RUN_SPIDERS_INTERVAL = 2  # 修改配置文件, 增加爬虫运行时间间隔的配置, 单位为小时<br>TEST_PROXIES_ASYNC_COUNT = 10  # 配置检测代理IP的异步数量<br>TEST_PROXIES_INTERVAL = 2  # 配置检查代理IP的时间间隔, 单位是小时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">class ProxyTester(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 创建操作数据库的MongoPool对象</span><br><span class="line">        self.mongo_pool &#x3D; MongoPool()</span><br><span class="line">        # 3.1 在&#96;init&#96;方法, 创建队列和协程池</span><br><span class="line">        self.queue &#x3D; Queue()</span><br><span class="line">        self.coroutine_pool &#x3D; Pool()</span><br><span class="line"></span><br><span class="line">    def __check_callback(self, temp):</span><br><span class="line">        self.coroutine_pool.apply_async(self.__check_one_proxy, callback&#x3D;self.__check_callback)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        # 提供一个 run 方法, 用于处理检测代理IP核心逻辑</span><br><span class="line">        # 2.1 从数据库中获取所有代理IP</span><br><span class="line">        proxies &#x3D; self.mongo_pool.find_all()</span><br><span class="line">        # 2.2 遍历代理IP列表</span><br><span class="line">        for proxy in proxies:</span><br><span class="line">            #  3.2 把要检测的代理IP, 放到队列中</span><br><span class="line">            self.queue.put(proxy)</span><br><span class="line"></span><br><span class="line">        #  3.5 开启多个一个异步任务, 来处理代理IP的检测; 可以通过配置文件指定异步数量</span><br><span class="line">        for i in range(TEST_PROXIES_ASYNC_COUNT):</span><br><span class="line">            #  3.4 通过异步回调, 使用死循环不断执行这个方法,</span><br><span class="line">            self.coroutine_pool.apply_async(self.__check_one_proxy, callback&#x3D;self.__check_callback)</span><br><span class="line"></span><br><span class="line">        # 让当前线程, 等待队列任务完成</span><br><span class="line">        self.queue.join()</span><br><span class="line"></span><br><span class="line">    def __check_one_proxy(self):</span><br><span class="line">        # 检查一个代理IP的可用性</span><br><span class="line">        #  3.3 把检查一个代理可用性的代码, 抽取到一个方法中;</span><br><span class="line">        # 从队列中获取代理IP, 进行检查; 检查完毕</span><br><span class="line">        proxy &#x3D; self.queue.get()</span><br><span class="line">        #  2.3 检查代理可用性</span><br><span class="line">        proxy &#x3D; check_proxy(proxy)</span><br><span class="line">        # 2.4 如果代理不可用, 让代理分数-1,</span><br><span class="line">        if proxy.speed &#x3D;&#x3D; -1:</span><br><span class="line">            proxy.score -&#x3D; 1</span><br><span class="line">            # 如果代理分数等于0就从数据库中删除该代理</span><br><span class="line">            if proxy.score &#x3D;&#x3D; 0:</span><br><span class="line">                self.mongo_pool.delete_one(proxy)</span><br><span class="line">            else:</span><br><span class="line">                # 否则更新该代理IP</span><br><span class="line">                self.mongo_pool.update_one(proxy)</span><br><span class="line">        else:</span><br><span class="line">            # 2.5 如果代理可用, 就恢复该代理的分数, 更新到数据库中</span><br><span class="line">            proxy.score &#x3D; MAX_SCORE</span><br><span class="line">            self.mongo_pool.update_one(proxy)</span><br><span class="line">        # 调度队列的task_done方法</span><br><span class="line">        self.queue.task_done()</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def start(cls):</span><br><span class="line">        #  4.2.1 创建本类对象</span><br><span class="line">        proxy_tester &#x3D; cls()</span><br><span class="line">        #  4.2.2 调用run方法</span><br><span class="line">        proxy_tester.run()</span><br><span class="line"></span><br><span class="line">        # 4.2.3 每间隔一定时间, 执行一下, run方法</span><br><span class="line">        schedule.every(TEST_PROXIES_INTERVAL).hours.do(proxy_tester.run)</span><br><span class="line">        while True:</span><br><span class="line">            schedule.run_pending()</span><br><span class="line">            time.sleep(1)</span><br></pre></td></tr></table></figure><h2 id="API模块proxy-api"><a href="#API模块proxy-api" class="headerlink" title="API模块proxy_api"></a>API模块proxy_api</h2><ul><li>创建<code>ProxyApi</code>类，为爬虫提供高可用代理IP的服务接口</li><li>实现初始方法<ul><li>初始一个Flask的Web服务</li><li>实现根据协议类型和域名, 提供随机的获取高可用代理IP的服务<ul><li>可用通过 <code>protocol</code> 和 <code>domain</code> 参数对IP进行过滤</li><li><code>protocol</code>: 当前请求的协议类型</li><li><code>domain</code>: 当前请求域名</li></ul></li><li>实现根据协议类型和域名, 提供获取多个高可用代理IP的服务<ul><li>可用通过<code>protocol</code> 和 <code>domain</code> 参数对IP进行过滤</li></ul></li><li>实现给指定的IP上追加不可用域名的服务 <ul><li>如果在获取IP的时候, 有指定域名参数, 将不在获取该IP, 从而进一步提高代理IP的可用性.</li></ul></li></ul></li><li>实现run方法, 用于启动Flask的WEB服务</li><li>实现start的类方法, 用于通过类名, 启动服务</li></ul><p>settings中配置<code>PROXIES_MAX_COUNT</code>配置获取的代理IP最大数量; 这个越小可用性就越高; 但是随机性越差</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">class ProxyApi(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 2. 实现初始方法</span><br><span class="line">        # 2.1 初始一个Flask的Web服务</span><br><span class="line">        self.app &#x3D; Flask(__name__)</span><br><span class="line">        # 创建MongoPool对象, 用于操作数据库</span><br><span class="line">        self.mongo_pool &#x3D; MongoPool()</span><br><span class="line"></span><br><span class="line">        @self.app.route(&#39;&#x2F;random&#39;)</span><br><span class="line">        def random():</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            localhost:6868&#x2F;random?protocol&#x3D;https&amp;domain&#x3D;jd.com</span><br><span class="line">            2.2 实现根据协议类型和域名, 提供随机的获取高可用代理IP的服务</span><br><span class="line">                可用通过 protocol 和 domain 参数对IP进行过滤</span><br><span class="line">                protocol: 当前请求的协议类型</span><br><span class="line">                domain: 当前请求域名</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            protocol &#x3D; request.args.get(&#39;protocol&#39;)</span><br><span class="line">            domain &#x3D; request.args.get(&#39;domain&#39;)</span><br><span class="line">            proxy &#x3D; self.mongo_pool.random_proxy(protocol, domain, count&#x3D;PROXIES_MAX_COUNT)</span><br><span class="line"></span><br><span class="line">            if protocol:</span><br><span class="line">                return &#39;&#123;&#125;:&#x2F;&#x2F;&#123;&#125;:&#123;&#125;&#39;.format(protocol, proxy.ip, proxy.port)</span><br><span class="line">            else:</span><br><span class="line">                return &#39;&#123;&#125;:&#123;&#125;&#39;.format(proxy.ip, proxy.port)</span><br><span class="line"></span><br><span class="line">        @self.app.route(&#39;&#x2F;proxies&#39;)</span><br><span class="line">        def proxies():</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">                localhost:6868&#x2F;proxies?protocol&#x3D;https&amp;domain&#x3D;jd.com</span><br><span class="line">                2.3 实现根据协议类型和域名, 提供获取多个高可用代理IP的服务</span><br><span class="line">                可用通过protocol 和 domain 参数对IP进行过滤</span><br><span class="line">                实现给指定的IP上追加不可用域名的服务</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            # 获取协议: http&#x2F;https</span><br><span class="line">            protocol &#x3D; request.args.get(&#39;protocol&#39;)</span><br><span class="line">            # 域名: 如:jd.com</span><br><span class="line">            domain &#x3D; request.args.get(&#39;domain&#39;)</span><br><span class="line"></span><br><span class="line">            proxies &#x3D; self.mongo_pool.get_proxies(protocol, domain, count&#x3D;PROXIES_MAX_COUNT)</span><br><span class="line">            # proxies 是一个 Proxy对象的列表, 但是Proxy对象不能进行json序列化, 需要转换为字典列表</span><br><span class="line">            # 转换为字典列表</span><br><span class="line">            proxies &#x3D; [proxy.__dict__ for proxy in proxies]</span><br><span class="line">            # 返回json格式值串</span><br><span class="line">            return json.dumps(proxies)</span><br><span class="line"></span><br><span class="line">        @self.app.route(&#39;&#x2F;disable_domain&#39;)</span><br><span class="line">        def disable_domain():</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            localhost:6868&#x2F;disable_domain?ip&#x3D;120.92.174.12&amp;domain&#x3D;jd.com</span><br><span class="line">            2.4 如果在获取IP的时候, 有指定域名参数, 将不在获取该IP, 从而进一步提高代理IP的可用性.</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            ip &#x3D; request.args.get(&#39;ip&#39;)</span><br><span class="line">            domain &#x3D; request.args.get(&#39;domain&#39;)</span><br><span class="line"></span><br><span class="line">            if ip is None:</span><br><span class="line">                return &#39;请提供ip参数&#39;</span><br><span class="line">            if domain is None:</span><br><span class="line">                return &#39;请提供域名domain参数&#39;</span><br><span class="line"></span><br><span class="line">            self.mongo_pool.disable_domain(ip, domain)</span><br><span class="line">            return &quot;&#123;&#125; 禁用域名 &#123;&#125; 成功&quot;.format(ip, domain)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        &quot;&quot;&quot;3. 实现run方法, 用于启动Flask的WEB服务&quot;&quot;&quot;</span><br><span class="line">        self.app.run(&#39;0.0.0.0&#39;, port&#x3D;6868)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def start(cls):</span><br><span class="line">        # 4. 实现start的类方法, 用于通过类名, 启动服务</span><br><span class="line">        proxy_api &#x3D; cls()</span><br><span class="line">        proxy_api.run()</span><br></pre></td></tr></table></figure><h2 id="启动入口main"><a href="#启动入口main" class="headerlink" title="启动入口main"></a>启动入口main</h2><ul><li>定义一个run方法用于启动动代理池，开启三个进程, 分别用于启动<code>爬虫</code>, <code>检测代理IP</code>, <code>WEB服务</code><ul><li>定义一个列表, 用于存储要启动的进程</li><li>创建 <code>启动爬虫</code> 的进程, 添加到列表中</li><li>创建 <code>启动检测</code> 的进程, 添加到列表中</li><li>创建 <code>启动提供API服务</code> 的进程, 添加到列表中</li><li>遍历进程列表, 启动所有进程</li><li>遍历进程列表, 让主进程等待子进程的完成</li></ul></li><li>在 <code>if __name__ == &#39;__main__&#39;:</code> 中调用run方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def run():</span><br><span class="line">    # 1. 定义一个列表, 用于存储要启动的进程</span><br><span class="line">    process_list &#x3D; []</span><br><span class="line">    # 2. 创建 启动爬虫 的进程, 添加到列表中</span><br><span class="line">    process_list.append(Process(target&#x3D;RunSpider.start))</span><br><span class="line">    # 3. 创建 启动检测 的进程, 添加到列表中</span><br><span class="line">    process_list.append(Process(target&#x3D;ProxyTester.start))</span><br><span class="line">    # 4. 创建 启动提供API服务 的进程, 添加到列表中</span><br><span class="line">    process_list.append(Process(target&#x3D;ProxyApi.start))</span><br><span class="line"></span><br><span class="line">    # 5. 遍历进程列表, 启动所有进程</span><br><span class="line">    for process in process_list:</span><br><span class="line">        # 设置守护进程</span><br><span class="line">        process.daemon &#x3D; True</span><br><span class="line">        process.start()</span><br><span class="line"></span><br><span class="line">    # 6. 遍历进程列表, 让主进程等待子进程的完成</span><br><span class="line">    for process in process_list:</span><br><span class="line">        process.join()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8BIP%E4%BB%A3%E7%90%86%E6%B1%A0/%E7%88%AC%E8%99%AB%E4%BB%A3%E7%90%86%E6%B1%A0%E5%AE%9E%E7%8E%B0.gif" alt="爬虫代理池实现"></p><p><strong>完整源码请关注微信公众号：ReverseCode，回复：爬虫基础</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 爬虫基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests </tag>
            
            <tag> pymongo </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇之页面请求解析</title>
      <link href="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/"/>
      <url>/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><p>html中为指定元素指定显示效果，比如颜色，背景，字体等不同的属性，这些样式都是通过css选择器告诉浏览器指定样式风格。</p><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>#animal</td><td>获取id为animal的所有元素</td></tr><tr><td>.animal</td><td>获取class为animal的所有元素</td></tr><tr><td>a.active</td><td>获取类为active的a标签</td></tr><tr><td>.animal &gt; .pig</td><td>获取类animal直接子元素中类为.pig的元素</td></tr><tr><td>.animal  .pig</td><td>获取类animal后代元素中类为.pig的元素</td></tr><tr><td>a[href*=”animal”]</td><td>获取包含类animal的a元素</td></tr><tr><td>a[href^=”http”]</td><td>获取href以http开头的a元素</td></tr><tr><td>a[href$=”gov.cn”]</td><td>获取href以gov.cn结尾的a元素</td></tr><tr><td>div[class=”animal”][ctype=”pig”]</td><td>获取多属性同时具备的元素</td></tr><tr><td>div &gt; a:nth-child(2)</td><td>获取div下的第二个a元素</td></tr><tr><td>.pig , .animal</td><td>同时选择两个class的所有元素</td></tr><tr><td>p:nth-last-child(1)</td><td>获取倒数第一个p元素</td></tr><tr><td>p:nth-child(even) p:nth-child(odd)</td><td>获取奇数偶数节点</td></tr><tr><td>h3 + span</td><td>获取h3 <code>后面紧跟着的兄弟节点</code> span</td></tr><tr><td>h3 ~ span</td><td>获取h3 <code>后面所有的兄弟节点</code> span</td></tr></tbody></table><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="链家"><a href="#链家" class="headerlink" title="链家"></a>链家</h3><p>目标抓取网站：<a href="https://su.lianjia.com/ershoufang/pg" target="_blank" rel="noopener">https://su.lianjia.com/ershoufang/pg</a></p><p>抓取内容：分页抓取二手房的标题，地址，信息，关注量，标签，总价，单价等</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E9%93%BE%E5%AE%B6%E5%88%86%E6%9E%901.gif" alt="链家分析1"></p><p>通过获取网页源代码发现所有的二手房信息都直接渲染在页面上，那么可以直接请求<a href="https://su.lianjia.com/ershoufang/pg" target="_blank" rel="noopener">页面地址</a>分析二手房源码后，通过parsel库<code>parsel.Selector(html_data)</code>转为我们可以使用选择器分析的对象。</p><p>通过css选择器<code>.clear.LOGCLICKDATA</code>拿到所有的二手房信息所在的li元素</p><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E9%93%BE%E5%AE%B6%E5%88%86%E6%9E%902.png" alt="链家分析2.png"></p><p>在li元素下可以css选择器获取所有的<code>.title a::text</code>标题，<code>.positionInfo a::text</code>地址，<code>.followInfo::text</code>关注量等信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">selector &#x3D; parsel.Selector(html_data)</span><br><span class="line">lis &#x3D; selector.css(&#39;.clear.LOGCLICKDATA&#39;)</span><br><span class="line">for li in lis:</span><br><span class="line">    title &#x3D; li.css(&#39;.title a::text&#39;).get()  # 标题</span><br><span class="line">    address &#x3D; li.css(&#39;.positionInfo a::text&#39;).getall()  # 地址</span><br><span class="line">    address &#x3D; &#39;,&#39;.join(address)</span><br><span class="line">    houseInfo &#x3D; li.css(&#39;.houseInfo::text&#39;).get()  # 信息</span><br><span class="line">    followInfo &#x3D; li.css(&#39;.followInfo::text&#39;).get()  # 关注</span><br><span class="line">    tags &#x3D; li.css(&#39;.tag span::text&#39;).get()  # 标签</span><br><span class="line">    tags &#x3D; &#39;,&#39;.join(tags)</span><br><span class="line">    totalPrice &#x3D; li.css(&#39;.totalPrice span::text&#39;).get() + &#39;万&#39;  # 总价</span><br><span class="line">    unitePrice &#x3D; li.css(&#39;.unitPrice span::text&#39;).get()  # 单价</span><br><span class="line">    title_url &#x3D; li.css(&#39;.title a::attr(href)&#39;).get()  # 标题</span><br><span class="line">    print(title, address, houseInfo, followInfo, tags, totalPrice, unitePrice, title_url, sep&#x3D;&quot;---&quot;)</span><br></pre></td></tr></table></figure><h4 id="爬取完成"><a href="#爬取完成" class="headerlink" title="爬取完成"></a>爬取完成</h4><p>点击下一页的时候，页面url添加了路径参数pg{}，那么可以通过加该字段实现分页抓取。</p><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E9%93%BE%E5%AE%B6%E7%88%AC%E5%8F%96%E5%AE%8C%E6%88%90.png" alt="链家爬取完成.png"></p><h3 id="猫眼电影"><a href="#猫眼电影" class="headerlink" title="猫眼电影"></a>猫眼电影</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>目标抓取网站：<a href="https://maoyan.com/board" target="_blank" rel="noopener">https://maoyan.com/board</a></p><p>抓取内容：热映口碑榜的电影名，主演，上映时间等。</p><p>老规矩，查看网页源代码电影数据完整返回给前端，没有做异步请求。那么直接访问猫眼的<a href="https://maoyan.com/board" target="_blank" rel="noopener">热映口碑榜</a>通过parsel库解析成Selector对象，开始利用css选择器分析页面字段。</p><p>通过控制台源码发现类.board-wrapper下dd元素包含了所有的电影信息，那么遍历其下的标签列表根据css选择器筛选拿到需要的数据即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">selector &#x3D; parsel.Selector(html_data)</span><br><span class="line">print(selector)</span><br><span class="line">dds &#x3D; selector.css(&#39;.board-wrapper dd&#39;)</span><br><span class="line">for dd in dds:</span><br><span class="line">    title &#x3D; dd.css(&#39;.name a::attr(title)&#39;).get()</span><br><span class="line">    star &#x3D; dd.css(&#39;.star::text&#39;).get().strip()</span><br><span class="line">    releasetime &#x3D; dd.css(&#39;.releasetime::text&#39;).get()</span><br><span class="line">    score &#x3D; dd.css(&#39;.score i::text&#39;).getall()</span><br><span class="line">    score &#x3D; &#39;&#39;.join(score)</span><br><span class="line">    print(title, star, releasetime, score)</span><br><span class="line"></span><br><span class="line">    with open(&#39;maoyan.csv&#39;, mode&#x3D;&#39;a&#39;, encoding&#x3D;&#39;utf-8&#39;, newline&#x3D;&#39;&#39;) as f:</span><br><span class="line">        csv_write &#x3D; csv.writer(f)</span><br><span class="line">        csv_write.writerow([title, star, releasetime, score])</span><br></pre></td></tr></table></figure><h4 id="爬取完成-1"><a href="#爬取完成-1" class="headerlink" title="爬取完成"></a>爬取完成</h4><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E7%8C%AB%E7%9C%BC%E7%88%AC%E5%8F%96%E7%BB%93%E6%9E%9C.png" alt="猫眼爬取结果.png"></p><h3 id="喜马拉雅"><a href="#喜马拉雅" class="headerlink" title="喜马拉雅"></a>喜马拉雅</h3><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>目标网站：<a href="https://www.ximalaya.com/xiangsheng/9723091" target="_blank" rel="noopener">https://www.ximalaya.com/xiangsheng/9723091</a></p><p>抓取内容：下载当前主题的所有页面的音频文件。</p><p>老规矩，查看网页源代码发现所有的音频标签会在当前页面ur后添加音频的id跳转到一个新的页面，如：<a href="https://www.ximalaya.com/xiangsheng/9723091/45982355" target="_blank" rel="noopener">https://www.ximalaya.com/xiangsheng/9723091/45982355</a></p><p>点击播放后，控制台的Media出现请求的音频地址,如：<a href="https://aod.cos.tx.xmcdn.com/group31/M01/36/04/wKgJSVmC6drBDNayAh_Q8WincwI414.m4a" target="_blank" rel="noopener">https://aod.cos.tx.xmcdn.com/group31/M01/36/04/wKgJSVmC6drBDNayAh_Q8WincwI414.m4a</a></p><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85.gif" alt="喜马拉雅"></p><p>通过控制台搜索音频关键字段，找到返回音频地址的请求<a href="https://www.ximalaya.com/revision/play/v1/audio?id=46106992&amp;ptype=1" target="_blank" rel="noopener">https://www.ximalaya.com/revision/play/v1/audio?id=46106992&amp;ptype=1</a></p><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85%E9%9F%B3%E9%A2%91%E6%BA%90%E5%9C%B0%E5%9D%80.png" alt="喜马拉雅音频源地址.png"></p><p>该请求参数由音频id和ptype=1组成，通过css选择器<code>.sound-list li.lF_ a::attr(href)</code>分析列表页的音频的href拿到音频id，通过css选择器<code>.sound-list li.lF_ a::attr(title)</code>拿到音频标题。点击下一页发现只是在原url后添加p{page}字段，综上通过open函数写入音频文件完成下载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">titles &#x3D; selector.css(&#39;.sound-list li.lF_ a::attr(title)&#39;).getall()</span><br><span class="line">href &#x3D; selector.css(&#39;.sound-list li.lF_ a::attr(href)&#39;).getall()</span><br><span class="line"># zip() 可以讲两个列表进行打包, 遍历之后 是一个元组</span><br><span class="line">data &#x3D; zip(titles, href)</span><br><span class="line">for index in data:</span><br><span class="line">    title &#x3D; index[0]</span><br><span class="line">    mp3_id &#x3D; index[1].split(&#39;&#x2F;&#39;)[-1]</span><br><span class="line">    # f&#39;&#123;mp3_id&#125;&#39;  &#39;&#123;&#125;&#39;.format(mp3_id) 字符串格式化方法</span><br><span class="line">    index_url &#x3D; f&#39;https:&#x2F;&#x2F;www.ximalaya.com&#x2F;revision&#x2F;play&#x2F;v1&#x2F;audio?id&#x3D;&#123;mp3_id&#125;&amp;ptype&#x3D;1&#39;</span><br><span class="line">    response_1 &#x3D; requests.get(url&#x3D;index_url, headers&#x3D;headers)</span><br><span class="line">    # 什么是json数据  字典嵌套字典  还嵌套一些列表</span><br><span class="line">    # json数据取值和字典取值方式是一样的  根据关键词提取内容  通俗的讲 就是根据左边的内容提取右边的内容</span><br><span class="line">    # print(response_1.text)</span><br><span class="line">    mp3_url &#x3D; response_1.json()[&#39;data&#39;][&#39;src&#39;]</span><br><span class="line">    print(title, mp3_url)</span><br><span class="line">    # 保存数据</span><br><span class="line">    # 保存数据: 如果是图片&#x2F;音频&#x2F;视频 等 都是要获取它的二进制数据,要以二进制的数据保存</span><br><span class="line">    mp3_content &#x3D; requests.get(url&#x3D;mp3_url).content</span><br><span class="line">    # 相对路径</span><br><span class="line">    with open(&#39;相声\\&#39; + title + &#39;.mp3&#39;, mode&#x3D;&#39;wb&#39;) as f:</span><br><span class="line">        f.write(mp3_content)</span><br><span class="line">        print(&#39;正在保存: &#39;, title)</span><br></pre></td></tr></table></figure><h4 id="爬取完成-2"><a href="#爬取完成-2" class="headerlink" title="爬取完成"></a>爬取完成</h4><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85%E7%88%AC%E5%8F%96%E5%AE%8C%E6%88%90.png" alt="喜马拉雅爬取完成.png"></p><h1 id="XPATH选择器"><a href="#XPATH选择器" class="headerlink" title="XPATH选择器"></a>XPATH选择器</h1><p>XPath (XML Path Language) 是由国际标准化组织W3C指定的，用来在 XML 和 HTML 文档中选择节点的语言。目前主流浏览器 (chrome、firefox，edge，safari) 都支持XPath语法，xpath有 1 和 2 两个版本，目前浏览器支持的是 xpath 1的语法，且比CSS选择器功能更强大。</p><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>/html/body/div</td><td>选择根节点html下面的body下面的div元素，/从子节点找，//从所有子节点包括子节点的子节点中找</td></tr><tr><td>//div/*</td><td>所有div节点下所有元素</td></tr><tr><td>//*[@id=’west’]</td><td>id为west的元素</td></tr><tr><td>//select[@class=’single_choice’]</td><td>class为single_choice的select元素</td></tr><tr><td>//p[@class=”capital huge-city”]</td><td>多元素组合选择</td></tr><tr><td>//*[@multiple]</td><td>具有multiple属性的元素</td></tr><tr><td>//*[contains(@style,’color’)]</td><td>style包含color的元素</td></tr><tr><td>//*[starts-with(@style,’color’)]</td><td>以style是color开头的元素，//*[ends-with(@style,’color’)]结尾元素</td></tr><tr><td>//div/p[2]</td><td>所有div下的第二个p标签</td></tr><tr><td>//p[last()]</td><td>最后一个p元素</td></tr><tr><td>//div/p[last()-2]</td><td>所有div下倒数第三个p元素</td></tr><tr><td>//option[position()&lt;=2]</td><td>option类型的第1-2个元素</td></tr><tr><td>//*[@class=’multi_choice’]/*[position()&gt;=last()-2]</td><td>选择class属性为multi_choice的后3个子元素</td></tr><tr><td>//option|//h4</td><td>所有的option元素 和所有的 h4 元素</td></tr><tr><td>//*[@id=’china’]/..</td><td>选择 id 为 china 的节点的父节点</td></tr><tr><td>//*[@id=’china’]/../../..</td><td>上上父节点</td></tr><tr><td>//*[@class=’single_choice’]/following-sibling::div</td><td>选择后续节点中的div节点  等同于CSS选择器.single_choice ~ *</td></tr><tr><td>//<em>[@class=’single_choice’]/preceding-sibling::</em></td><td>前面兄弟节点</td></tr></tbody></table><h2 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h2><h3 id="新笔趣阁"><a href="#新笔趣阁" class="headerlink" title="新笔趣阁"></a>新笔趣阁</h3><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>目标网站：<a href="http://www.xbiquge.la/10/10489/" target="_blank" rel="noopener">http://www.xbiquge.la/10/10489/</a></p><p>抓取内容：抓取三寸人间所有章节的文章保存。</p><p>章节列表只有小说章节信息，点击每个章节跳转到章节页面，通常xpath表达式<code>//div[@id=&quot;info&quot;]/h1/text()</code>拿到书籍名称，所有的章节都依赖于于id为list的div下的dl下的dd下的a标签的href属性跳转到章节页面。</p><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E4%B8%89%E5%AF%B8%E4%BA%BA%E9%97%B4%E7%AB%A0%E8%8A%82%E5%88%86%E6%9E%90.png" alt="三寸人间章节分析"></p><p>拼接主域名<code>http://www.xbiquge.la</code>即可跳转到章节详情页面，通过xpath表达式<code>//*[@id=&quot;content&quot;]/text()</code>拿到详情页面小说的完整内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 开文件流   打开一个文件 把我们数据写入到文件中去    a是追加写入 写入完第一章就继续追加写入第二章</span><br><span class="line">with open(book_name + &#39;.txt&#39;, &#39;a&#39;, encoding&#x3D;&#39;utf-8&#39;)as f:</span><br><span class="line">    f.write(book_name+&#39;\n&#39;)</span><br><span class="line">    # title 章节的名称     urls 每个章节的详情链接</span><br><span class="line">    # 遍历获取到该本书的每个章节和对应的内容详情链接  zip一次性遍历多个列表</span><br><span class="line">    for title,urls in zip(book_title,book_url):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        c_url&#x3D;&#39;http:&#x2F;&#x2F;www.xbiquge.la&#39;+urls</span><br><span class="line"></span><br><span class="line">        print(title)</span><br><span class="line">        print(c_url)</span><br><span class="line"></span><br><span class="line">        # 异常处理</span><br><span class="line">        try: #捕捉异常</span><br><span class="line">            #参数1：单个章节的url:以获取到这个章节的小说内容的html源码 参数2：headers  参数3：请求等待时间3秒</span><br><span class="line">            titles_url &#x3D; requests.get(c_url, headers&#x3D;headers, timeout&#x3D;3).content.decode(&#39;utf-8&#39;)</span><br><span class="line">        except: # 如果捕捉异常怎么办  请求失败那就再请求一遍</span><br><span class="line">            titles_url &#x3D; requests.get(c_url, headers&#x3D;headers).content.decode(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">        # 那我们还差一个小说文本内容对不对 那每个章节链接我们有了</span><br><span class="line">        # 每个章节里面的内容是不是好解决 一样xpath语法给他获取下来</span><br><span class="line">        # 通过xpath获取到小说文本内容</span><br><span class="line">        book_content &#x3D; etree.HTML(titles_url).xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;content&quot;]&#x2F;text()&#39;)</span><br><span class="line"></span><br><span class="line">        f.write(title) # 先写入章节名称</span><br><span class="line">        f.write(&#39;\n&#39;)</span><br><span class="line"></span><br><span class="line">        # f.write不能够写列表，但可以写字符串格式（二进制）。。。  所以要for循环</span><br><span class="line">        for line in book_content:</span><br><span class="line">            f.write(line) # 再写入章节对应的内容</span><br><span class="line">        f.write(&#39;\n&#39;)  # 每写完一章换行  一共1000多个章节</span><br></pre></td></tr></table></figure><h4 id="爬取完成-3"><a href="#爬取完成-3" class="headerlink" title="爬取完成"></a>爬取完成</h4><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E6%96%B0%E7%AC%94%E8%B6%A3%E9%98%81%E6%8A%93%E5%8F%96%E5%AE%8C%E6%88%90.png" alt="新笔趣阁抓取完成.png"></p><blockquote><p>其实很多情况下不需要自己去分析dom节点定位css或xpath表达式，chrome已经为我们集成了插件。</p><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/xpath%E5%92%8Ccss%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F.gif" alt="xpath和css获取方式.gif"></p></blockquote><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>很多情况页面不直接返回html或xml文本元素，或者这些文本分析起来很困难的情况下，可以通过控制台中的xhr模式抓取后端请求回来的json数据，直接解析json即可拿到想要的数据。</p><h2 id="实战-2"><a href="#实战-2" class="headerlink" title="实战"></a>实战</h2><h3 id="拉勾"><a href="#拉勾" class="headerlink" title="拉勾"></a>拉勾</h3><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><p>目标网站：<a href="https://www.lagou.com/jobs/list_C%2B%2B?labelWords=&amp;fromSearch=true&amp;suginput=" target="_blank" rel="noopener">https://www.lagou.com/jobs/list_C%2B%2B?labelWords=&amp;fromSearch=true&amp;suginput=</a></p><p>抓取内容：抓取首页职位地址，公司名，规模等信息保存。</p><p>搜索C++后，打开控制台将结果中的<code>带薪年假</code>搜索拿到实际请求路径<code>https://www.lagou.com/jobs/positionAjax.json?needAddtionalResult=false</code>，该请求是post请求，参数如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data &#x3D; &#123;</span><br><span class="line">    &quot;first&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;pn&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;kd&quot;: &quot;C++&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E6%8B%89%E5%8B%BE%E5%88%86%E6%9E%90.png" alt="拉勾分析.png"></p><p>通过控制台Preview分析返回的json数据，<code>data[&#39;content&#39;][&#39;positionResult&#39;][&#39;result&#39;]</code>即为职位信息</p><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E6%8B%89%E5%8B%BEjson.png" alt="拉勾json.png"></p><p>不过当我们直接请求时会报dtacess deny,可能对请求头中的参数做了校验。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;F:&#x2F;MyProject&#x2F;CrawlerBase&#x2F;lagou&#x2F;lagou.py&quot;, line 21, in &lt;module&gt;</span><br><span class="line">    result &#x3D; data[&#39;content&#39;][&#39;positionResult&#39;][&#39;result&#39;]</span><br><span class="line">KeyError: &#39;content&#39;</span><br><span class="line">&#123;&#39;clientIp&#39;: &#39;61.155.198.*&#39;,</span><br><span class="line"> &#39;msg&#39;: &#39;dtaccess deny &#39;,</span><br><span class="line"> &#39;state&#39;: 2410,</span><br><span class="line"> &#39;status&#39;: False&#125;</span><br></pre></td></tr></table></figure><p>我们将Cookie和User-Agent加入header后，即可以完整请求到json数据，进行数据分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">resp &#x3D; requests.post(api_url, headers&#x3D;headers)</span><br><span class="line">pprint(resp.json())</span><br><span class="line">data &#x3D; resp.json()</span><br><span class="line">result &#x3D; data[&#39;content&#39;][&#39;positionResult&#39;][&#39;result&#39;]</span><br><span class="line"># [print(r) for r in result]</span><br><span class="line">for r in result:</span><br><span class="line">    d &#x3D; &#123;</span><br><span class="line">        &#39;city&#39;: r[&#39;city&#39;],</span><br><span class="line">        &#39;companyFullName&#39;: r[&#39;companyFullName&#39;],</span><br><span class="line">        &#39;companySize&#39;: r[&#39;companySize&#39;],</span><br><span class="line">        &#39;education&#39;: r[&#39;education&#39;],</span><br><span class="line">        &#39;positionName&#39;: r[&#39;positionName&#39;],</span><br><span class="line">        &#39;salary&#39;: r[&#39;salary&#39;],</span><br><span class="line">        &#39;workYear&#39;: r[&#39;workYear&#39;]</span><br><span class="line">    &#125;</span><br><span class="line">    with open(&#39;拉钩职位.csv&#39;,mode&#x3D;&#39;a&#39;,encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">        f.write(&quot;,&quot;.join(d.values()))</span><br><span class="line">        f.write(&quot;\n&quot;)</span><br></pre></td></tr></table></figure><h4 id="爬取完成-4"><a href="#爬取完成-4" class="headerlink" title="爬取完成"></a>爬取完成</h4><p><img src="/2021/03/30/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/%E6%8B%89%E5%8B%BE%E6%8A%93%E5%8F%96.png" alt="拉勾抓取.png"></p><p><strong>完整源码请关注微信公众号：ReverseCode，回复：爬虫基础</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 爬虫基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xpath </tag>
            
            <tag> css </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇之基本库的使用</title>
      <link href="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="爬虫介绍"><a href="#爬虫介绍" class="headerlink" title="爬虫介绍"></a>爬虫介绍</h1><h2 id="爬虫目的"><a href="#爬虫目的" class="headerlink" title="爬虫目的"></a>爬虫目的</h2><ul><li>大数据时代所谓的人工智能都需要建立海量基础的数据上，一切一切的分析都是一数据为基础核心，那么对于企业来说，合理采集数据是既节省成本同时间也可以完成业务分析的捷径。</li><li>企业需要大量数据进行测试，对网站或app的负载，流量，服务器的CPU进行测试，采集数据是保证大数据量业务上线正常流转的必备前提。</li><li>所有搜索引擎的底层都是一个个的自动化爬虫，在海量的互联网信息中进行分析处理收录。</li><li>各大企业都希望自己的产品搜索靠前，对于SEO来说，除了充钱，足够了解爬虫可以从原理上实现搜索引擎的工作原理，实现SEO优化。</li><li>从技术层面来说，爬虫虽不是成体系型的一种技术栈，不过技术涉及领域极光，包括html解析，js逆向，安卓底层逆向，汇编分析，反爬虫与反反爬虫的对抗等等，其实以上也属于网络安全层的一个方向，文明爬虫，技术无罪。</li></ul><h2 id="什么是最好的语言"><a href="#什么是最好的语言" class="headerlink" title="什么是最好的语言"></a>什么是最好的语言</h2><p>当之无愧强类型语言Python，毋庸置疑，一来Python的三方库种类繁多且爬虫框架日新月异，请求与解析模块成熟，且拥有很多有趣的语法糖可以快速处理数据。相对于代码量臃肿的java来说语法简单，学习曲线短，因为java需要jvm虚拟机的编译成字节码的过程，对于爬虫来讲，Python免编译即可跨平台运行，且基于C++更接近底层，性能在一定程度上领超java，故优先选择python(别跟我提php)。</p><p>当然玩到最后语言只是一种实现方式而已，只是这些路都通往罗马，哪条在实际场景中更方便到达而已。比如：安卓逆向过程hook框架中，xposed和frida是我们的首选，两者各有优劣，视不同场景而定。</p><ul><li>Xposed是一个在andoid平台上比较成熟的hook框架，可以完美的在dalvik虚拟机上做到hook任意java方法，配置安装环境繁琐，兼容性差，无法对native层实现底层注入。</li><li>Frida是一个跨平台的hook框架，可以hook Java和native层，且不需要每次都重启手机，需要我们手动将java的语法转为frida的实现方式，无法像Xposed用于实践生产中。</li></ul><h2 id="爬虫路对抗现状"><a href="#爬虫路对抗现状" class="headerlink" title="爬虫路对抗现状"></a>爬虫路对抗现状</h2><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%88%AC%E8%99%AB%E5%AF%B9%E6%8A%97.png" alt="爬虫对抗"></p><p>这是一张老图，当然现在很多网站在请求头中实现了对selenium，phantomjs底层的api监控，总之，道高一尺魔高一丈，攻防之间，其乐无穷。</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>话不多说，直接开干。<strong>鲁迅曾经说过，他在爬虫生涯中超过一半的苦难均由Windows赐予</strong>，所以我建议还是用kali或者ubuntu吧，如果嫌麻烦，就退一步用centos吧，当然你用windows出现的问题需要自行google解决，基础篇目测应该不存在，用windows可以直接跳到doutula内容。</p><h2 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h2><p>这里就不聊kali或者ubuntu在虚拟机的搭建了，简单介绍一下使用vagrant创建centos虚拟机吧，</p><p>进入vagrant官网，<a href="https://releases.hashicorp.com/vagrant/2.2.14/vagrant_2.2.14_x86_64.msi" target="_blank" rel="noopener">vagrant</a>安装好后进入<a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">镜像仓库</a>搜索需要安装的镜像。</p><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/vagrant%E4%BB%93%E5%BA%93.png" alt="vagrant仓库"></p><p><code>mkdir centos7 &amp;&amp; vagrant init centos/7 &amp;&amp; vagrant up &amp;&amp; vagrant ssh</code>  创建并开启镜像，自动生成Vagrantfile，默认网络nat，初始配置如下</p><blockquote><p><code>config.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.10&quot;</code>  配置NAT网络，选其一即可<br><code>config.vm.network &quot;public_network&quot;, ip: &quot;192.168.0.102&quot;</code>  配置桥接网络</p><p>yum list installed | grep openssh-server 确保安装了 openssh-server，否则yum install openssh-server</p><p> vi /etc/ssh/sshd_config  并注释<code>#PasswordAuthentication yes</code>,打开Port,ListenAddress,PermitRootLoin,PasswordAuthentication执行<code>service sshd restart</code> 实现远程连接</p></blockquote><p>安装<a href="https://npm.taobao.org/mirrors/node/v10.15.3/node-v10.15.3-x64.msi" target="_blank" rel="noopener">nodejs</a>并配置淘宝源<code>npm config set registry http://registry.npm.taobao.org/</code></p><h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><p>由于python2已经废弃维护，往后皆基于python3实战开发。进入python官网下载<a href="https://www.python.org/ftp/python/3.7.0/python-3.7.0-amd64.exe" target="_blank" rel="noopener">python 3.7.0</a>，或者通过清华大学源下载<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Windows-x86_64.exe" target="_blank" rel="noopener">anaconda 5.3.1</a>会自动下载常用库。</p><p>为了避免不同项目间引用的依赖包冲突，我们将不同项目维护不同的环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget zlib-devel gcc bzip2-devel openssl-devel libffi-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel net-tools ftp vsftpd  安装常用包</span><br><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;python3  由于默认centos已经有了python2，避免环境冲突，配置多环境python3</span><br><span class="line">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.7.0&#x2F;Python-3.7.0.tgz   下载python3的包</span><br><span class="line">tar zxf Python-3.7.0.tgz  解压</span><br><span class="line">cd Python-3.7.0&#x2F; &amp;&amp; .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3  编译</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">vim &#x2F;etc&#x2F;profile   配置环境变量</span><br><span class="line">PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;</span><br><span class="line">export PATH</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3  配置软链接</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3 &#x2F;usr&#x2F;bin&#x2F;pip3</span><br></pre></td></tr></table></figure><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/python%E5%AE%89%E8%A3%85.png" alt="python安装"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br><span class="line">pip install virtualenvwrapper  安装虚拟环境</span><br><span class="line">vim ~&#x2F;.bashrc  配置环境变量</span><br><span class="line">VIRTUALENVWRAPPER_PYTHON&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">export WORKON_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;python3&#x2F;venv</span><br><span class="line">source ~&#x2F;.bashrc  编译</span><br><span class="line">mkvirtualenv --python&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3 baseSpider  指定python3创建名为baseSpider环境</span><br><span class="line">mkvirtualenv --python&#x3D;&#x2F;usr&#x2F;bin&#x2F;python2 baseSpider2 指定python2创建名为baseSpider2环境</span><br><span class="line">workon baseSpider  进入baseSpider环境</span><br><span class="line">deactivate 退出环境</span><br></pre></td></tr></table></figure><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.png" alt="多环境配置"></p><h2 id="doutula"><a href="#doutula" class="headerlink" title="doutula"></a>doutula</h2><p>这是一个表情包网站，本次就以本网站的最新表情页面作为案例。</p><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/%E6%9C%80%E6%96%B0%E8%A1%A8%E6%83%85.png" alt="最新表情"></p><p>ctrl+u获取网页源代码，发现本页面所有的表情包都以html表情直接显示在页面上，那么只需要使用requests库请求URL，parsel库来解析页面，通过xpath或者css选择器获取页面元素。</p><p>通过点击分页，该页面的url会跳转时添加page参数，从<code>https://www.doutula.com/photo/list/</code>变成<code>https://www.doutula.com/photo/list/?page=2</code>,重新向服务器发起请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">base_url &#x3D; &#39;https:&#x2F;&#x2F;www.doutula.com&#x2F;photo&#x2F;list&#x2F;&#39;</span><br><span class="line">response &#x3D; requests.get(url&#x3D;base_url)</span><br><span class="line">print(response.content)</span><br></pre></td></tr></table></figure><p>打印出来的结果是<code>b&#39;&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;\r\n&lt;body bgcolor=&quot;white&quot;&gt;\r\n&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;\r\n&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n&#39;</code>,说明做了反爬，可能对请求头的参数做了校验。先尝试将User-Agent加入请求头中，再次发起请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">base_url &#x3D; &#39;https:&#x2F;&#x2F;www.doutula.com&#x2F;photo&#x2F;list&#x2F;?page&#x3D;&#123;&#125;&#39;.format(1)</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.121 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line">response &#x3D; requests.get(url&#x3D;base_url, headers&#x3D;headers)</span><br><span class="line">print(response.content)</span><br></pre></td></tr></table></figure><p>果然将页面内容完整打印出来，所有的图片地址也都明文显示在页面上。通过分析页面上的图片元素的dom节点，所有的图片节点都存在于类col-xs-6 col-sm-3的a标签下的img元素，通过xpath表达式可以取出这些元素下的属性，包括图片地址data-original，说明alt等。</p><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/%E8%A1%A8%E6%83%85%E5%8C%85dom%E5%88%86%E6%9E%90.png" alt="表情包dom分析"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">for page in range(1,3466):</span><br><span class="line">    print(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;正在爬去第&#123;&#125;页数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;.format(page))</span><br><span class="line">    base_url &#x3D; &#39;https:&#x2F;&#x2F;www.doutula.com&#x2F;photo&#x2F;list&#x2F;?page&#x3D;&#123;&#125;&#39;.format(page)</span><br><span class="line">    headers &#x3D; &#123;&#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.121 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line">    response &#x3D; requests.get(url&#x3D;base_url,headers&#x3D;headers)</span><br><span class="line">    html_data&#x3D;response.text</span><br><span class="line"></span><br><span class="line">    selector &#x3D; parsel.Selector(html_data)</span><br><span class="line">    result_list &#x3D; selector.xpath(&#39;&#x2F;&#x2F;a[@class&#x3D;&quot;col-xs-6 col-sm-3&quot;]&#39;)</span><br><span class="line">    for result in result_list:</span><br><span class="line">        img_url &#x3D; result.xpath(&#39;.&#x2F;img&#x2F;@data-original&#39;).extract_first()</span><br><span class="line">        img_title &#x3D; result.xpath(&#39;.&#x2F;img&#x2F;@alt&#39;).extract_first()</span><br><span class="line">        print(img_url+&quot;---&quot;+img_title)</span><br></pre></td></tr></table></figure><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/%E8%A1%A8%E6%83%85%E5%8C%85%E6%8A%93%E5%8F%96%E7%BB%93%E6%9E%9C%E6%89%93%E5%8D%B0.png" alt="表情包抓取结果打印"></p><p>接下来在通过IO流将图片存储到本地完成基础图片爬取。</p><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/%E8%A1%A8%E6%83%85%E5%8C%85%E6%8A%93%E5%8F%96.png" alt="表情包抓取"></p><p><strong>完整源码请关注微信公众号：ReverseCode，回复：爬虫基础</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 爬虫基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests </tag>
            
            <tag> parsel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇之多线程实现</title>
      <link href="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><p>python并不像java这类高级语言需要将文件编译为机器码交给虚拟机执行，而是由python虚拟机一条条地将py语句解释运行，故而称之为解释型语言。</p><p>python先将py文件编译成字节码，交给字节码虚拟机后，虚拟机从编译得到的PyCodeObject对象在当前的上下文环境逐条执行字节码指令，完成整个程序的执行流程。</p><blockquote><p>字节码在python虚拟机程序里对应的是PyCodeObject对象， .pyc文件是字节码在磁盘上的表现形式。</p></blockquote><p>例如：在python test.py过程中会将test.py进行编译成字节码并解释执行，当test.py中加载了其他模块，如import urllib2，python会将urllib2.py进行编译成字节码，生成urllib2.pyc，并重新对字节码解释执行。加载模块时，当.py和.pyc同时存在时，优先运行.pyc文件，若.pyc文件比.py编译时间早，执行流程也会优先重新编译.py文件并更新.pyc文件。</p><blockquote><p>.pyc文件通过内置模块py_compile来编译生成test.pyc,或者通过python -m test.py生成test.pyc</p></blockquote><h2 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h2><p>由于物理上的科技发展，各CPU厂商在核心频率上已经被多核CPU所取代，为了更有效的利用多核处理器的性能，就出现了多线程的编程技巧，又因为Python GIL的存在让Python虚拟机在进行运算时无法有效利用多核心，几乎只能单线程处理任务，所以将任务并行化，分散到多个线程或多个进程的实现和GIL本身的存在是天生冲突的矛盾。</p><p>首先，GIL不是python的特性，是实现python解析器(CPython)时的语法标准，并不是python的特性，类似的还有JPython等就没有GIL，但是CPython是大部分环境下默认的Python执行环境，自然而然CPython==python，自然而然GIL成为的python天生的缺陷。</p><p>当多核CPU出现在市场的时候，python为了支持多线程，首要解决的就是线程之间的数据完整性和数据同步性，GIL应运而生，简单粗暴的为线程加上了一把大锁，后起之库们默认都接受了这种实现方案，省去考虑额外线程间的内存锁和同步操作，导致大量的三方库都极度依赖GIL来实现线程安全。GIL这把全局排他锁，是多线程处理的致命伤，效率极底，因为python的线程就是C的一个pthread，通过操作系统的调度算法调度，为在调度过程中各线程平均利用CPU的时间，python会计算已执行的代码量，达到阈值强制释放GIL锁，触发一次操作系统的调度。</p><p>任何一个线程在唤起时可以成功获取到GIL，但是多核CPU上，release和acquire几乎没有间隔，导致其他核上的线程被唤醒时，主线程已经再次拿到GIL，导致被唤醒的其他线程只能白白浪费CPU时间，眼睁睁看着另一个线程拿个GIL快乐的执行，当达到切换时间后进入待调度状态，再次唤醒再次等待，恶性循环。</p><h2 id="多线程方案"><a href="#多线程方案" class="headerlink" title="多线程方案"></a>多线程方案</h2><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><p>一定程度弥补了thread库由于GIL锁导致低效的缺陷，完整的实现了一套thread接口，但是只是使用了多进程而本身不是多进程，原理上每个进程有自己独立的GIL，不会出现进程间的GIL争抢，但是增加了线程间数据通讯和同步的麻烦，由于不同进程间无法看到对方的数据状态，只能在主线程声明一个队列，通过队列的实现解决数据本身的问题，无疑徒增的代码的开发与维护成本。</p><h3 id="concurrent"><a href="#concurrent" class="headerlink" title="concurrent"></a>concurrent</h3><p>提供了多线程ThreadPoolExecutor和多进程ProcessPoolExecutor两种并发模型。</p><ul><li>计算密集型任务<br>永远最多只能榨干单核CPU，如果需要提升效率，必须通过ProcessPoolExecutor fork出多个子进程来分担计算任务。</li><li>IO密集型任务<br>CPU使用效率极低，虽然使用多线程加倍CPU使用率，但是还远远到不了饱和(100%)的地步，在单核心可以应付整体计算的前提下，自然是应该选择资源占用少的模式，也就是多线程模式。主线程是通过队列将任务传递给多个子线程的。一旦主线程将任务塞进任务队列，子线程们就会开始争抢，最终只有一个线程能抢到这个任务，并立即进行执行，执行完后将结果放进Future对象就完成了这个任务的完整执行过程。</li></ul><blockquote><p>concurrent的线程池有个重大的缺陷，那就是任务队列是无界的。如果队列的生产者任务生产的太快，而线程池消费太慢处理不过来，任务就会堆积。如果堆积一直持续下去，内存就会持续增长直到OOM，任务队列里堆积的所有任务全部彻底丢失。</p></blockquote><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/concurrent%E5%8E%9F%E7%90%86.jpg" alt="concurrent原理"></p><ol><li>主线程将任务塞进TaskQueue(普通内存队列)，拿到Future对象</li><li>唯一的管理线程从TaskQueue获取任务，塞进CallQueue(分布式跨进程队列)</li><li>子进程从CallQueue中争抢任务进行处理</li><li>子进程将处理结果塞进ResultQueue(分布式跨进程队列)</li><li>管理线程从ResultQueue中获取结果，塞进Future对象</li><li>主线程从Future对象中拿到结果</li></ol><blockquote><p>进程池模型中的跨进程队列是用multiprocessing.Queue实现的。它使用无名套接字sockerpair来完成的跨进程通信，socketpair和socket的区别就在于socketpair不需要端口，不需要走网络协议栈，通过内核的套接字读写缓冲区直接进行跨进程通信。multiprocessing.Queue是支持双工通信，数据流向是父子双向，只不过在concurrent的进程池实现中只用到了单工通信。CallQueue是从父到子，ResultQueue是从子到父。</p><blockquote><p>当父进程要传递任务给子进程时，先使用pickle将任务对象进行序列化成字节数组，然后将字节数组通过socketpair的写描述符写入内核的buffer中。子进程接下来就可以从buffer中读取到字节数组，然后再使用pickle对字节数组进行反序列化来得到任务对象，这样总算可以执行任务了。同样子进程将结果传递给父进程走的也是一样的流程，只不过这里的socketpair是ResultQueue内部创建的无名套接字。</p></blockquote></blockquote><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="doutula"><a href="#doutula" class="headerlink" title="doutula"></a>doutula</h2><p>上文讲到通过分析页面元素分页抓取doutula表情包并保存图片的的案例，由于网络请求结果返回往往比IO存储图片要快，接下来通过多线程的方式实现在IO相对较慢的前提下使用多线程处理存储图片。核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def main(page):</span><br><span class="line">    &quot;&quot;&quot;函数入口&quot;&quot;&quot;</span><br><span class="line">    for page in range(1, page + 1):</span><br><span class="line">        print(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;正在爬去第&#123;&#125;页数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;.format(page))</span><br><span class="line">        # 定义最多 max_workers 个线程的线程池来异步执行调用。如果 max_workers 为 None 或没有指定，将默认为机器处理器的个数</span><br><span class="line">        thread_pool &#x3D; concurrent.futures.ThreadPoolExecutor(max_workers&#x3D;3)</span><br><span class="line">        res &#x3D; send_request(&#39;https:&#x2F;&#x2F;www.doutula.com&#x2F;photo&#x2F;list&#x2F;?page&#x3D;&#123;&#125;&#39;.format(str(page)))</span><br><span class="line">        # 封装解析函数</span><br><span class="line">        src_url &#x3D; parse_data(res.text)</span><br><span class="line">        for file, url in src_url:</span><br><span class="line">            image_response &#x3D; send_request(url)</span><br><span class="line">            # 提交线程请求，save_data是封装保存函数，file和image_response.content是save_data的入参</span><br><span class="line">            thread_pool.submit(save_data, file, image_response.content)</span><br><span class="line">        # 关闭线程池    </span><br><span class="line">        thread_pool.shutdown()</span><br></pre></td></tr></table></figure><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/%E5%A4%9A%E7%BA%BF%E7%A8%8Bdoutula.png" alt="多线程doutula"></p><h2 id="guazi"><a href="#guazi" class="headerlink" title="guazi"></a>guazi</h2><p>同时执行多个线程的确可以提高程序效率，但并非线程越多越好，相对计算机而言，线程越多越吃资源，成百上千个线程可能直接瘫痪。故而多线程在运行时，设置最大线程锁，设置最大线程同时允许处理任务，多线程threading使用Semaphore(无上限)或BoundedSemaphore(初始设置最大值), 如果release调用检查计数器的值是否超过了计数器最大值则出ValueError 实现并发限制。</p><p>例如：通过semaphore信号量可以利用内置计数器来控制同时运行线程的数量，启动线程(消耗信号量)内置计数器会自动减一，线程结束(释放信号量)内置计数器会自动加一；内置计数器为零，启动线程会阻塞，直到有本线程结束或者其他线程结束为止;</p><p>以下我们对<a href="https://www.guazi.com/su/buy/o1" target="_blank" rel="noopener">瓜子二手车</a>数据进行多线程抓取，并保存到csv中。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>当我们访问<a href="https://www.guazi.com/su/buy/o1" target="_blank" rel="noopener">第一页</a>时，<a href="https://www.guazi.com/su/buy/o1" target="_blank" rel="noopener">https://www.guazi.com/su/buy/o1</a></p><p>当我们访问<a href="https://www.guazi.com/su/buy/o2" target="_blank" rel="noopener">第二页</a>时，<a href="https://www.guazi.com/su/buy/o2" target="_blank" rel="noopener">https://www.guazi.com/su/buy/o2</a></p><p>以此类推，不难得出分页数据以<code>start_url = &#39;https://www.guazi.com/su/buy/o&#39;+str(i)</code>形式拼接，i为页码数，根据页面控制台的Elements分析所有的数据都存在于含有类<code>carlist clearfix js-top</code>的ul节点下的所有li节点下，我们可以通过解析得到html代码转化为bs4库的BeautifulSoup对象，利用BeautifulSoup的api获取这些li节点的元素属性，解析拿到类型，年份，里程，售价，具体BeautifulSoup语法出门右转见<a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/" target="_blank" rel="noopener">中文文档</a>。</p><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/guazi%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0.png" alt="guazi页面元素"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def get_data(html):</span><br><span class="line">    # 将之前抓取的html页面解析生成BeautifulSoup对象</span><br><span class="line">    soup &#x3D; BeautifulSoup(html, &#39;html.parser&#39;)</span><br><span class="line">    # 调用api获取含有类carlist clearfix js-top的ul节点下的所有li节点</span><br><span class="line">    infos &#x3D; soup.find(&#39;ul&#39;, &#123;&#39;class&#39;: &#39;carlist clearfix js-top&#39;&#125;).find_all(&#39;li&#39;)</span><br><span class="line">    # 打开文件开始写入</span><br><span class="line">    with open(&#39;.&#x2F;guazi.csv&#39;, &#39;a&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">        pic_urls &#x3D; []</span><br><span class="line">        for info in infos:</span><br><span class="line">            leixing &#x3D; info.find(&#39;h2&#39;).get_text()</span><br><span class="line">            nianfen1 &#x3D; info.find(&#39;div&#39;, &#123;&#39;class&#39;: &#39;t-i&#39;&#125;).get_text()</span><br><span class="line">            # 通过正则分割年份字符串</span><br><span class="line">            nianfen2 &#x3D; re.sub(r&#39;|&#39;, &#39;&#39;, nianfen1).split(&#39;|&#39;)</span><br><span class="line">            nianfen &#x3D; nianfen2[0]</span><br><span class="line">            licheng &#x3D; nianfen2[1]</span><br><span class="line">            didian &#x3D; &#39;苏州&#39;</span><br><span class="line">            shoujia &#x3D; info.find(&#39;div&#39;, &#123;&#39;class&#39;: &#39;t-price&#39;&#125;).find(&#39;p&#39;).get_text()</span><br><span class="line">            try:</span><br><span class="line">                yuanjia &#x3D; info.find(&#39;div&#39;, &#123;&#39;class&#39;: &#39;t-price&#39;&#125;).find(&#39;em&#39;).get_text()</span><br><span class="line">            except AttributeError:</span><br><span class="line">                yuanjia &#x3D; &#39;&#39;</span><br><span class="line">            tupian &#x3D; info.find(&#39;a&#39;).find(&#39;img&#39;)[&#39;src&#39;]</span><br><span class="line">            pic_urls.append(tupian)</span><br><span class="line">            f.write(&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;.format(leixing, nianfen, licheng, didian, shoujia, yuanjia))</span><br><span class="line">    return pic_urls</span><br></pre></td></tr></table></figure><p>get_data拿到所有的数据属性后，接下来通过含有信号量的多线程方式调用封装好的download_pics方法批量抓取图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 定义最多10个线程同时允许</span><br><span class="line">thread_lock &#x3D; threading.BoundedSemaphore(value&#x3D;10)</span><br><span class="line">def main():</span><br><span class="line">    n &#x3D; 0</span><br><span class="line">    for i in range(1,51):</span><br><span class="line">        start_url &#x3D; &#39;https:&#x2F;&#x2F;www.guazi.com&#x2F;su&#x2F;buy&#x2F;o&#39;+str(i)</span><br><span class="line">        html &#x3D; getHtmlText(start_url)</span><br><span class="line">        pic_urls &#x3D; get_data(html)</span><br><span class="line">        for url in pic_urls:</span><br><span class="line">            n+&#x3D;1</span><br><span class="line">            print(&#39;正在下载第&#123;&#125;张图片&#39;.format(n))</span><br><span class="line">            # 上锁 避免下载同一张</span><br><span class="line">            thread_lock.acquire()</span><br><span class="line">            t &#x3D; threading.Thread(target&#x3D;download_pics,args&#x3D;(url,n))</span><br></pre></td></tr></table></figure><p><img src="/2021/03/28/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/guazi%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" alt="guazi多线程"></p><p><strong>完整源码请关注微信公众号：ReverseCode，回复：爬虫基础</strong></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 爬虫基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadPoolExecutor </tag>
            
            <tag> BoundedSemaphore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加壳与脱壳之二代壳函数抽取</title>
      <link href="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/"/>
      <url>/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p>函数抽取宣告一代壳整体保护的结束，由此进入二代壳的时代，本文将对Dalvik和Art下函数抽取的加固方法原理介绍及实现函数抽取的代码保护方案。</p><h1 id="Dalvik"><a href="#Dalvik" class="headerlink" title="Dalvik"></a>Dalvik</h1><ul><li><p><a href="https://blog.csdn.net/m0_46204016/article/details/104579974?spm=1001.2014.3001.5501" target="_blank" rel="noopener">Android中实现「类方法指令抽取方式」加固方案原理解析</a>：对dex结构简单介绍，定位函数指令地址，实现函数抽取壳的demo，对getPwd函数进行指令抽取，类被加载时重填恢复指令。</p></li><li><p><a href="https://blog.csdn.net/m0_46204016/article/details/104579953" target="_blank" rel="noopener">Android免Root权限通过Hook系统函数修改程序运行时内存指令逻辑</a>：为了修改原有系统对dex加载流程，需要hook系统某些关键函数，自然可以在原有函数逻辑中添加需要自定义的逻辑功能，再添加一些恢复保护函数的填充。</p></li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>实现函数抽取壳需要保证对函数恢复的时机肯定早于函数被调用的时机，不然app逻辑被破坏了，即当函数被调用时指令流必须已经被修复了，否则app逻辑被破坏导致app崩了。再选择时机，<a href="https://blog.csdn.net/m0_46204016/article/details/104579974?spm=1001.2014.3001.5501" target="_blank" rel="noopener">Android中实现「类方法指令抽取方式」加固方案原理解析</a>中选择了dexFindClass函数。</p><p>对于函数来说在被调用之前，首先dex加载(dexclassloader动态加载)，对类加载的函数调用时需要进行一些准备，需要经过装载-链接-初始化，在这些加载过程中有非常多的时机供我们选择，Dalvik源代码编译生成的system/lib/libdvm.so通过ida打开，搜索文中的<strong>dexFindClass</strong>函数，获取导出的函数名可实现函数抽取。hook的时机点肯定是早于被调用的时机点，当dex被dexclassloader加载完后，需要加载dex其他类(隐式加载+显式加载)。搜索libcore库中loadClass加载一个dex中的类的流程:DexClassLoader-&gt;BaseDexClassLoader-&gt;ClassLoader的loadClass,完整体现了双亲委派的特性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">486    protected Class&lt;?&gt; loadClass(String className, boolean resolve) throws ClassNotFoundException &#123;   &#x2F;&#x2F; 为了提高加载类效率，使用父节点加载如果已经加载直接返回，否则进行双亲委派的父节点加载</span><br><span class="line">487        Class&lt;?&gt; clazz &#x3D; findLoadedClass(className);</span><br><span class="line">488</span><br><span class="line">489        if (clazz &#x3D;&#x3D; null) &#123;</span><br><span class="line">490            try &#123;</span><br><span class="line">491                clazz &#x3D; parent.loadClass(className, false);</span><br><span class="line">492            &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">493                &#x2F;&#x2F; Don&#39;t want to see this.</span><br><span class="line">494            &#125;</span><br><span class="line">495</span><br><span class="line">496            if (clazz &#x3D;&#x3D; null) &#123;</span><br><span class="line">497                clazz &#x3D; findClass(className);</span><br><span class="line">498            &#125;</span><br><span class="line">499        &#125;</span><br><span class="line">500</span><br><span class="line">501        return clazz;</span><br><span class="line">502    &#125;</span><br></pre></td></tr></table></figure><p>对于使用DexClassLoader第一次加载类的parent节点是pathClassLoader或被指定的bootClassLoader,因为类只由当前的classloader加载必然是找不到的，因此进入BaseDexClassLoader的<strong>findClass</strong>实现中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">52    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line">53        List&lt;Throwable&gt; suppressedExceptions &#x3D; new ArrayList&lt;Throwable&gt;();</span><br><span class="line">54        Class c &#x3D; pathList.findClass(name, suppressedExceptions);</span><br><span class="line">55        if (c &#x3D;&#x3D; null) &#123;</span><br><span class="line">56            ClassNotFoundException cnfe &#x3D; new ClassNotFoundException(&quot;Didn&#39;t find class \&quot;&quot; + name + &quot;\&quot; on path: &quot; + pathList);</span><br><span class="line">57            for (Throwable t : suppressedExceptions) &#123;</span><br><span class="line">58                cnfe.addSuppressed(t);</span><br><span class="line">59            &#125;</span><br><span class="line">60            throw cnfe;</span><br><span class="line">61        &#125;</span><br><span class="line">62        return c;</span><br><span class="line">63    &#125;</span><br></pre></td></tr></table></figure><p>紧接着进入pathList.findClass，其中pathList是在<a href="http://androidxref.com/4.4.4_r1/xref/libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java#45" target="_blank" rel="noopener">BaseDexClassLoader</a>构造函数中实例化化，跟着进入<a href="http://androidxref.com/4.4.4_r1/xref/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java#317" target="_blank" rel="noopener">pathList.findClass</a>，调用了dex.loadClassBinaryName查找类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">317    public Class findClass(String name, List&lt;Throwable&gt; suppressed) &#123;</span><br><span class="line">318        for (Element element : dexElements) &#123;</span><br><span class="line">319            DexFile dex &#x3D; element.dexFile;</span><br><span class="line">320</span><br><span class="line">321            if (dex !&#x3D; null) &#123;</span><br><span class="line">                   &#x2F;&#x2F; 尝试从每个dex中遍历找到类所在的dex中并返回类所在dex</span><br><span class="line">322                Class clazz &#x3D; dex.loadClassBinaryName(name, definingContext, suppressed); </span><br><span class="line">323                if (clazz !&#x3D; null) &#123;</span><br><span class="line">324                    return clazz;</span><br><span class="line">325                &#125;</span><br><span class="line">326            &#125;</span><br><span class="line">327        &#125;</span><br><span class="line">328        if (dexElementsSuppressedExceptions !&#x3D; null) &#123;</span><br><span class="line">329            suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</span><br><span class="line">330        &#125;</span><br><span class="line">331        return null;</span><br><span class="line">332    &#125;</span><br></pre></td></tr></table></figure><p>跟着进入<a href="http://androidxref.com/4.4.4_r1/xref/libcore/dalvik/src/main/java/dalvik/system/DexFile.java#214" target="_blank" rel="noopener">loadClassBinaryName</a>,其中调用了native层实现defineClassNative</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">214    public Class loadClassBinaryName(String name, ClassLoader loader, List&lt;Throwable&gt; suppressed) &#123;</span><br><span class="line">215        return defineClass(name, loader, mCookie, suppressed);</span><br><span class="line">216    &#125;</span><br><span class="line">217</span><br><span class="line">218    private static Class defineClass(String name, ClassLoader loader, int cookie,</span><br><span class="line">219                                     List&lt;Throwable&gt; suppressed) &#123;</span><br><span class="line">220        Class result &#x3D; null;</span><br><span class="line">221        try &#123;</span><br><span class="line">222            result &#x3D; defineClassNative(name, loader, cookie);</span><br><span class="line">223        &#125; catch (NoClassDefFoundError e) &#123;</span><br><span class="line">224            if (suppressed !&#x3D; null) &#123;</span><br><span class="line">225                suppressed.add(e);</span><br><span class="line">226            &#125;</span><br><span class="line">227        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">228            if (suppressed !&#x3D; null) &#123;</span><br><span class="line">229                suppressed.add(e);</span><br><span class="line">230            &#125;</span><br><span class="line">231        &#125;</span><br><span class="line">232        return result;</span><br><span class="line">233    &#125;</span><br></pre></td></tr></table></figure><p>dalvik下Full Search搜索defineClassNative，进入/<a href="http://androidxref.com/4.4.4_r1/xref/dalvik/" target="_blank" rel="noopener">dalvik</a>/<a href="http://androidxref.com/4.4.4_r1/xref/dalvik/vm/" target="_blank" rel="noopener">vm</a>/<a href="http://androidxref.com/4.4.4_r1/xref/dalvik/vm/native/" target="_blank" rel="noopener">native</a>/<a href="http://androidxref.com/4.4.4_r1/xref/dalvik/vm/native/dalvik_system_DexFile.cpp" target="_blank" rel="noopener">dalvik_system_DexFile.cpp</a>的<a href="http://androidxref.com/4.4.4_r1/xref/dalvik/vm/native/dalvik_system_DexFile.cpp#349" target="_blank" rel="noopener">Dalvik_dalvik_system_DexFile_defineClassNative</a>方法，如注释中所说从一个dex文件中加载一个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">349static void Dalvik_dalvik_system_DexFile_defineClassNative(const u4* args,</span><br><span class="line">350    JValue* pResult)</span><br><span class="line">351&#123;</span><br><span class="line">352    StringObject* nameObj &#x3D; (StringObject*) args[0]; &#x2F;&#x2F; 类名</span><br><span class="line">353    Object* loader &#x3D; (Object*) args[1];  &#x2F;&#x2F; classloader</span><br><span class="line">354    int cookie &#x3D; args[2];  &#x2F;&#x2F; java层cookie</span><br><span class="line">355    ClassObject* clazz &#x3D; NULL;</span><br><span class="line">356    DexOrJar* pDexOrJar &#x3D; (DexOrJar*) cookie;  &#x2F;&#x2F; 将int型cookie转为DexOrJar指针</span><br><span class="line">357    DvmDex* pDvmDex;</span><br><span class="line">358    char* name;</span><br><span class="line">359    char* descriptor;</span><br><span class="line">360</span><br><span class="line">361    name &#x3D; dvmCreateCstrFromString(nameObj);</span><br><span class="line">362    descriptor &#x3D; dvmDotToDescriptor(name);</span><br><span class="line">363    ALOGV(&quot;--- Explicit class load &#39;%s&#39; l&#x3D;%p c&#x3D;0x%08x&quot;,</span><br><span class="line">364        descriptor, loader, cookie);</span><br><span class="line">365    free(name);</span><br><span class="line">366</span><br><span class="line">367    if (!validateCookie(cookie))</span><br><span class="line">368        RETURN_VOID();</span><br><span class="line">369</span><br><span class="line">370    if (pDexOrJar-&gt;isDex)</span><br><span class="line">371        pDvmDex &#x3D; dvmGetRawDexFileDex(pDexOrJar-&gt;pRawDexFile);</span><br><span class="line">372    else</span><br><span class="line">373        pDvmDex &#x3D; dvmGetJarFileDex(pDexOrJar-&gt;pJarFile);</span><br><span class="line">374</span><br><span class="line">375    &#x2F;* once we load something, we can&#39;t unmap the storage *&#x2F;</span><br><span class="line">376    pDexOrJar-&gt;okayToFree &#x3D; false;</span><br><span class="line">377</span><br><span class="line">378    clazz &#x3D; dvmDefineClass(pDvmDex, descriptor, loader);</span><br></pre></td></tr></table></figure><p>进入<a href="http://androidxref.com/4.4.4_r1/xref/dalvik/vm/RawDexFile.h#62" target="_blank" rel="noopener">dvmGetRawDexFileDex</a>，只是取出指针中的pDvmDex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">62INLINE DvmDex* dvmGetRawDexFileDex(RawDexFile* pRawDexFile) &#123;</span><br><span class="line">63    return pRawDexFile-&gt;pDvmDex;</span><br><span class="line">64&#125;</span><br></pre></td></tr></table></figure><p>进入<a href="http://androidxref.com/4.4.4_r1/xref/dalvik/vm/oo/Class.cpp#1413" target="_blank" rel="noopener">dvmDefineClass</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1413ClassObject* dvmDefineClass(DvmDex* pDvmDex, const char* descriptor,</span><br><span class="line">1414    Object* classLoader)</span><br><span class="line">1415&#123;</span><br><span class="line">1416    assert(pDvmDex !&#x3D; NULL);</span><br><span class="line">1417</span><br><span class="line">1418    return findClassNoInit(descriptor, classLoader, pDvmDex);</span><br><span class="line">1419&#125;</span><br></pre></td></tr></table></figure><p>进入<a href="http://androidxref.com/4.4.4_r1/xref/dalvik/vm/oo/Class.cpp#findClassNoInit" target="_blank" rel="noopener">findClassNoInit</a>，首先调用了<code>clazz = dvmLookupClass(descriptor, loader, true);</code>对当前加载的类名进行计算查询，如没有则返回为空，对于第一次加载必然是没有的，接着进入<code>pClassDef = dexFindClass(pDvmDex-&gt;pDexFile, descriptor);</code>，即<a href="https://blog.csdn.net/m0_46204016/article/details/104579974?spm=1001.2014.3001.5501" target="_blank" rel="noopener">Android中实现「类方法指令抽取方式」加固方案原理解析</a>中选择的时机点，并通过hook掉类被加载时的时机，对抽取函数的恢复，实现函数还原，因此必然需要早于函数执行的时机，保证app正常运行。由于有些函数符号没有导出，就不是很容易进行hook，而在libdvm.so中的dexFindClass在IDA中是被导出的，方便hook。以上就是Dalvik下函数抽取壳的简单原理。</p><h1 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h1><p>Art下实现难点：dex2oat编译流程，dex2oat是可以进行脱壳，dex2oat完成了对抽取的dex进行编译生成了oat文件，后续的函数运行中，从oat中取出函数编译生成的二进制代码来执行，因此函数对dex填充后，如果时机不对，时机在dex2oat后，自然从dex2oat后那么我们动态修改的dex中的smali指令流就不会生效，因为后面app运行调用的真正的代码就会从dex2oat编译生成的oat文件，和以前的dex无关了。因此如果希望填充回去smali指令生效要么禁用dex2oat实现阻止编译，这样对加载到内存中的dex文件进行填充始终会保持生效，要么保持dex2oat编译，但是还原代码时机要早于dex2oat就ok了，保证dex2oat再次对dex编译的时候，dex已经是一个完整dex，不会影响我们填充的代码，但是肯定dex文件存在完整的时候，可以利用dex2oat编译的流程进行脱壳，一般加壳厂商都是牺牲掉app一部分的运行效率，干掉dex2oat的过程，因为google本身提倡dex2oat就是为了提升app运行效率。</p><h2 id="禁用dex2oat编译"><a href="#禁用dex2oat编译" class="headerlink" title="禁用dex2oat编译"></a>禁用dex2oat编译</h2><p>回到ART下DexClassLoader动态加载dex的流程，在art下搜索<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/oat_file_assistant.cc#616" target="_blank" rel="noopener">GenerateOatFileNoChecks</a>，该函数完成调用dex2oat进行编译</p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/%E6%90%9C%E7%B4%A2GenerateOatFileNoChecks.png" alt="搜索GenerateOatFileNoChecks"></p><p>GenerateOatFileNoChecks中调用<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/oat_file_assistant.cc#Dex2Oat" target="_blank" rel="noopener">Dex2Oat</a>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">616OatFileAssistant::ResultOfAttemptToUpdate OatFileAssistant::GenerateOatFileNoChecks(</span><br><span class="line">617      OatFileAssistant::OatFileInfo&amp; info, CompilerFilter::Filter filter, std::string* error_msg) &#123;</span><br></pre></td></tr></table></figure><p><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/oat_file_assistant.cc#Dex2Oat" target="_blank" rel="noopener">Dex2Oat</a>最终调用<code>return Exec(argv, error_msg);</code>，<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/exec_utils.cc#91" target="_blank" rel="noopener">Exec</a>中调用了<code>int status = ExecAndReturnCode(arg_vector, error_msg);</code>,其中<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/exec_utils.cc#34" target="_blank" rel="noopener">ExecAndReturnCode</a>通过<code>pid_t pid = fork();</code>进行fork一个子进程，在子进程中调用了<code>execve(program, &amp;args[0], envp);</code>完成对dex2oat这个二进制程序的调用。整个流程中任意一个环节被打断，dex2oat将会被干掉，无法继续运行。</p><p><a href="https://github.com/asLody/TurboDex" target="_blank" rel="noopener">TurboDex</a>就是干掉dex2oat为了让dex在第一次动态加载时快速加载完成，因为不干掉dex2oat，art虚拟机就会调用dex2oat对当前的dex进行编译，编译过程非常耗时，可以很大地提升dexclassloader加载dex 的效率，该项目就是通过hook了execv方法实现。</p><blockquote><p>众所周知,Android中在Runtime加载一个 <strong>未优化的Dex文件</strong> (尤其在 <strong>ART 模式</strong>)需要花费 <strong>很长的时间</strong>. 当你在App中使用 <strong>插件化框架</strong> 的时候, 首次加载插件就需要耗费很长的时间.</p><p>TurboDex 就是为了解决这一问题而生, 就像是给AndroidVM开启了上帝模式, 在引入TurboDex后, 无论你加载了多大的Dex文件,都可以在毫秒级别内完成.</p></blockquote><p>接下来通过hook execve实现干掉dex2oat，可以通过爱奇艺xhook的GOT进行表hook干掉dex2oat，也可以用inline库hook。</p><p>SecondShell_80项目中：hooklibc中的execve的函数，干掉dexclassloader加载dex过程中dex2oat的流程。  </p><p><a href="http://androidxref.com/4.4.4_r1/xref/bionic/libc/include/unistd.h#67" target="_blank" rel="noopener">myexecve</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 系统函数(在libc库中定义)被调用进入替换原始逻辑</span><br><span class="line">void* *myexecve(const char *__file, char *const *__argv, char *const *__envp) &#123;</span><br><span class="line">    LOGD(&quot;process:%d,enter execve:%s&quot;, getpid(), __file);</span><br><span class="line">    if (strstr(__file, &quot;dex2oat&quot;)) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return oriexecve(__file, __argv, __envp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 实现干掉dex2oat的逻辑，加载原始的dex文件</span><br><span class="line">void hooklibc() &#123;</span><br><span class="line">    LOGD(&quot;go into hooklibc&quot;);</span><br><span class="line">    &#x2F;&#x2F;7.0 命名空间限制 libc有直接权限调用</span><br><span class="line">    void *libc_addr &#x3D; dlopen_compat(&quot;libc.so&quot;, RTLD_NOW);</span><br><span class="line">    void *execve_addr &#x3D; dlsym_compat(libc_addr, &quot;execve&quot;);</span><br><span class="line">    if (execve_addr !&#x3D; NULL) &#123;</span><br><span class="line">        &#x2F;&#x2F; 需要hook函数地址，替换的地址，保存原函数地址在自己函数逻辑中进行调用</span><br><span class="line">        if (ELE7EN_OK &#x3D;&#x3D; registerInlineHook((uint32_t) execve_addr, (uint32_t) myexecve,</span><br><span class="line">                                            (uint32_t **) &amp;oriexecve)) &#123;</span><br><span class="line">            if (ELE7EN_OK &#x3D;&#x3D; inlineHook((uint32_t) execve_addr)) &#123;</span><br><span class="line">                LOGD(&quot;inlineHook execve success&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                LOGD(&quot;inlineHook execve failure&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动SecondShell_80项目，并授予sdcard权限，查看logcat，检索dex2oat</p><p><a href="https://bbs.pediy.com/thread-254028.htm" target="_blank" rel="noopener">FART正餐前甜点：ART下几个通用简单高效的dump内存中dex方法</a>中<strong>找一个好时机点实现art下二代函数抽取壳对抽空函数的还原</strong>，LoadClassMembers完成对要加载的class的准备工作，准备<code>SetSFields</code>,<code>SetDirectMethodsPtr</code>,要对当前已经加载的dex内容进行修改某一个被抽空的函数，首先定位到当前函数的CodeItem的地址进行修复，这过程中出现的时机点可以hook掉。<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/class_linker.cc#3305" target="_blank" rel="noopener">LoadMethod</a>设置了CodeItem的偏移，<code>ArtMethod* method = klass-&gt;GetDirectMethodUnchecked(i, image_pointer_size_);</code>初始化了method对象，此时内容还没有被填充，<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/art_method.h#328" target="_blank" rel="noopener">ArtMethod</a>中关键变量dex_code_item_offset，在我们class被加载完后，准备好当前class每个函数对应的ArtMethod对象，禁用掉dex2oat以后，自然类中所有的函数都在解释模式下运行，必然找到当前ArtMethod的CodeItem在内存中的偏移，进行取出一条条smali指令流解释执行。<code>LoadMethod(self, dex_file, it, klass, method);</code>传入的dex_file为当前的dex对象，method为当前要准备的ArtMethod对象，每个ArtMethod对象都和java层的函数一一对应，这些函数都可以被hook掉，因为都在函数被调用前执行，都能实现对其的填充。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">3305void ClassLinker::LoadMethod(const DexFile&amp; dex_file,</span><br><span class="line">3306                             const ClassDataItemIterator&amp; it,</span><br><span class="line">3307                             Handle&lt;mirror::Class&gt; klass,</span><br><span class="line">3308                             ArtMethod* dst) &#123;</span><br><span class="line">3309  uint32_t dex_method_idx &#x3D; it.GetMemberIndex();</span><br><span class="line">3310  const DexFile::MethodId&amp; method_id &#x3D; dex_file.GetMethodId(dex_method_idx);</span><br><span class="line">3311  const char* method_name &#x3D; dex_file.StringDataByIdx(method_id.name_idx_);</span><br><span class="line">3312</span><br><span class="line">3313  ScopedAssertNoThreadSuspension ants(&quot;LoadMethod&quot;);</span><br><span class="line">3314  dst-&gt;SetDexMethodIndex(dex_method_idx); &#x2F;&#x2F; 设置MethodIndex</span><br><span class="line">3315  dst-&gt;SetDeclaringClass(klass.Get()); &#x2F;&#x2F; 设置类</span><br><span class="line">3316  dst-&gt;SetCodeItemOffset(it.GetMethodCodeItemOffset());  &#x2F;&#x2F; 指向smali指令在内存中的偏移</span><br></pre></td></tr></table></figure><p>如果hook了LoadMethod函数，被调用完后ArtMethod对象的CodeItemOffset就完成了设置，且第五个参数就是ArtMethod对象的指针，可以很容易取出ArtMethod参数的CodeItemOffset，定位到了当前要填充的函数的smali指令流在内存中的偏移位置，避免了大量代码解析dex在内存中的映射。</p><h2 id="实现函数抽取壳"><a href="#实现函数抽取壳" class="headerlink" title="实现函数抽取壳"></a>实现函数抽取壳</h2><p>案例用loadDex.apk和4.dex。</p><p>定位函数要抽取的位置<code>com.kanxue.test02.TestClass.testFunc</code>的函数置空。使用010Editor打开4.dex，方法太多了导出csv</p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/image-20210601213439021.png" alt="image-20210601213439021"></p><p> 导出的csv用010打开，检索TestClass，出现索引号1028</p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/image-20210601213656008.png" alt="image-20210601213656008"></p><p>回过头来再看4.dex中的TestClass的位置</p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/image-20210601213827131.png" alt="image-20210601213827131"></p><p>code_item占了32个字节</p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/image-20210601213950873.png" alt="image-20210601213950873"></p><p>GDA查看4.dex该方法,右键-Show Hex</p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/image-20210601214744838.png" alt="image-20210601214744838"></p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/image-20210601220617803.png" alt="image-20210601220617803"></p><p>对应010中选中部分全部改成0，即完成函数抽取。</p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/image-20210601214904829.png" alt="image-20210601214904829"></p><p>dex header本身对dex校验，改完后还需要修改校验头部分</p><p>python checksum.py  返回CheckSum = 0x2785815e,则修改校验头部分，使其成为一个合法的dex文件</p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/image-20210601215218271.png" alt="image-20210601215218271"></p><p>gda再次打开该dex，完成函数抽取。</p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/image-20210601215350064.png" alt="image-20210601215350064"></p><p>接下来完成对testFunc的填充，并正常调用testFunc中的代码。</p><ol><li>通过hooklibc的execve禁用掉dex2oat</li><li>选中了LoadMethod函数的hook，原型是oriloadmethod，并添加了自己的逻辑。需要当testFunc被初始化时需要将原有的smali指令流利用myloadmethod填充回去，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">void hookART() &#123;</span><br><span class="line">    LOGD(&quot;go into hookART&quot;);</span><br><span class="line">    void *libart_addr &#x3D; dlopen_compat(&quot;&#x2F;system&#x2F;lib&#x2F;libart.so&quot;, RTLD_NOW);</span><br><span class="line">    if (libart_addr !&#x3D; NULL) &#123;</span><br><span class="line">        void *loadmethod_addr &#x3D; dlsym_compat(libart_addr,</span><br><span class="line">                                             &quot;_ZN3art11ClassLinker10LoadMethodERKNS_7DexFileERKNS_21ClassDataItemIteratorENS_6HandleINS_6mirror5ClassEEEPNS_9ArtMethodE&quot;);</span><br><span class="line">        if (loadmethod_addr !&#x3D; NULL) &#123;</span><br><span class="line">            if (ELE7EN_OK &#x3D;&#x3D; registerInlineHook((uint32_t) loadmethod_addr, (uint32_t) myloadmethod,</span><br><span class="line">                                                (uint32_t **) &amp;oriloadmethod)) &#123;</span><br><span class="line">                if (ELE7EN_OK &#x3D;&#x3D; inlineHook((uint32_t) loadmethod_addr)) &#123;</span><br><span class="line">                    LOGD(&quot;inlineHook loadmethod success&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    LOGD(&quot;inlineHook loadmethod failure&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void *myloadmethod(void *a, void *b, void *c, void *d, void *e) &#123;</span><br><span class="line">    LOGD(&quot;process:%d,before run loadmethod:&quot;, getpid());</span><br><span class="line">    struct ArtMethod *artmethod &#x3D; (struct ArtMethod *) e;</span><br><span class="line">    struct DexFile *dexfile &#x3D; (struct DexFile *) b;</span><br><span class="line">    LOGD(&quot;process:%d,enter loadmethod:dexfilebegin:%p,size:%d&quot;, getpid(), dexfile-&gt;begin,</span><br><span class="line">         dexfile-&gt;size);&#x2F;&#x2F;0,57344</span><br><span class="line">    char dexfilepath[100] &#x3D; &#123;0&#125;;</span><br><span class="line">    sprintf(dexfilepath, &quot;&#x2F;sdcard&#x2F;%d_%d.dex&quot;, dexfile-&gt;size, getpid());</span><br><span class="line">    int fd &#x3D; open(dexfilepath, O_CREAT | O_RDWR, 0666);</span><br><span class="line">    if (fd &gt; 0) &#123;</span><br><span class="line">    &#x2F;&#x2F; 得到dex file的起始地址和大小，可以将此刻dex dump下来，用来对比</span><br><span class="line">        write(fd, dexfile-&gt;begin, dexfile-&gt;size);</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F; oriloadmethod未被调用时，artmethod未被初始化，值为空。当调用了原始的oriloadmethod关键变量被初始化好，如dex_method_index_和dex_code_item_offset_，取出artmethod</span><br><span class="line">    void *result &#x3D; oriloadmethod(a, b, c, d, e);</span><br><span class="line">    LOGD(&quot;process:%d,enter loadmethod:code_offset:%d,idx:%d&quot;, getpid(),</span><br><span class="line">         artmethod-&gt;dex_code_item_offset_, artmethod-&gt;dex_method_index_);</span><br><span class="line"></span><br><span class="line">    byte *code_item_addr &#x3D; static_cast&lt;byte *&gt;(dexfile-&gt;begin) + artmethod-&gt;dex_code_item_offset_;</span><br><span class="line">    LOGD(&quot;process:%d,enter loadmethod:dexfilebegin:%p,size:%d,beforedumpcodeitem:%p&quot;, getpid(),</span><br><span class="line">         dexfile-&gt;begin, dexfile-&gt;size, code_item_addr);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当地址为15203时，即testFunc函数(010中)，进行原有指令数组进行填充</span><br><span class="line">    if (artmethod-&gt;dex_method_index_ &#x3D;&#x3D; 15203) &#123;&#x2F;&#x2F;TestClass.testFunc-&gt;methodidx</span><br><span class="line">        LOGD(&quot;process:%d,enter loadmethod:dexfilebegin:%p,size:%d,start repire method&quot;, getpid(),</span><br><span class="line">             dexfile-&gt;begin, dexfile-&gt;size);</span><br><span class="line">        byte *code_item_addr &#x3D; (byte *) dexfile-&gt;begin + artmethod-&gt;dex_code_item_offset_;</span><br><span class="line">        LOGD(&quot;process:%d,enter loadmethod:dexfilebegin:%p,size:%d,beforedumpcodeitem:%p&quot;, getpid(),</span><br><span class="line">             dexfile-&gt;begin, dexfile-&gt;size, code_item_addr);</span><br><span class="line"></span><br><span class="line">        int result &#x3D; mprotect(dexfile-&gt;begin, dexfile-&gt;size, PROT_WRITE);</span><br><span class="line">        byte *code_item_start &#x3D; static_cast&lt;byte *&gt;(code_item_addr) + 16; &#x2F;&#x2F; 16字节后才是函数填充全0的指令流</span><br><span class="line">        LOGD(&quot;process:%d,enter loadmethod:dexfilebegin:%p,size:%d,code_item_start:%p&quot;, getpid(),</span><br><span class="line">             dexfile-&gt;begin, dexfile-&gt;size, code_item_start);</span><br><span class="line">        byte inst[16] &#x3D; &#123;0x1a, 0x00, 0xed, 0x34, 0x1a, 0x01, 0x43, 0x32, 0x71, 0x20, 0x91, 0x05,</span><br><span class="line">                         0x10, 0x00, 0x0e, 0x00&#125;;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; sizeof(inst); i++) &#123;</span><br><span class="line">        &#x2F;&#x2F; 逐个赋值</span><br><span class="line">            code_item_start[i] &#x3D; inst[i];</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;2343-&gt;i am from com.kanxue.test02.TestClass.testFunc</span><br><span class="line">        code_item_start[2] &#x3D; 0x43;&#x2F;&#x2F;34ed-&gt;kanxue</span><br><span class="line">        code_item_start[3] &#x3D; 0x23;</span><br><span class="line">        memset(dexfilepath, 0, 100);</span><br><span class="line">        sprintf(dexfilepath, &quot;&#x2F;sdcard&#x2F;%d_%d.dex_15203_2&quot;, dexfile-&gt;size, getpid());</span><br><span class="line">        fd &#x3D; open(dexfilepath, O_CREAT | O_RDWR, 0666);</span><br><span class="line">        if (fd &gt; 0) &#123;</span><br><span class="line">            write(fd, dexfile-&gt;begin, dexfile-&gt;size);</span><br><span class="line">            close(fd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGD(&quot;process:%d,after loadmethod:code_offset:%d,idx:%d&quot;, getpid(),</span><br><span class="line">         artmethod-&gt;dex_code_item_offset_, artmethod-&gt;dex_method_index_);&#x2F;&#x2F;0,57344</span><br><span class="line">    return result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将修复后的4_chouqu.dex推送到/sdcard中</p><p><img src="/2021/03/25/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%BA%8C%E4%BB%A3%E5%A3%B3%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96/image-20210601204950420.png" alt="image-20210601204950420"></p><p>通过初始化后的code_item的偏移直接定位dex在内存中地址，并进行修正，实现art下函数抽取的解决方案，并没有通过大量代码art中的头文件去解析dex结构信息。</p><hr><ul><li>ART下抽取壳实现</li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
          <category> 加壳与脱壳 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> classloader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加壳与脱壳之一代壳dex保护</title>
      <link href="/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/"/>
      <url>/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="Dalvik4-4-4"><a href="#Dalvik4-4-4" class="headerlink" title="Dalvik4.4.4"></a>Dalvik4.4.4</h1><h2 id="dex加载源码分析"><a href="#dex加载源码分析" class="headerlink" title="dex加载源码分析"></a>dex加载源码分析</h2><p>虽然加壳技术有所不同，第一步依然是dump内存中dex，虽然安卓4.4后Dalvik淡出视野，但是影响深远。Dalvik系统DexClassLoader加载dex具体流程：</p><p>在<strong>libcore</strong>目录下<a href="http://androidxref.com/4.4_r1/search?q=&defs=DexClassLoader&refs=&path=&hist=&project=libcore" target="_blank" rel="noopener">搜索DexClassLoader源码</a>只有一个构造函数</p><blockquote><p>dexPath：需要加载的dex路径<br>optimizedDirectory：dex优化过程中产生的odex的存放路径<br>libraryPath：当前classloader需要加载so的路径<br>parent：双亲委派中的当前dexclassloader的父节点设置的classloader</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public DexClassLoader(String dexPath, String optimizedDirectory,</span><br><span class="line">        String libraryPath, ClassLoader parent) &#123;</span><br><span class="line">    super(dexPath, new File(optimizedDirectory), libraryPath, parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于只调用了父类的构造函数，我们进入父类<a href="http://androidxref.com/4.4_r1/xref/libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java" target="_blank" rel="noopener">BaseDexClassLoader</a>封装大量的函数，真正逻辑存在BaseDexClassLoader的构造函数中实现，调用了父类的构造函数，该类存在与<a href="http://androidxref.com/4.4_r1/xref/libcore/libart/src/main/java/java/lang/" target="_blank" rel="noopener">/libcore/libart</a>和<a href="http://androidxref.com/4.4_r1/xref/libcore/libdvm/src/main/java/java/lang/" target="_blank" rel="noopener">/libcore/libdvm</a>，说明在安卓4.4中已经开始引入art相关逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public BaseDexClassLoader(String dexPath, File optimizedDirectory,</span><br><span class="line">        String libraryPath, ClassLoader parent) &#123;</span><br><span class="line">    super(parent);</span><br><span class="line">    this.pathList &#x3D; new DexPathList(this, dexPath, libraryPath, optimizedDirectory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入Dalvik的<a href="http://androidxref.com/4.4_r1/xref/libcore/libdvm/src/main/java/java/lang/ClassLoader.java" target="_blank" rel="noopener">ClassLoader</a>的构造函数，将当前的ClassLoader的父节点作为传入的parent。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader(ClassLoader parentLoader, boolean nullAllowed) &#123;</span><br><span class="line">    if (parentLoader &#x3D;&#x3D; null &amp;&amp; !nullAllowed) &#123;</span><br><span class="line">        throw new NullPointerException(&quot;parentLoader &#x3D;&#x3D; null &amp;&amp; !nullAllowed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    parent &#x3D; parentLoader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再进入<code>new DexPathList</code>再初始化pathList实例，进入DexPathList构造函数，前面对参数校验，真正起作用<code>this.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory,suppressedExceptions);</code>,<strong>makeDexElements</strong>方法调用了<strong>loadDexFile</strong>返回的dex添加到element数组并返回数组。</p><p><strong>loadDexFile</strong>中再度调用了<code>DexFile.loadDex(file.getPath(), optimizedPath, 0)</code>，该方法新建了一个DexFile对象，<code>return new DexFile(sourcePathName, outputPathName, flags);</code>，在Dexfile中调用了<code>openDexFile(sourceName, outputName, flags)</code>完成了对dex的处理，openDexFile中调用了openDexFileNative，其中又调用<code>openDexFileNative</code>方法,跟进openDexFileNative发现是一个使用c/c++实现的native函数，<code>native private static int openDexFileNative</code>。该方法处理类<a href="http://androidxref.com/4.4_r1/xref/libcore/dalvik/src/main/java/dalvik/system/DexFile.java" target="_blank" rel="noopener">/libcore/dalvik/src/main/java/dalvik/system/DexFile.java</a>中，对应的实现文件就是<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/native/dalvik_system_DexFile.cpp" target="_blank" rel="noopener">dalvik_system_DexFile</a>查看方法Dalvik_dalvik_system_DexFile_openDexFileNative，其中调用了<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/RawDexFile.cpp#109" target="_blank" rel="noopener">dvmRawDexFileOpen</a>实现对dex文件的打开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (hasDexExtension(sourceName)  &#x2F;&#x2F; 对当前文件后缀的校验</span><br><span class="line">        &amp;&amp; dvmRawDexFileOpen(sourceName, outputName, &amp;pRawDexFile, false) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">    ALOGV(&quot;Opening DEX file &#39;%s&#39; (DEX)&quot;, sourceName);</span><br><span class="line"></span><br><span class="line">    pDexOrJar &#x3D; (DexOrJar*) malloc(sizeof(DexOrJar));</span><br><span class="line">    pDexOrJar-&gt;isDex &#x3D; true;</span><br><span class="line">    pDexOrJar-&gt;pRawDexFile &#x3D; pRawDexFile;</span><br><span class="line">    pDexOrJar-&gt;pDexMemory &#x3D; NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/RawDexFile.cpp#109" target="_blank" rel="noopener">dvmRawDexFileOpen</a>中<code>dexFd = open(fileName, O_RDONLY);</code>打开dex文件，<code>verifyMagicAndGetAdler32(dexFd, &amp;adler32) &lt; 0</code>对dex魔术字校验，<code>cachedName = dexOptGenerateCacheFileName(fileName, NULL);</code>生成优化后的odex文件路径，<code>dvmOptimizeDexFile(optFd, dexOffset, fileSize,fileName, modTime, adler32, isBootstrap);</code>优化当前的dex，跟进发现存在于<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/analysis/DexPrepare.cpp" target="_blank" rel="noopener">DexPrepare.cpp</a>中的<code>dvmOptimizeDexFile(int fd, off_t dexOffset, long dexLength,const char* fileName, u4 modWhen, u4 crc, bool isBootstrap)</code>,该方法中<code>pid = fork();</code>fd为打开的dex文件的id，dexLength为dex文件的大小，<code>pid=fork()</code>新建了子进程用于调用<a href="/bin/dexopt">/bin/dexopt</a>对当前dex文件进行优化，结果生成odex文件。bin/dexopt的main方法中传入的文件校验是dex时，调用<code>static int fromDex(int argc, char* const argv[])</code>首先调用dvmPrepForDexOpt对当前优化环境准备，再调用dvmContinueOptimization对当前的fd文件进行优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dexLength &lt; (int) sizeof(DexHeader)  字节长度判断</span><br><span class="line">mapAddr &#x3D; mmap(NULL, dexOffset + dexLength, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);  mmap对当前dex文件的内容进行内存映射</span><br><span class="line">rewriteDex(((u1*) mapAddr) + dexOffset, dexLength, doVerify, doOpt, &amp;pClassLookup, NULL);  重写dex(起始地址，长度，...)</span><br></pre></td></tr></table></figure><p>查看<code>static bool rewriteDex(u1* addr, int len, bool doVerify, bool doOpt,DexClassLookup** ppClassLookup, DvmDex** ppDvmDex)</code>方法参数有加载到内存中dex的起始地址，字节数。该方法中暴露出在Dalvik中脱壳点的相关函数，<a href="http://androidxref.com/4.4_r1/s?defs=dvmDexFileOpenPartial&project=dalvik" target="_blank" rel="noopener">dvmDexFileOpenPartial</a>函数中出现<a href="http://androidxref.com/4.4_r1/xref/dalvik/libdex/DexFile.cpp#289" target="_blank" rel="noopener">dexFileParse</a>，参数包含起始地址和字节数。</p><p>以上即是dexclassloader在动态加载dex时Dalvik实现的逻辑处理，很多时机点都出现了加载的dex的起始地址，就是最好的脱壳时机。很多脱壳方法都是对**<a href="http://androidxref.com/4.4_r1/s?defs=dvmDexFileOpenPartial&project=dalvik" target="_blank" rel="noopener">dvmDexFileOpenPartial</a><strong>和</strong><a href="http://androidxref.com/4.4_r1/xref/dalvik/libdex/DexFile.cpp#289" target="_blank" rel="noopener">dexFileParse</a><strong>进行下断点或者进行hook，取出第一个参数(起始地址)和第二个参数(dex长度)，在第一次<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/analysis/DexPrepare.cpp" target="_blank" rel="noopener">DexPrepare.cpp</a>中，其实在</strong>mmap<strong>对dex内存映射时包含dex文件，对当前映射区域进行dump也可以脱下从文件形式加载dex，在</strong>rewriteDex**时也出现了dex文件加载的起始地址和大小，自然也是可以进行dump等等。通过Cydia、xposed、frida都可以对实现对关键时机的hook，取出前两个参数，拿到起始地址和长度，dump下来内存区域即可实现脱壳。</p><h2 id="定制源码脱壳"><a href="#定制源码脱壳" class="headerlink" title="定制源码脱壳"></a>定制源码脱壳</h2><p>对新的一些加壳厂商的产品依然有效，除非厂商对这些函数进行hook修改，或者参考Dalvik修改实现自己的逻辑。进入Ubuntu 1604x64_4.4的编译环境虚拟机，tom/admin，4.4的源码为hammerhead及其驱动。通过编译源码的方式实现以下为部分脱壳点：</p><h3 id="dvmDexFileOpenPartial"><a href="#dvmDexFileOpenPartial" class="headerlink" title="dvmDexFileOpenPartial"></a><strong><a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/DvmDex.cpp#146" target="_blank" rel="noopener">dvmDexFileOpenPartial</a></strong></h3><p>搜索 <a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/DvmDex.cpp#146" target="_blank" rel="noopener"><strong>dvmDexFileOpenPartial</strong></a> 发现在/<a href="http://androidxref.com/4.4_r1/xref/dalvik/" target="_blank" rel="noopener">dalvik</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/" target="_blank" rel="noopener">vm</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/DvmDex.cpp" target="_blank" rel="noopener">DvmDex.cpp</a>文件中，使用Geany打开 ~/SourceCode/android-4.4.4_r1/dalvik/vm/DvmDex.cpp，找到dvmDexFileOpenPartial方法，只需要保存起始地址和大小即可。</p><p>修改int dvmDexFileOpenPartial(const void* addr, int len, DvmDex** ppDvmDex)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys&#x2F;stat.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">&#x2F;&#x2F;新建保存路径用于拼接脱壳app产生的dex路径，对每个脱壳的app的脱下的dex单独起名</span><br><span class="line">char dexfilepath[100]&#x3D;&#123;0&#125;;</span><br><span class="line">&#x2F;&#x2F;当前进程的pid</span><br><span class="line">int pid&#x3D;getpid();</span><br><span class="line">&#x2F;&#x2F;文件路径拼接(文件大小，进程pid)</span><br><span class="line">sprintf(dexfilepath,&quot;&#x2F;sdcard&#x2F;%d_%d_dvmDexFileOpenPartial.dex&quot;,len,pid);</span><br><span class="line">&#x2F;&#x2F;写入sdcard保存的dex,很多壳对抗内存dump将fopen等方法hook，可以使用系统调用当中的写入，避免使用标准的文件写入函数导致dump不下来</span><br><span class="line">int fd &#x3D; open(dexfilepath,O_CREAT|O_RDWR,0666);</span><br><span class="line">if(fd&gt;0)&#123;</span><br><span class="line">    write(fd,addr,len);</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/dvmDexFileOpenPartial%E8%84%B1%E5%A3%B3%E7%82%B9.png" alt="dvmDexFileOpenPartial脱壳点"></p><h3 id="dexFileParse"><a href="#dexFileParse" class="headerlink" title="dexFileParse"></a><strong><a href="http://androidxref.com/4.4_r1/xref/dalvik/libdex/DexFile.cpp#289" target="_blank" rel="noopener">dexFileParse</a></strong></h3><p>搜索**<a href="http://androidxref.com/4.4_r1/xref/dalvik/libdex/DexFile.cpp#289" target="_blank" rel="noopener">dexFileParse</a>**发现存在/<a href="http://androidxref.com/4.4_r1/xref/dalvik/" target="_blank" rel="noopener">dalvik</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/libdex/" target="_blank" rel="noopener">libdex</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/libdex/DexFile.cpp" target="_blank" rel="noopener">DexFile.cpp</a>中，使用geany编辑器打开DexFile.cpp</p><p>修改DexFile* dexFileParse(const u1* data, size_t length, int flags)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys&#x2F;stat.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">&#x2F;&#x2F;新建保存路径用于拼接脱壳app产生的dex路径，对每个脱壳的app的脱下的dex单独起名</span><br><span class="line">char dexfilepath[100]&#x3D;&#123;0&#125;;</span><br><span class="line">&#x2F;&#x2F;当前进程的pid</span><br><span class="line">int pid&#x3D;getpid();</span><br><span class="line">&#x2F;&#x2F;文件路径拼接(文件大小，进程pid)</span><br><span class="line">sprintf(dexfilepath,&quot;&#x2F;sdcard&#x2F;%d_%d_dvmFileParse.dex&quot;,length,pid);</span><br><span class="line">&#x2F;&#x2F;写入sdcard保存的dex,很多壳对抗内存dump将fopen等方法hook，可以使用系统调用当中的写入，避免使用标准的文件写入函数导致dump不下来</span><br><span class="line">int fd &#x3D; open(dexfilepath,O_CREAT|O_RDWR,0666);</span><br><span class="line">if(fd&gt;0)&#123;</span><br><span class="line">    write(fd,data,length);</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/dexFileParse%E8%84%B1%E5%A3%B3%E7%82%B9.png" alt="dexFileParse脱壳点"></p><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>搜索 mmap 存在于/<a href="http://androidxref.com/4.4_r1/xref/dalvik/" target="_blank" rel="noopener">dalvik</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/" target="_blank" rel="noopener">vm</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/analysis/" target="_blank" rel="noopener">analysis</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/analysis/DexPrepare.cpp" target="_blank" rel="noopener">DexPrepare.cpp</a>的中，</p><p>修改bool dvmContinueOptimization(int fd, off_t dexOffset, long dexLength, const char* fileName, u4 modWhen, u4 crc, bool isBootstrap)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">char dexfilepath[100]&#x3D;&#123;0&#125;;</span><br><span class="line">&#x2F;&#x2F;当前进程的pid</span><br><span class="line">int pid&#x3D;getpid();</span><br><span class="line">&#x2F;&#x2F;文件路径拼接(文件大小，进程pid)</span><br><span class="line">sprintf(dexfilepath,&quot;&#x2F;sdcard&#x2F;%d_%d_dvmContinueOptimization.dex&quot;,dexLength,pid);</span><br><span class="line">&#x2F;&#x2F;写入sdcard保存的dex,很多壳对抗内存dump将fopen等方法hook，可以使用系统调用当中的写入，避免使用标准的文件写入函数导致dump不下来</span><br><span class="line">int fd &#x3D; open(dexfilepath,O_CREAT|O_RDWR,0666);</span><br><span class="line">if(fd&gt;0)&#123;</span><br><span class="line">write(fd,mapAddr,dexOffset + dexLength);</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/mmap.png" alt="mmap "></p><p>第一次映射到内存中需要将dex通过010Editor修正，删除64 65 78 0A前的字符。</p><h3 id="rewriteDex"><a href="#rewriteDex" class="headerlink" title="rewriteDex"></a><a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/analysis/DexPrepare.cpp#rewriteDex" target="_blank" rel="noopener">rewriteDex</a></h3><p>搜索<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/analysis/DexPrepare.cpp#rewriteDex" target="_blank" rel="noopener">rewriteDex</a>位于/<a href="http://androidxref.com/4.4_r1/xref/dalvik/" target="_blank" rel="noopener">dalvik</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/" target="_blank" rel="noopener">vm</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/analysis/" target="_blank" rel="noopener">analysis</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/vm/analysis/DexPrepare.cpp" target="_blank" rel="noopener">DexPrepare.cpp</a>，</p><p>修改static bool rewriteDex(u1* addr, int len, bool doVerify, bool doOpt, DexClassLookup** ppClassLookup, DvmDex** ppDvmDex)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">char dexfilepath[100]&#x3D;&#123;0&#125;;</span><br><span class="line">&#x2F;&#x2F;当前进程的pid</span><br><span class="line">int pid&#x3D;getpid();</span><br><span class="line">&#x2F;&#x2F;文件路径拼接(文件大小，进程pid)</span><br><span class="line">sprintf(dexfilepath,&quot;&#x2F;sdcard&#x2F;%d_%d_rewriteDex.dex&quot;,len,pid);</span><br><span class="line">&#x2F;&#x2F;写入sdcard保存的dex,很多壳对抗内存dump将fopen等方法hook，可以使用系统调用当中的写入，避免使用标准的文件写入函数导致dump不下来</span><br><span class="line">int fd &#x3D; open(dexfilepath,O_CREAT|O_RDWR,0666);</span><br><span class="line">if(fd&gt;0)&#123;</span><br><span class="line">write(fd,addr,len);</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/rewriteDex.png" alt="rewriteDex"></p><h3 id="dexSwapVerify"><a href="#dexSwapVerify" class="headerlink" title="dexSwapVerify"></a><a href="http://androidxref.com/4.4_r1/xref/dalvik/libdex/DexSwapVerify.cpp#2829" target="_blank" rel="noopener">dexSwapVerify</a></h3><p>搜索<a href="http://androidxref.com/4.4_r1/xref/dalvik/libdex/DexSwapVerify.cpp#2829" target="_blank" rel="noopener">dexSwapVerify</a>存在于/<a href="http://androidxref.com/4.4_r1/xref/dalvik/" target="_blank" rel="noopener">dalvik</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/libdex/" target="_blank" rel="noopener">libdex</a>/<a href="http://androidxref.com/4.4_r1/xref/dalvik/libdex/DexSwapVerify.cpp" target="_blank" rel="noopener">DexSwapVerify.cpp</a></p><p>修改int dexSwapAndVerify(u1* addr, int len)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">char dexfilepath[100]&#x3D;&#123;0&#125;;</span><br><span class="line">&#x2F;&#x2F;当前进程的pid</span><br><span class="line">int pid&#x3D;getpid();</span><br><span class="line">&#x2F;&#x2F;文件路径拼接(文件大小，进程pid)</span><br><span class="line">sprintf(dexfilepath,&quot;&#x2F;sdcard&#x2F;%d_%d_dexSwapAndVerify.dex&quot;,len,pid);</span><br><span class="line">&#x2F;&#x2F;写入sdcard保存的dex,很多壳对抗内存dump将fopen等方法hook，可以使用系统调用当中的写入，避免使用标准的文件写入函数导致dump不下来</span><br><span class="line">int fd &#x3D; open(dexfilepath,O_CREAT|O_RDWR,0666);</span><br><span class="line">if(fd&gt;0)&#123;</span><br><span class="line">write(fd,addr,len);</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/dexSwapVerify.png" alt="dexSwapVerify"></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a><strong>编译</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;SourceCode&#x2F;android-4.4.4_r1$ source build&#x2F;envsetup.sh</span><br><span class="line">~&#x2F;SourceCode&#x2F;android-4.4.4_r1$ lunch</span><br><span class="line">7  选择aosp_hammerhead-userdebug</span><br><span class="line">~&#x2F;SourceCode&#x2F;android-4.4.4_r1$ time make -j4  如果报错直接make单线程编译</span><br></pre></td></tr></table></figure><p><img src="/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81.png" alt="编译源码"></p><p>生成路径<code>~/SourceCode/android/4.4.4_r1/out/target/product/hammerhead</code>，将boot.img,cache.img,ramdisk.img,system.img,userdata.img拷出来</p><blockquote><p>adb reboot bootloader<br>fastboot flash system system.img  常用的img有boot,cache,ramdisk,system,userdata</p></blockquote><p>安装<a href="https://onejane.github.io/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/#LoadDex">LoadDex.apk</a>，并把ClassLoaderTest生成的classes.dex放入/sdcard。在Activity启动的时候加载/sdcard的classes.dex的TestActivity并打印<code>I&#39;m from TestActivity.onCreate</code>，这就是一代壳的基本原理。</p><p>重启系统后/sdcard中已经出现一些系统中脱下的dex，启动LoadDex，<code>grep -ril &quot;TestActivity&quot; ./*.dex</code> 找到LoadDex中脱下的dex，gda可以看到优化后的odex的TestActivity中onCreate方法</p><h2 id="真实案例"><a href="#真实案例" class="headerlink" title="真实案例"></a>真实案例</h2><p><strong>a.apk</strong> 快递100 《百度》加固</p><p>启动后进入/sdcard , grep -ril “SplashActivity” ./*.dex</p><p><strong>b.apk</strong>  货拉拉司机版《爱加密》企业版本加固</p><p>启动后进入/sdcard , grep -ril “mvp/ui/SplashActivity” ./*.dex，内容都为null，说明用了函数抽取。</p><h1 id="ART8-0-0"><a href="#ART8-0-0" class="headerlink" title="ART8.0.0"></a>ART8.0.0</h1><h2 id="InMemoryDexClassLoader源码分析"><a href="#InMemoryDexClassLoader源码分析" class="headerlink" title="InMemoryDexClassLoader源码分析"></a>InMemoryDexClassLoader源码分析</h2><p>加载内存中的解密字节流过程art的具体流程：</p><p>在<a href="http://androidxref.com/8.0.0_r4/" target="_blank" rel="noopener">Android 8.0</a>中libcore搜索<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/InMemoryDexClassLoader.java" target="_blank" rel="noopener">InMemoryDexClassLoader</a>两个构造函数，分别加载一个或多个dex，<code>super(dexBuffers, parent);</code>调用了父类的构造函数。进入父类<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java" target="_blank" rel="noopener">BaseDexClassLoader.java</a>的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseDexClassLoader</span><span class="params">(ByteBuffer[] dexFiles, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO We should support giving this a library search path maybe.</span></span><br><span class="line">    <span class="comment">// 设置parent</span></span><br><span class="line">    <span class="keyword">super</span>(parent);</span><br><span class="line">    <span class="comment">// 初始化DexPathList对象</span></span><br><span class="line">    <span class="keyword">this</span>.pathList = <span class="keyword">new</span> DexPathList(<span class="keyword">this</span>, dexFiles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进public <a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java#makeInMemoryDexElements" target="_blank" rel="noopener">DexPathList</a>(ClassLoader definingContext, ByteBuffer[] dexFiles)构造函数，前几步对传参判断，紧接着对传入的so库的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.definingContext = definingContext;</span><br><span class="line"><span class="comment">// TODO It might be useful to let in-memory dex-paths have native libraries.</span></span><br><span class="line"><span class="keyword">this</span>.nativeLibraryDirectories = Collections.emptyList();</span><br><span class="line"><span class="keyword">this</span>.systemNativeLibraryDirectories =</span><br><span class="line">         splitPaths(System.getProperty(<span class="string">"java.library.path"</span>), <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">this</span>.nativeLibraryPathElements = makePathElements(<span class="keyword">this</span>.systemNativeLibraryDirectories);</span><br></pre></td></tr></table></figure><p>传入的dex只需要看<code>this.dexElements = makeInMemoryDexElements(dexFiles, suppressedExceptions);</code>摘除核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Element[] makeInMemoryDexElements(ByteBuffer[] dexFiles,</span><br><span class="line">        List&lt;IOException&gt; suppressedExceptions) &#123;</span><br><span class="line">    Element[] elements = <span class="keyword">new</span> Element[dexFiles.length];</span><br><span class="line">    <span class="keyword">int</span> elementPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ByteBuffer buf : dexFiles) &#123;</span><br><span class="line">        DexFile dex = <span class="keyword">new</span> DexFile(buf);</span><br><span class="line">        elements[elementPos++] = <span class="keyword">new</span> Element(dex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/DexFile.java#106" target="_blank" rel="noopener">DexFile</a>(buf)的构造函数中，发现<code>openInMemoryDexFile</code>将buf在内存中打开返回了mCookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DexFile(ByteBuffer buf) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    mCookie = openInMemoryDexFile(buf);</span><br><span class="line">    mInternalCookie = mCookie;</span><br><span class="line">    mFileName = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/DexFile.java#openInMemoryDexFile" target="_blank" rel="noopener">openInMemoryDexFile</a>方法，分别根据条件创建了两次cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static Object openInMemoryDexFile(ByteBuffer buf) throws IOException &#123;</span><br><span class="line">    if (buf.isDirect()) &#123;</span><br><span class="line">        return createCookieWithDirectBuffer(buf, buf.position(), buf.limit());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return createCookieWithArray(buf.array(), buf.position(), buf.limit());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别查看<code>createCookieWithDirectBuffer</code>和<code>createCookieWithArray</code>两个方法，发现是两个native函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private static native Object createCookieWithDirectBuffer(ByteBuffer buf, int start, int end);</span><br><span class="line">private static native Object createCookieWithArray(byte[] buf, int start, int end);</span><br></pre></td></tr></table></figure><p>在art模块中Full Search <code>createCookieWithDirectBuffer</code>,进入<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/native/dalvik_system_DexFile.cc#218" target="_blank" rel="noopener">DexFile_createCookieWithDirectBuffer</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">static jobject DexFile_createCookieWithDirectBuffer(JNIEnv* env,</span><br><span class="line">                                                    jclass,  &#x2F;&#x2F; 静态函数 第一个是jclass当前类</span><br><span class="line">                                                    jobject buffer,  &#x2F;&#x2F; 传入内存中的字节流</span><br><span class="line">                                                    jint start,</span><br><span class="line">                                                    jint end) &#123;</span><br><span class="line">  uint8_t* base_address &#x3D; reinterpret_cast&lt;uint8_t*&gt;(env-&gt;GetDirectBufferAddress(buffer));</span><br><span class="line">  if (base_address &#x3D;&#x3D; nullptr) &#123;</span><br><span class="line">    ScopedObjectAccess soa(env);</span><br><span class="line">    ThrowWrappedIOException(&quot;dexFileBuffer not direct&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::unique_ptr&lt;MemMap&gt; dex_mem_map(AllocateDexMemoryMap(env, start, end));</span><br><span class="line">  if (dex_mem_map &#x3D;&#x3D; nullptr) &#123;</span><br><span class="line">    DCHECK(Thread::Current()-&gt;IsExceptionPending());</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  size_t length &#x3D; static_cast&lt;size_t&gt;(end - start);</span><br><span class="line">  memcpy(dex_mem_map-&gt;Begin(), base_address, length);  &#x2F;&#x2F; 对当前字节流进行内存拷贝memcpy，传入begin和length就是dex的起始地址，可以进行dump</span><br><span class="line">  return CreateSingleDexFileCookie(env, std::move(dex_mem_map));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createCookieWithDirectBuffer</code>和<code>createCookieWithArray</code>都进行了<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/native/dalvik_system_DexFile.cc#CreateSingleDexFileCookie" target="_blank" rel="noopener">CreateSingleDexFileCookie</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">static jobject CreateSingleDexFileCookie(JNIEnv* env, std::unique_ptr&lt;MemMap&gt; data) &#123;</span><br><span class="line">  std::unique_ptr&lt;const DexFile&gt; dex_file(CreateDexFile(env, std::move(data))); &#x2F;&#x2F; 根据传入dex文件在内存中信息创建了DexFile实例</span><br><span class="line">  if (dex_file.get() &#x3D;&#x3D; nullptr) &#123;</span><br><span class="line">    DCHECK(env-&gt;ExceptionCheck());</span><br><span class="line">    return nullptr;</span><br><span class="line">  &#125;</span><br><span class="line">  std::vector&lt;std::unique_ptr&lt;const DexFile&gt;&gt; dex_files;</span><br><span class="line">  dex_files.push_back(std::move(dex_file));</span><br><span class="line">  return ConvertDexFilesToJavaArray(env, nullptr, dex_files);  &#x2F;&#x2F; 对该dex_files进行返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/native/dalvik_system_DexFile.cc#CreateDexFile" target="_blank" rel="noopener">CreateDexFile</a>创建DexFile对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static const DexFile* CreateDexFile(JNIEnv* env, std::unique_ptr&lt;MemMap&gt; dex_mem_map) &#123; &#x2F;&#x2F; 返回dex文件在内存中映射的地址</span><br><span class="line">  std::string location &#x3D; StringPrintf(&quot;Anonymous-DexFile@%p-%p&quot;,</span><br><span class="line">                                      dex_mem_map-&gt;Begin(),</span><br><span class="line">                                      dex_mem_map-&gt;End());</span><br><span class="line">  std::string error_message;</span><br><span class="line">  std::unique_ptr&lt;const DexFile&gt; dex_file(DexFile::Open(location,</span><br><span class="line">                                                        0,</span><br><span class="line">                                                        std::move(dex_mem_map),</span><br><span class="line">                                                        &#x2F;* verify *&#x2F; true,</span><br><span class="line">                                                        &#x2F;* verify_location *&#x2F; true,</span><br><span class="line">                                                        &amp;error_message));</span><br><span class="line">  if (dex_file &#x3D;&#x3D; nullptr) &#123;</span><br><span class="line">    ScopedObjectAccess soa(env);</span><br><span class="line">    ThrowWrappedIOException(&quot;%s&quot;, error_message.c_str());</span><br><span class="line">    return nullptr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (!dex_file-&gt;DisableWrite()) &#123;</span><br><span class="line">    ScopedObjectAccess soa(env);</span><br><span class="line">    ThrowWrappedIOException(&quot;Failed to make dex file read-only&quot;);</span><br><span class="line">    return nullptr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return dex_file.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#182" target="_blank" rel="noopener">DexFile::Open</a>，其中又调用了OpenCommon函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;const DexFile&gt; DexFile::Open(const std::string&amp; location, &#x2F;&#x2F; 加载dex文件的路径</span><br><span class="line">                                           uint32_t location_checksum,</span><br><span class="line">                                           std::unique_ptr&lt;MemMap&gt; map, &#x2F;&#x2F; 内存的映射</span><br><span class="line">                                           bool verify,</span><br><span class="line">                                           bool verify_checksum,</span><br><span class="line">                                           std::string* error_msg) &#123;</span><br><span class="line">  ScopedTrace trace(std::string(&quot;Open dex file from mapped-memory &quot;) + location);</span><br><span class="line">  CHECK(map.get() !&#x3D; nullptr);</span><br><span class="line"></span><br><span class="line">  if (map-&gt;Size() &lt; sizeof(DexFile::Header)) &#123;</span><br><span class="line">    *error_msg &#x3D; StringPrintf(</span><br><span class="line">        &quot;DexFile: failed to open dex file &#39;%s&#39; that is too short to have a header&quot;,</span><br><span class="line">        location.c_str());</span><br><span class="line">    return nullptr;</span><br><span class="line">  &#125;</span><br><span class="line">  std::unique_ptr&lt;DexFile&gt; dex_file &#x3D; OpenCommon(map-&gt;Begin(),</span><br><span class="line">                                                 map-&gt;Size(),</span><br><span class="line">                                                 location,</span><br><span class="line">                                                 location_checksum,</span><br><span class="line">                                                 kNoOatDexFile,</span><br><span class="line">                                                 verify,</span><br><span class="line">                                                 verify_checksum,</span><br><span class="line">                                                 error_msg);</span><br></pre></td></tr></table></figure><p>进入<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#OpenCommon" target="_blank" rel="noopener">OpenCommon</a>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;DexFile&gt; DexFile::OpenCommon(const uint8_t* base, &#x2F;&#x2F; 加载dex文件的起始地址</span><br><span class="line">                                             size_t size,</span><br><span class="line">                                             const std::string&amp; location,</span><br><span class="line">                                             uint32_t location_checksum,</span><br><span class="line">                                             const OatDexFile* oat_dex_file,</span><br><span class="line">                                             bool verify,</span><br><span class="line">                                             bool verify_checksum,</span><br><span class="line">                                             std::string* error_msg,</span><br><span class="line">                                             VerifyResult* verify_result) &#123;</span><br><span class="line">  if (verify_result !&#x3D; nullptr) &#123;</span><br><span class="line">    *verify_result &#x3D; VerifyResult::kVerifyNotAttempted;</span><br><span class="line">  &#125;</span><br><span class="line">  std::unique_ptr&lt;DexFile&gt; dex_file(new DexFile(base,</span><br><span class="line">                                                size,</span><br><span class="line">                                                location,</span><br><span class="line">                                                location_checksum,</span><br><span class="line">                                                oat_dex_file));  &#x2F;&#x2F; 创建新的DexFile实例，构造函数也包含起始地址和大小</span><br></pre></td></tr></table></figure><p>说明<strong>InMemoryDexClassLoader</strong>在对内存中bytebuffer的dex信息进行加载流程中涉及很多函数逻辑都包含dex信息的起始地址和大小。InMemoryDexClassLoader并没有对内存中dex信息进行编译生成相应的oat文件，这是与DexClassLoader的不同。</p><p><code>InMemoryDexClassLoader</code>通用脱壳点：</p><ul><li><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/native/dalvik_system_DexFile.cc#CreateSingleDexFileCookie" target="_blank" rel="noopener">CreateSingleDexFileCookie</a>的data参数可以获取起始地址</li><li><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/native/dalvik_system_DexFile.cc#CreateDexFile" target="_blank" rel="noopener">CreateDexFile</a></li><li><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#182" target="_blank" rel="noopener">DexFile::Open</a></li><li><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#OpenCommon" target="_blank" rel="noopener">OpenCommon</a></li><li><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#523" target="_blank" rel="noopener">DexFile::DexFile</a></li></ul><h2 id="DexClassLoader加载dex源码分析"><a href="#DexClassLoader加载dex源码分析" class="headerlink" title="DexClassLoader加载dex源码分析"></a>DexClassLoader加载dex源码分析</h2><p><a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/DexClassLoader.java" target="_blank" rel="noopener">DexClassLoader</a>只有一个构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public DexClassLoader(String dexPath, String optimizedDirectory,</span><br><span class="line">        String librarySearchPath, ClassLoader parent) &#123;</span><br><span class="line">    super(dexPath, new File(optimizedDirectory), librarySearchPath, parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入父类<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java" target="_blank" rel="noopener">BaseDexClassLoader.java</a>的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public BaseDexClassLoader(String dexPath, File optimizedDirectory,</span><br><span class="line">        String librarySearchPath, ClassLoader parent) &#123;</span><br><span class="line">    super(parent);</span><br><span class="line">    this.pathList &#x3D; new DexPathList(this, dexPath, librarySearchPath, null);</span><br><span class="line"></span><br><span class="line">    if (reporter !&#x3D; null) &#123;</span><br><span class="line">        reporter.report(this.pathList.getDexPaths());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的进入<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java#127" target="_blank" rel="noopener">DexPathList</a>的核心逻辑<code>this.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory,suppressedExceptions, definingContext);</code>,调用了<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java#makeDexElements" target="_blank" rel="noopener">makeDexElements</a>，其中加载dex文件<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java#loadDexFile" target="_blank" rel="noopener">loadDexFile</a>(file, optimizedDirectory, loader, elements);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private static DexFile loadDexFile(File file, File optimizedDirectory, ClassLoader loader,</span><br><span class="line">                                   Element[] elements)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    if (optimizedDirectory &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return new DexFile(file, loader, elements);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        String optimizedPath &#x3D; optimizedPathFor(file, optimizedDirectory);</span><br><span class="line">        return DexFile.loadDex(file.getPath(), optimizedPath, 0, loader, elements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DexFile.loadDex(file.getPath(), optimizedPath, 0, loader, elements)</code>调用了5个参数的loadDex,进入<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/DexFile.java#191" target="_blank" rel="noopener">loadDex</a>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static DexFile loadDex(String sourcePathName, String outputPathName,</span><br><span class="line">    int flags, ClassLoader loader, DexPathList.Element[] elements) throws IOException &#123;</span><br><span class="line">    return new DexFile(sourcePathName, outputPathName, flags, loader, elements);  &#x2F;&#x2F; 创建DexFile实例</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/DexFile.java#99" target="_blank" rel="noopener">DexFile</a>五参数构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DexFile(String fileName, ClassLoader loader, DexPathList.Element[] elements) throws IOException &#123;</span><br><span class="line">    mCookie &#x3D; openDexFile(fileName, null, 0, loader, elements);</span><br><span class="line">    mInternalCookie &#x3D; mCookie;</span><br><span class="line">    mFileName &#x3D; fileName;</span><br><span class="line">    &#x2F;&#x2F;System.out.println(&quot;DEX FILE cookie is &quot; + mCookie + &quot; fileName&#x3D;&quot; + fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<a href="http://androidxref.com/8.0.0_r4/xref/libcore/dalvik/src/main/java/dalvik/system/DexFile.java#openDexFile" target="_blank" rel="noopener">openDexFile</a>中调用了native函数<code>private static native Object openDexFileNative(String sourceName, String outputName, int flags, ClassLoader loader, DexPathList.Element[] elements);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">return openDexFileNative(new File(sourceName).getAbsolutePath(),</span><br><span class="line">                                (outputName &#x3D;&#x3D; null)</span><br><span class="line">                                    ? null</span><br><span class="line">                                    : new File(outputName).getAbsolutePath(),</span><br><span class="line">                                flags,</span><br><span class="line">                                loader,</span><br><span class="line">                                elements);</span><br></pre></td></tr></table></figure><p><a href="http://androidxref.com/8.0.0_r4/search?q=openDexFileNative&defs=&refs=&path=&hist=&project=art" target="_blank" rel="noopener">Full  Search</a>搜索art目录下的<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/native/dalvik_system_DexFile.cc#258" target="_blank" rel="noopener">openDexFileNative</a>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">static jobject DexFile_openDexFileNative(JNIEnv* env,</span><br><span class="line">                                         jclass,  &#x2F;&#x2F; 静态函数</span><br><span class="line">                                         jstring javaSourceName,  &#x2F;&#x2F; 加载的dex路径</span><br><span class="line">                                         jstring javaOutputName ATTRIBUTE_UNUSED,</span><br><span class="line">                                         jint flags ATTRIBUTE_UNUSED,</span><br><span class="line">                                         jobject class_loader,</span><br><span class="line">                                         jobjectArray dex_elements) &#123;</span><br><span class="line">  ScopedUtfChars sourceName(env, javaSourceName);</span><br><span class="line">  if (sourceName.c_str() &#x3D;&#x3D; nullptr) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Runtime* const runtime &#x3D; Runtime::Current();</span><br><span class="line">  ClassLinker* linker &#x3D; runtime-&gt;GetClassLinker();</span><br><span class="line">  std::vector&lt;std::unique_ptr&lt;const DexFile&gt;&gt; dex_files;</span><br><span class="line">  std::vector&lt;std::string&gt; error_msgs; </span><br><span class="line">  const OatFile* oat_file &#x3D; nullptr;  &#x2F;&#x2F; 出现oat</span><br><span class="line"></span><br><span class="line">  dex_files &#x3D; runtime-&gt;GetOatFileManager().OpenDexFilesFromOat(sourceName.c_str(),</span><br><span class="line">                                                               class_loader,</span><br><span class="line">                                                               dex_elements,</span><br><span class="line">                                                               &#x2F;*out*&#x2F; &amp;oat_file,</span><br><span class="line">                                                               &#x2F;*out*&#x2F; &amp;error_msgs); &#x2F;&#x2F; 调用OpenDexFilesFromOat编译生成oat流程</span><br><span class="line"></span><br><span class="line">  if (!dex_files.empty()) &#123;</span><br><span class="line">    jlongArray array &#x3D; ConvertDexFilesToJavaArray(env, oat_file, dex_files);</span><br><span class="line">    if (array &#x3D;&#x3D; nullptr) &#123;</span><br><span class="line">      ScopedObjectAccess soa(env);</span><br><span class="line">      for (auto&amp; dex_file : dex_files) &#123;</span><br><span class="line">        if (linker-&gt;IsDexFileRegistered(soa.Self(), *dex_file)) &#123;</span><br><span class="line">          dex_file.release();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">  &#125; </span><br><span class="line">    return nullptr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DexClassLoader第一次动态加载解密的dex时必然没有进行编译生成oat，查看<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/oat_file_manager.cc#602" target="_blank" rel="noopener">OpenDexFilesFromOat</a>,首先<code>OatFileAssistant oat_file_assistant(dex_location,kRuntimeISA,!runtime-&gt;IsAotCompiler());</code>新建了OatFileAssistant 对象，<code>if (!oat_file_assistant.IsUpToDate())</code>由于没有生成oat对象的，进入判断中的<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/oat_file_assistant.cc#224" target="_blank" rel="noopener">MakeUpToDate</a>函数，其中调用了<code>return GenerateOatFileNoChecks(info, target, error_msg);</code><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/oat_file_assistant.cc#GenerateOatFileNoChecks" target="_blank" rel="noopener">GenerateOatFileNoChecks</a>最终进入调用dex2oat编译生成oat的流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (!Dex2Oat(args, error_msg)) &#123;</span><br><span class="line">  &#x2F;&#x2F; Manually delete the oat and vdex files. This ensures there is no garbage</span><br><span class="line">  &#x2F;&#x2F; left over if the process unexpectedly died.</span><br><span class="line">  vdex_file-&gt;Erase();</span><br><span class="line">  unlink(vdex_file_name.c_str());</span><br><span class="line">  oat_file-&gt;Erase();</span><br><span class="line">  unlink(oat_file_name.c_str());</span><br><span class="line">  return kUpdateFailed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dex2Oat中准备相关二进制程序参数的相关信息，最终调用<code>return Exec(argv, error_msg);</code>实现dex2oat编译的过程，进入<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/exec_utils.cc#91" target="_blank" rel="noopener">Exec</a>中调用了<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/exec_utils.cc#ExecAndReturnCode" target="_blank" rel="noopener">ExecAndReturnCode</a>，其中首次<code>pid_t pid=fork()</code>进行了进程fork，在子进程当中使用<code>execve(program, &amp;args[0], envp);</code>执行dex2oat实际执行流程。</p><p>说明我们在整个流程中其中某个函数进行修改或者hook都会导致dex2oat流程结束，强制结束dex2oat流程，可以让我们在DexClassLoader在加载dex时过程变的很有效率，减少dex2oat编译的流程，要想实现art下的函数抽取技术，也是要阻断dex2oat的流程。当我们阻断了dex2oat会导致<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/native/dalvik_system_DexFile.cc#258" target="_blank" rel="noopener">openDexFileNative</a>中 <a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/oat_file_manager.cc#655" target="_blank" rel="noopener">oat_file</a> 文件无法生成，在调用<code>OatFileManager::OpenDexFilesFromOat</code>中进入尝试判断原始dex文件<code>oat_file_assistant.HasOriginalDexFiles()</code>并通过<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#212" target="_blank" rel="noopener">DexFile::Open</a>进行加载dex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">if (dex_files.empty()) &#123;</span><br><span class="line">  if (oat_file_assistant.HasOriginalDexFiles()) &#123;</span><br><span class="line">    if (Runtime::Current()-&gt;IsDexFileFallbackEnabled()) &#123;</span><br><span class="line">      static constexpr bool kVerifyChecksum &#x3D; true;</span><br><span class="line">      if (!DexFile::Open(</span><br><span class="line">          dex_location, dex_location, kVerifyChecksum, &#x2F;*out*&#x2F; &amp;error_msg, &amp;dex_files)) &#123;</span><br><span class="line">        LOG(WARNING) &lt;&lt; error_msg;</span><br><span class="line">        error_msgs-&gt;push_back(&quot;Failed to open dex files from &quot; + std::string(dex_location)</span><br><span class="line">                              + &quot; because: &quot; + error_msg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      error_msgs-&gt;push_back(&quot;Fallback mode disabled, skipping dex files.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    error_msgs-&gt;push_back(&quot;No original dex files found for dex location &quot;</span><br><span class="line">        + std::string(dex_location));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#212" target="_blank" rel="noopener">DexFile::Open</a>中可看到<code>File fd = OpenAndReadMagic(filename, &amp;magic, error_msg);</code>到此出现了第一个脱壳点<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/base/file_magic.cc#33" target="_blank" rel="noopener">OpenAndReadMagic</a>，此时dex还未加载到内存当中。紧接着开始判断dex魔术头，并进入<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#OpenFile" target="_blank" rel="noopener">DexFile::OpenFile</a>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (IsDexMagic(magic)) &#123;</span><br><span class="line">  std::unique_ptr&lt;const DexFile&gt; dex_file(DexFile::OpenFile(fd.Release(),  &#x2F;&#x2F; 文件描述符，可以作为脱壳点</span><br><span class="line">                                                            location,</span><br><span class="line">                                                            &#x2F;* verify *&#x2F; true,</span><br><span class="line">                                                            verify_checksum,</span><br><span class="line">                                                            error_msg));</span><br><span class="line">  if (dex_file.get() !&#x3D; nullptr) &#123;</span><br><span class="line">    dex_files-&gt;push_back(std::move(dex_file));</span><br><span class="line">    return true;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#OpenFile" target="_blank" rel="noopener">DexFile::OpenFile</a>函数发现通过MemMap::MapFile将dex进行了内存映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map.reset(MemMap::MapFile(length,</span><br><span class="line">                          PROT_READ,</span><br><span class="line">                          MAP_PRIVATE,</span><br><span class="line">                          fd,</span><br><span class="line">                          0,</span><br><span class="line">                          &#x2F;*low_4gb*&#x2F;false,</span><br><span class="line">                          location.c_str(),</span><br><span class="line">                          error_msg));</span><br></pre></td></tr></table></figure><p>再进入<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#OpenCommon" target="_blank" rel="noopener">OpenCommon</a>函数中，参数中也包含了dex文件的映射区域的起始地址，出现了第二个脱壳点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;DexFile&gt; dex_file &#x3D; OpenCommon(map-&gt;Begin(),</span><br><span class="line">                                               map-&gt;Size(),</span><br><span class="line">                                               location,</span><br><span class="line">                                               dex_header-&gt;checksum_,</span><br><span class="line">                                               kNoOatDexFile,</span><br><span class="line">                                               verify,</span><br><span class="line">                                               verify_checksum,</span><br><span class="line">                                               error_msg);</span><br></pre></td></tr></table></figure><p>跟进<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#OpenCommon" target="_blank" rel="noopener">DexFile::OpenCommon</a>中，发现其中调用了DexFile的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;DexFile&gt; dex_file(new DexFile(base,</span><br><span class="line">                                              size,</span><br><span class="line">                                              location,</span><br><span class="line">                                              location_checksum,</span><br><span class="line">                                              oat_dex_file));</span><br></pre></td></tr></table></figure><p>至此出现了第三个脱壳点<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#523" target="_blank" rel="noopener">DexFile::DexFile</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DexFile::DexFile(const uint8_t* base,</span><br><span class="line">                 size_t size,</span><br><span class="line">                 const std::string&amp; location,</span><br><span class="line">                 uint32_t location_checksum,</span><br><span class="line">                 const OatDexFile* oat_dex_file)</span><br></pre></td></tr></table></figure><p>通用脱壳点：</p><ul><li><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/base/file_magic.cc#33" target="_blank" rel="noopener">OpenAndReadMagic</a></li><li><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#OpenCommon" target="_blank" rel="noopener">OpenCommon</a></li><li><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#523" target="_blank" rel="noopener">DexFile::DexFile</a></li></ul><p>通过对比：InMemoryDexClassLoader和DexClassLoader的脱壳点，发现OpenCommon是两者通用脱壳点。</p><h2 id="定制源码脱壳-1"><a href="#定制源码脱壳-1" class="headerlink" title="定制源码脱壳"></a>定制源码脱壳</h2><h3 id="DexFile-OpenCommon"><a href="#DexFile-OpenCommon" class="headerlink" title="DexFile::OpenCommon"></a><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#480" target="_blank" rel="noopener">DexFile::OpenCommon</a></h3><p>修改/<a href="http://androidxref.com/8.0.0_r4/xref/art/" target="_blank" rel="noopener">art</a>/<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/" target="_blank" rel="noopener">runtime</a>/<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc" target="_blank" rel="noopener">dex_file.cc</a>中<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#480" target="_blank" rel="noopener">DexFile::OpenCommon</a>方法</p><p><img src="/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/openCommon.png" alt="openCommon"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> int pid&#x3D;getpid();</span><br><span class="line"> char dexfilepath[100]&#x3D;&#123;0&#125;;</span><br><span class="line"> sprintf(dexfilepath,&quot;&#x2F;sdcard&#x2F;%d_%d_OpenCommon.dex&quot;,(int)size,pid);</span><br><span class="line"> </span><br><span class="line"> int fd&#x3D;open(dexfilepath,O_CREAT|O_RDWR,666);</span><br><span class="line"> if (fd&gt;0)&#123;</span><br><span class="line">int number&#x3D;write(fd,base,size);</span><br><span class="line">if(number&gt;0)&#123;&#125;</span><br><span class="line">close(fd);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="DexFile-DexFile"><a href="#DexFile-DexFile" class="headerlink" title="DexFile::DexFile"></a><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#523" target="_blank" rel="noopener">DexFile::DexFile</a></h3><p>修改/<a href="http://androidxref.com/8.0.0_r4/xref/art/" target="_blank" rel="noopener">art</a>/<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/" target="_blank" rel="noopener">runtime</a>/<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc" target="_blank" rel="noopener">dex_file.cc</a>中<a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/dex_file.cc#523" target="_blank" rel="noopener">DexFile::DexFile</a>方法</p><p><img src="/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/DexFile.png" alt="DexFile"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> int pid&#x3D;getpid();</span><br><span class="line"> char dexfilepath[100]&#x3D;&#123;0&#125;;</span><br><span class="line"> sprintf(dexfilepath,&quot;&#x2F;sdcard&#x2F;%d_%d_DexFile.dex&quot;,(int)size,pid);</span><br><span class="line"> </span><br><span class="line"> int fd&#x3D;open(dexfilepath,O_CREAT|O_RDWR,666);</span><br><span class="line"> if (fd&gt;0)&#123;</span><br><span class="line">int number&#x3D;write(fd,base,size);</span><br><span class="line">if(number&gt;0)&#123;&#125;</span><br><span class="line">close(fd);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;Android8.0&#x2F;android-8.0.0_r1$ source build&#x2F;envsetup.sh</span><br><span class="line">~&#x2F;Android8.0&#x2F;android-8.0.0_r1$ lunch</span><br><span class="line">23  选择aosp_sailfish-userdebug</span><br><span class="line">~&#x2F;Android8.0&#x2F;android-8.0.0_r1$ time make -j4  如果报错直接make单线程编译</span><br></pre></td></tr></table></figure><p>生成路径<code>~/Android8.0/android-8.0.0_r1/out/target/product/sailfish</code>，将boot.img,ramdisk.img,system.img,system_other.img,userdata.img,vendor.img拷出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot boot.img</span><br><span class="line">fastboot flash vendor vendor.img</span><br><span class="line">fastboot flash system_a system.img</span><br><span class="line">fastboot flash system_b system_other.img</span><br><span class="line">fastboot flash userdata userdata.img</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>安装<a href="https://onejane.github.io/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/#LoadDex">LoadDex.apk</a>，并把ClassLoaderTest生成的classes.dex放入/sdcard。并在设置中授予该app读写sdcard的权限。在Activity启动的时候加载/sdcard的classes.dex的TestActivity并打印<code>I&#39;m from TestActivity.onCreate</code>，这就是一代壳的基本原理。</p><p>重启系统后/sdcard中已经出现一些系统中脱下的dex，启动LoadDex，<code>grep -ril &quot;TestActivity&quot; ./*.dex</code> 找到LoadDex中脱下的dex，DexClassLoader加载的插件dex已经被dump下来，gda可以看到优化后的odex的TestActivity中onCreate方法。</p><h2 id="真实案例-1"><a href="#真实案例-1" class="headerlink" title="真实案例"></a>真实案例</h2><p><strong>a.apk</strong> 《百度》加固</p><p>启动后进入/sdcard , grep -ril “SplashActivity” ./*.dex</p><p><strong>b.apk</strong> 《爱加密》企业版本加固</p><p>启动后进入/sdcard , grep -ril “mvp/ui/SplashActivity” ./*.dex，内容都为null，说明用了函数抽取，这就是需要fart解决的问题。</p><blockquote><p>以上方案都是针对于没有dex2oat的情况，实际上对于一些壳没有禁用dex2oat的编译过程，且使用dexclassloader进行编译，最终会进入dex2oat流程，这个流程也是可以进行脱壳的。</p><p><a href="http://androidxref.com/8.0.0_r4/xref/art/runtime/exec_utils.cc#ExecAndReturnCode" target="_blank" rel="noopener">ExecAndReturnCode</a>中调用<code>execve(program, &amp;args[0], envp);</code>调用dex2oat二进制程序对dex的文件加载。,<a href="http://androidxref.com/8.0.0_r4/xref/art/dex2oat/dex2oat.cc" target="_blank" rel="noopener">dex2oat</a>流程也可以脱壳,<a href="http://androidxref.com/8.0.0_r4/xref/art/dex2oat/dex2oat.cc#2965" target="_blank" rel="noopener">main</a>函数中调用了Dex2oat,<code>int result = static_cast&lt;int&gt;(art::Dex2oat(argc, argv));</code>,跟进<a href="http://androidxref.com/8.0.0_r4/xref/art/dex2oat/dex2oat.cc#2943" target="_blank" rel="noopener">Setup()</a>方法最后会出现对要编译dex文件的处理，如下代码对当前要编译的文件进行遍历，逐个进行注册，这个地方可以完成dex的脱壳。<a href="http://androidxref.com/8.0.0_r4/xref/art/dex2oat/dex2oat.cc#CompileApp" target="_blank" rel="noopener">CompileApp</a>也出现了DexFile对象等等非常多的流程出现Dexfile对象，都可以成为脱壳点</p></blockquote><p><img src="/2021/03/16/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E4%B8%80%E4%BB%A3%E5%A3%B3dex%E4%BF%9D%E6%8A%A4/dex2oat.png" alt="dex2oat"></p><p>除了对dex加载过程中还有其他脱壳点，比如对class进行load过程中，对art method的准备阶段，甚至每个函数的执行过程中都可以进行脱壳，这就是art下众多脱壳点的原因，因为非常多的流程都可以获取到dex文件的位置信息。</p><hr><ul><li>Dalvik下一代壳通用解决方案</li><li>ART下一代壳通用解决方案</li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
          <category> 加壳与脱壳 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dalvik </tag>
            
            <tag> ART </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket&amp;Websocket&amp;Protobuf自吐通杀</title>
      <link href="/2021/03/14/Socket&amp;Websocket&amp;Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/"/>
      <url>/2021/03/14/Socket&amp;Websocket&amp;Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>所有的应用层都逃不掉底层用Socket来传输,只要掌握了Socket，对上层应用就是降维打击。</p><p>新建HttpSocket项目，并在AndroidManifest.xml配置网络权限<code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                while (true)&#123;</span><br><span class="line">                    newHttp();</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(10*1000);</span><br><span class="line">                    &#125; catch (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void newHttp()&#123;</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    String url &#x3D; &quot;https:&#x2F;&#x2F;www.baidu.com&quot;;</span><br><span class="line">                    URL urlConn &#x3D; new URL(url);</span><br><span class="line">                    HttpURLConnection connection &#x3D; (HttpURLConnection)urlConn.openConnection();</span><br><span class="line">                    connection.setRequestMethod(&quot;GET&quot;);</span><br><span class="line">                    connection.connect();</span><br><span class="line">                    int responseCode &#x3D; connection.getResponseCode();</span><br><span class="line">                    if (responseCode &#x3D;&#x3D; HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">                        InputStream inputStream &#x3D; connection.getInputStream();</span><br><span class="line">                        String result &#x3D; is2String(inputStream);</span><br><span class="line">                        Log.d(&quot;onejane&quot;,&quot;result&#x3D;&#x3D;&#x3D;&#x3D;&quot;+result);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125; catch (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static String is2String(InputStream inputStream) throws IOException &#123;</span><br><span class="line">        byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">        ByteArrayOutputStream baos &#x3D; new ByteArrayOutputStream();</span><br><span class="line">        for (int len &#x3D; 0; (len &#x3D; inputStream.read(buffer)) &gt; 0;) &#123;</span><br><span class="line">            baos.write(buffer, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        String result &#x3D; new String(baos.toByteArray(), &quot;utf-8&quot;);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        return result ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键类定位"><a href="#关键类定位" class="headerlink" title="关键类定位"></a>关键类定位</h2><p>objection -g com.onejane.httpsocket explore</p><p>android heap search instances java.net.Socket  查看堆内存中是否有该实例</p><p>android hooking search classes Socket  搜索与Socket相关的类</p><p>android hooking watch class java.net.Socket  默认hook类的所有方法没有构造函数</p><p>android hooking watch class_method java.net.Socket.$init –dump-args –dump-backtrace –dump-return  手动调用hook构造函数</p><p>vim ~/.pyenv/versions/3.8.0/lib/python3.8/site-packages/objection/agent.js  输入:9211跳转到9211行，加上.concat([“$init”])，会影响objection的稳定性</p><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/hook%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.png" alt="hook构造函数"></p><p>将与Socket相关的类添加前缀<code>android hooking watch class</code>存入socket.txt</p><p>objection -g com.onejane.httpsocket explore -c ~/Desktop/socket.txt  批量hook，如果崩掉，需要将崩掉的类从文本中移除</p><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/%E5%B4%A9%E6%8E%89%E7%9A%84%E7%B1%BB.png" alt="崩掉的类"></p><p>okhttp底层走的socket</p><p><code>android hooking watch class_method java.net.AbstractPlainSocketImpl.acquireFD --dump-args --dump-backtrace --dump-return</code></p><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/AbstractPlainSocketImpl.png" alt="hook AbstractPlainSocketImpl"></p><p>根据hook的结果拿到java.net.SocketOutputStream.write方法就是socket写入时调用的方法，针对该方法进行hook</p><p><code>android hooking watch class_method java.net.SocketOutputStream.write --dump-args --dump-backtrace --dump-return</code></p><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/SocketOutputStream.png" alt="hook SocketOutputStream"></p><p>SocketInputStream.read的hook结果复制到010Editor，搜索1f8b,删除前面所有字符，保存为gzip,解压查看结果就是百度网页结果</p><h2 id="socket自吐"><a href="#socket自吐" class="headerlink" title="socket自吐"></a>socket自吐</h2><p>实现http与https的socket自吐，修改url地址<a href="http://www.baidu.com/%E4%B8%BAhttps://www.baidu.com/" target="_blank" rel="noopener">http://www.baidu.com/为https://www.baidu.com/</a>, 有这两个自吐，可以通杀所有协议层的收发包内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">function hook_socket()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;hook_socket;&quot;)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        Java.use(&quot;java.net.SocketOutputStream&quot;).write.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function(bytearry,int1,int2)&#123;</span><br><span class="line">            var result &#x3D; this.write(bytearry,int1,int2);</span><br><span class="line">            console.log(&quot;HTTP write result,bytearry,int1,int2&#x3D;&gt;&quot;,result,bytearry,int1,int2)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;bytearray contents&#x3D;&gt;&quot;, ByteString.of(bytearry).hex())</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        Java.use(&quot;java.net.SocketInputStream&quot;).read.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function(bytearry,int1,int2)&#123;</span><br><span class="line">            var result &#x3D; this.read(bytearry,int1,int2);</span><br><span class="line">            console.log(&quot;HTTP read result,bytearry,int1,int2&#x3D;&gt;&quot;,result,bytearry,int1,int2)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;bytearray contents&#x3D;&gt;&quot;, ByteString.of(bytearry).hex())</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function hook_SSLsocketandroid8()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;hook_SSLsocket&quot;)</span><br><span class="line">        </span><br><span class="line">        Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream&quot;).write.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function(bytearry,int1,int2)&#123;</span><br><span class="line">            var result &#x3D; this.write(bytearry,int1,int2);</span><br><span class="line">            console.log(&quot;HTTPS write result,bytearry,int1,int2&#x3D;&gt;&quot;,result,bytearry,int1,int2)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;bytearray contents&#x3D;&gt;&quot;, ByteString.of(bytearry).hex())</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream&quot;).read.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function(bytearry,int1,int2)&#123;</span><br><span class="line">            var result &#x3D; this.read(bytearry,int1,int2);</span><br><span class="line">            console.log(&quot;HTTPS read result,bytearry,int1,int2&#x3D;&gt;&quot;,result,bytearry,int1,int2)</span><br><span class="line">            var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            console.log(&quot;bytearray contents&#x3D;&gt;&quot;, ByteString.of(bytearry).hex())</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function hook_SSLsocket2android10()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot; hook_SSLsocket2&quot;)</span><br><span class="line">        var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">        Java.use(&quot;com.android.org.conscrypt.NativeCrypto&quot;).SSL_write.implementation &#x3D; function(long,NS,fd,NC,bytearray,int1,int2,int3)&#123;</span><br><span class="line">            var result &#x3D; this .SSL_write(long,NS,fd,NC,bytearray,int1,int2,int3);</span><br><span class="line">            console.log(&quot;SSL_write(long,NS,fd,NC,bytearray,int1,int2,int3),result&#x3D;&gt;&quot;,long,NS,fd,NC,bytearray,int1,int2,int3,result)</span><br><span class="line">            console.log(ByteString.of(bytearray).hex());</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        Java.use(&quot;com.android.org.conscrypt.NativeCrypto&quot;).SSL_read.implementation &#x3D; function(long,NS,fd,NC,bytearray,int1,int2,int3)&#123;</span><br><span class="line">            var result &#x3D; this .SSL_read(long,NS,fd,NC,bytearray,int1,int2,int3);</span><br><span class="line">            console.log(&quot;SSL_read(long,NS,fd,NC,bytearray,int1,int2,int3),result&#x3D;&gt;&quot;,long,NS,fd,NC,bytearray,int1,int2,int3,result)</span><br><span class="line">            console.log(ByteString.of(bytearray).hex());</span><br><span class="line">            return result;</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(&quot;Main&quot;)</span><br><span class="line">    hook_socket();</span><br><span class="line">    hook_SSLsocketandroid8();</span><br><span class="line">    &#x2F;&#x2F;hook_SSLsocket2android10();</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><code>frida -UF -l hookSocket.js</code>  使用<code>git clone https://github.com/peiniwan/Ganhuo.git</code>  编译源码编译安装GanHuo.apk查看代码家栏,通过010Editor获取转换后的Unicode码，即为抓包结果</p><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/hookSocket.png" alt="hook Socket"></p><h1 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h1><p>虚拟机网卡切换为桥接模式:192.168.0.104</p><p><strong>server</strong></p><p>wget <a href="https://github.com/gotify/server/releases/download/v2.0.20/gotify-linux-amd64.zip" target="_blank" rel="noopener">https://github.com/gotify/server/releases/download/v2.0.20/gotify-linux-amd64.zip</a></p><p>unzip gotify-linux-amd64.zip</p><p>chmod +x gotify-linux-amd64</p><p>./gotify-linux-amd64</p><p><strong>client</strong></p><p>adb install <a href="https://github.com/gotify/android/releases/download/v2.1.0/Gotify.apk" target="_blank" rel="noopener">Gotify.apk</a></p><p>输入server地址<a href="http://192.168.0.104/" target="_blank" rel="noopener">http://192.168.0.104</a> admin/admin</p><p><strong>cli</strong></p><p>wget -O gotify <a href="https://github.com/gotify/cli/releases/download/v1.2.0/gotify-cli-linux-amd64" target="_blank" rel="noopener">https://github.com/gotify/cli/releases/download/v1.2.0/gotify-cli-linux-amd64</a></p><p>chmod +x gotify</p><p>mv gotify /usr/bin/gotify</p><p>gotify init</p><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/gotify.png" alt="gotify"></p><p>gotify push -t “my title” -p 10 “my message”   服务器向手机发送消息</p><h2 id="hook-okhttp3-logging"><a href="#hook-okhttp3-logging" class="headerlink" title="hook_okhttp3_logging"></a>hook_okhttp3_logging</h2><p>添加十六进制转换，在控制台中以字符串显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function jhexdump(array) &#123;</span><br><span class="line">    var ptr &#x3D; Memory.alloc(array.length);</span><br><span class="line">    for(var i &#x3D; 0; i &lt; array.length; ++i)</span><br><span class="line">        Memory.writeS8(ptr.add(i), array[i]);</span><br><span class="line">    console.log(hexdump(ptr, &#123; offset: 0, length: array.length, header: false, ansi: false &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用console.log(jhexdump(bytearry))替换console.log(“bytearray contents=&gt;”, ByteString.of(bytearry).hex())</p><p>frida -UF -l hookSocket.js  使用socket自吐依旧可以通杀抓包</p><p>pm list packages|grep -i gotify  获取包名</p><p>frida -U -f com.github.gotify -l hookSocket.js –no-pause -o gotify.log</p><p>objection -g com.github.gotify explore</p><p>android hooking search classes websocket  查找内存中和websocket相关的类很少，可以通过android hooking watch class * ,存入websocket.txt文件批量hook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.github.gotify explore -c ~&#x2F;Desktop&#x2F;gotify&#x2F;websocket.txt</span><br><span class="line">plugin wallbreaker objectsearch com.github.gotify.client.model.Message  获取内存中的Message对象</span><br><span class="line">pluginwallbreaker objectdump --fullname 0x2576  获取该对象中字段在内存中的内容</span><br></pre></td></tr></table></figure><p>android hooking search classes websocket  发现<code>okhttp3.WebSocket</code>,通过hook_okhttp3_logging脚本进行hook抓包<code>frida -U -f com.github.gotify -l hookOkhttp3.js --no-pause</code>，logcat|grep okhttpGET 查看可以抓到ok3的websocket包</p><p>android hooking search classes com.xabber.xmpp.smack  基于xmpp协议聊天软件xabber搜索包名并批量hook</p><p>android hooking watch class_method java.lang.String.toString –dump-args -dump-backtrace –dump-return</p><h2 id="hookWebSocket"><a href="#hookWebSocket" class="headerlink" title="hookWebSocket"></a>hookWebSocket</h2><p>vim hookWebSocket.js  综合基于hook和枚举的方式抓包websocket</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">function hook_okhttp3() &#123;</span><br><span class="line">    &#x2F;&#x2F; 1. frida Hook java层的代码必须包裹在Java.perform中，Java.perform会将Hook Java相关API准备就绪。</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        Java.openClassFile(&quot;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;okhttp3logging.dex.dex&quot;).load();</span><br><span class="line">        &#x2F;&#x2F; 只修改了这一句，换句话说，只是使用不同的拦截器对象。</span><br><span class="line">        var MyInterceptor &#x3D; Java.use(&quot;com.roysue.octolesson2ok3.okhttp3Logging&quot;);</span><br><span class="line"></span><br><span class="line">        var MyInterceptorObj &#x3D; MyInterceptor.$new();</span><br><span class="line">        var Builder &#x3D; Java.use(&quot;okhttp3.OkHttpClient$Builder&quot;);</span><br><span class="line">        console.log(Builder);</span><br><span class="line">        Builder.build.implementation &#x3D; function () &#123;</span><br><span class="line">            this.networkInterceptors().add(MyInterceptorObj);</span><br><span class="line">            console.log(&quot;hook Build.build successfully !&quot;)</span><br><span class="line">            return this.build();</span><br><span class="line">        &#125;;</span><br><span class="line">        console.log(&quot;hooking_okhttp3...&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function EnumerateClient()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        &#x2F;&#x2F;Java.openClassFile(&quot;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;r0gson.dex&quot;).load();</span><br><span class="line">        &#x2F;&#x2F;const gson &#x3D; Java.use(&#39;com.r0ysue.gson.Gson&#39;);</span><br><span class="line">        var gson2 &#x3D; Java.use(&#39;com.google.gson.Gson&#39;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 加载包含CurlInterceptor拦截器的DEX</span><br><span class="line">        Java.openClassFile(&quot;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;myok2curl.dex&quot;).load();</span><br><span class="line">        console.log(&quot;loading dex successful!&quot;)</span><br><span class="line">        const curlInterceptor &#x3D;  Java.use(&quot;com.moczul.ok2curl.CurlInterceptor&quot;);</span><br><span class="line">        const loggable &#x3D; Java.use(&quot;com.moczul.ok2curl.logger.Loggable&quot;);</span><br><span class="line">        var Log &#x3D; Java.use(&quot;android.util.Log&quot;);</span><br><span class="line">        var TAG &#x3D; &quot;okhttpGETcurl&quot;;</span><br><span class="line">        &#x2F;&#x2F;注册类————一个实现了所需接口的类</span><br><span class="line">        var MyLogClass &#x3D; Java.registerClass(&#123;</span><br><span class="line">            name: &quot;okhttp3.MyLogClass&quot;,</span><br><span class="line">            implements: [loggable],</span><br><span class="line">            methods: &#123;</span><br><span class="line">                log: function (MyMessage) &#123;</span><br><span class="line">                    Log.v(TAG, MyMessage);</span><br><span class="line">                &#125;&#125;</span><br><span class="line">        &#125;);        </span><br><span class="line">        const mylog &#x3D; MyLogClass.$new();</span><br><span class="line">        &#x2F;&#x2F; 得到所需拦截器对象</span><br><span class="line">        var curlInter &#x3D; curlInterceptor.$new(mylog);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 加载包含logging-interceptor拦截器的DEX</span><br><span class="line">        Java.openClassFile(&quot;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;okhttplogging.dex&quot;).load();</span><br><span class="line">        var MyInterceptor &#x3D; Java.use(&quot;com.r0ysue.learnokhttp.okhttp3Logging&quot;);</span><br><span class="line">        var MyInterceptorObj &#x3D; MyInterceptor.$new();        </span><br><span class="line"></span><br><span class="line">        Java.choose(&quot;okhttp3.OkHttpClient&quot;,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                console.log(&quot;1. found instance:&quot;,instance)</span><br><span class="line">                console.log(&quot;2. instance.interceptors():&quot;,instance.interceptors().$className)</span><br><span class="line">                console.log(&quot;3. instance._interceptors:&quot;,instance._interceptors.value.$className)</span><br><span class="line">                &#x2F;&#x2F;console.log(&quot;4. interceptors:&quot;,gson2.$new().toJson(instance.interceptors())) </span><br><span class="line">                console.log(&quot;5. interceptors:&quot;,Java.use(&quot;java.util.Arrays&quot;).toString(instance.interceptors().toArray()))</span><br><span class="line">                var newInter &#x3D; Java.use(&quot;java.util.ArrayList&quot;).$new();</span><br><span class="line">                newInter.addAll(instance.interceptors());</span><br><span class="line">                console.log(&quot;6. interceptors:&quot;,Java.use(&quot;java.util.Arrays&quot;).toString(newInter.toArray()));</span><br><span class="line">                console.log(&quot;7. interceptors:&quot;,newInter.$className);</span><br><span class="line">                newInter.add(MyInterceptorObj);</span><br><span class="line">                newInter.add(curlInter);</span><br><span class="line">                instance._interceptors.value &#x3D; newInter;</span><br><span class="line">                </span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&quot;Search complete!&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    hook_okhttp3();</span><br><span class="line">    EnumerateClient();    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h2 id="OkHttpLogger-Frida"><a href="#OkHttpLogger-Frida" class="headerlink" title="OkHttpLogger-Frida"></a>OkHttpLogger-Frida</h2><p>frida -UF -l <a href="https://github.com/siyujie/OkHttpLogger-Frida.git" target="_blank" rel="noopener">OkHttpLogger-Frida</a>/okhttp_poker.js  抓包websocket</p><h1 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a><a href="https://zhuanlan.zhihu.com/p/60246563" target="_blank" rel="noopener">Protobuf</a></h1><p>直播/弹幕协议<code>Protobuf</code>逆向分析，<a href="https://zhuanlan.zhihu.com/p/60246563" target="_blank" rel="noopener">手把手教你使用ProtoBuf，通过gRPC服务在Android上进行网络请求</a></p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>192.168.0.102</p><p><a href="https://grpc.io/docs/platforms/android/java/quickstart/" target="_blank" rel="noopener">官方教程</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service      </span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line">setenforce 0</span><br><span class="line">/etc/selinux/config 修改为SELINUX=disabled</span><br><span class="line">tar -zxvf jdk-8u60-linux-x64.tar.gz</span><br><span class="line">mv jdk1.8.0_60/ /usr/<span class="built_in">local</span>/</span><br><span class="line">tar -zxf apache-maven-3.6.3-bin.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line">vim /etc/profile</span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_60</span><br><span class="line">JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">MAVEN_HOME=/usr/<span class="built_in">local</span>/apache-maven-3.6.3</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin::<span class="variable">$MAVEN_HOME</span>/bin</span><br><span class="line">CLASSPATH=:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib/dt.jar</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH MAVEN_HOME</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">git <span class="built_in">clone</span> -b v1.36.1 https://github.com/grpc/grpc-java</span><br><span class="line">git checkout -b v1.32.1   避免无法连接国外仓库gg</span><br><span class="line"><span class="built_in">cd</span> grpc-java/examples</span><br><span class="line">./gradlew installDist</span><br><span class="line">./build/install/examples/bin/hello-world-server  启动server端口在50051</span><br><span class="line">./build/install/examples/bin/hello-world-client  通过HelloRequest发送Hello World</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>192.168.0.104</p><p>git clone  <a href="https://github.com/xuexiangjys/Protobuf-gRPC-Android.git" target="_blank" rel="noopener">https://github.com/xuexiangjys/Protobuf-gRPC-Android.git</a> ，其中helloworld.proto通过<a href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener">protoc</a>编译生成HelloReply.java</p><blockquote><p>手动编译，idea中安装GenProtobuf将binary进行encode和decode</p><p>wget <a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.13.0/protoc-3.13.0-linux-x86_64.zip" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf/releases/download/v3.13.0/protoc-3.13.0-linux-x86_64.zip</a></p><p>unzip protoc-3.13.0-linux-x86_64.zip</p><p>as-Tools-Configure GenProtobuf</p><p>右键hellooworld.proto点击quick gen protobuf here 实现手动编译，生成的编译代码使用了大量的google的protobuf基础库</p></blockquote><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/protoc.png" alt="protoc"></p><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/protoc%E6%8C%87%E5%AE%9A%E7%BC%96%E8%AF%91%E8%AF%AD%E8%A8%80.png" alt="protoc指定编译语言"></p><p>安装启动Protobuf-gRPC-Android，保证服务端和客户端互相ping通，可以通过<code>nc 192.168.0.102 50052</code> 给服务端发送数据，服务端使用<code>nc -l 50052</code>接收，如果互通消息就可以收到，否则使用NPS将服务端的50051端口服务映射到指定服务器ip的指定端口(需要在服务端安装nps客户端，在nps服务端配置该nps客户端)。</p><p>如果没有响应，<code>ps -ef|grep protobuf</code> 获取到进程id后，<code>logcat|grep -i 22916</code> 查看log，退出重进gRPC-普通请求按钮，输入服务端ip，端口及内容发送请求。</p><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/grpc%E6%99%AE%E9%80%9A%E8%AF%B7%E6%B1%82%E6%88%90%E5%8A%9F.png" alt="grpc普通请求成功"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">ps -ef|grep protobuf  获取包名</span><br><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs128arm64 启动frida server</span><br><span class="line">pyenv local 3.8.0</span><br><span class="line">objection -g com.xuexiang.protobufdemo explore</span><br><span class="line">android hooking search classes protobuf  将打印出的类前面加上android hooking watch class,存入hook_list.txt</span><br><span class="line">objection -g com.xuexiang.protobufdemo explore -c &#x2F;root&#x2F;Desktop&#x2F;hook_list.txt  实现批量hook，点击发送请求，从请求找寻找调用到的protobuf类相关方法</span><br></pre></td></tr></table></figure><p>关注打印出来的几个函数：</p><p>com.google.protobuf.WireFormat.makeTag<br>com.google.protobuf.CodedOutputStream$OutputStreamEncoder.write([B, int, int)<br>com.google.protobuf.CodedInputStream.readTag()<br>com.google.protobuf.WireFormat.getTagFieldNumber(int)<br>com.google.protobuf.Utf8.encode(java.lang.CharSequence, [B, int, int)<br>com.google.protobuf.CodedInputStream.newInstance([B, int, int, boolean)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method com.google.protobuf.Utf8.encode --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/hookencode.png" alt="hookencode"></p><p>同理，makeTag的调用栈也是从用户代码中的writeTo调用而来。</p><p>frida -UF -l hookSocket.js -o protobuf.txt  通杀自吐打印出protubuf的包数据</p><p><img src="/2021/03/14/Socket&Websocket&Protobuf%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/hookSocketProtobuf.png" alt="hookSocketProtobuf"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch com.xuexiang.protobufdemo.HelloReply</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x22ea  内存漫游的源码</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://bbs.pediy.com/thread-259273.htm" target="_blank" rel="noopener">Protobuf协议逆向和仿真&amp;举个栗子</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/gMhztldG-0Xy_euX1wpZbw" target="_blank" rel="noopener">抓包+逆向app分析protobuf</a></p></li><li><p><a href="https://bbs.pediy.com/thread-262207.htm" target="_blank" rel="noopener">-Protobuf协议解析文档-某音弹幕</a></p></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
            <tag> WebSocket </tag>
            
            <tag> Protobuf </tag>
            
            <tag> XMPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Cloud-Alibaba</title>
      <link href="/2021/03/11/Spring-Cloud-Alibaba/"/>
      <url>/2021/03/11/Spring-Cloud-Alibaba/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="SpringCloudAlibaba"><a href="#SpringCloudAlibaba" class="headerlink" title="SpringCloudAlibaba"></a>SpringCloudAlibaba</h1><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><ul><li>Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li><li>Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li>RocketMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</li><li>Dubbo：Apache Dubbo™ 是一款高性能 Java RPC 框架。</li><li>Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li>Alibaba Cloud ACM：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</li><li>Alibaba Cloud OSS: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li>Alibaba Cloud SchedulerX: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</li><li>Alibaba Cloud SMS: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><p><a href="https://download.virtualbox.org/virtualbox/6.1.18/VirtualBox-6.1.18-142142-Win.exe" target="_blank" rel="noopener">安装virtualbox 6</a></p><p><a href="https://releases.hashicorp.com/vagrant/2.2.14/vagrant_2.2.14_x86_64.msi" target="_blank" rel="noopener">vagrant</a>安装好后进入<a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">镜像仓库</a>搜索需要安装的镜像</p><p><code>mkdir centos7 &amp;&amp; vagrant init centos/7 &amp;&amp; vagrant up &amp;&amp; vagrant ssh</code>  创建并开启镜像，修改网络桥接</p><blockquote><p>如果太慢，进入<a href="https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box" target="_blank" rel="noopener">centos/7</a>仓库下载，手动加载<code>vagrant box add centos/7 CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box</code></p></blockquote><p>vim Vagrantfile  修改配置并重启<code>vagrant reload</code>，保存虚拟机与主机可ping通，<code>sudo passwd root </code>设置root权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># config.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.10&quot;  host-only</span><br><span class="line">config.vm.network &quot;public_network&quot;  桥接</span><br></pre></td></tr></table></figure><p>安装<a href="https://npm.taobao.org/mirrors/node/v10.15.3/node-v10.15.3-x64.msi" target="_blank" rel="noopener">nodejs</a>并配置淘宝源<code>npm config set registry http://registry.npm.taobao.org/</code></p><p><strong><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">安装docker</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo docker images</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">镜像加速器</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;3gki6pei.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p><strong>mysql</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysal \</span><br><span class="line">-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;root \</span><br><span class="line">-d mysql:5.7</span><br><span class="line">docker exec -it mysql &#x2F;bin&#x2F;bash</span><br><span class="line">mysql -uroot -proot</span><br><span class="line">use mysql;</span><br><span class="line">alter user &#39;root&#39;@&#39;%&#39; identified with mysql_native_password by &#39;root&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>vi /mydata/mysql/conf/my.cnf   修改编码配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect&#x3D;&#39;SET collation_connection &#x3D; utf8_unicode_ci&#39;</span><br><span class="line">init_connect&#x3D;&#39;SET NAMES utf8&#39;</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">collation-server&#x3D;utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><p>docker restart mysql &amp;&amp; cat /etc/mysql/my.cnf  &amp;&amp; docker update mysql –restart=always</p><p><strong>redis</strong></p><p>vi /mydata/redis/conf/redis.conf  配置<code>appendonly yes</code>持久化硬盘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -v &#x2F;mydata&#x2F;redis&#x2F;data:&#x2F;data \</span><br><span class="line">-v &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \</span><br><span class="line">-d redis:3.2 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf --appendonly yes</span><br><span class="line">docker exec -it redis redis-cli</span><br><span class="line">docker update redis --restart&#x3D;always</span><br></pre></td></tr></table></figure><p><strong>maven</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;nexus-aliyun&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;Nexus aliyun&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt; </span><br><span class="line">&lt;profile&gt;    </span><br><span class="line">    &lt;id&gt;jdk18&lt;&#x2F;id&gt;    </span><br><span class="line">    &lt;activation&gt;    </span><br><span class="line">        &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;    </span><br><span class="line">        &lt;jdk&gt;1.8&lt;&#x2F;jdk&gt;    </span><br><span class="line">    &lt;&#x2F;activation&gt;    </span><br><span class="line">    &lt;properties&gt;    </span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;    </span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;    </span><br><span class="line">        &lt;maven.compiler.compilerVersion&gt;1.8&lt;&#x2F;maven.compiler.compilerVersion&gt;    </span><br><span class="line">    &lt;&#x2F;properties&gt;     </span><br><span class="line">&lt;&#x2F;profile&gt;</span><br></pre></td></tr></table></figure><p>idea安装lombok，mybatisX插件</p><p>vscode安装Auto Close Tag,Auto Rename Tag,Chinese,Eslint,HTML CSS Support,HTML Snippets,JavaScript(ES6),Live Server,open in browser,Vetur,Vue 2 Snippets插件</p><p>git配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot; &#x2F;&#x2F;（名字） # 配置邮箱</span><br><span class="line">git config --global user.email &quot;username@email.com&quot; &#x2F;&#x2F;(注册账号时用的邮箱)</span><br><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;   进入git bash生成公私钥</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br><span class="line">ssh -T git@gitee.com 测试是否成功即可</span><br></pre></td></tr></table></figure><h1 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h1><p>新建Spring Initializr作为provider项目jdk1.8并导入Web中的Spring Web和Spring Cloud Routing的OpenFeign组件，设置-Xmx100m  启动Application使用最大内存</p><p>启动<a href="https://github.com/alibaba/nacos/releases/download/1.3.1/nacos-server-1.3.1.zip" target="_blank" rel="noopener">nacos-server-1.3.1.zip</a>访问<a href="http://127.0.0.1:8848/nacos/" target="_blank" rel="noopener">nacos</a></p><p>修改依赖如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.8.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;spring-cloud.version&gt;Greenwich.SR3&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">    &lt;spring-cloud-alibaba.version&gt;2.1.0.RELEASE&lt;&#x2F;spring-cloud-alibaba.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring-cloud-alibaba.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>添加application.yml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: provider</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">server:</span><br><span class="line">  port: 8000</span><br></pre></td></tr></table></figure><p>ProviderApplication启动类添加<code>@EnableDiscoveryClient</code>,启动后在<a href="http://127.0.0.1:8848/nacos" target="_blank" rel="noopener">nacos控制台</a>查看已经上线的服务</p><h1 id="Nacos配置中心"><a href="#Nacos配置中心" class="headerlink" title="Nacos配置中心"></a>Nacos配置中心</h1><h2 id="默认配置读取"><a href="#默认配置读取" class="headerlink" title="默认配置读取"></a>默认配置读取</h2><p>application.properties添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.name&#x3D;onejane</span><br><span class="line">user.age&#x3D;20</span><br></pre></td></tr></table></figure><p>Controller实现读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;test&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Value(&quot;$&#123;user.name&#125;&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;$&#123;user.age&#125;&quot;)</span><br><span class="line">    private Integer age;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        System.out.println(name+&quot;:&quot;+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nacos配置"><a href="#Nacos配置" class="headerlink" title="Nacos配置"></a>Nacos配置</h2><p>项目添加config依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>Provider项目创建bootstrap.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;provider</span><br><span class="line">spring.cloud.nacos.config.server-addr&#x3D;127.0.0.1:8848</span><br></pre></td></tr></table></figure><p>Nacos中配置provider.properties，默认规则，取public命名空间的应用名.properties，类型为Properties，相同与application.properties时优先使用配置中心的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.name&#x3D;onejane1</span><br><span class="line">user.age&#x3D;23</span><br></pre></td></tr></table></figure><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p>配置命名空间provider，命名空间ID为f7d49148-09a8-4ca1-8a40-c52e9cb627b5，在该命名空间下配置provider.properties，Group为prod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.name&#x3D;onejane2</span><br><span class="line">user.age&#x3D;23</span><br></pre></td></tr></table></figure><p>配置bootstrap.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;provider</span><br><span class="line">spring.cloud.nacos.config.server-addr&#x3D;127.0.0.1:8848</span><br><span class="line">spring.cloud.nacos.config.namespace&#x3D;f7d49148-09a8-4ca1-8a40-c52e9cb627b5</span><br><span class="line">spring.cloud.nacos.config.group&#x3D;prod</span><br></pre></td></tr></table></figure><blockquote><p>命名空间，用于配置隔离，默认新增的所有配置都在public空间。</p><p>1、开发，测试，生产：利用命名空间来做环境隔离。在bootstrap.properties；配置spring.cloud.nacos.config.namespace需要使用哪个命名空间下的配置</p><p>2、每一个微服务之间互相隔离配置，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置</p></blockquote><p>每个微服务创建自己的命名空间，使用配置分组区分环境，dev，test，prod</p><h3 id="多文件配置"><a href="#多文件配置" class="headerlink" title="多文件配置"></a>多文件配置</h3><p>在Nacos中provider微服务命名空间配置datasource.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;172.20.1.185:3306&#x2F;user</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>配置mybatis.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath:&#x2F;mapper&#x2F;**&#x2F;*.xml</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      id-type: auto</span><br></pre></td></tr></table></figure><p>配置service.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: provider</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848 </span><br><span class="line">server:</span><br><span class="line">  port: 7000</span><br></pre></td></tr></table></figure><p>注释application.yml中所有配置并在bootstrap.properties中实现多文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;provider</span><br><span class="line"></span><br><span class="line">spring.cloud.nacos.config.server-addr&#x3D;127.0.0.1:8848</span><br><span class="line">spring.cloud.nacos.config.namespace&#x3D;f7d49148-09a8-4ca1-8a40-c52e9cb627b5</span><br><span class="line">spring.cloud.nacos.config.group&#x3D;prod</span><br><span class="line"></span><br><span class="line">spring.cloud.nacos.config.ext-config[0].data-id&#x3D;datasource.yml</span><br><span class="line">spring.cloud.nacos.config.ext-config[0].group&#x3D;dev</span><br><span class="line">spring.cloud.nacos.config.ext-config[0].refresh&#x3D;true</span><br><span class="line"></span><br><span class="line">spring.cloud.nacos.config.ext-config[1].data-id&#x3D;mybatis.yml</span><br><span class="line">spring.cloud.nacos.config.ext-config[1].group&#x3D;dev</span><br><span class="line">spring.cloud.nacos.config.ext-config[1].refresh&#x3D;true</span><br><span class="line"></span><br><span class="line">spring.cloud.nacos.config.ext-config[2].data-id&#x3D;other.yml</span><br><span class="line">spring.cloud.nacos.config.ext-config[2].group&#x3D;dev</span><br><span class="line">spring.cloud.nacos.config.ext-config[2].refresh&#x3D;true</span><br></pre></td></tr></table></figure><h1 id="Mybatis-Plus持久化"><a href="#Mybatis-Plus持久化" class="headerlink" title="Mybatis-Plus持久化"></a>Mybatis-Plus持久化</h1><p>引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.17&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.18.8&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>配置数据源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;172.20.1.185:3306&#x2F;user</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">  jackson:</span><br><span class="line">    date-format: yyyy-MM-dd HH:mm:ss  # 输出日期自动转换</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath:&#x2F;mapper&#x2F;**&#x2F;*.xml</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      id-type: auto</span><br><span class="line">      logic-delete-value: 1  # 逻辑删除</span><br><span class="line">      logic-not-delete-value: 0</span><br></pre></td></tr></table></figure><p>配置扫描包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@MapperScan(&quot;com.onejane.demo.provider.dao&quot;)</span><br></pre></td></tr></table></figure><p>添加实体类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@TableName(&quot;user_info&quot;)</span><br><span class="line">public class UserInfoEntity implements Serializable &#123;</span><br><span class="line">private static final long serialVersionUID &#x3D; 1L;</span><br><span class="line"></span><br><span class="line">@TableId</span><br><span class="line">private Long id;</span><br><span class="line">private String name;</span><br><span class="line">private Long age;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 是否显示[0-不显示，1显示]  用于逻辑删除</span><br><span class="line"> *&#x2F;</span><br><span class="line">@TableLogic(value &#x3D; &quot;1&quot;,delval &#x3D; &quot;0&quot;)</span><br><span class="line">private Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑删除实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">UserInfoSerivce userInfoSerivce;</span><br><span class="line">@RequestMapping(&quot;&#x2F;delete&quot;)</span><br><span class="line">public R delete(Long[] ids)&#123;</span><br><span class="line">    userInfoSerivce.removeByIds(Arrays.asList(ids));</span><br><span class="line">    return R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页查询实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public interface UserInfoSerivce extends IService&lt;UserInfoEntity&gt; &#123;</span><br><span class="line">    PageUtils queryPage(Map&lt;String, Object&gt; params);</span><br><span class="line">&#125;</span><br><span class="line">@Service(&quot;userInfoService&quot;)</span><br><span class="line">public class UserInfoServiceImpl extends ServiceImpl&lt;UserInfoDao, UserInfoEntity&gt; implements UserInfoSerivce &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public PageUtils queryPage(Map&lt;String, Object&gt; params) &#123;</span><br><span class="line">        IPage&lt;UserInfoEntity&gt; page &#x3D; this.page(</span><br><span class="line">                new Query&lt;UserInfoEntity&gt;().getPage(params),</span><br><span class="line">                new QueryWrapper&lt;UserInfoEntity&gt;()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        return new PageUtils(page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(&quot;&#x2F;list&quot;)</span><br><span class="line">public R list(@RequestParam Map&lt;String, Object&gt; params)&#123;</span><br><span class="line">    PageUtils page &#x3D; userInfoSerivce.queryPage(params);</span><br><span class="line">    return R.ok().put(&quot;page&quot;, page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableTransactionManagement &#x2F;&#x2F;开启事务</span><br><span class="line">@MapperScan(&quot;com.onejane.demo.provider.dao&quot;)</span><br><span class="line">public class MyBatisConfig &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;引入分页插件</span><br><span class="line">    @Bean</span><br><span class="line">    public PaginationInterceptor paginationInterceptor() &#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor &#x3D; new PaginationInterceptor();</span><br><span class="line">        &#x2F;&#x2F; 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span><br><span class="line">         paginationInterceptor.setOverflow(true);</span><br><span class="line">        &#x2F;&#x2F; 设置最大单页限制数量，默认 500 条，-1 不受限制</span><br><span class="line">        paginationInterceptor.setLimit(1000);</span><br><span class="line">        return paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Feign远程调用"><a href="#Feign远程调用" class="headerlink" title="Feign远程调用"></a>Feign远程调用</h1><p>新建Spring Initializr作为consumer项目jdk1.8并导入Web中的Spring Web和Spring Cloud Routing的OpenFeign组件，设置-Xmx100m  启动Application使用最大内存</p><p>provider提供api，启动类配置@EnableDiscoveryClient后启动应用</p><p>consumer中引入nacos依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.8.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;spring-cloud.version&gt;Greenwich.SR3&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">    &lt;spring-cloud-alibaba.version&gt;2.1.0.RELEASE&lt;&#x2F;spring-cloud-alibaba.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring-cloud-alibaba.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>Member作为consumer获取feign调用，定义feign方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(&quot;provider&quot;)</span><br><span class="line">public interface ProviderFeignService &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;test&#x2F;list&quot;)</span><br><span class="line">    public void test();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>consumer在控制器中申请远程调用，并在启动类中开启feign调用<code>@EnableFeignClients(basePackages = &quot;com.onejane.demo.consumer.feign&quot;)</code>并将consumer加入nacos注册中心<code>@EnableDiscoveryClient</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(&quot;provider&quot;)</span><br><span class="line">public interface ProviderFeignService &#123;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;test&#x2F;user&quot;)</span><br><span class="line">    public void test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在application.yml中配置nacos</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">  application:</span><br><span class="line">    name: consumer</span><br><span class="line">server:</span><br><span class="line">  port: 7000</span><br></pre></td></tr></table></figure><p>开启feign远程调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;test&quot;)</span><br><span class="line">public class UserInfoController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    ProviderFeignService providerFeignService;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        providerFeignService.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gateway网关"><a href="#Gateway网关" class="headerlink" title="Gateway网关"></a>Gateway网关</h1><p>修改provider项目新增<code>server.servlet.context-path: /provider</code></p><p>新建Spring Initializr作为网关项目项目jdk1.8并导入Spring Cloud Routing的Gateway组件</p><p>pom依赖修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.8.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;spring-cloud.version&gt;Greenwich.SR3&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure><p>application.properties添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.nacos.discovery.server-addr&#x3D;127.0.0.1:8848</span><br><span class="line">spring.application.name&#x3D;gateway</span><br><span class="line">server.port&#x3D;88</span><br></pre></td></tr></table></figure><p>在nacos中配置微服务命名空间gateway,ID为7601cb5a-a9dd-43d8-a1b9-a37952674df2，添加配置文件gateway.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">        name: gateway</span><br></pre></td></tr></table></figure><p>bootstrap.properties配置命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;gateway</span><br><span class="line">spring.cloud.nacos.config.server-addr&#x3D;127.0.0.1:8848</span><br><span class="line">spring.cloud.nacos.config.namespace&#x3D;7601cb5a-a9dd-43d8-a1b9-a37952674df2</span><br></pre></td></tr></table></figure><p>application.yml中添加网关配置，访问<a href="http://localhost:88/?url=qq" target="_blank" rel="noopener">http://localhost:88/?url=qq</a> 则跳转到<a href="https://www.qq.com/?url=qq%EF%BC%8C" target="_blank" rel="noopener">https://www.qq.com?url=qq，</a> 访问<a href="http://localhost:88/?url=baidu" target="_blank" rel="noopener">http://localhost:88/?url=baidu</a> 则跳转到<a href="https://www.baidu.com/?url=baidu" target="_blank" rel="noopener">https://www.baidu.com?url=baidu</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: test_route</span><br><span class="line">          uri: https:&#x2F;&#x2F;www.baidu.com</span><br><span class="line">          predicates:</span><br><span class="line">            - Query&#x3D;url,baidu</span><br><span class="line"></span><br><span class="line">        - id: qq_route</span><br><span class="line">          uri: https:&#x2F;&#x2F;www.qq.com</span><br><span class="line">          predicates:</span><br><span class="line">            - Query&#x3D;url,qq</span><br><span class="line">        - id: provider_route</span><br><span class="line">          uri: lb:&#x2F;&#x2F;provider</span><br><span class="line">          predicates:</span><br><span class="line">            - Path&#x3D;&#x2F;api&#x2F;provider&#x2F;**</span><br><span class="line">          filters:</span><br><span class="line">            - RewritePath&#x3D;&#x2F;api&#x2F;(?&lt;segment&gt;.*),&#x2F;$\&#123;segment&#125;</span><br><span class="line">  application:</span><br><span class="line">    name: gateway</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># http:&#x2F;&#x2F;localhost:88&#x2F;api&#x2F;provider&#x2F;test&#x2F;user &#x3D;&#x3D;&gt; http:&#x2F;&#x2F;localhost:8000&#x2F;provider&#x2F;test&#x2F;user</span><br></pre></td></tr></table></figure><p>在启动类中配置@EnableDiscoveryClient，并过滤掉数据库配置@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class GulimallCorsConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public CorsWebFilter corsWebFilter()&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source &#x3D; new UrlBasedCorsConfigurationSource();</span><br><span class="line"></span><br><span class="line">        CorsConfiguration corsConfiguration &#x3D; new CorsConfiguration();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;1、配置跨域</span><br><span class="line">        corsConfiguration.addAllowedHeader(&quot;*&quot;);</span><br><span class="line">        corsConfiguration.addAllowedMethod(&quot;*&quot;);</span><br><span class="line">        corsConfiguration.addAllowedOrigin(&quot;*&quot;);</span><br><span class="line">        corsConfiguration.setAllowCredentials(true);</span><br><span class="line"></span><br><span class="line">        source.registerCorsConfiguration(&quot;&#x2F;**&quot;,corsConfiguration);</span><br><span class="line">        return new CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阿里云oss"><a href="#阿里云oss" class="headerlink" title="阿里云oss"></a>阿里云oss</h1><p>引入阿里云oss依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alicloud-oss&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>application.yml配置阿里云AccessKey</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    alicloud:</span><br><span class="line">      access-key: ***</span><br><span class="line">      secret-key: ***</span><br><span class="line">      oss:</span><br><span class="line">        endpoint: oss-cn-beijing.aliyuncs.com</span><br><span class="line">        bucket: onejane-opencv</span><br></pre></td></tr></table></figure><p>上传图片一般先通过服务端签名后前端直传</p><p><img src="/2021/03/11/Spring-Cloud-Alibaba/%E9%98%BF%E9%87%8C%E4%BA%91oss.png" alt="阿里云oss"></p><h1 id="JSR303"><a href="#JSR303" class="headerlink" title="JSR303"></a>JSR303</h1><p>通过自定义校验，分组校验及全局校验实现对Spring MVC入参的参数校验。</p><p>加入validation依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.validation&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;validation-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1.Final&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>加入校验注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 品牌id</span><br><span class="line"> *&#x2F;</span><br><span class="line">@NotNull(message &#x3D; &quot;修改必须指定品牌id&quot;,groups &#x3D; &#123;UpdateGroup.class&#125;)</span><br><span class="line">@Null(message &#x3D; &quot;新增不能指定id&quot;,groups &#x3D; &#123;AddGroup.class&#125;)</span><br><span class="line">@TableId</span><br><span class="line">private Long brandId;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 品牌名</span><br><span class="line"> *&#x2F;</span><br><span class="line">@NotBlank(message &#x3D; &quot;品牌名必须提交&quot;,groups &#x3D; &#123;AddGroup.class,UpdateGroup.class&#125;)</span><br><span class="line">private String name;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 品牌logo地址</span><br><span class="line"> *&#x2F;</span><br><span class="line">@NotBlank(groups &#x3D; &#123;AddGroup.class&#125;)</span><br><span class="line">@URL(message &#x3D; &quot;logo必须是一个合法的url地址&quot;,groups&#x3D;&#123;AddGroup.class,UpdateGroup.class&#125;)</span><br><span class="line">private String logo;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 介绍</span><br><span class="line"> *&#x2F;</span><br><span class="line">private String descript;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 显示状态[0-不显示；1-显示]</span><br><span class="line"> *&#x2F;</span><br><span class="line">@NotNull(groups &#x3D; &#123;AddGroup.class, UpdateStatusGroup.class&#125;)</span><br><span class="line">@ListValue(vals&#x3D;&#123;0,1&#125;,groups &#x3D; &#123;AddGroup.class, UpdateStatusGroup.class&#125;)</span><br><span class="line">private Integer showStatus;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 检索首字母</span><br><span class="line"> *&#x2F;</span><br><span class="line">@NotEmpty(groups&#x3D;&#123;AddGroup.class&#125;)</span><br><span class="line">@Pattern(regexp&#x3D;&quot;^[a-zA-Z]$&quot;,message &#x3D; &quot;检索首字母必须是一个字母&quot;,groups&#x3D;&#123;AddGroup.class, UpdateGroup.class&#125;)</span><br><span class="line">private String firstLetter;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 排序</span><br><span class="line"> *&#x2F;</span><br><span class="line">@NotNull(groups&#x3D;&#123;AddGroup.class&#125;)</span><br><span class="line">@Min(value &#x3D; 0,message &#x3D; &quot;排序必须大于等于0&quot;,groups&#x3D;&#123;AddGroup.class,UpdateGroup.class&#125;)</span><br><span class="line">private Integer sort;</span><br></pre></td></tr></table></figure><p>建立分组校验类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface AddGroup &#123;&#125;</span><br><span class="line">public interface UpdateGroup &#123;&#125;</span><br><span class="line">public interface UpdateStatusGroup &#123;&#125;</span><br></pre></td></tr></table></figure><p>自定义异常注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Constraint(validatedBy &#x3D; &#123; ListValueConstraintValidator.class &#125;)</span><br><span class="line">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span><br><span class="line">@Retention(RUNTIME)</span><br><span class="line">public @interface ListValue &#123;</span><br><span class="line">    String message() default &quot;&#123;com.onejane.demo.provider.valid.ListValue.message&#125;&quot;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() default &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() default &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    int[] vals() default &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义异常实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class ListValueConstraintValidator implements ConstraintValidator&lt;ListValue,Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Set&lt;Integer&gt; set &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">    &#x2F;&#x2F;初始化方法</span><br><span class="line">    @Override</span><br><span class="line">    public void initialize(ListValue constraintAnnotation) &#123;</span><br><span class="line"></span><br><span class="line">        int[] vals &#x3D; constraintAnnotation.vals();</span><br><span class="line">        for (int val : vals) &#123;</span><br><span class="line">            set.add(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;判断是否校验成功</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *</span><br><span class="line">     * @param value 需要校验的值</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isValid(Integer value, ConstraintValidatorContext context) &#123;</span><br><span class="line"></span><br><span class="line">        return set.contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器层加入字段校验配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;save&quot;)</span><br><span class="line">public R save(@Validated(&#123;AddGroup.class&#125;) @RequestBody BrandEntity brand&#x2F;*,BindingResult result*&#x2F;)&#123;</span><br><span class="line">&#x2F;&#x2F;        if(result.hasErrors())&#123;</span><br><span class="line">&#x2F;&#x2F;            Map&lt;String,String&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">&#x2F;&#x2F;            &#x2F;&#x2F;1、获取校验的错误结果</span><br><span class="line">&#x2F;&#x2F;            result.getFieldErrors().forEach((item)-&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;                &#x2F;&#x2F;FieldError 获取到错误提示</span><br><span class="line">&#x2F;&#x2F;                String message &#x3D; item.getDefaultMessage();</span><br><span class="line">&#x2F;&#x2F;                &#x2F;&#x2F;获取错误的属性的名字</span><br><span class="line">&#x2F;&#x2F;                String field &#x3D; item.getField();</span><br><span class="line">&#x2F;&#x2F;                map.put(field,message);</span><br><span class="line">&#x2F;&#x2F;            &#125;);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            return R.error(400,&quot;提交的数据不合法&quot;).put(&quot;data&quot;,map);</span><br><span class="line">&#x2F;&#x2F;        &#125;else &#123;</span><br><span class="line">&#x2F;&#x2F;      为避免每次请求都判断异常输出，通过ExceptionControllerAdvice实现全局异常控制</span><br><span class="line">    brandService.save(brand);</span><br><span class="line"></span><br><span class="line">    return R.ok();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 修改</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;update&quot;)</span><br><span class="line">public R update(@Validated(UpdateGroup.class) @RequestBody BrandEntity brand)&#123;</span><br><span class="line">    brandService.updateById(brand);</span><br><span class="line">    return R.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 修改状态</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;update&#x2F;status&quot;)</span><br><span class="line">public R updateStatus(@Validated(UpdateStatusGroup.class) @RequestBody BrandEntity brand)&#123;</span><br><span class="line">    brandService.updateById(brand);</span><br><span class="line">    return R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局异常控制配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">&#x2F;&#x2F;@ResponseBody</span><br><span class="line">&#x2F;&#x2F;@ControllerAdvice(basePackages &#x3D; &quot;com.onejane.demo.provider.controller&quot;)</span><br><span class="line">@RestControllerAdvice(basePackages &#x3D; &quot;com.onejane.demo.provider.controller&quot;)</span><br><span class="line">public class ExceptionControllerAdvice &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(value&#x3D; MethodArgumentNotValidException.class)</span><br><span class="line">    public R handleVaildException(MethodArgumentNotValidException e)&#123;</span><br><span class="line">        log.error(&quot;数据校验出现问题&#123;&#125;，异常类型：&#123;&#125;&quot;,e.getMessage(),e.getClass());</span><br><span class="line">        BindingResult bindingResult &#x3D; e.getBindingResult();</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; errorMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        bindingResult.getFieldErrors().forEach((fieldError)-&gt;&#123;</span><br><span class="line">            errorMap.put(fieldError.getField(),fieldError.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        return R.error(BizCodeEnume.VAILD_EXCEPTION.getCode(),BizCodeEnume.VAILD_EXCEPTION.getMsg()).put(&quot;data&quot;,errorMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(value &#x3D; Throwable.class)</span><br><span class="line">    public R handleException(Throwable throwable)&#123;</span><br><span class="line"></span><br><span class="line">        log.error(&quot;错误：&quot;,throwable);</span><br><span class="line">        return R.error(BizCodeEnume.UNKNOW_EXCEPTION.getCode(),BizCodeEnume.UNKNOW_EXCEPTION.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
            <tag> feign </tag>
            
            <tag> gateway </tag>
            
            <tag> sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv实现盲水印</title>
      <link href="/2021/03/11/opencv%E5%AE%9E%E7%8E%B0%E7%9B%B2%E6%B0%B4%E5%8D%B0/"/>
      <url>/2021/03/11/opencv%E5%AE%9E%E7%8E%B0%E7%9B%B2%E6%B0%B4%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><p>主要用于图片版权追溯，用户指纹识别等场景，保证用户版权以及作为防盗反爬关键性法律证据。</p><h1 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>解压opencv-3.4.2.tar.gz，项目运行是在VM options中加入库环境<code>-Djava.library.path=D:\opencv3.4.2\opencv\build\java\x64;D:\opencv3.4.2\opencv\build\x64\vc14\bin</code></p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p><strong>配置docker容器</strong></p><p>vim Dockerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM docker.io&#x2F;centos:7</span><br><span class="line">MAINTAINER OneJane</span><br><span class="line">WORKDIR &#x2F;usr</span><br><span class="line">RUN mkdir &#x2F;usr&#x2F;local&#x2F;java</span><br><span class="line">ADD jdk-8u60-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;java&#x2F;</span><br><span class="line">ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_60</span><br><span class="line">ENV JRE_HOME $JAVA_HOME&#x2F;jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">RUN mkdir -p &#x2F;usr&#x2F;local&#x2F;opencv_make&#x2F;build</span><br><span class="line">ADD opencv-3.4.2 &#x2F;usr&#x2F;local&#x2F;opencv_make</span><br><span class="line">RUN yum -y install gtk2 gimp-libs zlib libtiff libjpeg libpng gstreamer libavc1394 libraw1394 jasper-utils swig python libtool nasm</span><br><span class="line">RUN cd &#x2F;usr&#x2F;local&#x2F;opencv_make&#x2F;build &amp;&amp; cmake -D CMAKE_BUILD_TYPE&#x3D;RELEASE -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;opencv_make&#x2F;build -DBUILD_TESTS&#x3D;OFF ..</span><br><span class="line">RUN cd &#x2F;usr&#x2F;local&#x2F;opencv_make&#x2F;build &amp;&amp; make</span><br><span class="line">RUN cp &#x2F;usr&#x2F;local&#x2F;opencv_make&#x2F;build&#x2F;lib&#x2F;libopencv_java342.so &#x2F;usr&#x2F;lib</span><br><span class="line">ADD apache-tomcat-8.5.46 &#x2F;usr&#x2F;local&#x2F;tomcat</span><br><span class="line">RUN echo &quot;tail -f &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;logs&#x2F;catalina.out &quot; &gt;&gt; &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin&#x2F;catalina.sh</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin&#x2F;catalina.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><p><strong>打包上传到docker hub</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker build -t&#x3D;&#39;motor-tomcat8-opencv3&#39; .</span><br><span class="line">docker login</span><br><span class="line">docker tag 9d98e987fc07 onejane&#x2F;motor-tomcat8-opencv3:latest</span><br><span class="line">docker push onejane&#x2F;motor-tomcat8-opencv3:latest</span><br><span class="line">docker pull docker.io&#x2F;onejane&#x2F;motor-tomcat8-opencv3</span><br><span class="line">docker run -di --name opencv -p 8080:8080 9d98e987fc07</span><br></pre></td></tr></table></figure><h2 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h2><p><strong>加入依赖</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.openpnp&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;opencv&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.4.2-1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>加解盲水印</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">import org.opencv.core.Point;</span><br><span class="line">import org.opencv.core.*;</span><br><span class="line">import org.opencv.imgcodecs.Imgcodecs;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.awt.image.DataBufferByte;</span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import static org.opencv.core.Core.BORDER_CONSTANT;</span><br><span class="line">import static org.opencv.core.Core.copyMakeBorder;</span><br><span class="line">import static org.opencv.imgproc.Imgproc.putText;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class DarkWatermarkUtil &#123;</span><br><span class="line">    private static List&lt;Mat&gt; planes &#x3D; new ArrayList&lt;Mat&gt;();</span><br><span class="line">    private static List&lt;Mat&gt; allPlanes &#x3D; new ArrayList&lt;Mat&gt;();</span><br><span class="line"></span><br><span class="line">    public static Mat addImageWatermarkWithText(Mat image, String watermarkText) &#123;</span><br><span class="line">        &#x2F;&#x2F;优化图像的尺寸</span><br><span class="line">        &#x2F;&#x2F;Mat padded &#x3D; optimizeImageDim(image);</span><br><span class="line">        Mat complexImage &#x3D; new Mat();</span><br><span class="line">        Mat padded &#x3D; splitSrc(image);</span><br><span class="line">        padded.convertTo(padded, CvType.CV_32F);</span><br><span class="line">        planes.add(padded);</span><br><span class="line">        planes.add(Mat.zeros(padded.size(), CvType.CV_32F));</span><br><span class="line">        Core.merge(planes, complexImage);</span><br><span class="line">        &#x2F;&#x2F; dft</span><br><span class="line">        Core.dft(complexImage, complexImage);</span><br><span class="line">        &#x2F;&#x2F; 添加文本水印</span><br><span class="line">        Scalar scalar &#x3D; new Scalar(0, 0, 0);</span><br><span class="line">        Point point &#x3D; new Point(60, 60);</span><br><span class="line"></span><br><span class="line">        putText(complexImage, watermarkText, point, Core.FONT_HERSHEY_DUPLEX, 0.8D, scalar, 2);</span><br><span class="line">        Core.flip(complexImage, complexImage, -1);</span><br><span class="line"></span><br><span class="line">        putText(complexImage, watermarkText, point, Core.FONT_HERSHEY_DUPLEX, 0.8D, scalar, 2);</span><br><span class="line">        Core.flip(complexImage, complexImage, -1);</span><br><span class="line"></span><br><span class="line">        return antitransformImage(complexImage, allPlanes,padded);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Mat getImageWatermarkWithText(Mat image) &#123;</span><br><span class="line">        List&lt;Mat&gt; planes &#x3D; new ArrayList&lt;Mat&gt;();</span><br><span class="line">        Mat complexImage &#x3D; new Mat();</span><br><span class="line">        Mat padded &#x3D; splitSrc(image);</span><br><span class="line">        padded.convertTo(padded, CvType.CV_32F);</span><br><span class="line">        planes.add(padded);</span><br><span class="line">        planes.add(Mat.zeros(padded.size(), CvType.CV_32F));</span><br><span class="line">        Core.merge(planes, complexImage);</span><br><span class="line">        &#x2F;&#x2F; dft</span><br><span class="line">        Core.dft(complexImage, complexImage);</span><br><span class="line">        Mat magnitude &#x3D; createOptimizedMagnitude(complexImage);</span><br><span class="line">        planes.clear();</span><br><span class="line">        return magnitude;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Mat splitSrc(Mat mat) &#123;</span><br><span class="line">&#x2F;&#x2F;        mat &#x3D; optimizeImageDim(mat);</span><br><span class="line">        Mat padded &#x3D; new Mat();</span><br><span class="line">        Core.split(mat, allPlanes);</span><br><span class="line">        if (allPlanes.size() &gt; 1) &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; allPlanes.size(); i++) &#123;</span><br><span class="line">                if (i &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                    padded &#x3D; allPlanes.get(i);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            padded &#x3D; mat;</span><br><span class="line">        &#125;</span><br><span class="line">        return padded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Mat antitransformImage(Mat complexImage, List&lt;Mat&gt; allPlanes,Mat padded) &#123;</span><br><span class="line">        Mat invDFT &#x3D; new Mat();</span><br><span class="line">        Core.idft(complexImage, invDFT, Core.DFT_SCALE | Core.DFT_REAL_OUTPUT, 0);</span><br><span class="line">        Mat restoredImage &#x3D; new Mat();</span><br><span class="line">        invDFT.convertTo(restoredImage, CvType.CV_8U);</span><br><span class="line">        if (allPlanes.size() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            allPlanes.add(restoredImage);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            allPlanes.set(0, restoredImage);</span><br><span class="line">        &#125;</span><br><span class="line">        Mat lastImage &#x3D; new Mat();</span><br><span class="line">        Core.merge(allPlanes, lastImage);</span><br><span class="line">        planes.clear();</span><br><span class="line">        allPlanes.clear();</span><br><span class="line"></span><br><span class="line">        complexImage.release();</span><br><span class="line">        invDFT.release();</span><br><span class="line">        restoredImage.release();</span><br><span class="line">        padded.release();</span><br><span class="line">        return lastImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Mat optimizeImageDim(Mat image) &#123;</span><br><span class="line">        Mat padded &#x3D; new Mat();</span><br><span class="line">        int addPixelRows &#x3D; Core.getOptimalDFTSize(image.rows());</span><br><span class="line">        int addPixelCols &#x3D; Core.getOptimalDFTSize(image.cols());</span><br><span class="line">        copyMakeBorder(image, padded, 0, addPixelRows - image.rows(), 0, addPixelCols - image.cols(),</span><br><span class="line">                BORDER_CONSTANT, Scalar.all(0));</span><br><span class="line"></span><br><span class="line">        return padded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Mat createOptimizedMagnitude(Mat complexImage) &#123;</span><br><span class="line">        List&lt;Mat&gt; newPlanes &#x3D; new ArrayList&lt;Mat&gt;();</span><br><span class="line">        Mat mag &#x3D; new Mat();</span><br><span class="line">        Core.split(complexImage, newPlanes);</span><br><span class="line">        Core.magnitude(newPlanes.get(0), newPlanes.get(1), mag);</span><br><span class="line">        Core.add(Mat.ones(mag.size(), CvType.CV_32F), mag, mag);</span><br><span class="line">        Core.log(mag, mag);</span><br><span class="line">        shiftDFT(mag);</span><br><span class="line">        mag.convertTo(mag, CvType.CV_8UC1);</span><br><span class="line">        Core.normalize(mag, mag, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1);</span><br><span class="line">        return mag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void shiftDFT(Mat image) &#123;</span><br><span class="line">        image &#x3D; image.submat(new Rect(0, 0, image.cols() &amp; -2, image.rows() &amp; -2));</span><br><span class="line">        int cx &#x3D; image.cols() &#x2F; 2;</span><br><span class="line">        int cy &#x3D; image.rows() &#x2F; 2;</span><br><span class="line"></span><br><span class="line">        Mat q0 &#x3D; new Mat(image, new Rect(0, 0, cx, cy));</span><br><span class="line">        Mat q1 &#x3D; new Mat(image, new Rect(cx, 0, cx, cy));</span><br><span class="line">        Mat q2 &#x3D; new Mat(image, new Rect(0, cy, cx, cy));</span><br><span class="line">        Mat q3 &#x3D; new Mat(image, new Rect(cx, cy, cx, cy));</span><br><span class="line">        Mat tmp &#x3D; new Mat();</span><br><span class="line">        q0.copyTo(tmp);</span><br><span class="line">        q3.copyTo(q0);</span><br><span class="line">        tmp.copyTo(q3);</span><br><span class="line">        q1.copyTo(tmp);</span><br><span class="line">        q2.copyTo(q1);</span><br><span class="line">        tmp.copyTo(q2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static BufferedImage Mat2BufImg(Mat matrix, String fileExtension) &#123;</span><br><span class="line">        &#x2F;&#x2F; convert the matrix into a matrix of bytes appropriate for</span><br><span class="line">        &#x2F;&#x2F; this file extension</span><br><span class="line">        MatOfByte mob &#x3D; new MatOfByte();</span><br><span class="line">        Imgcodecs.imencode(fileExtension, matrix, mob);</span><br><span class="line">        &#x2F;&#x2F; convert the &quot;matrix of bytes&quot; into a byte array</span><br><span class="line">        byte[] byteArray &#x3D; mob.toArray();</span><br><span class="line">        BufferedImage bufImage &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            InputStream in &#x3D; new ByteArrayInputStream(byteArray);</span><br><span class="line">            bufImage &#x3D; ImageIO.read(in);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return bufImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static Mat BufImg2Mat(BufferedImage original, int imgType, int matType) &#123;</span><br><span class="line">        if (original &#x3D;&#x3D; null) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;original &#x3D;&#x3D; null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">&#x2F;&#x2F;        System.loadLibrary(&quot;opencv_java342&quot;);</span><br><span class="line">&#x2F;&#x2F;        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line">&#x2F;&#x2F;        System.load(&quot;D:\\opencv3.4.2\\opencv\\build\\java\\x64\\opencv_java342.dll&quot;);</span><br><span class="line">        &#x2F;&#x2F;System.out.println(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line">        &#x2F;&#x2F; Don&#39;t convert if it already has correct type</span><br><span class="line">        if (original.getType() !&#x3D; imgType) &#123;</span><br><span class="line">            &#x2F;&#x2F; Create a buffered image</span><br><span class="line">            BufferedImage image &#x3D; new BufferedImage(original.getWidth(), original.getHeight(), imgType);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Draw the image onto the new buffer</span><br><span class="line">            Graphics2D g &#x3D; image.createGraphics();</span><br><span class="line">            try &#123;</span><br><span class="line">                g.setComposite(AlphaComposite.Src);</span><br><span class="line">                g.drawImage(original, 0, 0, null);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                g.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        byte[] pixels &#x3D; ((DataBufferByte) original.getRaster().getDataBuffer()).getData();</span><br><span class="line">        Mat mat &#x3D; Mat.eye(original.getHeight(), original.getWidth(), matType);</span><br><span class="line">        mat.put(0, 0, pixels);</span><br><span class="line">        return mat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        &#x2F;&#x2F;加载opencv动态库</span><br><span class="line">        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 加盲水印</span><br><span class="line">&#x2F;&#x2F;        Mat img &#x3D; Imgcodecs.imread(&quot;&#x2F;tmp&#x2F;s.jpg&quot;);</span><br><span class="line">&#x2F;&#x2F;        Mat watermarkImg &#x3D; addImageWatermarkWithText(img,&quot;onejane&quot;);</span><br><span class="line">&#x2F;&#x2F;        Imgcodecs.imwrite(&quot;&#x2F;tmp&#x2F;s_encode.jpg&quot;, watermarkImg);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 解盲水印</span><br><span class="line">        Mat img &#x3D; Imgcodecs.imread(&quot;&#x2F;tmp&#x2F;s_encode.jpg&quot;);</span><br><span class="line">        Mat watermarkImg &#x3D; getImageWatermarkWithText(img);</span><br><span class="line">        Imgcodecs.imwrite(&quot;s_decode.jpg&quot;, watermarkImg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在maven中配置插件，将依赖打包入jar</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;source&gt;1.8&lt;&#x2F;source&gt;</span><br><span class="line">        &lt;target&gt;1.8&lt;&#x2F;target&gt;</span><br><span class="line">        &lt;encoding&gt;utf8&lt;&#x2F;encoding&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;archive&gt;</span><br><span class="line">            &lt;manifest&gt;</span><br><span class="line">                &lt;mainClass&gt;com.allen.capturewebdata.Main&lt;&#x2F;mainClass&gt;</span><br><span class="line">            &lt;&#x2F;manifest&gt;</span><br><span class="line">        &lt;&#x2F;archive&gt;</span><br><span class="line">        &lt;descriptorRefs&gt;</span><br><span class="line">            &lt;descriptorRef&gt;jar-with-dependencies&lt;&#x2F;descriptorRef&gt;</span><br><span class="line">        &lt;&#x2F;descriptorRefs&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure><p>java -cp pirate_tools_aliyun_image-1.2.5-jar-with-dependencies.jar com.onejane.image.DarkWatermarkUtil 主动调用实现类，获取解开的盲水印</p><p><img src="/2021/03/11/opencv%E5%AE%9E%E7%8E%B0%E7%9B%B2%E6%B0%B4%E5%8D%B0/%E7%9B%B2%E6%B0%B4%E5%8D%B0.png" alt="盲水印"></p><h1 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h1><ol><li><p>上传待添加水印的图片到OSS Bucket</p></li><li><p>根据添加的盲水印类型准备水印信息。</p></li></ol><ul><li>图片类型：准备水印图片并上传水印图片到OSS Bucket。</li><li>文字类型：准备水印文字内容。</li></ul><ol start="3"><li>调用<a href="https://next.api.aliyun.com/api/imm/2017-09-06/PutProject" target="_blank" rel="noopener">PutProject</a>接口创建项目，并设置Type为PhotoStarter，或者通过<a href="https://imm.console.aliyun.com/?spm=a2c4g.11186623.2.4.26235031aroiyd" target="_blank" rel="noopener">智能媒体管理控制台</a>新建项目</li></ol><p><img src="/2021/03/11/opencv%E5%AE%9E%E7%8E%B0%E7%9B%B2%E6%B0%B4%E5%8D%B0/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="创建项目"></p><ol start="4"><li>引入pom依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;imm20170906&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>实现加解盲水印</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public static com.aliyun.imm20170906.Client createClient(String accessKeyId, String accessKeySecret) throws Exception &#123;</span><br><span class="line">    Config config &#x3D; new Config()</span><br><span class="line">            .setAccessKeyId(accessKeyId)</span><br><span class="line">            .setAccessKeySecret(accessKeySecret);</span><br><span class="line">    config.endpoint &#x3D; &quot;imm.cn-beijing.aliyuncs.com&quot;;</span><br><span class="line">    return new com.aliyun.imm20170906.Client(config);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String ss[]) &#123;</span><br><span class="line">    try &#123; </span><br><span class="line"></span><br><span class="line">        com.aliyun.imm20170906.Client Imgclient &#x3D; createClient(accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        EncodeBlindWatermarkRequest encodeBlindWatermarkRequest &#x3D; new EncodeBlindWatermarkRequest();</span><br><span class="line">        encodeBlindWatermarkRequest.setModel(&quot;DWT_IBG&quot;);</span><br><span class="line">        encodeBlindWatermarkRequest.setImageUri(&quot;oss:&#x2F;&#x2F;onejane-opencv&#x2F;DSC02804.JPG&quot;);</span><br><span class="line">&#x2F;&#x2F;          encodeBlindWatermarkRequest.setWatermarkUri(&quot;oss:&#x2F;&#x2F;onejane-opencv&#x2F;water.png&quot;);</span><br><span class="line">&#x2F;&#x2F;          encodeBlindWatermarkRequest.setTargetImageType(&quot;png&quot;);</span><br><span class="line">        encodeBlindWatermarkRequest.setContent(&quot;哈罗摩托&quot;);</span><br><span class="line">        encodeBlindWatermarkRequest.setProject(&quot;onejane&quot;);</span><br><span class="line">        encodeBlindWatermarkRequest.setTargetUri(&quot;oss:&#x2F;&#x2F;onejane-opencv&#x2F;DSC02804_encode.JPG&quot;);</span><br><span class="line">&#x2F;&#x2F;          encodeBlindWatermarkRequest.setTargetUri(&quot;oss:&#x2F;&#x2F;onejane-opencv&#x2F;DSC02804_img_encode.JPG&quot;);</span><br><span class="line">        EncodeBlindWatermarkResponse encodeBlindWatermarkResponse &#x3D; Imgclient.encodeBlindWatermark(encodeBlindWatermarkRequest);</span><br><span class="line">        System.out.println(JSON.toJSONString(encodeBlindWatermarkResponse));</span><br><span class="line"></span><br><span class="line">        DecodeBlindWatermarkRequest decodeBlindWatermarkRequest &#x3D; new DecodeBlindWatermarkRequest();</span><br><span class="line">        decodeBlindWatermarkRequest.setImageQuality(90);</span><br><span class="line">        decodeBlindWatermarkRequest.setModel(&quot;DWT_IBG&quot;);</span><br><span class="line">&#x2F;&#x2F;          decodeBlindWatermarkRequest.setImageUri(&quot;oss:&#x2F;&#x2F;onejane-opencv&#x2F;DSC02804_img_encode.JPG&quot;);</span><br><span class="line">        decodeBlindWatermarkRequest.setImageUri(&quot;oss:&#x2F;&#x2F;onejane-opencv&#x2F;DSC02804_encode.JPG&quot;);</span><br><span class="line">        decodeBlindWatermarkRequest.setOriginalImageUri(&quot;oss:&#x2F;&#x2F;onejane-opencv&#x2F;DSC02804.JPG&quot;);</span><br><span class="line">        decodeBlindWatermarkRequest.setProject(&quot;onejane&quot;);</span><br><span class="line">&#x2F;&#x2F;          decodeBlindWatermarkRequest.setTargetUri(&quot;oss:&#x2F;&#x2F;onejane-opencv&#x2F;DSC02804_img_decode.JPG&quot;);</span><br><span class="line">        decodeBlindWatermarkRequest.setTargetUri(&quot;oss:&#x2F;&#x2F;onejane-opencv&#x2F;DSC02804_decode.JPG&quot;);</span><br><span class="line">        DecodeBlindWatermarkResponse decodeBlindWatermarkResponse &#x3D; Imgclient.decodeBlindWatermark(decodeBlindWatermarkRequest);</span><br><span class="line">        System.out.println(JSON.toJSONString(decodeBlindWatermarkResponse));</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpURLConnection&amp;OK3&amp;Retrofit自吐通杀</title>
      <link href="/2021/03/02/HttpURLConnection&amp;OK3&amp;Retrofit%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/"/>
      <url>/2021/03/02/HttpURLConnection&amp;OK3&amp;Retrofit%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="HttpURLConnection"><a href="#HttpURLConnection" class="headerlink" title="HttpURLConnection"></a>HttpURLConnection</h1><p>adb install -r -t <a href="https://github.com/aqi00/android2/tree/master/network" target="_blank" rel="noopener">network-debug.apk</a></p><p><strong>启动frida</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell </span><br><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs128arm64</span><br></pre></td></tr></table></figure><p><strong>内存漫游</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.0</span><br><span class="line">objection -g com.example.network explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">android hooking list classes   查看所有可hook的类</span><br><span class="line">android hooking search classes URL</span><br><span class="line">android hooking watch class java.net.URL  由于hookURL类遗漏构造函数需要手动hook $init</span><br><span class="line">android hooking watch class_method java.net.URL.$init --dump-args --dump-backtrace --dump-return  hook构造函数并打印</span><br></pre></td></tr></table></figure><p>点击HTTP图片获取按钮，实现自吐第一步，并拿到上层实现类HttpURLConnectionImpl</p><p><img src="/2021/03/02/HttpURLConnection&OK3&Retrofit%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/%E8%87%AA%E5%90%90%E7%AC%AC%E4%B8%80%E6%AD%A5.png" alt="自吐第一步"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes HttpURLConnectionImpl</span><br><span class="line">android hooking watch class com.android.okhttp.internal.huc.HttpURLConnectionImpl  hook类所有方法并打印方法</span><br><span class="line">android hooking watch class_method com.android.okhttp.internal.huc.HttpURLConnectionImpl.setRequestProperty --dump-args --dump-backtrace --dump-return    hook类指定方法并打印出入参及调用栈</span><br></pre></td></tr></table></figure><p><img src="/2021/03/02/HttpURLConnection&OK3&Retrofit%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/%E8%87%AA%E5%90%90%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" alt="自吐第二步"></p><p>点击HTTP图片获取按钮，实现自吐第二步</p><blockquote><p>plugin wallbreaker objectsearch com.android.okhttp.internal.huc.HttpURLConnectionImpl   存在多个实例说明每次点击生成新的对象且不释放</p><p>plugin wallbreaker objectdump –fullname 0x2972  打印其中一个对象在内存中的结构</p><p>android heap search instances com.android.okhttp.internal.huc.HttpURLConnectionImpl  获取内存中的实例地址</p><p>android heap execute 0x21e6 defaultUserAgent  手动调用defaultUserAgent</p></blockquote><h2 id="自吐"><a href="#自吐" class="headerlink" title="自吐"></a>自吐</h2><p><code>frida -U -f com.cz.babySister -l hook_HttpUrlConnection.js --no-pause</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function hook_HttpUrlConnection()&#123;</span><br><span class="line"></span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">            &#x2F;&#x2F; java.net.URL.URL  ($init) (得到URL)</span><br><span class="line">Java.use(&quot;java.net.URL&quot;).$init.overload(&#39;java.lang.String&#39;).implementation &#x3D; function (str)&#123;</span><br><span class="line">var result &#x3D; this.$init(str)</span><br><span class="line">console.log(&quot;result , str &#x3D;&gt; &quot;,result,str);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;HttpURLConnection setRequestProperty 得到各种请求头、属性等，不能hook抽象类HttpURLConnection，只能hook抽象类的实现类HttpURLConnectionImpl</span><br><span class="line">Java.use(&quot;com.android.okhttp.internal.huc.HttpURLConnectionImpl&quot;).setRequestProperty.implementation &#x3D; function(str1,str2)&#123;</span><br><span class="line">var result &#x3D; this.setRequestProperty(str1,str2);</span><br><span class="line">console.log(&quot;.setRequestProperty result,str1,str2-&gt;&quot;,result,str1,str2);</span><br><span class="line">return result; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Java.use(&quot;com.android.okhttp.internal.huc.HttpURLConnectionImpl&quot;).setRequestMethod.implementation &#x3D; function(str1)&#123;</span><br><span class="line">var result &#x3D; this.setRequestMethod(str1);</span><br><span class="line">console.log(&quot;.setRequestMethod result,str1,str2-&gt;&quot;,result,str1);</span><br><span class="line">return result; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">setImmediate(hook_HttpUrlConnection)</span><br></pre></td></tr></table></figure><p><img src="/2021/03/02/HttpURLConnection&OK3&Retrofit%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/HttpURLConnection%E8%87%AA%E5%90%90.png" alt="HttpURLConnection自吐"></p><h1 id="OkHttp3"><a href="#OkHttp3" class="headerlink" title="OkHttp3"></a>OkHttp3</h1><h2 id="搭建抓包环境"><a href="#搭建抓包环境" class="headerlink" title="搭建抓包环境"></a>搭建抓包环境</h2><h3 id="默认创建"><a href="#默认创建" class="headerlink" title="默认创建"></a>默认创建</h3><p>Okhttp框架帮我们默认所有配置，因此无法自定义添加用户拦截器。</p><p>as新建Ok3Demo项目，创建页面button布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class="line">    android:gravity&#x3D;&quot;center|center_horizontal|center_vertical&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center|center_horizontal|center_vertical&quot;</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;mybtn&quot;</span><br><span class="line">        android:text&#x3D;&quot;发送请求&quot;</span><br><span class="line">        android:textSize&#x3D;&quot;45sp&quot;&gt;</span><br><span class="line">    &lt;&#x2F;Button&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>build.gradle引入ok3依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 增加对Okhttp3的依赖</span><br><span class="line">implementation(&quot;com.squareup.okhttp3:okhttp:3.12.0&quot;)</span><br></pre></td></tr></table></figure><p>AndroidManifest.xml配置网络权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 申请网络请求权限 --&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.INTERNET&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>创建异步请求线程，在RealCall.newRealCall()中，创建了一个新的RealCall对象，RealCall对象是Okhttp3.Call接口的一个实现，也是Okhttp3中Call的唯一实现。它表示一个等待执行的请求，它只能被执行一次，但实际上，到这一步，请求依然可以被取消。因此只有Hook 了execute()和enqueue(new Callback())才能真正保证每个从Okhttp出去的请求都能被Hook到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class example &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; TAG即为日志打印时的标签</span><br><span class="line">    private static String TAG &#x3D; &quot;learnokhttp&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 新建一个Okhttp客户端</span><br><span class="line">    OkHttpClient client &#x3D; new OkHttpClient();</span><br><span class="line"></span><br><span class="line">    void run(String url) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 构造request</span><br><span class="line">        Request request &#x3D; new Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 发起异步请求</span><br><span class="line">        client.newCall(request).enqueue(new Callback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Call call, IOException e) &#123;</span><br><span class="line">                call.cancel();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(Call call, Response response) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;打印输出</span><br><span class="line">                Log.d(TAG,  response.body().string());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity中调用网络请求线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private static String TAG &#x3D; &quot;learnokhttp&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 定位发送请求按钮</span><br><span class="line">        Button btn &#x3D; findViewById(R.id.mybtn);</span><br><span class="line"></span><br><span class="line">        btn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                &#x2F;&#x2F; 访问百度首页</span><br><span class="line">                String requestUrl &#x3D; &quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;;</span><br><span class="line">                example myexample &#x3D; new example();</span><br><span class="line">                try &#123;</span><br><span class="line">                    myexample.run(requestUrl);</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建造者-Builder-模式"><a href="#建造者-Builder-模式" class="headerlink" title="建造者(Builder)模式"></a>建造者(Builder)模式</h3><p>新建LoggingInterceptor类，实现Interceptor接口，这代表它是一个拦截器，接下来实现intercept方法，我们的拦截器会打印URL和请求headers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class LoggingInterceptor implements Interceptor &#123;</span><br><span class="line">    &#x2F;&#x2F; TAG即为日志打印时的标签</span><br><span class="line">    private static String TAG &#x3D; &quot;learnokhttp&quot;;</span><br><span class="line"></span><br><span class="line">    @Override public Response intercept(Interceptor.Chain chain) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        Request request &#x3D; chain.request();</span><br><span class="line">        Log.i(TAG, &quot;请求URL：&quot;+String.valueOf(request.url())+&quot;\n&quot;);</span><br><span class="line">        Log.i(TAG, &quot;请求headers：&quot;+&quot;\n&quot;+String.valueOf(request.headers())+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        Response response &#x3D; chain.proceed(request);</span><br><span class="line"></span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>拦截器是Okhttp中重要的一个概念，Okhttp通过Interceptor来完成监控管理、重写和重试请求。Okhttp本身存在五大拦截器，每个网络请求，不管是GET还是PUT/POST或者其他，都必须经过这五大拦截器。拦截器可以对request做出一定修改，同时对返回的Response做出一定修改，因此Interceptor是一个绝佳的Hook点，可以同时打印输出请求和相应。</p></blockquote><p>自定义配置所有参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 此为原先的client</span><br><span class="line">OkHttpClient client &#x3D; new OkHttpClient();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 基于原先的client创建新的client</span><br><span class="line">OkHttpClient newClient &#x3D; client.newBuilder()</span><br><span class="line">    .addNetworkInterceptor(new LoggingInterceptor())</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>将example中代码转移到MainActivity中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private static String TAG &#x3D; &quot;learnokhttp&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String requestUrl &#x3D; &quot;http:&#x2F;&#x2F;www.kuaidi100.com&#x2F;query?type&#x3D;yuantong&amp;postid&#x3D;11111111111&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 全局只使用这一个拦截器</span><br><span class="line">    public static final OkHttpClient client &#x3D; new OkHttpClient.Builder()</span><br><span class="line">            .addNetworkInterceptor(new LoggingInterceptor())</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    Request request &#x3D; new Request.Builder()</span><br><span class="line">            .url(requestUrl)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 定位发送请求按钮</span><br><span class="line">        Button btn &#x3D; findViewById(R.id.mybtn);</span><br><span class="line"></span><br><span class="line">        btn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                &#x2F;&#x2F; 发起异步请求</span><br><span class="line">                client.newCall(request).enqueue(new Callback() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void onFailure(Call call, IOException e) &#123;</span><br><span class="line">                            call.cancel();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        @Override</span><br><span class="line">                        public void onResponse(Call call, Response response) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">                            &#x2F;&#x2F;打印输出</span><br><span class="line">                            Log.d(TAG, response.body().string());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p><code>adb shell &amp;&amp; ./data/local/tmp/fs128arm64</code>  启动frida</p><p><code>pyenv local 3.8.0</code>  切换python环境</p><p><code>objection -g com.onejane.ok3demo explore -P ~/.objection/plugins</code>   加载所有插件，点击发送请求并开启内存漫游</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker classsearch OkHttpClient  内存搜索OkHttpClient类</span><br><span class="line">plugin wallbreaker classdump --fullname okhttp3.OkHttpClient  打印该类结构</span><br><span class="line">plugin wallbreaker objectsearch okhttp3.OkHttpClient  获取该类的内存地址</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x2592  打印内存中该地址的类结构</span><br><span class="line">plugin wallbreaker objectsearch okhttp3.OkHttpClient   内存中存在多个OkHttpClient,默认不回收对象实例</span><br></pre></td></tr></table></figure><h2 id="okhttp3Logging"><a href="#okhttp3Logging" class="headerlink" title="okhttp3Logging"></a>okhttp3Logging</h2><p>新增okhttp3Logging类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">public final class okhttp3Logging implements Interceptor &#123;</span><br><span class="line">    private static final String TAG &#x3D; &quot;okhttpGET&quot;;</span><br><span class="line"></span><br><span class="line">    private static final Charset UTF8 &#x3D; Charset.forName(&quot;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">    @Override public Response intercept(Chain chain) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        Request request &#x3D; chain.request();</span><br><span class="line"></span><br><span class="line">        RequestBody requestBody &#x3D; request.body();</span><br><span class="line">        boolean hasRequestBody &#x3D; requestBody !&#x3D; null;</span><br><span class="line"></span><br><span class="line">        Connection connection &#x3D; chain.connection();</span><br><span class="line">        String requestStartMessage &#x3D; &quot;--&gt; &quot;</span><br><span class="line">                + request.method()</span><br><span class="line">                + &#39; &#39; + request.url();</span><br><span class="line">        Log.e(TAG, requestStartMessage);</span><br><span class="line"></span><br><span class="line">        if (hasRequestBody) &#123;</span><br><span class="line">            &#x2F;&#x2F; Request body headers are only present when installed as a network interceptor. Force</span><br><span class="line">            &#x2F;&#x2F; them to be included (when available) so there values are known.</span><br><span class="line">            if (requestBody.contentType() !&#x3D; null) &#123;</span><br><span class="line">                Log.e(TAG, &quot;Content-Type: &quot; + requestBody.contentType());</span><br><span class="line">            &#125;</span><br><span class="line">            if (requestBody.contentLength() !&#x3D; -1) &#123;</span><br><span class="line">                Log.e(TAG, &quot;Content-Length: &quot; + requestBody.contentLength());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Headers headers &#x3D; request.headers();</span><br><span class="line">        for (int i &#x3D; 0, count &#x3D; headers.size(); i &lt; count; i++) &#123;</span><br><span class="line">            String name &#x3D; headers.name(i);</span><br><span class="line">            &#x2F;&#x2F; Skip headers from the request body as they are explicitly logged above.</span><br><span class="line">            if (!&quot;Content-Type&quot;.equalsIgnoreCase(name) &amp;&amp; !&quot;Content-Length&quot;.equalsIgnoreCase(name)) &#123;</span><br><span class="line">                Log.e(TAG, name + &quot;: &quot; + headers.value(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!hasRequestBody) &#123;</span><br><span class="line">            Log.e(TAG, &quot;--&gt; END &quot; + request.method());</span><br><span class="line">        &#125; else if (bodyHasUnknownEncoding(request.headers())) &#123;</span><br><span class="line">            Log.e(TAG, &quot;--&gt; END &quot; + request.method() + &quot; (encoded body omitted)&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Buffer buffer &#x3D; new Buffer();</span><br><span class="line">            requestBody.writeTo(buffer);</span><br><span class="line"></span><br><span class="line">            Charset charset &#x3D; UTF8;</span><br><span class="line">            MediaType contentType &#x3D; requestBody.contentType();</span><br><span class="line">            if (contentType !&#x3D; null) &#123;</span><br><span class="line">                charset &#x3D; contentType.charset(UTF8);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Log.e(TAG, &quot;&quot;);</span><br><span class="line">            if (isPlaintext(buffer)) &#123;</span><br><span class="line">                Log.e(TAG, buffer.readString(charset));</span><br><span class="line">                Log.e(TAG, &quot;--&gt; END &quot; + request.method()</span><br><span class="line">                        + &quot; (&quot; + requestBody.contentLength() + &quot;-byte body)&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Log.e(TAG, &quot;--&gt; END &quot; + request.method() + &quot; (binary &quot;</span><br><span class="line">                        + requestBody.contentLength() + &quot;-byte body omitted)&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        long startNs &#x3D; System.nanoTime();</span><br><span class="line">        Response response;</span><br><span class="line">        try &#123;</span><br><span class="line">            response &#x3D; chain.proceed(request);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, &quot;&lt;-- HTTP FAILED: &quot; + e);</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">        long tookMs &#x3D; TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);</span><br><span class="line"></span><br><span class="line">        ResponseBody responseBody &#x3D; response.body();</span><br><span class="line">        long contentLength &#x3D; responseBody.contentLength();</span><br><span class="line">        String bodySize &#x3D; contentLength !&#x3D; -1 ? contentLength + &quot;-byte&quot; : &quot;unknown-length&quot;;</span><br><span class="line">        Log.e(TAG, &quot;&lt;-- &quot;</span><br><span class="line">                + response.code()</span><br><span class="line">                + (response.message().isEmpty() ? &quot;&quot; : &#39; &#39; + response.message())</span><br><span class="line">                + &#39; &#39; + response.request().url()</span><br><span class="line">                + &quot; (&quot; + tookMs + &quot;ms&quot; + (&quot;, &quot; + bodySize + &quot; body:&quot; + &quot;&quot;) + &#39;)&#39;);</span><br><span class="line"></span><br><span class="line">        Headers myheaders &#x3D; response.headers();</span><br><span class="line">        for (int i &#x3D; 0, count &#x3D; myheaders.size(); i &lt; count; i++) &#123;</span><br><span class="line">            Log.e(TAG, myheaders.name(i) + &quot;: &quot; + myheaders.value(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!HttpHeaders.hasBody(response)) &#123;</span><br><span class="line">            Log.e(TAG, &quot;&lt;-- END HTTP&quot;);</span><br><span class="line">        &#125; else if (bodyHasUnknownEncoding(response.headers())) &#123;</span><br><span class="line">            Log.e(TAG, &quot;&lt;-- END HTTP (encoded body omitted)&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            BufferedSource source &#x3D; responseBody.source();</span><br><span class="line">            source.request(Long.MAX_VALUE); &#x2F;&#x2F; Buffer the entire body.</span><br><span class="line">            Buffer buffer &#x3D; source.buffer();</span><br><span class="line"></span><br><span class="line">            Long gzippedLength &#x3D; null;</span><br><span class="line">            if (&quot;gzip&quot;.equalsIgnoreCase(myheaders.get(&quot;Content-Encoding&quot;))) &#123;</span><br><span class="line">                gzippedLength &#x3D; buffer.size();</span><br><span class="line">                GzipSource gzippedResponseBody &#x3D; null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    gzippedResponseBody &#x3D; new GzipSource(buffer.clone());</span><br><span class="line">                    buffer &#x3D; new Buffer();</span><br><span class="line">                    buffer.writeAll(gzippedResponseBody);</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    if (gzippedResponseBody !&#x3D; null) &#123;</span><br><span class="line">                        gzippedResponseBody.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Charset charset &#x3D; UTF8;</span><br><span class="line">            MediaType contentType &#x3D; responseBody.contentType();</span><br><span class="line">            if (contentType !&#x3D; null) &#123;</span><br><span class="line">                charset &#x3D; contentType.charset(UTF8);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!isPlaintext(buffer)) &#123;</span><br><span class="line">                Log.e(TAG, &quot;&quot;);</span><br><span class="line">                Log.e(TAG, &quot;&lt;-- END HTTP (binary &quot; + buffer.size() + &quot;-byte body omitted)&quot;);</span><br><span class="line">                return response;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (contentLength !&#x3D; 0) &#123;</span><br><span class="line">                Log.e(TAG, &quot;&quot;);</span><br><span class="line">                Log.e(TAG, buffer.clone().readString(charset));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (gzippedLength !&#x3D; null) &#123;</span><br><span class="line">                Log.e(TAG, &quot;&lt;-- END HTTP (&quot; + buffer.size() + &quot;-byte, &quot;</span><br><span class="line">                        + gzippedLength + &quot;-gzipped-byte body)&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Log.e(TAG, &quot;&lt;-- END HTTP (&quot; + buffer.size() + &quot;-byte body)&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Returns true if the body in question probably contains human readable text. Uses a small sample</span><br><span class="line">     * of code points to detect unicode control characters commonly used in binary file signatures.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    static boolean isPlaintext(Buffer buffer) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Buffer prefix &#x3D; new Buffer();</span><br><span class="line">            long byteCount &#x3D; buffer.size() &lt; 64 ? buffer.size() : 64;</span><br><span class="line">            buffer.copyTo(prefix, 0, byteCount);</span><br><span class="line">            for (int i &#x3D; 0; i &lt; 16; i++) &#123;</span><br><span class="line">                if (prefix.exhausted()) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                int codePoint &#x3D; prefix.readUtf8CodePoint();</span><br><span class="line">                if (Character.isISOControl(codePoint) &amp;&amp; !Character.isWhitespace(codePoint)) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; catch (EOFException e) &#123;</span><br><span class="line">            return false; &#x2F;&#x2F; Truncated UTF-8 sequence.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean bodyHasUnknownEncoding(Headers myheaders) &#123;</span><br><span class="line">        String contentEncoding &#x3D; myheaders.get(&quot;Content-Encoding&quot;);</span><br><span class="line">        return contentEncoding !&#x3D; null</span><br><span class="line">                &amp;&amp; !contentEncoding.equalsIgnoreCase(&quot;identity&quot;)</span><br><span class="line">                &amp;&amp; !contentEncoding.equalsIgnoreCase(&quot;gzip&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包编译后取出dex改名为<code>okhttp3logging.dex</code>，<code>push</code>到<code>/data/locol/tmp</code>目录下</p><p>编写frida进行hook,<code>frida -U -f com.onejane.ok3demo -l hookOkhttp3.js --no-pause</code>并通过adb logcat 查看系统log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function hook_okhttp3_logging() &#123;</span><br><span class="line">    &#x2F;&#x2F; 1. frida Hook java层的代码必须包裹在Java.perform中，Java.perform会将Hook Java相关API准备就绪。</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        Java.openClassFile(&quot;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;okhttp3logging.dex&quot;).load();</span><br><span class="line">        &#x2F;&#x2F; 只修改了这一句，换句话说，只是使用不同的拦截器对象。</span><br><span class="line">        var MyInterceptor &#x3D; Java.use(&quot;com.onejane.ok3demo.okhttp3Logging&quot;);</span><br><span class="line"></span><br><span class="line">        var MyInterceptorObj &#x3D; MyInterceptor.$new();</span><br><span class="line">        var Builder &#x3D; Java.use(&quot;okhttp3.OkHttpClient$Builder&quot;);</span><br><span class="line">        console.log(Builder);</span><br><span class="line">        Builder.build.implementation &#x3D; function () &#123;</span><br><span class="line">            this.networkInterceptors().add(MyInterceptorObj);</span><br><span class="line">            return this.build();</span><br><span class="line">        &#125;;</span><br><span class="line">        console.log(&quot;hook_okhttp3...&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="HttpURLConnection&OK3&Retrofit%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/okhttp3logging.png" alt="okhttp3logging"></p><h1 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h1><p>git clone <a href="https://github.com/peiniwan/Ganhuo.git" target="_blank" rel="noopener">https://github.com/peiniwan/Ganhuo.git</a>  编译源码编译安装apk</p><p>修改build.gradle,buildscript.repositories和allprojects.repositories添加google()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath &#39;com.android.tools.build:gradle:3.5.3&#39;</span><br></pre></td></tr></table></figure><p><code>frida -U -f ganhuo.ly.com.ganhuo -l hookOkhttp3.js --no-pause</code> 调用hook_okhttp3_logging()通过adb logcat查看后台log</p><p><img src="/2021/03/02/HttpURLConnection&OK3&Retrofit%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/Retrofit%E5%9F%BA%E4%BA%8Eok3.png" alt="Retrofit基于ok3"></p><p>git clone <a href="https://github.com/siyujie/OkHttpLogger-Frida.git" target="_blank" rel="noopener">https://github.com/siyujie/OkHttpLogger-Frida.git</a>  获取Frida 实现拦截okhttp的脚本，首先将 <code>okhttpfind.dex</code> 拷贝到 <code>/data/local/tmp/</code> 目录下，执行命令启动<code>frida -UF -l okhttp_poker.js -f ganhuo.ly.com.ganhuo --no-pause</code> 可追加 <code>-o [output filepath]</code>保存到文件</p><p><strong>原理：</strong></p><p>由于所有使用的<code>okhttp</code>框架的App发出的请求都是通过<code>RealCall.java</code>发出的，那么我们可以hook此类拿到<code>request</code>和<code>response</code>, 也可以缓存下来每一个请求的<code>call</code>对象，进行再次请求，所以选择了此处进行hook。 <code>find</code>前新增<code>check</code>，根据特征类寻找是否使用了<code>okhttp3</code>库，如果没有特征类，则说明没有使用<code>okhttp</code>; 找到特征类，说明使用了<code>okhttp</code>的库，并打印出是否被混淆。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#96;find()&#96;                                         要等完全启动并执行过网络请求后再进行调用,检查是否使用了Okhttp &amp; 是否可能被混淆 &amp; 寻找okhttp3关键类及函数</span><br><span class="line">&#96;switchLoader(\&quot;okhttp3.OkHttpClient\&quot;)&#96;         参数：静态分析到的okhttpclient类名</span><br><span class="line">&#96;hold()&#96;                                         要等完全启动再进行调用,开启HOOK拦截</span><br><span class="line">&#96;history()&#96;                                      打印可重新发送的请求</span><br><span class="line">&#96;resend(index)&#96;                                  重新发送请求</span><br></pre></td></tr></table></figure></blockquote><p><img src="/2021/03/02/HttpURLConnection&OK3&Retrofit%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/OkHttpLogger-Frida%E6%8A%93Retrofit.png" alt="OkHttpLogger-Frida抓Retrofit"></p><p><strong>baseUrl自吐</strong></p><p>Hook RetrofitUtils 中的new Retrofit.Builder().baseUrl(baseurl)的baseUrl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">objection -g ganhuo.ly.com.ganhuo explore</span><br><span class="line">android hooking search classes retrofit</span><br><span class="line">android hooking list class_methods retrofit2.Retrofit</span><br><span class="line">android hooking list class_methods retrofit2.Retrofit$Builder   发现只有baseUrl()无参构造，可能在app启动时就执行了baseUrl(baseurl)</span><br><span class="line">objection -g ganhuo.ly.com.ganhuo explore --startup-command &quot;android hooking list class_methods retrofit2.Retrofit$Builder&quot;  没有反应</span><br></pre></td></tr></table></figure><p>通过编写frida脚本实现hook有参构造baseUrl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function hookbaseurl()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;retrofit2.Retrofit$Builder&quot;).baseUrl.overload(&#39;java.lang.String&#39;).implementation &#x3D; function(str)&#123;</span><br><span class="line">            var result &#x3D; this.baseUrl(str)</span><br><span class="line">            console.log(&quot;result1,str&#x3D;&gt;&quot;,result,str)</span><br><span class="line">            return result</span><br><span class="line">        &#125;</span><br><span class="line">        Java.use(&quot;retrofit2.Retrofit$Builder&quot;).baseUrl.overload(&#39;okhttp3.HttpUrl&#39;).implementation &#x3D; function(str)&#123;</span><br><span class="line">            var result &#x3D; this.baseUrl(str)</span><br><span class="line">            console.log(&quot;result2,str&#x3D;&gt;&quot;,result,str)</span><br><span class="line">            return result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(hookbaseurl)</span><br></pre></td></tr></table></figure><p><img src="/2021/03/02/HttpURLConnection&OK3&Retrofit%E8%87%AA%E5%90%90%E9%80%9A%E6%9D%80/hookbaseurl.png" alt="hookbaseurl"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> okhttp3 </tag>
            
            <tag> HttpURLConnection </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强大的脚本</title>
      <link href="/2021/02/22/%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/02/22/%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="合并多dex"><a href="#合并多dex" class="headerlink" title="合并多dex"></a>合并多dex</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import os, sys</span><br><span class="line"></span><br><span class="line"># python3.7 merge_dex.py .&#x2F;file&#x2F; livedex  反编译成java文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    if len(sys.argv) &lt; 3 :</span><br><span class="line">        print(&quot;start error&quot;)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    print(sys.argv[1], sys.argv[2])</span><br><span class="line">    </span><br><span class="line">path &#x3D; sys.argv[1] #文件夹目录</span><br><span class="line">files&#x3D; os.listdir(path) #得到文件夹下的所有文件名称</span><br><span class="line">s &#x3D; []</span><br><span class="line">for file in files: #遍历文件夹</span><br><span class="line">    if file.find(&quot;dex&quot;) &gt; 0: ## 查找dex 文件</span><br><span class="line">        sh &#x3D; &#39;jadx -j 1 -r -d &#39; + sys.argv[2] + &quot; &quot; + path + file</span><br><span class="line">        print(sh)</span><br><span class="line">        os.system(sh)</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">productType = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">goodType = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">energyType = [<span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">productGoodEnergyType = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line"><span class="comment"># 多个集合随机有序排列,同itertools.product(*productGoodEnergyType)</span></span><br><span class="line"><span class="keyword">for</span> newValue <span class="keyword">in</span> itertools.product(productType,goodType,energyType): </span><br><span class="line">    print(newValue)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按组合个数进行无序组合</span></span><br><span class="line">print(list(itertools.permutations(productType)))  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> productTypeIndex <span class="keyword">in</span> range(<span class="number">1</span>, len(productType) + <span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 单个集合按指定个数随机有序排列</span></span><br><span class="line">    productTypeTter1 = itertools.combinations(productType, productTypeIndex)  </span><br><span class="line">    print(list(productTypeTter1))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 单个集合按指定个数随机无序组合</span></span><br><span class="line">    productTypeTter2 = itertools.permutations(productType, productTypeIndex)  </span><br><span class="line">    print(list(productTypeTter2))</span><br></pre></td></tr></table></figure><h3 id="多集合组合"><a href="#多集合组合" class="headerlink" title="多集合组合"></a>多集合组合</h3><ol><li>拿到集合的组合</li><li>根据这些组合进行分组笛卡尔积</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def combine(big_dict):</span><br><span class="line">    # Cn1+Cn2+...+Cnn</span><br><span class="line">    # Cmn&#x3D;m!&#x2F;n!*(m-n)!</span><br><span class="line">    keys &#x3D; list(big_dict.keys())  # 获取keyList</span><br><span class="line">    combine_key_list &#x3D; []  # key值 排列组合</span><br><span class="line">    valueList &#x3D; []  # 将key替换为值</span><br><span class="line">    for i in range(1, len(keys) + 1):</span><br><span class="line">        iter &#x3D; itertools.combinations(keys, i)</span><br><span class="line">        # [(&#39;a&#39;,), (&#39;b&#39;,), (&#39;c&#39;,), (&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;c&#39;), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)]</span><br><span class="line">        combine_key_list.extend(list(iter))  # key的所有组合 以list形式加入列表</span><br><span class="line"></span><br><span class="line">    for m in combine_key_list:</span><br><span class="line">        # [[[1, 2, 3]], [[4, 5]], [[6, 7, 8, 9]], [[1, 2, 3], [4, 5]], [[1, 2, 3], [6, 7, 8, 9]], [[4, 5], [6, 7, 8, 9]], [[1, 2, 3], [4, 5], [6, 7, 8, 9]]]</span><br><span class="line">        valueList.append([big_dict.get(n) for n in m if n in keys])  # key所有组合转value组合 以object形式加入列表</span><br><span class="line"></span><br><span class="line">    param_list &#x3D; []</span><br><span class="line">    for index, value in enumerate(valueList):  # list转为索引序列</span><br><span class="line">        search_type_key &#x3D; list(combine_key_list[index])  # 根据当前值对应key</span><br><span class="line">        for item in itertools.product(*value):  # 集合中n个集合n组笛卡尔积</span><br><span class="line">            params &#x3D; dict(zip(search_type_key, list(item)))</span><br><span class="line">            param_list.append(urlencode(params))</span><br><span class="line">    print(param_list)</span><br><span class="line"></span><br><span class="line">d &#x3D; &#123;</span><br><span class="line">    &#39;a&#39;: [1,2,3],</span><br><span class="line">    &#39;b&#39;: [4,5],</span><br><span class="line">    &#39;c&#39;: [6,7,8,9],</span><br><span class="line">&#125;</span><br><span class="line">combine(d)</span><br></pre></td></tr></table></figure><h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><p><strong>转str</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t &#x3D; (1,2)</span><br><span class="line">l &#x3D; [3,4]</span><br><span class="line">print(&#39;,&#39;.join(map(str, t)) if isinstance(t,tuple) else t)</span><br><span class="line">print(&#39;,&#39;.join(map(str, l)) if isinstance(l,list) else l)</span><br></pre></td></tr></table></figure><p><strong>转dict</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(dict(zip(productType,goodType)))</span><br></pre></td></tr></table></figure><p><strong>转list</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def flatten(li):</span><br><span class="line">    return sum(([x] if not isinstance(x, list) else flatten(x) for x in li), [])</span><br></pre></td></tr></table></figure><p><strong>字典key替换</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param_dict[&#39;area&#39;] &#x3D; param_dict.pop(&#39;ownerProvince&#39;)+&#39;-&#39;+param_dict.pop(&#39;ownerCity&#39;)</span><br></pre></td></tr></table></figure><h2 id="Mongo"><a href="#Mongo" class="headerlink" title="Mongo"></a>Mongo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client &#x3D; pymongo.MongoClient(settings.get(&#39;MONGO_URI&#39;))[settings.get(&#39;MONGO_DB&#39;)]</span><br><span class="line">client[&#39;MUsedCar&#39;].create_index([(&quot;url&quot;, 1)], unique&#x3D;True)</span><br><span class="line">client[&#39;MUsedCar&#39;].insert(dict(&#123;&#39;url&#39;:used_car_url+urlencode(param_dict)&#125;))</span><br><span class="line">for doc in client[&#39;MUsedCarParams&#39;].find():</span><br><span class="line">    print(doc[&#39;params&#39;])</span><br></pre></td></tr></table></figure><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">param_dict &#x3D; dict(parse.parse_qsl(parse.unquote(doc[&#39;params&#39;])))  url解码并转为字典</span><br><span class="line">urlencode(param_dict)  字典转url编码</span><br></pre></td></tr></table></figure><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="idea生成注释文档"><a href="#idea生成注释文档" class="headerlink" title="idea生成注释文档"></a>idea生成注释文档</h2><p>File =&gt; setting =&gt; editor =&gt; File and Code Templates</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: onejane</span><br><span class="line">@time: $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line">@desc:</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>File =&gt; Setting=&gt; Editor=&gt; Live Templates</p><p><img src="/2021/02/22/%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%84%9A%E6%9C%AC/liveTemplate.png" alt="live template"></p><p>输入onejane代码提示直接回车即可</p><p>Tools-Generate JavaDoc</p><p><img src="/2021/02/22/%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%84%9A%E6%9C%AC/idea%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E6%96%87%E6%A1%A3.png" alt="idea生成注释文档"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zh_CN</span><br><span class="line">-tag ProjectDetails:a:&quot;项目详情:&quot; -tag update:a:&quot;项目更改:&quot; -tag CreateDate:a:&quot;创建时间:&quot; -encoding UTF-8 -charset UTF-8</span><br></pre></td></tr></table></figure><p><img src="/2021/02/22/%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%84%9A%E6%9C%AC/javaDoc.png" alt="javaDoc"></p><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><h3 id="多个分组多列求和"><a href="#多个分组多列求和" class="headerlink" title="多个分组多列求和"></a>多个分组多列求和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;MotoEssayShowDailyContextInfoDTO, List&lt;Object&gt;&gt; keyExtractor &#x3D; wr -&gt; Arrays.&lt;Object&gt;asList(wr.getBusinessDate(), wr.getContext());</span><br><span class="line">List&lt;MotoEssayShowDailyContextInfoDTO&gt; showDailyContextInfoDTOS &#x3D; infoByCondition.stream().collect(Collectors.groupingBy(keyExtractor,</span><br><span class="line">        Collectors.reducing((sum, s) -&gt;</span><br><span class="line">                new MotoEssayShowDailyContextInfoDTO(s.getBusinessDate(), s.getContext(), sum.getExposureArticleNum() + s.getExposureArticleNum(),</span><br><span class="line">                        sum.getExposureNum() + s.getExposureNum(), sum.getClickNum() + s.getClickNum(),</span><br><span class="line">                        sum.getDetailClickNum() + s.getDetailClickNum(), sum.getDuration() + s.getDuration(), sum.getFinish() + s.getFinish()))</span><br><span class="line">)).entrySet().stream().map(c -&gt; c.getValue().get()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="分组排序"><a href="#分组排序" class="headerlink" title="分组排序"></a>分组排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showDailyContextInfoDTOS.stream().collect(Collectors.groupingBy(o -&gt; o.getBusinessDate(), TreeMap::new,Collectors.toList()));</span><br></pre></td></tr></table></figure><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="多仓库"><a href="#多仓库" class="headerlink" title="多仓库"></a>多仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url --add origin git@github.com:OneJane&#x2F;CrawlerBase.git</span><br><span class="line">git push origin --all</span><br></pre></td></tr></table></figure><p>git remote add origin <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#105;&#116;&#101;&#101;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#x40;&#103;&#105;&#116;&#101;&#101;&#46;&#99;&#111;&#x6d;</a>:OneJane/picture.git   初始化后建立git库</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><h2 id="大仓库提交"><a href="#大仓库提交" class="headerlink" title="大仓库提交"></a>大仓库提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config http.postBuffer 524288000</span><br></pre></td></tr></table></figure><p>不行就使用git替代https地址</p><h2 id="合并不同提交历史"><a href="#合并不同提交历史" class="headerlink" title="合并不同提交历史"></a>合并不同提交历史</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><h2 id="恢复被删分支"><a href="#恢复被删分支" class="headerlink" title="恢复被删分支"></a>恢复被删分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git branch f&#x2F;wj-0419-5924 bcd2e64</span><br></pre></td></tr></table></figure><h1 id="Mongo-1"><a href="#Mongo-1" class="headerlink" title="Mongo"></a>Mongo</h1><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>批量将字段更新成字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#39;alimama&#39;).find(&#123;&#125;).forEach(function(x)&#123;</span><br><span class="line">    db.getCollection(&#39;alimama&#39;).updateOne(</span><br><span class="line">    &#123;_id: x._id&#125;, &#123;$set:&#123;income_rate: String(x.income_rate)&#125;&#125;</span><br><span class="line">)&#125;)</span><br></pre></td></tr></table></figure><p>批量新增字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#39;taobao&#39;).update(&#123;&#125;, &#123;$set: &#123;&#39;name&#39;:&quot;taobao&quot;&#125;&#125;, &#123;multi: true&#125;);</span><br></pre></td></tr></table></figure><p>批量修改字段名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#39;long_link&#39;).update(&#123;&#125;, &#123;&quot;$rename&quot;:&#123;&quot;long_link&quot;:&quot;orientPlanLinkUrl&quot;&#125;&#125;, false, true)</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>返回指定字段id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#39;alimama&#39;).find(&#123;&#125;,&#123;_id:0,id:1&#125;)</span><br></pre></td></tr></table></figure><p>按照url分组查询并倒序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#39;conditions&#39;).aggregate([&#123;$group : &#123;_id : &quot;$url&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;,&#123; $sort : &#123;  num_tutorial: -1 &#125; &#125;])</span><br></pre></td></tr></table></figure><p>模糊查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#39;conditions&#39;).find(&#123;&#39;url&#39;:&#123;&#39;$regex&#39;:&#39;https:*&#39;&#125;&#125;).count()</span><br></pre></td></tr></table></figure><p>导出</p><p>sublime 中ctrl+h 进行 {“_id”:.<em>:”(.</em>)”}\n  替换为 $1\n</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -h 172.20.0.186:27017 -d jddmoto -c mbrand -o mbrand.json --type json -f url</span><br></pre></td></tr></table></figure><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(a.n_id), COUNT(a.&#96;n_id&#96;) FROM &#96;motor_business_essay&#96; a, &#96;motor_business_essay_ext&#96; b where  locate(&#39;&quot;img&quot;:&quot;&quot;&#39;,a.c_short_vod_info)</span><br></pre></td></tr></table></figure><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="删除大文件"><a href="#删除大文件" class="headerlink" title="删除大文件"></a>删除大文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth&#x3D;1</span><br><span class="line">df -h</span><br><span class="line">lsof | grep deleted   查询内存中持续删除的进程</span><br><span class="line">kill -9 id</span><br></pre></td></tr></table></figure><h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><h2 id="新增复制文件路径-reg"><a href="#新增复制文件路径-reg" class="headerlink" title="新增复制文件路径.reg"></a>新增复制文件路径.reg</h2><p>UTF-8-BOM编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\copypath]</span><br><span class="line">@&#x3D;&quot;复制文件路径到剪贴板&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\copypath\command]</span><br><span class="line">@&#x3D;&quot;cmd &#x2F;c echo %1 | clip&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\copypathwithquote]</span><br><span class="line">@&#x3D;&quot;复制文件路径到剪贴板(带引号)&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\copypathwithquote\command]</span><br><span class="line">@&#x3D;&quot;cmd &#x2F;c echo \&quot;%1\&quot; | clip&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\copypath]</span><br><span class="line">@&#x3D;&quot;复制文件夹路径到剪贴板&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\copypath\command]</span><br><span class="line">@&#x3D;&quot;cmd &#x2F;c echo %1 | clip&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\copypathwithquote]</span><br><span class="line">@&#x3D;&quot;复制文件夹路径到剪贴板(带引号)&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\copypathwithquote\command]</span><br><span class="line">@&#x3D;&quot;cmd &#x2F;c echo \&quot;%1\&quot; | clip&quot;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加壳与脱壳之分类技术</title>
      <link href="/2021/02/21/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%88%86%E7%B1%BB%E6%8A%80%E6%9C%AF/"/>
      <url>/2021/02/21/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%88%86%E7%B1%BB%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="历代加壳技术分类"><a href="#历代加壳技术分类" class="headerlink" title="历代加壳技术分类"></a>历代加壳技术分类</h1><p><strong>动态加载</strong>是用到的时候再去加载，也叫懒加载，是dex加壳，插件化，热更新的基础，避免发布新版本需要用户全量更新app，快速迭代，提升用户体验。比如阿里的AndFix和HotFix，腾讯的tinker，美团的Robust等热修复框架的基础。动态加载的dex不具有生命周期特征，APP中的Activity，Service等组件无法正常工作，只能完成一般函数的调用。需要对ClassLoader进行修正，APP才能够正常运行，有<strong>反射替换</strong>和<strong>反射插入</strong>两种修正手段，这是加壳app必然要做的一步。</p><h2 id="第一代壳-dex加密"><a href="#第一代壳-dex加密" class="headerlink" title="第一代壳:dex加密"></a>第一代壳:dex加密</h2><ol><li><p>Dex字符串加密</p></li><li><p>资源加密</p></li><li><p>对抗反编译</p></li><li><p>反调试</p></li><li><p>自定义 DexClass Loader</p></li></ol><blockquote><p>由于是dex整体保护，在内存中映射是整体连续的，通过定位起始地址将app完整脱下来</p></blockquote><h2 id="第二代壳-dex抽取与加固"><a href="#第二代壳-dex抽取与加固" class="headerlink" title="第二代壳:dex抽取与加固"></a>第二代壳:dex抽取与加固</h2><ol><li><p>对抗第一代壳常见的脱壳法</p></li><li><p>Dex method代码抽取到外部(通常企业版)</p></li><li><p>Dex动态加载</p></li><li><p>So加密</p></li></ol><blockquote><p>首先dex整体保护，其次对关键函数进行抽取(dump内存区域中dex关键类为空)进行so加密，对抗第一代壳常用脱壳法(从关键hook点dump dex)</p></blockquote><h2 id="第三代壳-dex动态解密与混淆"><a href="#第三代壳-dex动态解密与混淆" class="headerlink" title="第三代壳:dex动态解密与混淆"></a>第三代壳:dex动态解密与混淆</h2><ol><li><p>Dex method代码动态解密</p></li><li><p>So代码膨胀混淆</p></li><li><p>对抗之前出现的所有脱壳法</p></li></ol><blockquote><p>对抗第二代壳的一个通用脱壳工具DexHunter(通过遍历dex所有类进行加载初始化，将内存中dex完整恢复),dex中method动态解密，指定函数只有被调用时才执行，dex在内存中始终不是完整的状态</p></blockquote><h2 id="第四代壳-vmp壳"><a href="#第四代壳-vmp壳" class="headerlink" title="第四代壳:vmp壳"></a>第四代壳:vmp壳</h2><p>目前仍然是smali指令级别的vmp，未来将出现arm指令级别vmp</p><h1 id="加壳技术分析"><a href="#加壳技术分析" class="headerlink" title="加壳技术分析"></a>加壳技术分析</h1><h2 id="dex加固"><a href="#dex加固" class="headerlink" title="dex加固"></a><strong>dex加固</strong></h2><ul><li>dex整体加固:文件加载（<strong>监控app访问文件的记录</strong>）和内存加载（<strong>对内存dex的解密直接动态加载</strong>）</li><li>函数抽取:在函数粒度完成代码的保护：<strong>dump下dex的关键函数体置空</strong></li><li>VMP和Dex2C:JAVA函数 Native化。<strong>vmp-&gt;逆向分析解释器找到取址译码</strong></li></ul><h3 id="dex整体加固"><a href="#dex整体加固" class="headerlink" title="dex整体加固"></a>dex整体加固</h3><p>dex整体加壳是基础防护，所有加壳的app必然都有，关键在于怎么区分函数抽取，vmp以及dex2c甚至多种技术混合的混合型壳。</p><ol><li><p>文件加载:定位解密文件是关键</p></li><li><p>内存加载:加载时机和内存起始地址是关键</p></li></ol><p>通用方案:dex打开和优化的流程以及产出的odex、dex2oat编译的流程和生成的oat文件等等</p><h3 id="函数抽取"><a href="#函数抽取" class="headerlink" title="函数抽取"></a>函数抽取</h3><ol><li>类加载和函数执行前的流程解密</li><li>函数执行中动态自解密</li></ol><p>方案：关注被抽取的函数的执行流程是关键！定位被抽取的函数的恢复时机即可。</p><p>获取到保护的dex后,函数体的内容是无效的,注意这里说的是无效,而不是无意义,有的app壳后函数依然是有意义的,但不是我们想要的。f5查看函数体全部为空，则表现为函数抽取。</p><p><img src="/2021/02/21/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%88%86%E7%B1%BB%E6%8A%80%E6%9C%AF/%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96%E6%A0%B7%E6%9C%AC1.png" alt="函数抽取样本"></p><p><img src="/2021/02/21/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%88%86%E7%B1%BB%E6%8A%80%E6%9C%AF/%E5%87%BD%E6%95%B0%E6%8A%BD%E5%8F%96%E6%A0%B7%E6%9C%AC2.png" alt="函数抽取样本"></p><h3 id="VMP"><a href="#VMP" class="headerlink" title="VMP"></a><strong>VMP</strong></h3><p>定位解释器是关键，找到映射关系便可恢复。</p><p>获取到保护的dex后,函数的属性由java属性变为 Native,典型的有数字的 onCreate函数 Native化JNI函数。vmp壳的核心就是dalvik虚拟机的解释器原理。</p><p><img src="/2021/02/21/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%88%86%E7%B1%BB%E6%8A%80%E6%9C%AF/vmp%E6%A0%B7%E6%9C%AC.png" alt="vmp样本"></p><blockquote><p> 若所有vmp保护的函数都有自己的解释器则so必然很大，所以必然共享一个解释器，vmp化的函数注册地址一致或者函数逻辑相似。</p></blockquote><p><img src="/2021/02/21/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%88%86%E7%B1%BB%E6%8A%80%E6%9C%AF/vmp%E5%8C%96%E7%9A%84%E5%87%BD%E6%95%B0%E6%B3%A8%E5%86%8C%E5%9C%B0%E5%9D%80%E4%B8%80%E8%87%B4.png" alt="vmp化的函数注册地址一致"></p><p>MainActivity动态注册地址在d3dec3f1,TestActivity地址一致，说明vmp保护。</p><blockquote><p> 参考vmp加壳方案之<a href="https://github.com/chago/ADVMP" target="_blank" rel="noopener">ADVMP</a>，vmp对每一种smali指令处理，保护了函数后函数属性发生改变，因为解释器一般是用JNI实现，java易被反编译，故没用java实现，基本由c实现，防止快速定位到解释器的取址译码和执行的流程会加ollvm混淆保护之类。<img src="/2021/02/21/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%88%86%E7%B1%BB%E6%8A%80%E6%9C%AF/ADVMP.png" alt="ADVMP"></p></blockquote><h3 id="Dex2c"><a href="#Dex2c" class="headerlink" title="Dex2c"></a><strong>Dex2c</strong></h3><p>基础是编译原理，进行了等价语义转换，彻底还原难度巨大。</p><p>方案：关注JNI相关的api调用是关键，也是分析VMP和dex2c保护的函数的逻辑的关键。</p><p>获取到保护的dex后保护的函数属性有java变成native，dcc保护后所有java属性的函数变成jni函数，只能看到类名和参数。核心原理与编译原理相关，传统编译原理是编译器经过词法分析语法分析生成二进制代码，dex2c中生成结果是c、c++文件，经过ndk编译器最终编译为so,每一个函数基本编译成一个c/c++文件，ubuntu中编译最终生成一个so。</p><p><img src="/2021/02/21/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%88%86%E7%B1%BB%E6%8A%80%E6%9C%AF/dcc%E4%BF%9D%E6%8A%A4%E6%A0%B7%E6%9C%AC.png" alt="dcc保护"></p><blockquote><p>dex2c核心对指定java函数进行语义分析生成各个不同的c/c++代码编译为相应so，自然dex2c保护的函数逻辑不一致，自然注册地址不同。</p></blockquote><p><img src="/2021/02/21/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%88%86%E7%B1%BB%E6%8A%80%E6%9C%AF/dex2c%E4%BF%9D%E6%8A%A4%E6%B3%A8%E5%86%8C%E5%9C%B0%E5%9D%80%E4%B8%8D%E5%90%8C.png" alt="dex2c保护注册地址不同"></p><p>MainActivity的地址在7ba61b17c0，TestActivity地址在7ba61ac604，说明dex2c保护。</p><p>dcc_out.apk在lib下编译生成了so文件中,jni函数静态注册都存放于so文件中，使用IDA v7打开libnc.so，搜索java就可以找到所有jni函数。</p><blockquote><p>dcc_out编译于项目LoadDex,新增FirstActivity，SecondActivity</p><p>MainActivity.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">static&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.loadLibrary(&quot;nc&quot;);</span><br><span class="line">    &#125; catch (UnsatisfiedLinkError e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line">Button mybutton01&#x3D;findViewById(R.id.button01);</span><br><span class="line">mybutton01.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        context.startActivity(new Intent(context,FirstActivity.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Button mybutton02&#x3D;findViewById(R.id.button02);</span><br><span class="line">mybutton02.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        context.startActivity(new Intent(context,SecondActivity.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>AndroidManifest.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name&#x3D;&quot;.FirstActivity&quot;&gt;&lt;&#x2F;activity&gt;</span><br><span class="line">&lt;activity android:name&#x3D;&quot;.SecondActivity&quot;&gt;&lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><p>activity_main.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:id&#x3D;&quot;@+id&#x2F;LinearLayout1&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;button01&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity&#x3D;&quot;center_horizontal&quot;</span><br><span class="line">        android:text&#x3D;&quot;FirstActivity&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;button02&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity&#x3D;&quot;center_horizontal&quot;</span><br><span class="line">        android:text&#x3D;&quot;SecondActivity&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure></blockquote><p>dcc_ollvm.apk 在dex2c过程中加入了ollvm，在ida中打开so，jni找不到。</p><blockquote><p>参考dex2c加壳方案之<a href="https://github.com/amimo/dcc" target="_blank" rel="noopener">dcc</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;amimo&#x2F;dcc.git</span><br><span class="line">pyenv local 3.8.5 &amp;&amp; cd dcc &amp;&amp; pip install -r requirements.txt</span><br><span class="line">vim filter.txt  添加.*onejane*. 编译函数名含有onejane的函数</span><br><span class="line">python dcc.py dcc.apk -o dcc_out.apk  加固app</span><br></pre></td></tr></table></figure></blockquote><p>VMP和dex2c是高级防护</p><ol><li><p>VMP:定位解释器是关键,找到映射关系便可恢复</p></li><li><p>dex2c:基础是编译原理,进行了等价语义转换,彻底还原难度巨大:</p></li></ol><p>通用分类技术:关注JNI相关的ap调用是关键,也是分析VMP和dex2c保护的函数的逻辑的关键。</p><h3 id="混合型壳"><a href="#混合型壳" class="headerlink" title="混合型壳"></a><strong>混合型壳</strong></h3><p>多种加固技术混合使用,比如先将原有smal指令流使用VMP或dex2c保护,构建object数组传递给jni函数进行调用，然后再经过函数抽取进一步保护</p><p><img src="/2021/02/21/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%88%86%E7%B1%BB%E6%8A%80%E6%9C%AF/%E6%B7%B7%E5%90%88%E5%9E%8B%E5%A3%B3.png" alt="混合型壳"></p><p><strong>区分apk保护技术</strong></p><table><thead><tr><th></th><th>是否Native化</th><th>函数体无效</th></tr></thead><tbody><tr><td>函数抽取类壳</td><td>否</td><td>是</td></tr><tr><td>vmp壳</td><td>是</td><td>native化</td></tr><tr><td>Dex2c壳</td><td>是</td><td>native化</td></tr></tbody></table><h2 id="so加固"><a href="#so加固" class="headerlink" title="so加固"></a><strong>so加固</strong></h2><ul><li><p>基于init、 init_array以及JNI_Onload函数的加壳</p></li><li><p>基于自定义linker的加壳</p></li></ul><p><strong>IDA快捷键</strong></p><table><thead><tr><th>空格键</th><th>反汇编窗口切换文本跟图形</th></tr></thead><tbody><tr><td>ESC</td><td>退到上一个操作地址</td></tr><tr><td>F5</td><td>C伪代码</td></tr><tr><td>alt+t</td><td>搜索文本</td></tr></tbody></table><hr><ul><li>一二三代壳和加壳技术分类识别</li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
          <category> 加壳与脱壳 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fart </tag>
            
            <tag> vmp </tag>
            
            <tag> dex2c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓包环境与hook</title>
      <link href="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/"/>
      <url>/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="Http抓包"><a href="#Http抓包" class="headerlink" title="Http抓包"></a>Http抓包</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/网络七层模型.png" alt="image-20210219000224919" style="zoom: 50%;"><p>平时我们碰到的http和https都在应用层，socks在会话层，tcp和udp在传输层。ip在网络层。代理都是通过给wifi设置http代理的方式进行抓包，只是在应用层抓包，所以会被很轻易的检测到和绕过的。  很多应用会通过  <code>System.getProperty(“http.proxyHost”);   System.getProperty(“http.proxyPort”);</code>  这两个API来查看当前系统是否挂了http代理，会很轻松的让你的抓包失效。  所以我们需要换一种方式来设置代理。就是设置vpn代理，vpn是属于网络层的，设置了vpn后，你的手机上ifconfig后会多一个接口，等于加了一个虚拟网卡，所有的流量都会从这走。应用层和传输层的请求都可以拿到，还不会被上面提及的两个api所检测。</p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/七层网络.png" alt="七层网" style="zoom:80%;"><p>图片视频处于应用层，http协议横跨应用层–表示层–会话层，socks、ssl属于会话层，IP属于网络层,端口属于传输层</p><p><strong>应用层Https抓包的根本原理</strong></p><p>HTTPS是包裹在SSL协议里的HTTP</p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/抓包原理.png" alt="抓包原理" style="zoom:50%;"><p>在开始 APP 分析时候我们提到使用 Charles 抓不到包，设置了 SSL 代理也没有用，当我们反编译分析脱壳后的dex找到构造请求的地方时，发现了真相，和 SSL 没有关系，是因 openConnection(Proxy.NO_PROXY)，使用<strong>vpn抓包</strong>后系统将多一个Interface，设置vpn代理，vpn是属于网络层的，设置了vpn后，你的手机上ifconfig后会多一个接口，等于加了一个虚拟网卡，所有的流量都会从这走。应用层和传输层的请求都可以拿到，还不会被上面提及的两个api所检测。</p><p><code>ip route show table 0|grep default</code>  手机路由表第一条降维打击网络层,任何api都必须经过路由解析http</p><p>不过<code>App</code>可以通过判断<code>java.net.NetworkInterface.getName()</code>是否等于“tun0”或“ppp0” 或者 <code>android.net.ConnectivityManager.getNetworkCapabilities</code>来判断是否存在VPN。Bypass也很简单，hook该api使其返回“rmnet_data1”，即可达到过vpn检测目的。</p><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/%E6%A3%80%E6%B5%8BVPN.png" alt="检测VPN的API"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>tar zxf charles-proxy-4.6.1_amd64.tar.gz &amp;&amp; ./charles 通过<a href="https://www.charles.ren/" target="_blank" rel="noopener">注册码</a>注册或生成加权<a href="https://www.zzzmode.com/mytools/charles/" target="_blank" rel="noopener">jar包</a>破解</p><p>adb install 0714com.tunnelworkshop.postern_2018-10-07.apk</p><p><strong>网络设置</strong></p><p>主机连接无线网，虚拟机网络连接修改NAT设置桥接模式即可，不用勾选复制物理网络连接状态，保证手机192.168.0.100和虚拟机192.168.0.109和主机192.168.0.108互相ping通</p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/虚拟网络设置.png" alt="虚拟网络设置" style="zoom:80%;"><p><strong>配置Postern并启动VPN</strong></p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/设置postern.png" alt="Postern配置代理" style="zoom: 80%;"><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/Postern配置规则.png" alt="Postern配置规则" style="zoom:80%;"><blockquote><p>如需安装https，需要开启SSL Proxying Settings-Enable SSL Proxying,设置规则*.*</p></blockquote><p><strong>配置Burpsuite</strong></p><p>java -jar burp-loader-keygen.jar - Run - 复制License -EnterLicense Key - Manual Activition - Copy Request 到 Activation Request - 复制Activition Response到Paster response</p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/配置不限ip连接.png" alt="配置不限ip连接" style="zoom:80%;"><p>配置Postern通过代理192.168.0.109:8080并重启VPN</p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/burp抓包.png" alt="burp抓包设置过滤" style="zoom:80%;"><h1 id="Https和Socks5抓包"><a href="#Https和Socks5抓包" class="headerlink" title="Https和Socks5抓包"></a>Https和Socks5抓包</h1><blockquote><p>http+加密+认证+完整性保护=https是身披ssl的http</p></blockquote><p>HTTP未加密主要有这些不足</p><ul><li>通信使用明文(不加密),内容可能会被窃听</li><li>不验证通信方的身份,因此有可能遭遇伪装  DNS劫持-&gt;GFW翻墙</li><li>无法证明报文的完整性,所以有可能已遭篡改 运营商劫持-&gt;弹窗广告</li></ul><p><code>cat /etc/resolv.conf</code> 查看主机dns服务器</p><p><strong>通信的加密</strong><br>HTTP协议中没有加密机制,但可以通过和SSL( Secure Socket Layer,安全套接层)或TLS( Transport Layer Security,安全层传输协议)的组合使用,加密HTTP的通信内容。用SSL建立安全通信线路之后,就可以在这条线路上进行HTTP通信了。与SSL组合使用的HTTP被称为Https(HTTP Secure,超文本传输安全协议)或http over ssl。</p><p><strong>内容的加密</strong><br>由于HTTP协议中没有加密机制,那么就对HTTP协议传输的内容本身加密。即把HTTP报文里所含的内容进行加密处理在这种情况下,客户端需要对HTTP报文进行加密处理后再发送请求。诚然,为了做到有效的内容加密,前提是要求客户端和服务器同时具备加密和解密机制。主要应用在Web服务中。有一点必须引起注意,由于该方式不同于SSL或TLS将整个通信线路加密处理,所以内容仍有被篡改的风险。</p><p>设置-安全性和位置信息-加密与凭据-信任的凭据   查看安装在手机上的信任凭据</p><img src="抓包环境与hook/https与http.png" alt="https与http" style="zoom:80%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.android.settings explore</span><br><span class="line">memory list modules</span><br><span class="line">memory list exports libssl.so</span><br><span class="line">memory list exports libssl.so --json &quot;&#x2F;root&#x2F;libssl.txt&quot;  搜索rsa md5 aes sha非对称加解密</span><br></pre></td></tr></table></figure><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/%E5%85%AC%E7%A7%81%E9%92%A5%E5%8A%A0%E8%A7%A3%E5%AF%86.png" alt="HTTPS采用共享秘钥和公开秘钥混合加密"></p><h2 id="开启https"><a href="#开启https" class="headerlink" title="开启https"></a>开启https</h2><p>虚拟机启动charles，手机wifi设置代理192.168.0.109:8888，访问chls.pro/ssl安装证书</p><p>关闭代理，启动Postern代理192.168.0.109:8888并开启VPN</p><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/chales%E5%BC%80%E5%90%AFssl%E6%8A%93%E5%8C%85.png" alt="chales开启ssl抓包"></p><p><code>adb install iqiyi_696.apk</code>启动爱奇艺抓包，虽然浏览器能抓到，但是依旧app抓不到，基于android 8.1+Magisk ,需要把个人证书放到系统根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;</span><br><span class="line">mount -o remount,rw &#x2F;</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">mount -o remount,ro &#x2F;</span><br></pre></td></tr></table></figure><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/证书放入根目录.png" alt="证书放入根目录" style="zoom:50%;"><blockquote><p>Android将证书放入根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;</span><br><span class="line">mount -o rw,remount &#x2F;system</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">mount -o ro,remount &#x2F;system</span><br></pre></td></tr></table></figure></blockquote><h2 id="开启socks5"><a href="#开启socks5" class="headerlink" title="开启socks5"></a>开启socks5</h2><p>若依旧抓不全包，则使用Postern开启socks5抓包并配置规则开启VPN，charles配置socks抓包</p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/Postern配置socks5.png" alt="Postern配置socks5" style="zoom:80%;"><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/charles配置socks5.png" alt="charles配置socks5" style="zoom:80%;"><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/socks5抓包.png" alt="socks5抓包" style="zoom:80%;"><h3 id="Soul登录抓包"><a href="#Soul登录抓包" class="headerlink" title="Soul登录抓包"></a>Soul登录抓包</h3><p><code>adb install soul_channel_soul.apk</code> soul在登录时报错<code>400 No required SSL certificate was sent</code>，缺少证书，需要在charles中安装客户端证书获取服务器信任。</p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/soul抓包报错.png" alt="soul抓包报错" style="zoom:80%;"><h4 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h4><p>frida两种模式：attach在app启动之后进行hook， spawn未启动时就通过包名启动apk进行hook</p><h4 id="ssl-js"><a href="#ssl-js" class="headerlink" title="ssl.js"></a>ssl.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function hook_KeyStore_load() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var StringClass &#x3D; Java.use(&quot;java.lang.String&quot;);</span><br><span class="line">        var KeyStore &#x3D; Java.use(&quot;java.security.KeyStore&quot;);</span><br><span class="line">        KeyStore.load.overload(&#39;java.security.KeyStore$LoadStoreParameter&#39;).implementation &#x3D; function (arg0) &#123;</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line"></span><br><span class="line">            console.log(&quot;KeyStore.load1:&quot;, arg0);</span><br><span class="line">            this.load(arg0);</span><br><span class="line">        &#125;;</span><br><span class="line">        KeyStore.load.overload(&#39;java.io.InputStream&#39;, &#39;[C&#39;).implementation &#x3D; function (arg0, arg1) &#123;</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line"></span><br><span class="line">            console.log(&quot;KeyStore.load2:&quot;, arg0, arg1 ? StringClass.$new(arg1) : null);</span><br><span class="line">            this.load(arg0, arg1);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        console.log(&quot;hook_KeyStore_load...&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(hook_KeyStore_load)</span><br></pre></td></tr></table></figure><h4 id="开启hook"><a href="#开启hook" class="headerlink" title="开启hook"></a>开启hook</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs128arm64  开启frida-server</span><br><span class="line">pyenv local 3.8.0</span><br><span class="line">frida --version   版本一致为12.8.0</span><br><span class="line">top 查看soul的包名为cn.soulapp.android</span><br><span class="line">frida -U -f cn.soulapp.android -l ssl.js  通过attach进行hook公钥加解密的框架层api，打印密码用于解开证书用</span><br><span class="line">%resume  重新启动</span><br><span class="line">frida -U -f cn.soulapp.android -l ssl.js  --no-pause  通过spawn进行hook，证书公钥发送给服务器，从服务器获取session用私钥进行解密的api进行hook，属于自吐，查看terminal中的密码 &#125;%2R+\OSsjpP!w%X</span><br></pre></td></tr></table></figure><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/%E6%9F%A5%E7%9C%8BKeyStore.png" alt="查看KeyStore"></p><h4 id="搜索证书"><a href="#搜索证书" class="headerlink" title="搜索证书"></a>搜索证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">7z x soul_channel_soul.apk</span><br><span class="line">tree -NCfhl|grep -i p12 找到证书位置</span><br><span class="line">或者objection -g cn.soulapp.android explore  如果报错查看frida的客户端和服务端版本是否匹配</span><br><span class="line">android hooking watch class_method java.io.File$init --dump-args 如果找不到文件</span><br><span class="line">exit并干掉app后</span><br><span class="line">objection -g cn.soulapp.android explore --start-command &quot;android hooking watch class_method java.io.File$init --dump-args&quot;</span><br><span class="line">du -h assets&#x2F;client.p12</span><br><span class="line">file assets&#x2F;client.p12</span><br><span class="line">thunar .  在windows上找到后双击导入私钥需要密码即刚才hook到的&#125;%2R+\OSsjpP!w%X  该证书的内容即可以全部显示</span><br></pre></td></tr></table></figure><h4 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h4><p>导入charles - Proxy- SSL Proxying Settings 添加客户端证书</p><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E5%85%A8%E5%AF%86%E7%A0%81admin.png" alt="自定义安全密码admin"></p><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%81%E4%B9%A6.png" alt="安装客户端证书"></p><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/%E8%BE%93%E5%85%A5KeyStore.png" alt="输入KeyStore"></p><p>charls将对任意服务器发送该客户端证书 意味着用app访问所有的服务器 测试登录</p><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/soul%E6%8A%93%E5%8C%85%E6%88%90%E5%8A%9F.png" alt="soul抓包成功"></p><h3 id="国外app"><a href="#国外app" class="headerlink" title="国外app"></a>国外app</h3><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" alt="proxy-External proxy servers设置代理"></p><p>访问ip111.cn通过测试</p><h1 id="Hook抓包"><a href="#Hook抓包" class="headerlink" title="Hook抓包"></a>Hook抓包</h1><ul><li><p>缺点：不如抓包软件全面</p></li><li><p>优点：无视证书、基于HOOK直接得到参数、打调用栈得到参数的构成和来源</p></li></ul><blockquote><p>一般HTTPS：大部分只采用客户端校验服务器 iqiyi<br>双向绑定：很少会有服务器校验客户端 soul<br>SSL Cert Pinning：更少：趣充</p></blockquote><p>adb install movetv.apk 使用Postern和Charles开启socks5即可完整抓到注册登录的请求，部分https无法抓到</p><p>安装证书chls.pro/ssl并把把个人证书放到系统根目录，启动ssl抓包，关闭客户端证书的soulapp.cn,否则会误认为请求来自于soul，即可抓到https包。</p><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/开启ssl.png" alt="开启ssl" style="zoom:80%;"><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/%E5%85%B3%E9%97%ADsoul%E8%AF%81%E4%B9%A6.png" alt="关闭soul证书"></p><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs128arm64 启动frida-server</span><br><span class="line">objection -g com.cz.babySister explore -P ~&#x2F;.objection&#x2F;plugins</span><br><span class="line">plugin dexdump dump</span><br></pre></td></tr></table></figure><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/movetv脱壳.png" alt="movetv脱壳" style="zoom: 67%;"><h2 id="批量hook"><a href="#批量hook" class="headerlink" title="批量hook"></a>批量hook</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">android hooking list classes    列出所有类</span><br><span class="line">android hooking list activities  查看所有activity</span><br><span class="line">cat ~&#x2F;.objection&#x2F;objection.log|grep -i httpurl </span><br><span class="line">cat objection.log|grep -i http  拿到所有关于http相关类，并将前面都加入命令android hooking wathc class存入hooklist.txt</span><br><span class="line">objection -g com.android.settings explore -c &quot;hooklist.txt&quot;  加载命令文件即可批量hook</span><br><span class="line">dumpsys activity top|grep baby  在shell中拿到包当前所在activity</span><br><span class="line">plugin wallbreaker objectsearch com.cz.babySister.activity.LoginActivity --fullname  搜索类信息地址</span><br><span class="line">android heap search instances com.cz.babySister.activity.LoginActivity  查看activity属性信息</span><br></pre></td></tr></table></figure><h3 id="Zentracer"><a href="#Zentracer" class="headerlink" title="Zentracer"></a>Zentracer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs1428arm64 开始frida-server</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;ZenTracer</span><br><span class="line">cd ZenTracer &amp;&amp; pyenv local 3.8.5</span><br><span class="line">python -m pip install --upgrade pip</span><br><span class="line">pip install PyQt5</span><br><span class="line">python ZenTracer.py  开始hook设置Match RegEx并开启Start</span><br></pre></td></tr></table></figure><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/Zentracer%E5%BC%80%E5%90%AFhook.png" alt="Zentracer开启hook"></p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/登录注册.png" alt="登录注册" style="zoom:80%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method java.net.HttpURLConnection.getFollowRedirects --dump-args --dump-backtrace --dump-return  hook方法打印调用栈登录定位HTTPURLConnection.getFollowRedirects在com.cz.babySister.c.a.a调用</span><br></pre></td></tr></table></figure><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/%E5%AE%9A%E4%BD%8D%E5%87%BD%E6%95%B0%E6%94%B6%E5%8F%91%E5%8C%85%E7%B1%BB.png" alt="定位函数收发包类"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="春水堂"><a href="#春水堂" class="headerlink" title="春水堂"></a>春水堂</h3><p>adb install 春水堂_2.1.0.0强混淆.apk</p><ol><li>通过<code>objection -g org.sfjboldyvukzzlpp explore</code>内存漫游后访问视频，<code>cat objection.log|grep -i okhttp3</code>发现根本找不到相关http类信息</li><li>通过<code>apktool d 春水堂_2.1.0.0强混淆.apk</code>解包后搜索ok3信息<code>cd 春水堂_2.1.0.0强混淆 &amp;&amp; grep -ril &quot;okhttp3&quot; *</code>找到相关smali</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs128arm64  启动 frida</span><br><span class="line">pyenv local 3.8.0</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;siyujie&#x2F;OkHttpLogger-Frida.git</span><br><span class="line">cd OkHttpLogger-Frida &amp;&amp; adb push okhttpfind.dex &#x2F;data&#x2F;local&#x2F;tmp  将dex文件放入手机并chmod 777</span><br><span class="line">frida -U -f org.sfjboldyvukzzlpp -l okhttp_poker.js --no-pause</span><br><span class="line">find() 查看是否使用okhttp并查看混淆结果</span><br></pre></td></tr></table></figure><img src="抓包环境与hook/查看okhttp混淆结果.png" alt="查看okhttp混淆结果" style="zoom:80%;"><p>将Find Result下的内容复制到okhttp_poker.js开头，替换原有混淆类名</p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/替换混淆结果.png" alt="替换混淆结果" style="zoom:80%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f org.sfjboldyvukzzlpp -l okhttp_poker.js --no-pause  退出后重新frida调用</span><br><span class="line">hold() 通杀所有okhttp混淆参数结果</span><br></pre></td></tr></table></figure><img src="抓包环境与hook/通杀okhttp.png" alt="通杀okhttp" style="zoom:80%;"><h3 id="爱奇艺"><a href="#爱奇艺" class="headerlink" title="爱奇艺"></a>爱奇艺</h3><h4 id="hook-1"><a href="#hook-1" class="headerlink" title="hook"></a>hook</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;BigFaceCat2017&#x2F;frida_ssl_logger.git  框架层的conscrypt本质上是走的native层的ssl</span><br><span class="line">adb install iqiyi_696.apk</span><br><span class="line">electron-ssr &amp;&amp; proxychains pip install hexdump   安装hexdump</span><br><span class="line">python ssl_logger.py -U -f com.qiyi.video &gt;&gt; iqiyi.txt  启动iqiyi并开启hook所有ssl信息保存到文件</span><br></pre></td></tr></table></figure><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/iqiyi%E6%8A%93%E5%8C%85.jpg" alt="ssl抓包iqiyi"></p><h4 id="ddms"><a href="#ddms" class="headerlink" title="ddms"></a>ddms</h4><p>xposed安装XAppDebug模块，开启debug，选中春水堂APP开启调试</p><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/XAppDebug%E8%B0%83%E8%AF%95.png" alt="XAppDebug调试"></p><p>~/Android/Sdk/tools/monitor   启动ddms</p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/选中进程进行方法剖析.png" alt="选中进程进行方法剖析" style="zoom:80%;"><p>使用Trace based profiling，登录后停止方法剖析，搜索HttpURLConnection</p><h3 id="趣充"><a href="#趣充" class="headerlink" title="趣充"></a>趣充</h3><p>adb install -r -t quchong.apk</p><p>./charles 启动charles抓包注册获取验证码</p><p> <img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/image-20210707100228016.png" alt="image-20210707100228016"></p><p>服务器在校验客户端证书 ： 400 No required SSL certificate was sent</p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/t01c2d220dfd81d4d18.png" alt="img" style="zoom: 67%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function replaceKill()&#123;</span><br><span class="line">&#x2F;&#x2F; 替换掉崩掉时的内容，打印崩掉时的参数和pid，不执行崩掉的逻辑，让程序不要崩</span><br><span class="line">    console.log(&quot;Preventing from killing ...&quot;)</span><br><span class="line">    var kill_addr &#x3D; Module.findExportByName(&quot;libc.so&quot;, &quot;kill&quot;);</span><br><span class="line">    &#x2F;&#x2F; var kill &#x3D; new NativeFunction(kill_addr,&quot;int&quot;,[&#39;int&#39;,&#39;int&#39;]);</span><br><span class="line">    Interceptor.replace(kill_addr,new NativeCallback(function(arg0,arg1)&#123;</span><br><span class="line">        console.log(&quot;arg0&#x3D;&gt; &quot;,arg0)</span><br><span class="line">        console.log(&quot;arg1&#x3D;&gt; &quot;,arg1)</span><br><span class="line"></span><br><span class="line">    &#125;,&quot;int&quot;,[&#39;int&#39;,&#39;int&#39;]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    replaceKill()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p>frida -UF -l quchong.js   抓包获取注册验证码</p><p>frida -UF -l  hookSocket.js -o quchong.txt</p><p>ps -ef|grep -i quchong 获取包名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.whwy.equchong explore</span><br><span class="line">android hooking search classes okhttp</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;siyujie&#x2F;OkHttpLogger-Frida.git</span><br><span class="line">adb push okhttpfind.dex &#x2F;data&#x2F;local&#x2F;tmp  &amp;&amp; chmod 777 okhttpfind.dex</span><br><span class="line">frida -U -l okhttp_poker.js -f com.whwy.equchong --no-pause</span><br><span class="line">find()  查看是否被混淆后的okhttp的参数拷贝到okhttp_poker.js上面定义参数</span><br><span class="line">frida -UF -l okhttp_poker.js -o quchong.txt   attach模式操作发送验证码前启动hook</span><br><span class="line">frida -U -l okhttp_poker.js -f com.whwy.equchong --no-pause -o qichong.txt  spawn模式</span><br><span class="line">hold()   发送验证码抓包</span><br></pre></td></tr></table></figure><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/image-20210707105723540.png" alt="image-20210707105723540"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">function hook_KeyStore_load() &#123;</span><br><span class="line">&#x2F;&#x2F; hook证书 自吐证书密码和内容保存在sdcard中</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var ByteString &#x3D; Java.use(com.android.okhttp.okio.ByteString);</span><br><span class="line">        var myArray&#x3D;new Array(1024);</span><br><span class="line">        var i &#x3D; 0</span><br><span class="line">        for (i &#x3D; 0; i  myArray.length; i++) &#123;</span><br><span class="line">            myArray[i]&#x3D; 0x0;</span><br><span class="line">         &#125;</span><br><span class="line">        var buffer &#x3D; Java.array(&#39;byte&#39;,myArray);</span><br><span class="line">        </span><br><span class="line">        var StringClass &#x3D; Java.use(java.lang.String);</span><br><span class="line">        var KeyStore &#x3D; Java.use(java.security.KeyStore);</span><br><span class="line">        KeyStore.load.overload(&#39;java.security.KeyStore$LoadStoreParameter&#39;).implementation &#x3D; function (arg0) &#123;</span><br><span class="line">            console.log(Java.use(android.util.Log).getStackTraceString(Java.use(java.lang.Throwable).$new()));</span><br><span class="line"></span><br><span class="line">            console.log(KeyStore.load1, arg0);</span><br><span class="line">            this.load(arg0);</span><br><span class="line">        &#125;;</span><br><span class="line">        KeyStore.load.overload(&#39;java.io.InputStream&#39;, &#39;[C&#39;).implementation &#x3D; function (arg0, arg1) &#123;</span><br><span class="line">            console.log(Java.use(android.util.Log).getStackTraceString(Java.use(java.lang.Throwable).$new()));</span><br><span class="line"></span><br><span class="line">            console.log(KeyStore.load2, arg0, arg1  StringClass.$new(arg1)  null);</span><br><span class="line">            if (arg0)&#123;</span><br><span class="line">                var file &#x3D;  Java.use(java.io.File).$new(sdcardDownload+ String(arg0)+.p12);</span><br><span class="line">                var out &#x3D; Java.use(java.io.FileOutputStream).$new(file);</span><br><span class="line">                var r;</span><br><span class="line">                while( (r &#x3D; arg0.read(buffer))  0)&#123;</span><br><span class="line">                    out.write(buffer,0,r)</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(save success!)</span><br><span class="line">                out.close()</span><br><span class="line">            &#125;</span><br><span class="line">            this.load(arg0, arg1);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        console.log(hook_KeyStore_load...);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hook_ssl() &#123;</span><br><span class="line">    &#x2F;&#x2F; hook ssl 调用栈</span><br><span class="line">    Java.perform(function() &#123;</span><br><span class="line">        var ClassName &#x3D; com.android.org.conscrypt.Platform;</span><br><span class="line">        var Platform &#x3D; Java.use(ClassName);</span><br><span class="line">        var targetMethod &#x3D; checkServerTrusted;</span><br><span class="line">        var len &#x3D; Platform[targetMethod].overloads.length;</span><br><span class="line">        console.log(len);</span><br><span class="line">        for(var i &#x3D; 0; i  len; ++i) &#123;</span><br><span class="line">            Platform[targetMethod].overloads[i].implementation &#x3D; function () &#123;</span><br><span class="line">                console.log(class, ClassName, target, targetMethod,  i, i, arguments);</span><br><span class="line">                printStack(ClassName + . + targetMethod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -U -f com.whwy.equchong -l quchong.js –no-pause -o quchong.txt  证书位置和密钥在KeyStore.load2后的/sdcard/Download</p><p>将p12证书拷贝出来，下载<a href="https://github.com/kaikramer/keystore-explorer/releases/download/v5.4.4/kse_5.4.4_all.deb" target="_blank" rel="noopener">kse_5.4.4_all.deb</a>，dpkg -i kse_2.4.4_all.deb，启动keystore explore打开p12证书，输入密码即可查看证书内容</p><p>右键-export-export key pair-输入密码 保存为p12，设置密码123456</p><p>charles-SSL Proxying Settings-Client Certificate-Import P12-导入导出的p12证书，密码为123456，Host Port配*表示所有发出去的包都用这个证书</p><p>启动Postern，配置charles抓包，重新注册获取验证码，依旧拿不到结果是，查看socket后的端口9443，在charles中配置9443端口，即可拿到完整加密请求结果</p><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/image-20210707123859186.png" alt="image-20210707123859186"></p><h3 id="滴答清单"><a href="#滴答清单" class="headerlink" title="滴答清单"></a>滴答清单</h3><p>启动charles抓包，发送验证码，查看OverView</p><p>证书绑定校验失败：Client closed the connection before a request was made.Possibly the SSL certificate was rejected.You may need to configure your browser or application to trust the Charles Root Certificate.See SSL Proxyinf in the Help menu.</p><p><a href="https://zhuanlan.zhihu.com/p/58308036" target="_blank" rel="noopener">Android SSL证书设置和锁定(SSL/TLS Pinning)</a>查看安卓设置-加密与凭据-信任的凭据</p><p>frida -U -f cn.ticktick.task -l quchong.js –no-pause  执行hook_ssl() 失败</p><p>objection -g cn.ticktick.task explore -s “android sslpinning disable”  失败</p><p>git clone <a href="https://github.com/WooyunDota/DroidSSLUnpinning.git" target="_blank" rel="noopener">https://github.com/WooyunDota/DroidSSLUnpinning.git</a></p><p>frida -U -f cn.ticktick.task -l hooks.js –no-pause  失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g cn.ticktick.task explore -s &quot;android hooking watch class_method java.io.File.$init --dump-args --dump-backtrace --dump-return&quot;  打开证书文件就初始化这个文件，hook该类,发送验证码</span><br></pre></td></tr></table></figure><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/image-20210707130643793.png" alt="image-20210707130643793"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd OkHttpLogger-Frida &amp;&amp; frida -U -f cn.ticktick.task -l okhttp_poker.js </span><br><span class="line">%resume</span><br><span class="line">find()  失败则不是ok3混淆,那么就是ok1</span><br></pre></td></tr></table></figure><p><a href="https://square.github.io/okhttp/4.x/okhttp/okhttp3/-certificate-pinner/" target="_blank" rel="noopener">https://square.github.io/okhttp/4.x/okhttp/okhttp3/-certificate-pinner/</a></p><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/image-20210707132638475.png" alt="image-20210707132638475"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list class_methods z1.g  其中有z1.g.a,在CertificatePinner中被混淆的</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function killCertificatePinner()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(Beginning killCertificatePinner !...)</span><br><span class="line">        Java.use(z1.g).a.implementation &#x3D; function(str,list)&#123;</span><br><span class="line">            console.log(called z1.g.a ~)</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -U -f cn.ticktick.task -l quchong.js –no-pause  发送注册短信过掉z1.g.a的ok1中的证书</p><h1 id="抓包总结"><a href="#抓包总结" class="headerlink" title="抓包总结"></a>抓包总结</h1><h2 id="kali-nethunter"><a href="#kali-nethunter" class="headerlink" title="kali nethunter"></a>kali nethunter</h2><p>apt install jnettop nethogs htop   查看请求ip端口</p><blockquote><p>优点：直观、所见即所得<br>缺点：没有内容，粒度太粗，简单看下</p></blockquote><p>wireshark  使用NetHunter-Kex Manager-SETUP LOCAL SERVER 使用USER为root Start SERVER，启动NetHunter  Kex的VNC连接界面kali，VNC Viewer也可以通过ip连接,图形化抓包</p><blockquote><p>优点：可以转储内容scp <a href="mailto:&#x72;&#x6f;&#111;&#x74;&#x40;&#x31;&#57;&#50;&#x2e;&#49;&#x38;&#54;&#46;&#x30;&#46;&#x32;&#x4c;">&#x72;&#x6f;&#111;&#x74;&#x40;&#x31;&#57;&#50;&#x2e;&#49;&#x38;&#54;&#46;&#x30;&#46;&#x32;&#x4c;</a>/root/a.pcap ./，存下来稍后分析<br>缺点：只能看明文，不能解加密协议</p></blockquote><h2 id="termux"><a href="#termux" class="headerlink" title="termux"></a>termux</h2><p>adb install termux  &amp;&amp; pkg update &amp;&amp; pkg install  tcpdump &amp;&amp; ln -s /data/data/com.termux/files/usr/bin/tcpdump /system/bin 并remount</p><blockquote><p>安卓7remount: mount -o rw,remount /system</p><p>安卓8remount:mount -o remount,rw /system</p></blockquote><p>mount -o remount.rw / 重新挂载，使用tcpdump开启抓包</p><p>优点：不需要刷<code>Nethunter</code><br>缺点：没有界面</p><h2 id="hook-2"><a href="#hook-2" class="headerlink" title="hook"></a>hook</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.onejane.httpsocket explore -P ~&#x2F;.objection&#x2F;plugins </span><br><span class="line">android hooking search classes socket  将打印的类存入hookSocket.txt</span><br><span class="line">sed -i -e &#39;s&#x2F;^&#x2F;android hooking watch class_method &#x2F;&#39;  hookSocket.txt  在以上的类前加入android hooking watch class_method</span><br><span class="line">sed -i s&#x2F;$&#x2F;&quot;.\$init&quot;&#x2F;  hookSocket.txt  在以上的类后加入.$init</span><br><span class="line">plugin wallbreaker objectsearch java.net.Socket  内存查找类 </span><br><span class="line">plugin wallbreaker objectdump --fullname 0x21f2  打印内存中的类</span><br><span class="line">plugin wallbreaker classdump --fullname java.net.InetAddress</span><br></pre></td></tr></table></figure><p><img src="/2021/02/18/%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E4%B8%8Ehook/%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8.png" alt="内存漫游"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.onejane.httpsocket explore -c ~&#x2F;root&#x2F;Desktop&#x2F;hookSocket.txt  -P ~&#x2F;.objection&#x2F;plugins  批量hook，如有报错就删除报错类</span><br></pre></td></tr></table></figure><p>分别使用http和https运行HttpSocket项目，通过frida批量hook以上整理的hookSocket.txt中的类</p><blockquote><p>HTTP<br>java.net.InetSocketAddress.InetSocketAddress(<a href="http://www.baidu.com/180.101.49.12" target="_blank" rel="noopener">www.baidu.com/180.101.49.12</a>, 80)<br>java.net.InetSocketAddress$InetSocketAddressHolder.InetSocketAddress$InetSocketAddressHolder((none), <a href="http://www.baidu.com/180.101.49.12" target="_blank" rel="noopener">www.baidu.com/180.101.49.12</a>, 80, (none))<br>java.net.InetSocketAddress.InetSocketAddress(/192.168.0.2, 43066)<br>java.net.InetSocketAddress$InetSocketAddressHolder.InetSocketAddress$InetSocketAddressHolder((none), /192.168.0.2, 43066, (none))<br>java.net.SocketInputStream.SocketInputStream(Socket[addr=<a href="http://www.baidu.com/180.101.49.12,port=80,localport=43066]" target="_blank" rel="noopener">www.baidu.com/180.101.49.12,port=80,localport=43066]</a>)<br>java.net.SocketOutputStream.SocketOutputStream(Socket[addr=<a href="http://www.baidu.com/180.101.49.12,port=80,localport=43066]" target="_blank" rel="noopener">www.baidu.com/180.101.49.12,port=80,localport=43066]</a>)<br>HTTPS<br>java.net.InetSocketAddress.InetSocketAddress(<a href="http://www.baidu.com/180.101.49.12" target="_blank" rel="noopener">www.baidu.com/180.101.49.12</a>, 443)<br>java.net.Socket$2.Socket$2(Socket[address=<a href="http://www.baidu.com/180.101.49.12,port=443,localPort=44405]" target="_blank" rel="noopener">www.baidu.com/180.101.49.12,port=443,localPort=44405]</a>)<br>java.net.SocketInputStream.SocketInputStream(Socket[addr=<a href="http://www.baidu.com/180.101.49.12,port=443,localport=44405]" target="_blank" rel="noopener">www.baidu.com/180.101.49.12,port=443,localport=44405]</a>)<br>java.net.SocketOutputStream.SocketOutputStream(Socket[addr=<a href="http://www.baidu.com/180.101.49.12,port=443,localport=44405]" target="_blank" rel="noopener">www.baidu.com/180.101.49.12,port=443,localport=44405]</a>)<br>com.android.org.conscrypt.ConscryptFileDescriptorSocket.ConscryptFileDescriptorSocket(Socket[address=<a href="http://www.baidu.com/180.101.49.12,port=443,localPort=44405]" target="_blank" rel="noopener">www.baidu.com/180.101.49.12,port=443,localPort=44405]</a>, <a href="http://www.baidu.com/" target="_blank" rel="noopener">www.baidu.com</a>, 443, true, com.android.org.conscrypt.SSLParametersImpl@2ccad02)<br>com.android.org.conscrypt.OpenSSLSocketImpl.OpenSSLSocketImpl(Socket[address=<a href="http://www.baidu.com/180.101.49.12,port=443,localPort=44405]" target="_blank" rel="noopener">www.baidu.com/180.101.49.12,port=443,localPort=44405]</a>, <a href="http://www.baidu.com/" target="_blank" rel="noopener">www.baidu.com</a>, 443, true)<br>com.android.org.conscrypt.AbstractConscryptSocket.AbstractConscryptSocket(Socket[address=<a href="http://www.baidu.com/180.101.49.12,port=443,localPort=44405]" target="_blank" rel="noopener">www.baidu.com/180.101.49.12,port=443,localPort=44405]</a>, <a href="http://www.baidu.com/" target="_blank" rel="noopener">www.baidu.com</a>, 443, true)<br>com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream.ConscryptFileDescriptorSocket$SSLOutputStream(SSL socket over Socket[address=<a href="http://www.baidu.com/180.101.49.12,port=443,localPort=44405]" target="_blank" rel="noopener">www.baidu.com/180.101.49.12,port=443,localPort=44405]</a>)<br>com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream.ConscryptFileDescriptorSocket$SSLInputStream(SSL socket over Socket[address=<a href="http://www.baidu.com/180.101.49.12,port=443,localPort=44405]" target="_blank" rel="noopener">www.baidu.com/180.101.49.12,port=443,localPort=44405]</a>)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function hook_Address()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;java.net.InetSocketAddress&quot;).$init.overload(&#39;java.net.InetAddress&#39;, &#39;int&#39;).implementation &#x3D; function(addr,int)&#123;</span><br><span class="line">            var result &#x3D; this.$init(addr,int) </span><br><span class="line">            if(addr.isSiteLocalAddress())&#123; &#x2F;&#x2F; 判断是不是本地地址</span><br><span class="line">                console.log(&quot;Local address &#x3D;&gt; &quot;,addr.toString(),&quot; port is &#x3D;&gt; &quot;,int)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                console.log(&quot;Server address &#x3D;&gt; &quot;,addr.toString(),&quot; port is &#x3D;&gt; &quot;,int)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -U -f com.onejane.httpsocket -l socketAddress.js –no-pause</p><p>frida -U  com.cz.babySister   -l socketAddress.js –no-pause -o /root/Desktop/babySisterLogin.txt  使用attach模式抓移动tv登录包http</p><p>frida -U com.ilulutv.fulao2 -l socketAddress.js  –no-pause -o /root/Desktop/fulao2Login.txt 使用attach模式抓fulao2登录包https</p><p>frida -U com.ilulutv.fulao2 -l hookEvent.js 点击得到所在event的类，点击登录触发AccountActivity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes cipher  直接搜索加密相关类，并将所有类加入txt文件进行批量hook</span><br><span class="line">objection -g com.onejane.httpsocket explore -c ~&#x2F;root&#x2F;Desktop&#x2F;hookCipher.txt </span><br><span class="line">android hooking watch class_method javax.crypto.Cipher.createCipher   hook系统的cipher类</span><br><span class="line">android hooking watch class_method net.idik.lib.cipher.so.encrypt.AESEncryptor.decrypt</span><br><span class="line">android hooking watch class_method javax.crypto.Cipher.doFinel   根据堆栈找到登录时触发的app函数</span><br><span class="line">android hooking watch class com.ilulutv.fulao2.other.i.b --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method com.ilulutv.fulao2.other.i.b.a --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method com.ilulutv.fulao2.other.i.b.b --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method com.ilulutv.fulao2.other.i.b.c --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method com.ilulutv.fulao2.other.i.b.d --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method com.ilulutv.fulao2.other.i.b.e --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><blockquote><p>手机上抓：优点：无法对抗，全部能抓，没有抓不到的包<br>hook抓包：<br>- 优点1：为所欲为，可以对包的内容进行进一步的更改和定制；<br>- 优点2：抓包全面，直接就是明文，不需要解协议（无需绕过证书绑定,进入ssl之前已经抓到包）<br>- 缺点：可能会不全、可能会漏。hook点是有限的，万一它在用奇葩的框架做网络传输就会漏掉<br><code>Charles</code>+<code>Postern</code>：协议层抓包：<br>- 优点：全面。已经解好了协议，HTTP、WebSocket直接解好。<br>- 缺点：配置证书稍微麻烦，解不了纯Socket。</p></blockquote><h1 id="抓包通杀"><a href="#抓包通杀" class="headerlink" title="抓包通杀"></a>抓包通杀</h1><p>git clone <a href="https://github.com/BigFaceCat2017/frida_ssl_logger.git" target="_blank" rel="noopener">https://github.com/BigFaceCat2017/frida_ssl_logger.git</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python ssl_logger.py  -U -v com.iqiyi.video -p iqiyi.pcap  爱奇艺获取验证码抓包</span><br><span class="line">plugin wallbreaker objectsearch java.net.SocketOutputStream</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x4c16  看到socket类中地址和ip</span><br><span class="line">android hooking search classes socket  将相关类拷贝到文件中前面加上android hooking watch class</span><br><span class="line">objection -g com.roysue.httpsocket explore -c tracesocket.txt  哪个类报错干掉哪个类即可</span><br></pre></td></tr></table></figure><p>r0capture.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line"># Copyright 2017 Google Inc. All Rights Reserved.</span><br><span class="line"></span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;Decrypts and logs a process&#39;s SSL traffic.</span><br><span class="line">Hooks the functions SSL_read() and SSL_write() in a given process and logs the</span><br><span class="line">decrypted data to the console and&#x2F;or to a pcap file.</span><br><span class="line">  Typical usage example:</span><br><span class="line">  ssl_log(&quot;wget&quot;, &quot;log.pcap&quot;, True)</span><br><span class="line">Dependencies:</span><br><span class="line">  frida (https:&#x2F;&#x2F;www.frida.re&#x2F;):</span><br><span class="line">    sudo pip install frida</span><br><span class="line">  hexdump (https:&#x2F;&#x2F;bitbucket.org&#x2F;techtonik&#x2F;hexdump&#x2F;) if using verbose output:</span><br><span class="line">    sudo pip install hexdump</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">__author__ &#x3D; &quot;geffner@google.com (Jason Geffner)&quot;</span><br><span class="line">__version__ &#x3D; &quot;2.0&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># r0capture</span><br><span class="line"></span><br><span class="line">ID: r0ysue </span><br><span class="line"></span><br><span class="line">安卓应用层抓包通杀脚本</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;r0ysue&#x2F;r0capture</span><br><span class="line"></span><br><span class="line">## 简介</span><br><span class="line"></span><br><span class="line">- 仅限安卓平台，测试安卓7、8、9、10 可用 ；</span><br><span class="line">- 无视所有证书校验或绑定，无视任何证书；</span><br><span class="line">- 通杀TCP&#x2F;IP四层模型中的应用层中的全部协议；</span><br><span class="line">- 通杀协议包括：Http,WebSocket,Ftp,Xmpp,Imap,Smtp,Protobuf等等、以及它们的SSL版本；</span><br><span class="line">- 通杀所有应用层框架，包括HttpUrlConnection、Okhttp1&#x2F;3&#x2F;4、Retrofit&#x2F;Volley等等；</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Windows版本需要安装库：</span><br><span class="line"># pip install &#39;win_inet_pton&#39;</span><br><span class="line"># pip install hexdump</span><br><span class="line">import argparse</span><br><span class="line">import os</span><br><span class="line">import platform</span><br><span class="line">import pprint</span><br><span class="line">import random</span><br><span class="line">import signal</span><br><span class="line">import socket</span><br><span class="line">import struct</span><br><span class="line">import time</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">import frida</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    if os.name &#x3D;&#x3D; &#39;nt&#39;:</span><br><span class="line">        import win_inet_pton</span><br><span class="line">except ImportError:</span><br><span class="line">    # win_inet_pton import error</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    import hexdump  # pylint: disable&#x3D;g-import-not-at-top</span><br><span class="line">except ImportError:</span><br><span class="line">    pass</span><br><span class="line">try:</span><br><span class="line">    from shutil import get_terminal_size as get_terminal_size</span><br><span class="line">except:</span><br><span class="line">    try:</span><br><span class="line">        from backports.shutil_get_terminal_size import get_terminal_size as get_terminal_size</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    import click</span><br><span class="line">except:</span><br><span class="line">    class click:</span><br><span class="line">        @staticmethod</span><br><span class="line">        def secho(message&#x3D;None, **kwargs):</span><br><span class="line">            print(message)</span><br><span class="line">        @staticmethod</span><br><span class="line">        def style(**kwargs):</span><br><span class="line">            raise Exception(&quot;unsupported style&quot;)</span><br><span class="line"></span><br><span class="line">banner &#x3D; &quot;&quot;&quot;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">           .oooo.                                      .                                  </span><br><span class="line">          d8P&#39;&#96;Y8b                                   .o8                                  </span><br><span class="line">oooo d8b 888    888  .ooooo.   .oooo.   oo.ooooo.  .o888oo oooo  oooo  oooo d8b  .ooooo.  </span><br><span class="line">&#96;888&quot;&quot;8P 888    888 d88&#39; &#96;&quot;Y8 &#96;P  )88b   888&#39; &#96;88b   888   &#96;888  &#96;888  &#96;888&quot;&quot;8P d88&#39; &#96;88b </span><br><span class="line"> 888     888    888 888        .oP&quot;888   888   888   888    888   888   888     888ooo888 </span><br><span class="line"> 888     &#96;88b  d88&#39; 888   .o8 d8(  888   888   888   888 .  888   888   888     888    .o </span><br><span class="line">d888b     &#96;Y8bd8P&#39;  &#96;Y8bod8P&#39; &#96;Y888&quot;&quot;8o  888bod8P&#39;   &quot;888&quot;  &#96;V88V&quot;V8P&#39; d888b    &#96;Y8bod8P&#39; </span><br><span class="line">                                         888                                              </span><br><span class="line">                                        o888o                                                                                                                                       </span><br><span class="line">                    https:&#x2F;&#x2F;github.com&#x2F;r0ysue&#x2F;r0capture</span><br><span class="line">--------------------------------------------------------------------------------------------\n</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def show_banner():</span><br><span class="line">    colors &#x3D; [&#39;bright_red&#39;, &#39;bright_green&#39;, &#39;bright_blue&#39;, &#39;cyan&#39;, &#39;magenta&#39;]</span><br><span class="line">    try:</span><br><span class="line">        click.style(&#39;color test&#39;, fg&#x3D;&#39;bright_red&#39;)</span><br><span class="line">    except:</span><br><span class="line">        colors &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;cyan&#39;, &#39;magenta&#39;]</span><br><span class="line">    try:</span><br><span class="line">        columns &#x3D; get_terminal_size().columns</span><br><span class="line">        if columns &gt;&#x3D; len(banner.splitlines()[1]):</span><br><span class="line">            for line in banner.splitlines():</span><br><span class="line">                click.secho(line, fg&#x3D;random.choice(colors))</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># ssl_session[&lt;SSL_SESSION id&gt;] &#x3D; (&lt;bytes sent by client&gt;,</span><br><span class="line">#                                  &lt;bytes sent by server&gt;)</span><br><span class="line">ssl_sessions &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ssl_log(process, pcap&#x3D;None, host&#x3D;False, verbose&#x3D;False, isUsb&#x3D;False, ssllib&#x3D;&quot;&quot;, isSpawn&#x3D;True, wait&#x3D;0):</span><br><span class="line">    &quot;&quot;&quot;Decrypts and logs a process&#39;s SSL traffic.</span><br><span class="line">    Hooks the functions SSL_read() and SSL_write() in a given process and logs</span><br><span class="line">    the decrypted data to the console and&#x2F;or to a pcap file.</span><br><span class="line">    Args:</span><br><span class="line">      process: The target process&#39;s name (as a string) or process ID (as an int).</span><br><span class="line">      pcap: The file path to which the pcap file should be written.</span><br><span class="line">      verbose: If True, log the decrypted traffic to the console.</span><br><span class="line">    Raises:</span><br><span class="line">      NotImplementedError: Not running on a Linux or macOS system.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # if platform.system() not in (&quot;Darwin&quot;, &quot;Linux&quot;):</span><br><span class="line">    #   raise NotImplementedError(&quot;This function is only implemented for Linux and &quot;</span><br><span class="line">    #                             &quot;macOS systems.&quot;)</span><br><span class="line"></span><br><span class="line">    def log_pcap(pcap_file, ssl_session_id, function, src_addr, src_port,</span><br><span class="line">                 dst_addr, dst_port, data):</span><br><span class="line">        &quot;&quot;&quot;Writes the captured data to a pcap file.</span><br><span class="line">        Args:</span><br><span class="line">          pcap_file: The opened pcap file.</span><br><span class="line">          ssl_session_id: The SSL session ID for the communication.</span><br><span class="line">          function: The function that was intercepted (&quot;SSL_read&quot; or &quot;SSL_write&quot;).</span><br><span class="line">          src_addr: The source address of the logged packet.</span><br><span class="line">          src_port: The source port of the logged packet.</span><br><span class="line">          dst_addr: The destination address of the logged packet.</span><br><span class="line">          dst_port: The destination port of the logged packet.</span><br><span class="line">          data: The decrypted packet data.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        t &#x3D; time.time()</span><br><span class="line"></span><br><span class="line">        if ssl_session_id not in ssl_sessions:</span><br><span class="line">            ssl_sessions[ssl_session_id] &#x3D; (random.randint(0, 0xFFFFFFFF),</span><br><span class="line">                                            random.randint(0, 0xFFFFFFFF))</span><br><span class="line">        client_sent, server_sent &#x3D; ssl_sessions[ssl_session_id]</span><br><span class="line"></span><br><span class="line">        if function &#x3D;&#x3D; &quot;SSL_read&quot;:</span><br><span class="line">            seq, ack &#x3D; (server_sent, client_sent)</span><br><span class="line">        else:</span><br><span class="line">            seq, ack &#x3D; (client_sent, server_sent)</span><br><span class="line"></span><br><span class="line">        for writes in (</span><br><span class="line">                # PCAP record (packet) header</span><br><span class="line">                (&quot;&#x3D;I&quot;, int(t)),  # Timestamp seconds</span><br><span class="line">                (&quot;&#x3D;I&quot;, int((t * 1000000) % 1000000)),  # Timestamp microseconds</span><br><span class="line">                (&quot;&#x3D;I&quot;, 40 + len(data)),  # Number of octets saved</span><br><span class="line">                (&quot;&#x3D;i&quot;, 40 + len(data)),  # Actual length of packet</span><br><span class="line">                # IPv4 header</span><br><span class="line">                (&quot;&gt;B&quot;, 0x45),  # Version and Header Length</span><br><span class="line">                (&quot;&gt;B&quot;, 0),  # Type of Service</span><br><span class="line">                (&quot;&gt;H&quot;, 40 + len(data)),  # Total Length</span><br><span class="line">                (&quot;&gt;H&quot;, 0),  # Identification</span><br><span class="line">                (&quot;&gt;H&quot;, 0x4000),  # Flags and Fragment Offset</span><br><span class="line">                (&quot;&gt;B&quot;, 0xFF),  # Time to Live</span><br><span class="line">                (&quot;&gt;B&quot;, 6),  # Protocol</span><br><span class="line">                (&quot;&gt;H&quot;, 0),  # Header Checksum</span><br><span class="line">                (&quot;&gt;I&quot;, src_addr),  # Source Address</span><br><span class="line">                (&quot;&gt;I&quot;, dst_addr),  # Destination Address</span><br><span class="line">                # TCP header</span><br><span class="line">                (&quot;&gt;H&quot;, src_port),  # Source Port</span><br><span class="line">                (&quot;&gt;H&quot;, dst_port),  # Destination Port</span><br><span class="line">                (&quot;&gt;I&quot;, seq),  # Sequence Number</span><br><span class="line">                (&quot;&gt;I&quot;, ack),  # Acknowledgment Number</span><br><span class="line">                (&quot;&gt;H&quot;, 0x5018),  # Header Length and Flags</span><br><span class="line">                (&quot;&gt;H&quot;, 0xFFFF),  # Window Size</span><br><span class="line">                (&quot;&gt;H&quot;, 0),  # Checksum</span><br><span class="line">                (&quot;&gt;H&quot;, 0)):  # Urgent Pointer</span><br><span class="line">            pcap_file.write(struct.pack(writes[0], writes[1]))</span><br><span class="line">        pcap_file.write(data)</span><br><span class="line"></span><br><span class="line">        if function &#x3D;&#x3D; &quot;SSL_read&quot;:</span><br><span class="line">            server_sent +&#x3D; len(data)</span><br><span class="line">        else:</span><br><span class="line">            client_sent +&#x3D; len(data)</span><br><span class="line">        ssl_sessions[ssl_session_id] &#x3D; (client_sent, server_sent)</span><br><span class="line"></span><br><span class="line">    def on_message(message, data):</span><br><span class="line">        &quot;&quot;&quot;Callback for errors and messages sent from Frida-injected JavaScript.</span><br><span class="line">        Logs captured packet data received from JavaScript to the console and&#x2F;or a</span><br><span class="line">        pcap file. See https:&#x2F;&#x2F;www.frida.re&#x2F;docs&#x2F;messages&#x2F; for more detail on</span><br><span class="line">        Frida&#39;s messages.</span><br><span class="line">        Args:</span><br><span class="line">          message: A dictionary containing the message &quot;type&quot; and other fields</span><br><span class="line">              dependent on message type.</span><br><span class="line">          data: The string of captured decrypted data.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if message[&quot;type&quot;] &#x3D;&#x3D; &quot;error&quot;:</span><br><span class="line">            pprint.pprint(message)</span><br><span class="line">            os.kill(os.getpid(), signal.SIGTERM)</span><br><span class="line">            return</span><br><span class="line">        if len(data) &#x3D;&#x3D; 1:</span><br><span class="line">            print(message[&quot;payload&quot;][&quot;function&quot;])</span><br><span class="line">            print(message[&quot;payload&quot;][&quot;stack&quot;])</span><br><span class="line">            return</span><br><span class="line">        p &#x3D; message[&quot;payload&quot;]        </span><br><span class="line">        if verbose:</span><br><span class="line">            src_addr &#x3D; socket.inet_ntop(socket.AF_INET,</span><br><span class="line">                                        struct.pack(&quot;&gt;I&quot;, p[&quot;src_addr&quot;]))</span><br><span class="line">            dst_addr &#x3D; socket.inet_ntop(socket.AF_INET,</span><br><span class="line">                                        struct.pack(&quot;&gt;I&quot;, p[&quot;dst_addr&quot;]))</span><br><span class="line">            print(&quot;SSL Session: &quot; + p[&quot;ssl_session_id&quot;])</span><br><span class="line">            print(&quot;[%s] %s:%d --&gt; %s:%d&quot; % (</span><br><span class="line">                p[&quot;function&quot;],</span><br><span class="line">                src_addr,</span><br><span class="line">                p[&quot;src_port&quot;],</span><br><span class="line">                dst_addr,</span><br><span class="line">                p[&quot;dst_port&quot;]))</span><br><span class="line">            hexdump.hexdump(data)</span><br><span class="line">            print(p[&quot;stack&quot;])</span><br><span class="line">        if pcap:</span><br><span class="line">            log_pcap(pcap_file, p[&quot;ssl_session_id&quot;], p[&quot;function&quot;], p[&quot;src_addr&quot;],</span><br><span class="line">                     p[&quot;src_port&quot;], p[&quot;dst_addr&quot;], p[&quot;dst_port&quot;], data)</span><br><span class="line"></span><br><span class="line">    if isUsb:</span><br><span class="line">        try:</span><br><span class="line">            device &#x3D; frida.get_usb_device()</span><br><span class="line">        except:</span><br><span class="line">            device &#x3D; frida.get_remote_device()</span><br><span class="line">    else:</span><br><span class="line">        if host:</span><br><span class="line">            manager &#x3D; frida.get_device_manager()</span><br><span class="line">            device &#x3D; manager.add_remote_device(host)</span><br><span class="line">        else:</span><br><span class="line">            device &#x3D; frida.get_local_device()</span><br><span class="line"></span><br><span class="line">    if isSpawn:</span><br><span class="line">        pid &#x3D; device.spawn([process])</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        session &#x3D; device.attach(pid)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        device.resume(pid)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;attach&quot;)</span><br><span class="line">        session &#x3D; device.attach(process)</span><br><span class="line">    if wait &gt; 0:</span><br><span class="line">        print(&quot;wait for &#123;&#125; seconds&quot;.format(wait))</span><br><span class="line">        time.sleep(wait)</span><br><span class="line"></span><br><span class="line">    # session &#x3D; frida.attach(process)</span><br><span class="line"></span><br><span class="line">    # pid &#x3D; device.spawn([process])</span><br><span class="line">    # pid &#x3D; process</span><br><span class="line">    # session &#x3D; device.attach(pid)</span><br><span class="line">    # device.resume(pid)</span><br><span class="line">    if pcap:</span><br><span class="line">        pcap_file &#x3D; open(pcap, &quot;wb&quot;, 0)</span><br><span class="line">        for writes in (</span><br><span class="line">                (&quot;&#x3D;I&quot;, 0xa1b2c3d4),  # Magic number</span><br><span class="line">                (&quot;&#x3D;H&quot;, 2),  # Major version number</span><br><span class="line">                (&quot;&#x3D;H&quot;, 4),  # Minor version number</span><br><span class="line">                (&quot;&#x3D;i&quot;, time.timezone),  # GMT to local correction</span><br><span class="line">                (&quot;&#x3D;I&quot;, 0),  # Accuracy of timestamps</span><br><span class="line">                (&quot;&#x3D;I&quot;, 65535),  # Max length of captured packets</span><br><span class="line">                (&quot;&#x3D;I&quot;, 228)):  # Data link type (LINKTYPE_IPV4)</span><br><span class="line">            pcap_file.write(struct.pack(writes[0], writes[1]))</span><br><span class="line"></span><br><span class="line">    with open(&quot;.&#x2F;script.js&quot;, encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class="line">        _FRIDA_SCRIPT &#x3D; f.read()</span><br><span class="line">        # _FRIDA_SCRIPT &#x3D; session.create_script(content)</span><br><span class="line">        # print(_FRIDA_SCRIPT)</span><br><span class="line">    script &#x3D; session.create_script(_FRIDA_SCRIPT)</span><br><span class="line">    script.on(&quot;message&quot;, on_message)</span><br><span class="line">    script.load()</span><br><span class="line"></span><br><span class="line">    if ssllib !&#x3D; &quot;&quot;:</span><br><span class="line">        script.exports.setssllib(ssllib)</span><br><span class="line"></span><br><span class="line">    print(&quot;Press Ctrl+C to stop logging.&quot;)</span><br><span class="line"></span><br><span class="line">    def stoplog(signum, frame):</span><br><span class="line">        print(&#39;You have stoped logging.&#39;)</span><br><span class="line">        session.detach()</span><br><span class="line">        if pcap:</span><br><span class="line">            pcap_file.flush()</span><br><span class="line">            pcap_file.close()</span><br><span class="line">        exit()</span><br><span class="line">    signal.signal(signal.SIGINT, stoplog)</span><br><span class="line">    signal.signal(signal.SIGTERM, stoplog)</span><br><span class="line">    sys.stdin.read()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    show_banner()</span><br><span class="line">    class ArgParser(argparse.ArgumentParser):</span><br><span class="line"></span><br><span class="line">        def error(self, message):</span><br><span class="line">            print(&quot;ssl_logger v&quot; + __version__)</span><br><span class="line">            print(&quot;by &quot; + __author__)</span><br><span class="line">            print(&quot;Modified by BigFaceCat&quot;)</span><br><span class="line">            print(&quot;Error: &quot; + message)</span><br><span class="line">            print()</span><br><span class="line">            print(self.format_help().replace(&quot;usage:&quot;, &quot;Usage:&quot;))</span><br><span class="line">            self.exit(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    parser &#x3D; ArgParser(</span><br><span class="line">        add_help&#x3D;False,</span><br><span class="line">        description&#x3D;&quot;Decrypts and logs a process&#39;s SSL traffic.&quot;,</span><br><span class="line">        formatter_class&#x3D;argparse.RawDescriptionHelpFormatter,</span><br><span class="line">        epilog&#x3D;r&quot;&quot;&quot;</span><br><span class="line">Examples:</span><br><span class="line">    %(prog)s -pcap ssl.pcap openssl</span><br><span class="line">    %(prog)s -verbose 31337</span><br><span class="line">    %(prog)s -pcap log.pcap -verbose wget</span><br><span class="line">    %(prog)s -pcap log.pcap -ssl &quot;*libssl.so*&quot; com.bigfacecat.testdemo</span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line">    args &#x3D; parser.add_argument_group(&quot;Arguments&quot;)</span><br><span class="line">    args.add_argument(&quot;-pcap&quot;, &#39;-p&#39;, metavar&#x3D;&quot;&lt;path&gt;&quot;, required&#x3D;False,</span><br><span class="line">                      help&#x3D;&quot;Name of PCAP file to write&quot;)</span><br><span class="line">    args.add_argument(&quot;-host&quot;, &#39;-H&#39;, metavar&#x3D;&quot;&lt;192.168.1.1:27042&gt;&quot;, required&#x3D;False,</span><br><span class="line">                      help&#x3D;&quot;connect to remote frida-server on HOST&quot;)</span><br><span class="line">    args.add_argument(&quot;-verbose&quot;,&quot;-v&quot;,  required&#x3D;False, action&#x3D;&quot;store_const&quot;, default&#x3D;True,</span><br><span class="line">                      const&#x3D;True, help&#x3D;&quot;Show verbose output&quot;)</span><br><span class="line">    args.add_argument(&quot;process&quot;, metavar&#x3D;&quot;&lt;process name | process id&gt;&quot;,</span><br><span class="line">                      help&#x3D;&quot;Process whose SSL calls to log&quot;)</span><br><span class="line">    args.add_argument(&quot;-ssl&quot;, default&#x3D;&quot;&quot;, metavar&#x3D;&quot;&lt;lib&gt;&quot;,</span><br><span class="line">                      help&#x3D;&quot;SSL library to hook&quot;)</span><br><span class="line">    args.add_argument(&quot;--isUsb&quot;, &quot;-U&quot;, default&#x3D;False, action&#x3D;&quot;store_true&quot;,</span><br><span class="line">                      help&#x3D;&quot;connect to USB device&quot;)</span><br><span class="line">    args.add_argument(&quot;--isSpawn&quot;, &quot;-f&quot;, default&#x3D;False, action&#x3D;&quot;store_true&quot;,</span><br><span class="line">                      help&#x3D;&quot;if spawned app&quot;)</span><br><span class="line">    args.add_argument(&quot;-wait&quot;, &quot;-w&quot;, type&#x3D;int, metavar&#x3D;&quot;&lt;seconds&gt;&quot;, default&#x3D;0,</span><br><span class="line">                      help&#x3D;&quot;Time to wait for the process&quot;)</span><br><span class="line"></span><br><span class="line">    parsed &#x3D; parser.parse_args()</span><br><span class="line">    ssl_log(</span><br><span class="line">        int(parsed.process) if parsed.process.isdigit() else parsed.process, </span><br><span class="line">    parsed.pcap, </span><br><span class="line">    parsed.host,</span><br><span class="line">    parsed.verbose, </span><br><span class="line">    isUsb&#x3D;parsed.isUsb, </span><br><span class="line">    isSpawn&#x3D;parsed.isSpawn, </span><br><span class="line">    ssllib&#x3D;parsed.ssl, </span><br><span class="line">    wait&#x3D;parsed.wait</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>script.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * Initializes &#39;addresses&#39; dictionary and NativeFunctions.</span><br><span class="line">   *&#x2F;</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line">  setssllib: function (name) &#123;</span><br><span class="line">    console.log(&quot;setSSLLib &#x3D;&gt; &quot; + name);</span><br><span class="line">    libname &#x3D; name;</span><br><span class="line">    initializeGlobals();</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var addresses &#x3D; &#123;&#125;;</span><br><span class="line">var SSL_get_fd &#x3D; null;</span><br><span class="line">var SSL_get_session &#x3D; null;</span><br><span class="line">var SSL_SESSION_get_id &#x3D; null;</span><br><span class="line">var getpeername &#x3D; null;</span><br><span class="line">var getsockname &#x3D; null;</span><br><span class="line">var ntohs &#x3D; null;</span><br><span class="line">var ntohl &#x3D; null;</span><br><span class="line">var SSLstackwrite &#x3D; null;</span><br><span class="line">var SSLstackread &#x3D; null;</span><br><span class="line"></span><br><span class="line">var libname &#x3D; &quot;*libssl*&quot;;</span><br><span class="line"></span><br><span class="line">function uuid(len, radix) &#123;</span><br><span class="line">  var chars &#x3D; &#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;.split(&#39;&#39;);</span><br><span class="line">  var uuid &#x3D; [], i;</span><br><span class="line">  radix &#x3D; radix || chars.length;</span><br><span class="line"></span><br><span class="line">  if (len) &#123;</span><br><span class="line">    &#x2F;&#x2F; Compact form</span><br><span class="line">    for (i &#x3D; 0; i &lt; len; i++) uuid[i] &#x3D; chars[0 | Math.random() * radix];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F; rfc4122, version 4 form</span><br><span class="line">    var r;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; rfc4122 requires these characters</span><br><span class="line">    uuid[8] &#x3D; uuid[13] &#x3D; uuid[18] &#x3D; uuid[23] &#x3D; &#39;-&#39;;</span><br><span class="line">    uuid[14] &#x3D; &#39;4&#39;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Fill in random data. At i&#x3D;&#x3D;19 set the high bits of clock sequence as</span><br><span class="line">    &#x2F;&#x2F; per rfc4122, sec. 4.1.5</span><br><span class="line">    for (i &#x3D; 0; i &lt; 36; i++) &#123;</span><br><span class="line">      if (!uuid[i]) &#123;</span><br><span class="line">        r &#x3D; 0 | Math.random() * 16;</span><br><span class="line">        uuid[i] &#x3D; chars[(i &#x3D;&#x3D; 19) ? (r &amp; 0x3) | 0x8 : r];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return uuid.join(&#39;&#39;);</span><br><span class="line">&#125;</span><br><span class="line">function return_zero(args) &#123;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">function initializeGlobals() &#123;</span><br><span class="line">  var resolver &#x3D; new ApiResolver(&quot;module&quot;);</span><br><span class="line">  var exps &#x3D; [</span><br><span class="line">    [Process.platform &#x3D;&#x3D; &quot;darwin&quot; ? &quot;*libboringssl*&quot; : &quot;*libssl*&quot;, [&quot;SSL_read&quot;, &quot;SSL_write&quot;, &quot;SSL_get_fd&quot;, &quot;SSL_get_session&quot;, &quot;SSL_SESSION_get_id&quot;]], &#x2F;&#x2F; for ios and Android</span><br><span class="line">    [Process.platform &#x3D;&#x3D; &quot;darwin&quot; ? &quot;*libsystem*&quot; : &quot;*libc*&quot;, [&quot;getpeername&quot;, &quot;getsockname&quot;, &quot;ntohs&quot;, &quot;ntohl&quot;]]</span><br><span class="line">  ];</span><br><span class="line">  &#x2F;&#x2F; console.log(exps)</span><br><span class="line">  for (var i &#x3D; 0; i &lt; exps.length; i++) &#123;</span><br><span class="line">    var lib &#x3D; exps[i][0];</span><br><span class="line">    var names &#x3D; exps[i][1];</span><br><span class="line">    for (var j &#x3D; 0; j &lt; names.length; j++) &#123;</span><br><span class="line">      var name &#x3D; names[j];</span><br><span class="line">      &#x2F;&#x2F; console.log(&quot;exports:&quot; + lib + &quot;!&quot; + name)</span><br><span class="line">      var matches &#x3D; resolver.enumerateMatchesSync(&quot;exports:&quot; + lib + &quot;!&quot; + name);</span><br><span class="line">      if (matches.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        if (name &#x3D;&#x3D; &quot;SSL_get_fd&quot;) &#123;</span><br><span class="line">          addresses[&quot;SSL_get_fd&quot;] &#x3D; 0;</span><br><span class="line">          continue;</span><br><span class="line">        &#125;</span><br><span class="line">        throw &quot;Could not find &quot; + lib + &quot;!&quot; + name;</span><br><span class="line">      &#125;</span><br><span class="line">      else if (matches.length !&#x3D; 1) &#123;</span><br><span class="line">        &#x2F;&#x2F; Sometimes Frida returns duplicates.</span><br><span class="line">        var address &#x3D; 0;</span><br><span class="line">        var s &#x3D; &quot;&quot;;</span><br><span class="line">        var duplicates_only &#x3D; true;</span><br><span class="line">        for (var k &#x3D; 0; k &lt; matches.length; k++) &#123;</span><br><span class="line">          if (s.length !&#x3D; 0) &#123;</span><br><span class="line">            s +&#x3D; &quot;, &quot;;</span><br><span class="line">          &#125;</span><br><span class="line">          s +&#x3D; matches[k].name + &quot;@&quot; + matches[k].address;</span><br><span class="line">          if (address &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            address &#x3D; matches[k].address;</span><br><span class="line">          &#125;</span><br><span class="line">          else if (!address.equals(matches[k].address)) &#123;</span><br><span class="line">            duplicates_only &#x3D; false;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!duplicates_only) &#123;</span><br><span class="line">          throw &quot;More than one match found for &quot; + lib + &quot;!&quot; + name + &quot;: &quot; + s;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      addresses[name] &#x3D; matches[0].address;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (addresses[&quot;SSL_get_fd&quot;] &#x3D;&#x3D; 0) &#123;</span><br><span class="line">    SSL_get_fd &#x3D; return_zero;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    SSL_get_fd &#x3D; new NativeFunction(addresses[&quot;SSL_get_fd&quot;], &quot;int&quot;, [&quot;pointer&quot;]);</span><br><span class="line">  &#125;</span><br><span class="line">  SSL_get_session &#x3D; new NativeFunction(addresses[&quot;SSL_get_session&quot;], &quot;pointer&quot;, [&quot;pointer&quot;]);</span><br><span class="line">  SSL_SESSION_get_id &#x3D; new NativeFunction(addresses[&quot;SSL_SESSION_get_id&quot;], &quot;pointer&quot;, [&quot;pointer&quot;, &quot;pointer&quot;]);</span><br><span class="line">  getpeername &#x3D; new NativeFunction(addresses[&quot;getpeername&quot;], &quot;int&quot;, [&quot;int&quot;, &quot;pointer&quot;, &quot;pointer&quot;]);</span><br><span class="line">  getsockname &#x3D; new NativeFunction(addresses[&quot;getsockname&quot;], &quot;int&quot;, [&quot;int&quot;, &quot;pointer&quot;, &quot;pointer&quot;]);</span><br><span class="line">  ntohs &#x3D; new NativeFunction(addresses[&quot;ntohs&quot;], &quot;uint16&quot;, [&quot;uint16&quot;]);</span><br><span class="line">  ntohl &#x3D; new NativeFunction(addresses[&quot;ntohl&quot;], &quot;uint32&quot;, [&quot;uint32&quot;]);</span><br><span class="line">&#125;</span><br><span class="line">initializeGlobals();</span><br><span class="line"></span><br><span class="line">function ipToNumber(ip) &#123;</span><br><span class="line">  var num &#x3D; 0;</span><br><span class="line">  if (ip &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">    return num;</span><br><span class="line">  &#125;</span><br><span class="line">  var aNum &#x3D; ip.split(&quot;.&quot;);</span><br><span class="line">  if (aNum.length !&#x3D; 4) &#123;</span><br><span class="line">    return num;</span><br><span class="line">  &#125;</span><br><span class="line">  num +&#x3D; parseInt(aNum[0]) &lt;&lt; 0;</span><br><span class="line">  num +&#x3D; parseInt(aNum[1]) &lt;&lt; 8;</span><br><span class="line">  num +&#x3D; parseInt(aNum[2]) &lt;&lt; 16;</span><br><span class="line">  num +&#x3D; parseInt(aNum[3]) &lt;&lt; 24;</span><br><span class="line">  num &#x3D; num &gt;&gt;&gt; 0;&#x2F;&#x2F;这个很关键，不然可能会出现负数的情况</span><br><span class="line">  return num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Returns a dictionary of a sockfd&#39;s &quot;src_addr&quot;, &quot;src_port&quot;, &quot;dst_addr&quot;, and</span><br><span class="line"> * &quot;dst_port&quot;.</span><br><span class="line"> * @param &#123;int&#125; sockfd The file descriptor of the socket to inspect.</span><br><span class="line"> * @param &#123;boolean&#125; isRead If true, the context is an SSL_read call. If</span><br><span class="line"> *     false, the context is an SSL_write call.</span><br><span class="line"> * @return &#123;dict&#125; Dictionary of sockfd&#39;s &quot;src_addr&quot;, &quot;src_port&quot;, &quot;dst_addr&quot;,</span><br><span class="line"> *     and &quot;dst_port&quot;.</span><br><span class="line"> *&#x2F;</span><br><span class="line">function getPortsAndAddresses(sockfd, isRead) &#123;</span><br><span class="line">  var message &#x3D; &#123;&#125;;</span><br><span class="line">  var src_dst &#x3D; [&quot;src&quot;, &quot;dst&quot;];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; src_dst.length; i++) &#123;</span><br><span class="line">    if ((src_dst[i] &#x3D;&#x3D; &quot;src&quot;) ^ isRead) &#123;</span><br><span class="line">      var sockAddr &#x3D; Socket.localAddress(sockfd)</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      var sockAddr &#x3D; Socket.peerAddress(sockfd)</span><br><span class="line">    &#125;</span><br><span class="line">    if (sockAddr &#x3D;&#x3D; null) &#123;</span><br><span class="line">      &#x2F;&#x2F; 网络超时or其他原因可能导致socket被关闭</span><br><span class="line">      message[src_dst[i] + &quot;_port&quot;] &#x3D; 0</span><br><span class="line">      message[src_dst[i] + &quot;_addr&quot;] &#x3D; 0</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      message[src_dst[i] + &quot;_port&quot;] &#x3D; (sockAddr.port &amp; 0xFFFF)</span><br><span class="line">      message[src_dst[i] + &quot;_addr&quot;] &#x3D; ntohl(ipToNumber(sockAddr.ip.split(&quot;:&quot;).pop()))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return message;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Get the session_id of SSL object and return it as a hex string.</span><br><span class="line"> * @param &#123;!NativePointer&#125; ssl A pointer to an SSL object.</span><br><span class="line"> * @return &#123;dict&#125; A string representing the session_id of the SSL object&#39;s</span><br><span class="line"> *     SSL_SESSION. For example,</span><br><span class="line"> *     &quot;59FD71B7B90202F359D89E66AE4E61247954E28431F6C6AC46625D472FF76336&quot;.</span><br><span class="line"> *&#x2F;</span><br><span class="line">function getSslSessionId(ssl) &#123;</span><br><span class="line">  var session &#x3D; SSL_get_session(ssl);</span><br><span class="line">  if (session &#x3D;&#x3D; 0) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  var len &#x3D; Memory.alloc(4);</span><br><span class="line">  var p &#x3D; SSL_SESSION_get_id(session, len);</span><br><span class="line">  len &#x3D; Memory.readU32(len);</span><br><span class="line">  var session_id &#x3D; &quot;&quot;;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F; Read a byte, convert it to a hex string (0xAB &#x3D;&#x3D;&gt; &quot;AB&quot;), and append</span><br><span class="line">    &#x2F;&#x2F; it to session_id.</span><br><span class="line">    session_id +&#x3D;</span><br><span class="line">      (&quot;0&quot; + Memory.readU8(p.add(i)).toString(16).toUpperCase()).substr(-2);</span><br><span class="line">  &#125;</span><br><span class="line">  return session_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Interceptor.attach(addresses[&quot;SSL_read&quot;],</span><br><span class="line">  &#123;</span><br><span class="line">    onEnter: function (args) &#123;</span><br><span class="line">      var message &#x3D; getPortsAndAddresses(SSL_get_fd(args[0]), true);</span><br><span class="line">      message[&quot;ssl_session_id&quot;] &#x3D; getSslSessionId(args[0]);</span><br><span class="line">      message[&quot;function&quot;] &#x3D; &quot;SSL_read&quot;;</span><br><span class="line">      message[&quot;stack&quot;] &#x3D; SSLstackread;</span><br><span class="line">      this.message &#x3D; message;</span><br><span class="line">      this.buf &#x3D; args[1];</span><br><span class="line">    &#125;,</span><br><span class="line">    onLeave: function (retval) &#123;</span><br><span class="line">      retval |&#x3D; 0; &#x2F;&#x2F; Cast retval to 32-bit integer.</span><br><span class="line">      if (retval &lt;&#x3D; 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      send(this.message, Memory.readByteArray(this.buf, retval));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">Interceptor.attach(addresses[&quot;SSL_write&quot;],</span><br><span class="line">  &#123;</span><br><span class="line">    onEnter: function (args) &#123;</span><br><span class="line">      var message &#x3D; getPortsAndAddresses(SSL_get_fd(args[0]), false);</span><br><span class="line">      message[&quot;ssl_session_id&quot;] &#x3D; getSslSessionId(args[0]);</span><br><span class="line">      message[&quot;function&quot;] &#x3D; &quot;SSL_write&quot;;</span><br><span class="line">      message[&quot;stack&quot;] &#x3D; SSLstackwrite;</span><br><span class="line">      send(message, Memory.readByteArray(args[1], parseInt(args[2])));</span><br><span class="line">    &#125;,</span><br><span class="line">    onLeave: function (retval) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">if (Java.available) &#123;</span><br><span class="line">  Java.perform(function () &#123;</span><br><span class="line">    function storeP12(pri, p7, p12Path, p12Password) &#123;</span><br><span class="line">      var X509Certificate &#x3D; Java.use(&quot;java.security.cert.X509Certificate&quot;)</span><br><span class="line">      var p7X509 &#x3D; Java.cast(p7, X509Certificate);</span><br><span class="line">      var chain &#x3D; Java.array(&quot;java.security.cert.X509Certificate&quot;, [p7X509])</span><br><span class="line">      var ks &#x3D; Java.use(&quot;java.security.KeyStore&quot;).getInstance(&quot;PKCS12&quot;, &quot;BC&quot;);</span><br><span class="line">      ks.load(null, null);</span><br><span class="line">      ks.setKeyEntry(&quot;client&quot;, pri, Java.use(&#39;java.lang.String&#39;).$new(p12Password).toCharArray(), chain);</span><br><span class="line">      try &#123;</span><br><span class="line">        var out &#x3D; Java.use(&quot;java.io.FileOutputStream&quot;).$new(p12Path);</span><br><span class="line">        ks.store(out, Java.use(&#39;java.lang.String&#39;).$new(p12Password).toCharArray())</span><br><span class="line">      &#125; catch (exp) &#123;</span><br><span class="line">        console.log(exp)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;在服务器校验客户端的情形下，帮助dump客户端证书，并保存为p12的格式，证书密码为r0ysue</span><br><span class="line">    Java.use(&quot;java.security.KeyStore$PrivateKeyEntry&quot;).getPrivateKey.implementation &#x3D; function () &#123;</span><br><span class="line">      var result &#x3D; this.getPrivateKey()</span><br><span class="line">      var packageName &#x3D; Java.use(&quot;android.app.ActivityThread&quot;).currentApplication().getApplicationContext().getPackageName();</span><br><span class="line">      storeP12(this.getPrivateKey(), this.getCertificate(), &#39;&#x2F;sdcard&#x2F;Download&#x2F;&#39; + packageName + uuid(10, 16) + &#39;.p12&#39;, &#39;r0ysue&#39;);</span><br><span class="line">      var message &#x3D; &#123;&#125;;</span><br><span class="line">      message[&quot;function&quot;] &#x3D; &quot;dumpClinetCertificate&#x3D;&gt;&quot; + &#39;&#x2F;sdcard&#x2F;Download&#x2F;&#39; + packageName + uuid(10, 16) + &#39;.p12&#39; + &#39;   pwd: r0ysue&#39;;</span><br><span class="line">      message[&quot;stack&quot;] &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new());</span><br><span class="line">      var data &#x3D; Memory.alloc(1);</span><br><span class="line">      send(message, Memory.readByteArray(data, 1))</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line">    Java.use(&quot;java.security.KeyStore$PrivateKeyEntry&quot;).getCertificateChain.implementation &#x3D; function () &#123;</span><br><span class="line">      var result &#x3D; this.getCertificateChain()</span><br><span class="line">      var packageName &#x3D; Java.use(&quot;android.app.ActivityThread&quot;).currentApplication().getApplicationContext().getPackageName();</span><br><span class="line">      storeP12(this.getPrivateKey(), this.getCertificate(), &#39;&#x2F;sdcard&#x2F;Download&#x2F;&#39; + packageName + uuid(10, 16) + &#39;.p12&#39;, &#39;r0ysue&#39;);</span><br><span class="line">      var message &#x3D; &#123;&#125;;</span><br><span class="line">      message[&quot;function&quot;] &#x3D; &quot;dumpClinetCertificate&#x3D;&gt;&quot; + &#39;&#x2F;sdcard&#x2F;Download&#x2F;&#39; + packageName + uuid(10, 16) + &#39;.p12&#39; + &#39;   pwd: r0ysue&#39;;</span><br><span class="line">      message[&quot;stack&quot;] &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new());</span><br><span class="line">      var data &#x3D; Memory.alloc(1);</span><br><span class="line">      send(message, Memory.readByteArray(data, 1))</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;SSLpinning helper 帮助定位证书绑定的关键代码</span><br><span class="line">    Java.use(&quot;java.io.File&quot;).$init.overload(&#39;java.io.File&#39;, &#39;java.lang.String&#39;).implementation &#x3D; function (file, cert) &#123;</span><br><span class="line">      var result &#x3D; this.$init(file, cert)</span><br><span class="line">      var stack &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new());</span><br><span class="line">      if (file.getPath().indexOf(&quot;cacert&quot;) &gt;&#x3D; 0 &amp;&amp; stack.indexOf(&quot;X509TrustManagerExtensions.checkServerTrusted&quot;) &gt;&#x3D; 0) &#123;</span><br><span class="line">        var message &#x3D; &#123;&#125;;</span><br><span class="line">        message[&quot;function&quot;] &#x3D; &quot;SSLpinning position locator &#x3D;&gt; &quot; + file.getPath() + &quot; &quot; + cert;</span><br><span class="line">        message[&quot;stack&quot;] &#x3D; stack;</span><br><span class="line">        var data &#x3D; Memory.alloc(1);</span><br><span class="line">        send(message, Memory.readByteArray(data, 1))</span><br><span class="line">      &#125;</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Java.use(&quot;java.net.SocketOutputStream&quot;).socketWrite0.overload(&#39;java.io.FileDescriptor&#39;, &#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (fd, bytearry, offset, byteCount) &#123;</span><br><span class="line">      var result &#x3D; this.socketWrite0(fd, bytearry, offset, byteCount);</span><br><span class="line">      var message &#x3D; &#123;&#125;;</span><br><span class="line">      message[&quot;function&quot;] &#x3D; &quot;HTTP_send&quot;;</span><br><span class="line">      message[&quot;ssl_session_id&quot;] &#x3D; &quot;&quot;;</span><br><span class="line">      message[&quot;src_addr&quot;] &#x3D; ntohl(ipToNumber((this.socket.value.getLocalAddress().toString().split(&quot;:&quot;)[0]).split(&quot;&#x2F;&quot;).pop()));</span><br><span class="line">      message[&quot;src_port&quot;] &#x3D; parseInt(this.socket.value.getLocalPort().toString());</span><br><span class="line">      message[&quot;dst_addr&quot;] &#x3D; ntohl(ipToNumber((this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;)[0]).split(&quot;&#x2F;&quot;).pop()));</span><br><span class="line">      message[&quot;dst_port&quot;] &#x3D; parseInt(this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;).pop());</span><br><span class="line">      message[&quot;stack&quot;] &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="line">      var ptr &#x3D; Memory.alloc(byteCount);</span><br><span class="line">      for (var i &#x3D; 0; i &lt; byteCount; ++i)</span><br><span class="line">        Memory.writeS8(ptr.add(i), bytearry[offset + i]);</span><br><span class="line">      send(message, Memory.readByteArray(ptr, byteCount))</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line">    Java.use(&quot;java.net.SocketInputStream&quot;).socketRead0.overload(&#39;java.io.FileDescriptor&#39;, &#39;[B&#39;, &#39;int&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (fd, bytearry, offset, byteCount, timeout) &#123;</span><br><span class="line">      var result &#x3D; this.socketRead0(fd, bytearry, offset, byteCount, timeout);</span><br><span class="line">      var message &#x3D; &#123;&#125;;</span><br><span class="line">      message[&quot;function&quot;] &#x3D; &quot;HTTP_recv&quot;;</span><br><span class="line">      message[&quot;ssl_session_id&quot;] &#x3D; &quot;&quot;;</span><br><span class="line">      message[&quot;src_addr&quot;] &#x3D; ntohl(ipToNumber((this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;)[0]).split(&quot;&#x2F;&quot;).pop()));</span><br><span class="line">      message[&quot;src_port&quot;] &#x3D; parseInt(this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;).pop());</span><br><span class="line">      message[&quot;dst_addr&quot;] &#x3D; ntohl(ipToNumber((this.socket.value.getLocalAddress().toString().split(&quot;:&quot;)[0]).split(&quot;&#x2F;&quot;).pop()));</span><br><span class="line">      message[&quot;dst_port&quot;] &#x3D; parseInt(this.socket.value.getLocalPort());</span><br><span class="line">      message[&quot;stack&quot;] &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="line">      if (result &gt; 0) &#123;</span><br><span class="line">        var ptr &#x3D; Memory.alloc(result);</span><br><span class="line">        for (var i &#x3D; 0; i &lt; result; ++i)</span><br><span class="line">          Memory.writeS8(ptr.add(i), bytearry[offset + i]);</span><br><span class="line">        send(message, Memory.readByteArray(ptr, result))</span><br><span class="line">      &#125;</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (parseFloat(Java.androidVersion)  &gt; 8) &#123;</span><br><span class="line">      Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream&quot;).write.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (bytearry, int1, int2) &#123;</span><br><span class="line">        var result &#x3D; this.write(bytearry, int1, int2);</span><br><span class="line">        SSLstackwrite &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="line">        return result;</span><br><span class="line">      &#125;</span><br><span class="line">      Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream&quot;).read.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (bytearry, int1, int2) &#123;</span><br><span class="line">        var result &#x3D; this.read(bytearry, int1, int2);</span><br><span class="line">        SSLstackread &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="line">        return result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      Java.use(&quot;com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream&quot;).write.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (bytearry, int1, int2) &#123;</span><br><span class="line">        var result &#x3D; this.write(bytearry, int1, int2);</span><br><span class="line">        SSLstackwrite &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="line">        return result;</span><br><span class="line">      &#125;</span><br><span class="line">      Java.use(&quot;com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream&quot;).read.overload(&#39;[B&#39;, &#39;int&#39;, &#39;int&#39;).implementation &#x3D; function (bytearry, int1, int2) &#123;</span><br><span class="line">        var result &#x3D; this.read(bytearry, int1, int2);</span><br><span class="line">        SSLstackread &#x3D; Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="line">        return result;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python r0capture.py -U -f com.qiyi.video -p iqiyi.pcap</p><ul><li><a href="https://mp.weixin.qq.com/s/UixExZkPWHJAT3jAD2sJJg" target="_blank" rel="noopener">某抢票app逆向续篇之干掉vpn抓包检测</a></li><li><a href="https://www.cnblogs.com/c-x-a/p/9174663.html" target="_blank" rel="noopener">Android 开发之避免被第三方使用代理抓包</a></li><li><a href="https://bbs.pediy.com/thread-223460.htm" target="_blank" rel="noopener">【SO壳】17种安卓native反调试收集</a></li><li><a href="https://www.jianshu.com/p/87ce6f565d37" target="_blank" rel="noopener">Android JNI(一)——NDK与JNI基础</a></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postern </tag>
            
            <tag> charles </tag>
            
            <tag> burpsuite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主动调用java及native层</title>
      <link href="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/"/>
      <url>/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="example"><a href="#example" class="headerlink" title="example"></a>example</h1><h2 id="frida-server-linux"><a href="#frida-server-linux" class="headerlink" title="frida-server-linux"></a><strong>frida-server-linux</strong></h2><p><a href="https://github.com/frida/frida-python" target="_blank" rel="noopener">frida-python</a>修改examples中rpc.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from __future__ import print_function</span><br><span class="line">import frida</span><br><span class="line">import time</span><br><span class="line">session &#x3D; frida.attach(&quot;mousepad&quot;)</span><br><span class="line">script &#x3D; session.create_script(&quot;&quot;&quot;\</span><br><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line">  hello: function () &#123;</span><br><span class="line">    return &#39;Hello&#39;;</span><br><span class="line">  &#125;,</span><br><span class="line">  failPlease: function () &#123;</span><br><span class="line">    return &#39;oops&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line">script.load()</span><br><span class="line">api &#x3D; script.exports</span><br><span class="line">print(&quot;api.hello() &#x3D;&gt;&quot;, api.hello())</span><br><span class="line">print(&quot;api.fail_please() &#x3D;&gt;&quot;,api.fail_please())</span><br></pre></td></tr></table></figure><p>7z x <a href="https://github.com/frida/frida/releases/download/14.2.12/frida-server-14.2.12-linux-x86_64.xz" target="_blank" rel="noopener">frida-server-14.2.12-linux-x86_64.xz</a> &amp;&amp; chmod 777 frida-server-14.2.12-linux-x86_64 &amp;&amp; ./frida-server-14.2.12-linux-x86_64  启动linux的frida server</p><p>通过netstat -tuulp可以查询被frida-server listen的27042端口</p><p>echo 123&gt;1.txt &amp;&amp; mousepad 1.txt   记事本打开1.txt,<code>ps aux|grep -i mousepad</code>查看该进程</p><p>python rpc.py 查看rpc attach mousepad引用打印结果</p><blockquote><p>python-binding里连接frida-server的非标准端口:</p><p>./fs1428arm64 -l 0.0.0.0:6666<br>import frida<br>device = frida.get_device_manager().add_remote_device(‘192.168.1.101:6666’)<br>print(device.name,devie.type,device.id) </p></blockquote><hr><p><a href="https://github.com/frida/frida-python" target="_blank" rel="noopener">frida-python</a>修改examples中<a href="https://github.com/frida/frida-python/blob/master/examples/bytecode.py" target="_blank" rel="noopener">bytecode.py</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">system_session &#x3D; frida.attach(0)</span><br><span class="line">bytecode &#x3D; system_session.compile_script(name&#x3D;&quot;bytecode-example&quot;, source&#x3D;&quot;&quot;&quot;\</span><br><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line">  listThreads: function () &#123;</span><br><span class="line">    return Process.enumerateThreadsSync();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line">session &#x3D; frida.attach(&quot;mousepad&quot;)</span><br><span class="line">script &#x3D; session.create_script_from_bytes(bytecode)</span><br><span class="line">script.load()</span><br><span class="line">api &#x3D; script.exports</span><br><span class="line">print(&quot;api.list_threads() &#x3D;&gt;&quot;, api.list_threads())</span><br></pre></td></tr></table></figure><p>python bytecode.py 查看rpc 编译生成的thread列表</p><hr><h2 id="frida-server-android"><a href="#frida-server-android" class="headerlink" title="frida-server-android"></a><strong>frida-server-android</strong></h2><p><a href="https://github.com/frida/frida-python" target="_blank" rel="noopener">frida-python</a>修改examples中<a href="https://github.com/frida/frida-python/blob/master/examples/rpc.py" target="_blank" rel="noopener">rpc.py</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line">#device &#x3D; frida.get_device_manager.add_remote_device(&quot;192.168.0.2:8888&quot;) # 基于远程ip的集群</span><br><span class="line">pid &#x3D; device.spawn([&quot;com.android.settings&quot;])</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(1)</span><br><span class="line">session &#x3D; device.attach(pid)</span><br><span class="line">script &#x3D; session.create_script(&quot;&quot;&quot;\</span><br><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line">  hello: function () &#123;</span><br><span class="line">    return &#39;Hello&#39;;</span><br><span class="line">  &#125;,</span><br><span class="line">  failPlease: function () &#123;</span><br><span class="line">    return &#39;oops&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line">script.load()</span><br><span class="line">api &#x3D; script.exports</span><br><span class="line">print(&quot;api.hello() &#x3D;&gt;&quot;, api.hello())</span><br><span class="line">print(&quot;api.fail_please() &#x3D;&gt;&quot;,api.fail_please())</span><br></pre></td></tr></table></figure><p>./fs1428arm64</p><p>pyenv local 3.8.5 &amp;&amp;  python rpc.py 自启动进程查看rpc attach pid引用打印结果</p><hr><p><a href="https://github.com/frida/frida-python" target="_blank" rel="noopener">frida-python</a>修改examples中<a href="https://github.com/frida/frida-python/blob/master/examples/detached.py" target="_blank" rel="noopener">detached.py</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def on_detached():</span><br><span class="line">    print(&quot;on_detached&quot;)</span><br><span class="line"></span><br><span class="line">def on_detached_with_reason(reason):</span><br><span class="line">    print(&quot;on_detached_with_reason:&quot;, reason)</span><br><span class="line"></span><br><span class="line">def on_detached_with_varargs(*args):</span><br><span class="line">    print(&quot;on_detached_with_varargs:&quot;, args)</span><br><span class="line"></span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line">#device &#x3D; frida.get_device_manager.add_remote_device(&quot;192.168.0.2:8888&quot;) # 基于远程ip的集群</span><br><span class="line">pid &#x3D; device.spawn([&quot;com.android.settings&quot;])</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(1)</span><br><span class="line">session &#x3D; device.attach(pid)</span><br><span class="line">print(&quot;attached&quot;)</span><br><span class="line">session.on(&#39;detached&#39;, on_detached)</span><br><span class="line">session.on(&#39;detached&#39;, on_detached_with_reason)</span><br><span class="line">session.on(&#39;detached&#39;, on_detached_with_varargs)</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>./fs1428arm64</p><p>pyenv local 3.8.5 &amp;&amp;  python detached.py 自启动进程detach进程后捕获进程退出打印log</p><hr><p><a href="https://github.com/frida/frida-python" target="_blank" rel="noopener">frida-python</a>修改examples中<a href="https://github.com/frida/frida-python/blob/master/examples/crash_reporting.py" target="_blank" rel="noopener">crash_reporting.py</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def on_process_crashed(crash):</span><br><span class="line">    print(&quot;on_process_crashed&quot;)</span><br><span class="line">    print(&quot;\tcrash:&quot;, crash)</span><br><span class="line"></span><br><span class="line">def on_detached(reason, crash):</span><br><span class="line">    print(&quot;on_detached()&quot;)</span><br><span class="line">    print(&quot;\treason:&quot;, reason)</span><br><span class="line">    print(&quot;\tcrash:&quot;, crash)</span><br><span class="line"></span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line">device.on(&#39;process-crashed&#39;, on_process_crashed)</span><br><span class="line">session &#x3D; device.attach(&quot;com.android.settings&quot;)</span><br><span class="line">session.on(&#39;detached&#39;, on_detached)</span><br><span class="line">print(&quot;[*] Ready&quot;)</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>./fs1428arm64</p><p>pyenv local 3.8.5 &amp;&amp;  python crash_reporting.py  进程运行中detach进程后捕获进程退出打印log</p><hr><p>当需要hook一个app的子进程时，调用<a href="https://github.com/frida/frida-python/blob/master/examples/child_gating.py" target="_blank" rel="noopener">child_gating.py</a>在子进程创建时创建脚本打印内容。</p><p>argv = [“/bin/sh”, “-c”, “cat /etc/hosts”] # 在bullhead中/system/bin/sh</p><hr><p><a href="https://github.com/frida/frida-python" target="_blank" rel="noopener">frida-python</a>修改examples中<a href="https://github.com/frida/frida-python/blob/master/examples/bytecode.py" target="_blank" rel="noopener">bytecode.py</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line">#device &#x3D; frida.get_device_manager.add_remote_device(&quot;192.168.0.2:8888&quot;) # 基于远程ip的集群</span><br><span class="line">pid &#x3D; device.spawn([&quot;com.hd.zhibo&quot;])</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(1)</span><br><span class="line"></span><br><span class="line">system_session &#x3D; device.attach(0)</span><br><span class="line">bytecode &#x3D; system_session.compile_script(name&#x3D;&quot;bytecode-example&quot;, source&#x3D;&quot;&quot;&quot;\</span><br><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line">  listThreads: function () &#123;</span><br><span class="line">    return Process.enumerateThreadsSync();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line">session &#x3D; device.attach(pid)</span><br><span class="line">script &#x3D; session.create_script_from_bytes(bytecode)</span><br><span class="line">script.load()</span><br><span class="line">api &#x3D; script.exports</span><br><span class="line">print(&quot;api.list_threads() &#x3D;&gt;&quot;, api.list_threads())</span><br></pre></td></tr></table></figure><p>python bytecode.py 查看rpc 编译生成的thread列表</p><hr><p>DEXDump:js暴露3个export api(memorydump,switchmode,scandex)，在py层调用三个api进行交互</p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/dexdump暴露api.png" alt="dexdump暴露api" style="zoom:80%;"><p>Zentracer:使用替换js中字符串(MATCHREGEX,BLACKREGEX)将黑白名单传输给js文件，将js文件直接加载通过send将信息传输给py端</p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/Zentracer替换.png" alt="Zentracer替换" style="zoom:80%;"><h1 id="java层主动调用"><a href="#java层主动调用" class="headerlink" title="java层主动调用"></a>java层主动调用</h1><h2 id="pyenv-升级"><a href="#pyenv-升级" class="headerlink" title="pyenv 升级"></a>pyenv 升级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pyenv versions</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pyenv&#x2F;pyenv-update.git $(pyenv root)&#x2F;plugins&#x2F;pyenv-update</span><br><span class="line">pyenv update</span><br><span class="line">pyenv install 3.8.6</span><br><span class="line">pip install objection  安装最新版objection和frida</span><br><span class="line">frida -UF </span><br><span class="line">Frida 查看版本</span><br><span class="line">Frida.heapSize</span><br><span class="line">Script  查看运行环境使用的是QJS</span><br></pre></td></tr></table></figure><h2 id="项目Httpsocket"><a href="#项目Httpsocket" class="headerlink" title="项目Httpsocket"></a>项目Httpsocket</h2><h3 id="libssl"><a href="#libssl" class="headerlink" title="libssl"></a>libssl</h3><p>库的抓包导出表与符号表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.roysue.httpsocket.explore</span><br><span class="line">memory list modules  搜索libssl.so</span><br><span class="line">memory list exports libssl.so --json &#x2F;root&#x2F;Desktop&#x2F;libssl.so.json  通过json文件查看导出函数表</span><br><span class="line">memory list exports libcrypto.so --json &#x2F;root&#x2F;Desktop&#x2F;libcrypto.so.json </span><br><span class="line">frida-trace -UF -I libssl.so  指定模块trace自动化导出表查看经过了哪里</span><br><span class="line">frida-trace -U -f com.roysue.Httpsocket -I libssl.so  容易崩</span><br><span class="line">frida-trace -U -f com.roysue.Httpsocket -I libcrypto.so  自动生成的hook在当前目录的__handlers__下</span><br></pre></td></tr></table></figure><p>尝试通过frida实现hook所有so的导出表和符号表<code>frida -U -f com.roysue.httpsocket -l traceNative.js --no-pause</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">function writeSomething(path, contents) &#123;</span><br><span class="line">    var fopen_addr &#x3D; Module.findExportByName(&quot;libc.so&quot;, &quot;fopen&quot;);</span><br><span class="line">    var fputs_addr &#x3D; Module.findExportByName(&quot;libc.so&quot;, &quot;fputs&quot;);</span><br><span class="line">    var fclose_addr &#x3D; Module.findExportByName(&quot;libc.so&quot;, &quot;fclose&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;console.log(&quot;fopen&#x3D;&gt;&quot;,fopen_addr,&quot;  fputs&#x3D;&gt;&quot;,fputs_addr,&quot;  fclose&#x3D;&gt;&quot;,fclose_addr);</span><br><span class="line"></span><br><span class="line">    var fopen &#x3D; new NativeFunction(fopen_addr, &quot;pointer&quot;, [&quot;pointer&quot;, &quot;pointer&quot;])</span><br><span class="line">    var fputs &#x3D; new NativeFunction(fputs_addr, &quot;int&quot;, [&quot;pointer&quot;, &quot;pointer&quot;])</span><br><span class="line">    var fclose &#x3D; new NativeFunction(fclose_addr, &quot;int&quot;, [&quot;pointer&quot;])</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;console.log(path,contents)</span><br><span class="line"></span><br><span class="line">    var fileName &#x3D; Memory.allocUtf8String(path);</span><br><span class="line">    var mode &#x3D; Memory.allocUtf8String(&quot;a+&quot;);</span><br><span class="line"></span><br><span class="line">    var fp &#x3D; fopen(fileName, mode);</span><br><span class="line"></span><br><span class="line">    var contentHello &#x3D; Memory.allocUtf8String(contents);</span><br><span class="line">    var ret &#x3D; fputs(contentHello, fp)</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 枚举出所有导出函数和内部符号，找到关键函数存在的so，动态注册无效，名称和native可以完全不一样</span><br><span class="line">function traceNativeExport()&#123;</span><br><span class="line"></span><br><span class="line">    var modules &#x3D; Process.enumerateModules();</span><br><span class="line">    for(var i &#x3D; 0;i&lt;modules.length;i++)&#123;</span><br><span class="line">        var module &#x3D; modules[i];</span><br><span class="line"></span><br><span class="line">        if(module.name.indexOf(&quot;libssl.so&quot;)&lt;0)&#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 枚举so所有导出表</span><br><span class="line">        var exports &#x3D; module.enumerateExports();</span><br><span class="line">        for(var j &#x3D; 0;j&lt;exports.length;j++)&#123;</span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;module name is &#x3D;&gt;&quot;,module.name,&quot; symbol name is &#x3D;&gt;&quot;,exports[j].name)</span><br><span class="line">            &#x2F;&#x2F;var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;so&#x2F;&quot;+module.name+&quot;.txt&quot;</span><br><span class="line">            &#x2F;&#x2F; 通过objection -g com.roysue.httpsocket explore 中env拿到的filesDirectory地址</span><br><span class="line">            &#x2F;&#x2F;var path &#x3D; &quot;&#x2F;data&#x2F;data&#x2F;com.roysue.d0so2&#x2F;cache&#x2F;&quot;+module.name+&quot;.txt&quot;</span><br><span class="line">            &#x2F;&#x2F;writeSomething(path,&quot;type: &quot;+exports[j].type+&quot; function name :&quot;+exports[j].name+&quot; address : &quot;+exports[j].address+&quot; offset &#x3D;&gt; 0x&quot;+(exports[j].address - module[i].address)+&quot;\n&quot;)</span><br><span class="line">            &#x2F;&#x2F; 把所有包含SSL_write的函数全部hook上</span><br><span class="line">            if(exports[j].name.indexOf(&quot;SSL_write&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">                attach(exports[j].name,exports[j].address);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;set&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">            &#x2F;&#x2F;     attach(exports[j].name,exports[j].address);</span><br><span class="line">            &#x2F;&#x2F; &#125;</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;send&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">            &#x2F;&#x2F;     attach(exports[j].name,exports[j].address);</span><br><span class="line">            &#x2F;&#x2F; &#125;</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;recv&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">            &#x2F;&#x2F;     attach(exports[j].name,exports[j].address);</span><br><span class="line">            &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function attach(name,address)&#123;</span><br><span class="line">    console.log(&quot;attaching &quot;,name);</span><br><span class="line">    Interceptor.attach(address,&#123;</span><br><span class="line">        onEnter:function(args)&#123;</span><br><span class="line">            console.log(&quot;Entering &#x3D;&gt; &quot; ,name)</span><br><span class="line">            console.log(&quot;args[0] &#x3D;&gt; &quot;,hexdump(args[0]) )</span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;args[1] &#x3D;&gt; &quot;,args[1].readCString())</span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;args[2] &#x3D;&gt; &quot;,args[2])</span><br><span class="line"></span><br><span class="line">        &#125;,onLeave:function(retval)&#123;</span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;retval is &#x3D;&gt; &quot;,retval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 枚举符号表</span><br><span class="line">function traceNativeSymbol()&#123;</span><br><span class="line">    var modules &#x3D; Process.enumerateModules();</span><br><span class="line">    for(var i &#x3D; 0;i&lt;modules.length;i++)&#123;</span><br><span class="line">        var module &#x3D; modules[i];</span><br><span class="line">        &#x2F;&#x2F; console.log(JSON.stringify(modules))</span><br><span class="line">        if(module.name.indexOf(&quot;linker64&quot;)&lt;0)&#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var exports &#x3D; module.enumerateSymbols();</span><br><span class="line">        console.log(JSON.stringify(exports))</span><br><span class="line">        for(var j &#x3D; 0;j&lt;exports.length;j++)&#123;</span><br><span class="line">            if(exports[j] &#x3D;&#x3D; null)&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&quot;module name is &#x3D;&gt;&quot;,module.name,&quot; symbol name is &#x3D;&gt;&quot;,exports[j].name)</span><br><span class="line">            var path &#x3D; &quot;&#x2F;data&#x2F;data&#x2F;com.roysue.d0so2&#x2F;cache&#x2F;&quot;+module.name+&quot;Symbol.txt&quot;</span><br><span class="line">            writeSomething(path,&quot;type: &quot;+exports[j].type+&quot; function name :&quot;+exports[j].name+&quot; address : &quot;+exports[j].address+&quot; offset &#x3D;&gt; 0x&quot;+(exports[j].address - module[i].address)+&quot;\n&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(&quot;Entering main&quot;)</span><br><span class="line">    traceNativeExport();</span><br><span class="line">    &#x2F;&#x2F;traceNativeSymbol();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p>git clone <a href="https://github.com/BigFaceCat2017/frida_ssl_logger.git" target="_blank" rel="noopener">https://github.com/BigFaceCat2017/frida_ssl_logger.git</a></p><p>python ssl_logger.py -U -f com.roysue.httpsocket  -p capture.pcap  抓包ssl保存到pcap中使用wireshark查看</p><h3 id="libc"><a href="#libc" class="headerlink" title="libc"></a>libc</h3><p>去除httpSocket.js中traceNativeExport对libssl.so的过滤，<code>frida -UF -l traceNative.js</code>,trace后的结果到/data/data/com.roysue.d0so2/cache中<code>cat libs.so.txt|grep open</code></p><p>frida -UF -l traceNativelibc.js -o trace.txt</p><p>frida -U -f com.ss.android.auto -l traceNativelibc.js -o trace.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">function writeSomething(path, contents) &#123;</span><br><span class="line">    var fopen_addr &#x3D; Module.findExportByName(&quot;libc.so&quot;, &quot;fopen&quot;);</span><br><span class="line">    var fputs_addr &#x3D; Module.findExportByName(&quot;libc.so&quot;, &quot;fputs&quot;);</span><br><span class="line">    var fclose_addr &#x3D; Module.findExportByName(&quot;libc.so&quot;, &quot;fclose&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;console.log(&quot;fopen&#x3D;&gt;&quot;,fopen_addr,&quot;  fputs&#x3D;&gt;&quot;,fputs_addr,&quot;  fclose&#x3D;&gt;&quot;,fclose_addr);</span><br><span class="line"></span><br><span class="line">    var fopen &#x3D; new NativeFunction(fopen_addr, &quot;pointer&quot;, [&quot;pointer&quot;, &quot;pointer&quot;])</span><br><span class="line">    var fputs &#x3D; new NativeFunction(fputs_addr, &quot;int&quot;, [&quot;pointer&quot;, &quot;pointer&quot;])</span><br><span class="line">    var fclose &#x3D; new NativeFunction(fclose_addr, &quot;int&quot;, [&quot;pointer&quot;])</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;console.log(path,contents)</span><br><span class="line"></span><br><span class="line">    var fileName &#x3D; Memory.allocUtf8String(path);</span><br><span class="line">    var mode &#x3D; Memory.allocUtf8String(&quot;a+&quot;);</span><br><span class="line"></span><br><span class="line">    var fp &#x3D; fopen(fileName, mode);</span><br><span class="line"></span><br><span class="line">    var contentHello &#x3D; Memory.allocUtf8String(contents);</span><br><span class="line">    var ret &#x3D; fputs(contentHello, fp)</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function traceNativeExport()&#123;</span><br><span class="line"></span><br><span class="line">    var modules &#x3D; Process.enumerateModules();</span><br><span class="line">    for(var i &#x3D; 0;i&lt;modules.length;i++)&#123;</span><br><span class="line">        var module &#x3D; modules[i];</span><br><span class="line"></span><br><span class="line">        if(module.name.indexOf(&quot;libc.so&quot;)&lt;0)&#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var exports &#x3D; module.enumerateExports();</span><br><span class="line">        for(var j &#x3D; 0;j&lt;exports.length;j++)&#123;</span><br><span class="line">            &#x2F;&#x2F;console.log(&quot;module name is &#x3D;&gt;&quot;,module.name,&quot; symbol name is &#x3D;&gt;&quot;,exports[j].name)</span><br><span class="line">            &#x2F;&#x2F;var path &#x3D; &quot;&#x2F;sdcard&#x2F;Download&#x2F;so&#x2F;&quot;+module.name+&quot;.txt&quot;</span><br><span class="line">            &#x2F;&#x2F; var path &#x3D; &quot;&#x2F;data&#x2F;data&#x2F;com.roysue.d0so2&#x2F;cache&#x2F;&quot;+module.name+&quot;.txt&quot;</span><br><span class="line">            &#x2F;&#x2F; writeSomething(path,&quot;type: &quot;+exports[j].type+&quot; function name :&quot;+exports[j].name+&quot; address : &quot;+exports[j].address+&quot; offset &#x3D;&gt; 0x&quot;+ ( exports[j].address.sub(modules[i].base) )+&quot;\n&quot;)</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;strto&quot;)&gt;&#x3D;0)continue;</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;strco&quot;)&gt;&#x3D;0)continue;</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;_l&quot;)&gt;&#x3D;0)continue;</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;pthread&quot;)&gt;&#x3D;0)continue;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;socket&quot;)&gt;&#x3D;0)&#123; &#x2F;&#x2F; fopen fputs fputc fclose</span><br><span class="line">            &#x2F;&#x2F;     attach(exports[j].name,exports[j].address);</span><br><span class="line">            &#x2F;&#x2F; &#125;</span><br><span class="line">            &#x2F;&#x2F; 过反调试,一般反调试都有单独创建线程</span><br><span class="line">            if(exports[j].name.indexOf(&quot;pthread_create&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">                attach(exports[j].name,exports[j].address);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;read&quot;)&gt;&#x3D;0)&#123;  &#x2F;&#x2F; man read</span><br><span class="line">            &#x2F;&#x2F;     attach(exports[j].name,exports[j].address);</span><br><span class="line">            &#x2F;&#x2F; &#125;</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;write&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">            &#x2F;&#x2F;     attach(exports[j].name,exports[j].address);</span><br><span class="line">            &#x2F;&#x2F; &#125;</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;send&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">            &#x2F;&#x2F;     attach(exports[j].name,exports[j].address);</span><br><span class="line">            &#x2F;&#x2F; &#125;</span><br><span class="line">            &#x2F;&#x2F; if(exports[j].name.indexOf(&quot;recv&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">            &#x2F;&#x2F;     attach(exports[j].name,exports[j].address);</span><br><span class="line">            &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function attach(name,address)&#123;</span><br><span class="line">    console.log(&quot;attaching &quot;,name);</span><br><span class="line">    Interceptor.attach(address,&#123;</span><br><span class="line">        onEnter:function(args)&#123;</span><br><span class="line">            console.log(&quot;Entering &#x3D;&gt; &quot; ,name)</span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;args[0] &#x3D;&gt; &quot;,args[0].readCString() )</span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;args[1] &#x3D;&gt; &quot;,args[1].readCString())</span><br><span class="line">            &#x2F;&#x2F; console.log( hexdump(args[1]))</span><br><span class="line">            </span><br><span class="line">            console.log(&quot;args[2] &#x3D;&gt; &quot;,args[2])</span><br><span class="line">            &#x2F;&#x2F; 打印调用栈</span><br><span class="line">            &#x2F;&#x2F; console.log(&#39;R0YSUE called from:\n&#39; +Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(&#39;\n&#39;) + &#39;\n&#39;);</span><br><span class="line"></span><br><span class="line">        &#125;,onLeave:function(retval)&#123;</span><br><span class="line">            console.log(&quot;exit &#x3D;&gt; &quot;,name)</span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;retval is &#x3D;&gt; &quot;,retval.readCString())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function traceNativeSymbol()&#123;</span><br><span class="line">    var modules &#x3D; Process.enumerateModules();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; console.log(JSON.stringify(modules))</span><br><span class="line"></span><br><span class="line">    for(var i &#x3D; 0;i&lt;modules.length;i++)&#123;</span><br><span class="line">        var module &#x3D; modules[i];</span><br><span class="line">        &#x2F;&#x2F; console.log(JSON.stringify(modules))</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; if(module.name.indexOf(&quot;linker64&quot;)&lt;0)&#123;</span><br><span class="line">        &#x2F;&#x2F;     continue;</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">        var exports &#x3D; module.enumerateSymbols();</span><br><span class="line">        &#x2F;&#x2F; console.log(JSON.stringify(exports))</span><br><span class="line">        for(var j &#x3D; 0;j&lt;exports.length;j++)&#123;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; console.log(&quot;module name is &#x3D;&gt;&quot;,module.name,&quot; symbol name is &#x3D;&gt;&quot;,exports[j].name)</span><br><span class="line">            var path &#x3D; &quot;&#x2F;data&#x2F;data&#x2F;com.roysue.d0so2&#x2F;cache&#x2F;&quot;+module.name+&quot;Symbol.txt&quot;</span><br><span class="line">            writeSomething(path,&quot;type: &quot;+exports[j].type+&quot; function name :&quot;+exports[j].name+&quot; address : &quot;+exports[j].address+&quot; offset &#x3D;&gt; 0x&quot;+ ( exports[j].address.sub(modules[i].base) )+&quot;\n&quot;)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(&quot;Entering main&quot;)</span><br><span class="line">    traceNativeExport();</span><br><span class="line">    &#x2F;&#x2F; traceNativeSymbol();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><a href="https://bbs.pediy.com/thread-253868.html" target="_blank" rel="noopener">Unicorn 在 Android 的应用</a> </p><h2 id="项目d0so2"><a href="#项目d0so2" class="headerlink" title="项目d0so2"></a>项目d0so2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.roysue.d0so2 explore -s &quot;android hooking watch class_method com.roysue.d0so2.MainActivity.sI3 --dump-args --dump-backtrace --dump-return&quot;</span><br><span class="line">memory list modules 查找native-lib为libnative-lib.so</span><br><span class="line">memory list exports libnative-lib.so  只能找到静态注册的stringFromJNI1，stringFromJNI1，但是找不到动态注册的sI3</span><br></pre></td></tr></table></figure><p>git clone <a href="https://github.com/lasting-yang/frida_hook_libart.githttps://github.com/lasting-yang/frida_hook_libart.git" target="_blank" rel="noopener">https://github.com/lasting-yang/frida_hook_libart.githttps://github.com/lasting-yang/frida_hook_libart.git</a></p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210626200659411.png" alt="image-20210626200659411"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U --no-pause -f com.roysue.d0so2 -l hook_RegisterNatives.js  找到动态注册的类和原名</span><br></pre></td></tr></table></figure><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210626200829573.png" alt="image-20210626200829573"></p><p>其中0x7612a10454绝对地址减去0x7612a01000模块地址，得到0xf454函数地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory list exports libnative-lib.so  搜索0x7612a10454</span><br></pre></td></tr></table></figure><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210626201140766.png" alt="image-20210626201140766"></p><p>将函数名复制到<a href="http://demangler.com/" target="_blank" rel="noopener">http://demangler.com/</a> 进行解码得到原函数名</p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210626201219371.png" alt="image-20210626201219371"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method com.rosyue.d0so2.MainActivity.sI3() --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p>frida实现hook动态注册函数，frida -UF -l hookNative.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function hook_native()&#123;</span><br><span class="line">    var libnative_addr &#x3D;  Module.findBaseAddress(&#39;libnative-lib.so&#39;);</span><br><span class="line">    console.log(&quot;libnative_addr is &#x3D;&gt; &quot;,libnative_addr)</span><br><span class="line">    var stringfromJNI3 &#x3D; libnative_addr.add(0xf454);</span><br><span class="line">    console.log(&quot;stringfromJNI3 address is &#x3D;&gt;&quot;,stringfromJNI3);</span><br><span class="line"></span><br><span class="line">    var stringfromJNI3_2 &#x3D; Module.findExportByName(&#39;libnative-lib.so&#39;, &quot;_Z14stringFromJNI3P7_JNIEnvP7_jclassP8_jstring&quot;)</span><br><span class="line">    console.log(&quot;stringfromJNI3_2 address is &#x3D;&gt;&quot;,stringfromJNI3_2);</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(stringfromJNI3_2,&#123;</span><br><span class="line">        onEnter:function(args)&#123;</span><br><span class="line"></span><br><span class="line">            console.log(&quot;jnienv pointer &#x3D;&gt;&quot;,args[0])</span><br><span class="line">            console.log(&quot;jobj pointer &#x3D;&gt;&quot;,args[1])</span><br><span class="line">            console.log(&quot;jstring pointer&#x3D;&gt;&quot;,Java.vm.getEnv().getStringUtfChars(args[2], null).readCString() )</span><br><span class="line"></span><br><span class="line">        &#125;,onLeave:function(retval)&#123;</span><br><span class="line">            console.log(&quot;retval is &#x3D;&gt;&quot;,Java.vm.getEnv().getStringUtfChars(retval, null).readCString())</span><br><span class="line">            console.log(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    hook_native()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h2 id="项目-demoso1"><a href="#项目-demoso1" class="headerlink" title="项目 demoso1"></a>项目 demoso1</h2><p><a href="https://www.jianshu.com/p/87ce6f565d37" target="_blank" rel="noopener">Android JNI(一)——NDK与JNI基础</a></p><p><a href="https://bbs.pediy.com/thread-224672.html" target="_blank" rel="noopener">Android逆向新手答疑解惑篇——JNI与动态注册</a></p><p>pyenv 3.8.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.example.demoso1 explore</span><br><span class="line">android hooking search classes com.example.demoso1  打印包名下所有的类</span><br><span class="line">android hooking list class_methods com.example.demoso1.MainActivity 打印类下所有方法</span><br><span class="line">android hooking watch class com.example.demoso1.MainActivity</span><br><span class="line">android hooking watch class_method com.example.demoso1.MainActivity.method02 --dump-args --dump-backtrace --dump-return </span><br><span class="line">objection -N -h 192.168.0.105 -p 8888 -g com.example.demoso1 explore</span><br></pre></td></tr></table></figure><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210408082733062.png" alt="image-20210408082733062"></p><p>method01在native层的静态方法，method02是native层的动态方法</p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210408113746342.png" alt="image-20210408113746342"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">var MainActivityHandle &#x3D; null;  &#x2F;&#x2F; 实例调用的性能优化(将instance缓存起来反复调用)</span><br><span class="line">Java.perform(function()&#123;</span><br><span class="line">    var javaString &#x3D; Java.use(&quot;java.lang.String&quot;)</span><br><span class="line">    Java.choose(&quot;com.example.demoso1.MainActivity&quot;,&#123;</span><br><span class="line">        onMatch:function(instance)&#123;</span><br><span class="line">            MainActivityHandle &#x3D; instance;</span><br><span class="line">        &#125;,onComplete()&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(&quot;MainActivityHandle is &#x3D;&gt; &quot;,MainActivityHandle)</span><br><span class="line">&#125;) </span><br><span class="line">function fridamethod01(plaintext)&#123;</span><br><span class="line">    var result;</span><br><span class="line">    &#x2F;&#x2F; method01 是 静态方法，使用Java.use</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var MainActivity &#x3D; Java.use(&quot;com.example.demoso1.MainActivity&quot;);</span><br><span class="line">        var javaString &#x3D; Java.use(&quot;java.lang.String&quot;)</span><br><span class="line">        result &#x3D; MainActivity.method01(javaString.$new(plaintext))</span><br><span class="line">    &#125;) </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function fridamethod02(ciphertext)&#123;</span><br><span class="line">    var result;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">    &#x2F;&#x2F; method02 是 动态方法，使用Java.choose</span><br><span class="line">        var javaString &#x3D; Java.use(&quot;java.lang.String&quot;)</span><br><span class="line">        &#x2F;&#x2F; Java.choose(&quot;com.example.demoso1.MainActivity&quot;,&#123;</span><br><span class="line">        &#x2F;&#x2F;     onMatch:function(instance)&#123;</span><br><span class="line">        &#x2F;&#x2F;         MainActivityHandle &#x3D; instance.method02(javaString.$new(ciphertext));</span><br><span class="line">        &#x2F;&#x2F;     &#125;,onComplete()&#123;&#125;</span><br><span class="line">        &#x2F;&#x2F; &#125;)</span><br><span class="line">        result &#x3D; MainActivityHandle.method02(javaString.$new(ciphertext))   </span><br><span class="line">    &#125;)</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210408085409310.png" alt="image-20210408085409310"></p><h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><p>主机中 ./fs128arm64  -l 0.0.0.0:8888<br>frida -H 192.168.0.105:8888 -F -l hookandinvoke.js   手机ip<br>objection -N -h 192.168.0.105 -p 8888 -g com.example.demoso1 explore 远程objection连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP 每次都是新连接 速度慢</span><br><span class="line">RPC 是 TCP流，速度快</span><br><span class="line">rpc.exports&#x3D;&#123;</span><br><span class="line">    fridamethod01:fridamethod01,</span><br><span class="line">    fridamethod02:fridamethod02,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rpc调用"><a href="#rpc调用" class="headerlink" title="rpc调用"></a>rpc调用</h3><p>curl -s -X POST “<a href="http://127.0.0.1:5000/encrypt&quot;" target="_blank" rel="noopener">http://127.0.0.1:5000/encrypt&quot;</a> -H “Content-Type: application/json” -d ‘{“data”: “roysue”}’</p><p>curl -s -X POST “<a href="http://127.0.0.1:5000/decrypt&quot;" target="_blank" rel="noopener">http://127.0.0.1:5000/decrypt&quot;</a> -H “Content-Type: application/json” -d ‘{“data”: “47fcda3822cd10a8e2f667fa49da783f”}’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">device &#x3D; frida.get_device_manager().add_remote_device(&quot;192.168.0.105:8888&quot;)</span><br><span class="line"></span><br><span class="line"># 启动&#96;demo01&#96;这个app</span><br><span class="line">pid &#x3D; device.spawn([&quot;com.example.demoso1&quot;])</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(1)</span><br><span class="line">session &#x3D; device.attach(pid)</span><br><span class="line"># 加载脚本</span><br><span class="line">with open(&quot;hookandinvoke.js&quot;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line">script.on(&quot;message&quot; , my_message_handler) #调用错误处理</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">print(script.exports.fridamethod01(&quot;roysue&quot;))</span><br><span class="line">print(script.exports.fridamethod02(&quot;47fcda3822cd10a8e2f667fa49da783f&quot;))</span><br></pre></td></tr></table></figure><p>python hookandinvoke.py</p><h2 id="压测http并发性能"><a href="#压测http并发性能" class="headerlink" title="压测http并发性能"></a>压测http并发性能</h2><p><a href="https://github.com/JoeDog/siege" target="_blank" rel="noopener">https://github.com/JoeDog/siege</a>  压测</p><p>apt install siege  <a href="https://www.jianshu.com/p/74c465ff136f" target="_blank" rel="noopener">https://www.jianshu.com/p/74c465ff136f</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">siege -c5 -r10 <span class="string">"http://127.0.0.1:5000/encrypt POST &lt;./iloveroysue.json "</span></span><br></pre></td></tr></table></figure><h2 id="nps-内网穿透"><a href="#nps-内网穿透" class="headerlink" title="nps 内网穿透"></a>nps 内网穿透</h2><p>客户端：<a href="https://github.com/ehang-io/nps/releases/download/v0.26.6/linux_arm64_client.tar.gz" target="_blank" rel="noopener">linux_arm64_client.tar.gz</a>  因为n5x是kali nethunter系统，chmod 777 * &amp;&amp; ./npc，启动npc</p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210408115046329.png" alt="image-20210408115046329"></p><p>服务端：<a href="https://ehang-io.github.io/nps/#/run" target="_blank" rel="noopener">https://ehang-io.github.io/nps/#/run</a>  添加隧道，端口映射</p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210408115216335.png" alt="image-20210408115216335"></p><p>add_remote_device  修改远程地址，将手机ip和kali主机ip暴露公网调用，通过siege压测</p><p>device = frida.get_device_manager().add_remote_device(“192.168.0.105:8888”)  手机ip</p><p><a href="https://github.com/ehang-io/nps/releases/download/v0.26.6/linux_arm64_client.tar.gz" target="_blank" rel="noopener">linux_arm64_client.tar.gz</a></p><p>device = frida.get_device_manager().add_remote_device(“118.126.66.193:58888”)  npc和frida都在手机上，新增客户端，启动npc，手机ip公网映射添加隧道58888目标8888</p><blockquote><p>siege -c5 -r10 “<a href="http://127.0.0.1:5000/encrypt" target="_blank" rel="noopener">http://127.0.0.1:5000/encrypt</a> POST &lt;./iloveroysue.json “  启动py脚本</p></blockquote><p><a href="https://github.com/ehang-io/nps/releases/download/v0.26.0/linux_amd64_client.tar.gz" target="_blank" rel="noopener">linux_amd64_client.tar.gz</a></p><p>device = frida.get_device_manager().add_remote_device(“118.126.66.193:48888”)  npc在kali上，新增客户端，启动npc，配置隧道服务端口55000目标5000端口，手机ip公网映射48888目标192.168.0.105:8888</p><blockquote><p>siege -c5 -r10 “<a href="http://118.126.66.193:55000/encrypt" target="_blank" rel="noopener">http://118.126.66.193:55000/encrypt</a> POST &lt;./iloveroysue.json “  启动py脚本</p></blockquote><h1 id="Native层主动调用"><a href="#Native层主动调用" class="headerlink" title="Native层主动调用"></a>Native层主动调用</h1><p>demoso1基于<a href="https://www.jianshu.com/p/0390f598c34c" target="_blank" rel="noopener">https://www.jianshu.com/p/0390f598c34c</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.example.demoso1 explore</span><br><span class="line">memory list exports libnative-lib.so  查看导出函数，静态函数直接搜索</span><br></pre></td></tr></table></figure><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210409090128175.png" alt="image-20210409090128175"></p><p>_Z8method01P7_JNIEnvP7_jclassP8_jstring 通过搜索<a href="http://demangler.com/" target="_blank" rel="noopener">http://demangler.com/</a> 拿到原函数名</p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210409090231131.png" alt="image-20210409090231131"></p><p>或者通过<a href="https://github.com/lasting-yang/frida_hook_libart.git" target="_blank" rel="noopener">https://github.com/lasting-yang/frida_hook_libart.git</a></p><p>frida -U -f com.example.demoso1 -l hook_RegisterNatives.js –no-pause   查看原始方法名</p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210410090140648.png" alt="image-20210410090140648"></p><p>修改hook_RegisterNatives，添加hookMethod01和invokemethod02</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">在hook_RegisterNatives方法中添加</span><br><span class="line">                    if(name.indexOf(&quot;method01&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">                        &#x2F;&#x2F;hookmethod(fnPtr_ptr);</span><br><span class="line">                        &#x2F;&#x2F;replacehook(fnPtr_ptr);</span><br><span class="line">                        method01addr &#x3D; fnPtr_ptr;</span><br><span class="line">                    &#125;else if (name.indexOf(&quot;method02&quot;)&gt;&#x3D;0)&#123;</span><br><span class="line">                        method02addr &#x3D; fnPtr_ptr;</span><br><span class="line">                        method02 &#x3D; new NativeFunction(method02addr,&#39;pointer&#39;,[&#39;pointer&#39;,&#39;pointer&#39;,&#39;pointer&#39;]);</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">新增invokemethod01</span><br><span class="line">function invokemethod01(contents)&#123;</span><br><span class="line">    console.log(&quot;ENV&#x3D;&gt;&quot;,ENV)</span><br><span class="line">    console.log(&quot;JCLZ&#x3D;&gt;&quot;,JCLZ);</span><br><span class="line">    console.log(&quot;method01_addr is &#x3D;&gt;&quot;,method01addr)</span><br><span class="line">    var method01 &#x3D; new NativeFunction(method01addr,&#39;pointer&#39;,[&#39;pointer&#39;,&#39;pointer&#39;,&#39;pointer&#39;]);</span><br><span class="line">    var NewStringUTF &#x3D; new NativeFunction(addrNewStringUTF,&#39;pointer&#39;,[&#39;pointer&#39;,&#39;pointer&#39;])</span><br><span class="line">    var result &#x3D; null;</span><br><span class="line">    Java.perform(function()&#123;    </span><br><span class="line">        console.log(&quot;Java.vm.getEnv()&quot;,Java.vm.getEnv())</span><br><span class="line">        var JSTRING &#x3D; NewStringUTF(Java.vm.getEnv(),Memory.allocUtf8String(contents))</span><br><span class="line">        result &#x3D; method01(Java.vm.getEnv(),JSTRING,JSTRING);</span><br><span class="line">        console.log(&quot;result is &#x3D;&gt;&quot;,result)</span><br><span class="line">        console.log(&quot;result is &quot;,Java.vm.getEnv().getStringUtfChars(result, null).readCString())</span><br><span class="line">        result &#x3D; Java.vm.getEnv().getStringUtfChars(result, null).readCString();     </span><br><span class="line">    &#125;)</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">新增invokemethod02</span><br><span class="line">function invokemethod02(contents)&#123;</span><br><span class="line">    var result &#x3D; null;</span><br><span class="line">    Java.perform(function()&#123;    </span><br><span class="line">        var JSTRING &#x3D; NewStringUTF(Java.vm.getEnv(),Memory.allocUtf8String(contents))</span><br><span class="line">        result &#x3D; method02(Java.vm.getEnv(),JSTRING,JSTRING);</span><br><span class="line">        result &#x3D; Java.vm.getEnv().getStringUtfChars(result, null).readCString();</span><br><span class="line">    &#125;)</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> jni 获取类(jclass)的方式</p><p>1.需要new 一个对象时需要jclass.<br>2.需要调用这个对象的方法或者属性时需要jclass.<br>3.jclass 不需要释放.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获取对象类</span><br><span class="line"><span class="function">jclass <span class="title">GetObjectClass_</span>(<span class="params">JNIEnv* jni, jobject <span class="keyword">object</span></span>)</span> &#123;</span><br><span class="line">      jclass c = jni-&gt;GetObjectClass(<span class="keyword">object</span>);</span><br><span class="line">      <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">直接找到类名</span><br><span class="line">jclass long_cls &#x3D; env-&gt;FindClass(&quot;java&#x2F;lang&#x2F;Long&quot;);</span><br></pre></td></tr></table></figure></blockquote><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210410091647753.png" alt="image-20210410091647753"></p><h2 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line">    invoke1:invokemethod01, &#x2F;&#x2F; 导出名不可以有大写字母或者下划线</span><br><span class="line">    invoke2:invokemethod02</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>init.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import frida</span><br><span class="line">from flask import Flask, jsonify, request</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">def my_message_handler(message , payload): #定义错误处理</span><br><span class="line">print(message)</span><br><span class="line">print(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 连接安卓机上的frida-server</span><br><span class="line">#device &#x3D; frida.get_device_manager().add_remote_device(&quot;192.168.0.3:8888&quot;)</span><br><span class="line">#device &#x3D; frida.get_device_manager().add_remote_device(&quot;118.126.66.193:58888&quot;)</span><br><span class="line">device &#x3D; frida.get_device_manager().add_remote_device(&quot;192.168.0.105:8888&quot;)</span><br><span class="line">#device &#x3D; frida.get_usb_device()</span><br><span class="line"></span><br><span class="line"># 启动&#96;demo01&#96;这个app</span><br><span class="line">pid &#x3D; device.spawn([&quot;com.example.demoso1&quot;])</span><br><span class="line">session &#x3D; device.attach(pid)</span><br><span class="line"></span><br><span class="line"># 加载脚本</span><br><span class="line">with open(&quot;hook_RegisterNatives.js&quot;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line">script.on(&quot;message&quot; , my_message_handler) #调用错误处理</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">time.sleep(3)</span><br><span class="line">device.resume(pid)</span><br><span class="line"></span><br><span class="line">time.sleep(3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(script.exports.invoke1(&quot;onejane&quot;))</span><br><span class="line">print(script.exports.invoke2(&quot;c6138f96658ce0cb845bdab0f9616273&quot;))</span><br><span class="line"></span><br><span class="line"># 脚本会持续运行等待输入</span><br><span class="line">#input()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;encrypt&#39;, methods&#x3D;[&#39;POST&#39;])#url加密</span><br><span class="line">def encrypt_class():</span><br><span class="line">    data &#x3D; request.get_data()</span><br><span class="line">    json_data &#x3D; json.loads(data.decode(&quot;utf-8&quot;))</span><br><span class="line">    postdata &#x3D; json_data.get(&quot;data&quot;)</span><br><span class="line">    #print(postdata)</span><br><span class="line">    res &#x3D; script.exports.invoke1(postdata)</span><br><span class="line">    return res</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;decrypt&#39;, methods&#x3D;[&#39;POST&#39;])#data解密</span><br><span class="line">def decrypt_class():</span><br><span class="line">    data &#x3D; request.get_data()</span><br><span class="line">    json_data &#x3D; json.loads(data.decode(&quot;utf-8&quot;))</span><br><span class="line">    postdata &#x3D; json_data.get(&quot;data&quot;)</span><br><span class="line">    res &#x3D; script.exports.invoke2(postdata)</span><br><span class="line">    return res</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>端口usb连接，主机连接adb, ./fs128arm64  -l 0.0.0.0:8888 启动frida server</p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210410093320312.png" alt="image-20210410093320312"></p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210410093434378.png" alt="image-20210410093434378"></p><h2 id="脱离apk"><a href="#脱离apk" class="headerlink" title="脱离apk"></a>脱离apk</h2><p>7z x demoso1/app/build/outputs/apk/debug/app-debug.apk</p><p>cp lib/arm64-v8a/libnative-lib.so 到 /data/app/libnative-lib.so 并赋予最高权限</p><p>adb push libnative-lib.so /data/app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.android.settings -l hook_RegisterNatives.js --no-pause</span><br><span class="line">objection -g com.android.settings explore </span><br><span class="line">memory list modules   可以看到libnative-lib.so已经被加载</span><br><span class="line">memory list exports libnative-lib.so 找到两个函数名_Z8method01P7_JNIEnvP7_jclassP8_jstring，_Z8method02P7_JNIEnvP8_jobjectP8_jstring</span><br><span class="line"></span><br><span class="line">var modulelibnative &#x3D;  Module.load(&quot;&#x2F;data&#x2F;app&#x2F;libnative-lib.so&quot;)  &#x2F;&#x2F; 加载so</span><br><span class="line">method01addr &#x3D; modulelibnative.findExportByName(&quot;_Z8method01P7_JNIEnvP7_jclassP8_jstring&quot;)</span><br><span class="line">method02addr &#x3D; modulelibnative.findExportByName(&quot;_Z8method02P7_JNIEnvP8_jobjectP8_jstring&quot;)</span><br><span class="line"></span><br><span class="line">修改init.py中pid &#x3D; device.spawn([&quot;com.android.settings&quot;])</span><br></pre></td></tr></table></figure><p>RPC（TCP） 远快于 HTTP,手机暴露frida-server，它是一个TCP，效率很高</p><h1 id="自吐算法摘要"><a href="#自吐算法摘要" class="headerlink" title="自吐算法摘要"></a>自吐算法摘要</h1><p>adb install HookTestDemo.apk</p><p>jadx-gui HookTestDemo.apk</p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210505213048601.png" alt="image-20210505213048601"></p><p>frida -UF -l hookEvent.js  所有点击事件hook，发现所有触发类都是MainActivity</p><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210505213005214.png" alt="image-20210505213005214"></p><h2 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">case R.id.putong &#x2F;*&#123;ENCODED_INT: 2131165291&#125;*&#x2F;:</span><br><span class="line">    toastPrint(Utils.getCalc(2000, 2000) + BuildConfig.FLAVOR);</span><br><span class="line">    toastPrint(new Money.innerClass(&quot;资源吧&quot;, 666).outPrint());</span><br><span class="line">    return;</span><br><span class="line"></span><br><span class="line">static class innerClass &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int num;</span><br><span class="line"></span><br><span class="line">    public innerClass(String name2, int num2) &#123;</span><br><span class="line">        this.name &#x3D; name2;</span><br><span class="line">        this.num &#x3D; num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String outPrint() &#123;</span><br><span class="line">        return &quot;内部类被调用&quot; + this.name + &quot;: &quot; + this.num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>objection探索一波，枚举不准的话，延迟加载，每个按钮都点一次触发类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.xiaojianbang.app explore -P ~&#x2F;.objection&#x2F;plugins </span><br><span class="line">android hooking search classes com.xiaojianbang.app  找不到Money类</span><br><span class="line">android hooking list classes  </span><br><span class="line">cat ~&#x2F;.objection&#x2F;objection.log | grep -i &quot;com.xiaojianbang.app&quot;</span><br><span class="line">plugin wallbreaker classdump --fullname com.xiaojianbang.app.Money</span><br><span class="line">android heap search instances com.xiaojianbang.app.MainActivity</span><br><span class="line">.&#x2F;fs1426arm64</span><br></pre></td></tr></table></figure><p>hook主动调用内部类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var MainActivity &#x3D; null;</span><br><span class="line"></span><br><span class="line">Java.perform(function () &#123;</span><br><span class="line">    Java.choose(&quot;com.xiaojianbang.app.MainActivity&quot;, &#123;</span><br><span class="line">        onMatch: function (instanse) &#123;</span><br><span class="line">            MainActivity &#x3D; instanse;</span><br><span class="line">            console.log(&quot;found instance &#x3D;&gt; &quot;, MainActivity);</span><br><span class="line">        &#125;, onComplete: function () &#123;</span><br><span class="line">            console.log(&quot;search completed!&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">function showToast(string) &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; UI thread 注入</span><br><span class="line">        var Toast &#x3D; Java.use(&#39;android.widget.Toast&#39;);</span><br><span class="line">        var currentApplication &#x3D; Java.use(&#39;android.app.ActivityThread&#39;).currentApplication();</span><br><span class="line">        var context &#x3D; currentApplication.getApplicationContext();</span><br><span class="line">&#x2F;&#x2F; 在线程上运行指定的函数  </span><br><span class="line">        Java.scheduleOnMainThread(function () &#123;</span><br><span class="line">            Toast.makeText(context, string, Toast.LENGTH_LONG.value).show();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function invokeNormal() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        var javaString &#x3D; Java.use(&quot;java.lang.String&quot;)</span><br><span class="line">        &#x2F;&#x2F; 静态内部函数</span><br><span class="line">        var MoneyInnerClass &#x3D; Java.use(&quot;com.xiaojianbang.app.Money$innerClass&quot;).$new(javaString.$new(&quot;J&quot;), 666).outPrint();</span><br><span class="line">        console.log(&quot;result &#x3D;&gt;&quot;, MoneyInnerClass)</span><br><span class="line">        showToast(javaString.$new(MoneyInnerClass))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l hookxjb.js</p><p>[Pixel::HookTestDemo]-&gt; result =&gt; 内部类被调用J: 666</p><h2 id="构造实例方法"><a href="#构造实例方法" class="headerlink" title="构造实例方法"></a>构造实例方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case R.id.gouzao &#x2F;*&#123;ENCODED_INT: 2131165257&#125;*&#x2F;:</span><br><span class="line">    if (money &#x3D;&#x3D; null) &#123;</span><br><span class="line">        money &#x3D; new Money(&quot;美元&quot;, 1000);</span><br><span class="line">    &#125;</span><br><span class="line">    toastPrint(&quot;money: &quot; + money.getInfo());</span><br><span class="line">    toastPrint(Utils.getMoney().getInfo());</span><br><span class="line">    toastPrint(new Money().name());</span><br><span class="line">    </span><br><span class="line">public String name() &#123;</span><br><span class="line">    return &quot;my name is xiaojianbang&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l hookxjb.js</p><p>invokeInit()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function invokeInit() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var javaString &#x3D; Java.use(&quot;java.lang.String&quot;)</span><br><span class="line">        var MoneyName &#x3D; Java.use(&quot;com.xiaojianbang.app.Money&quot;).$new().name();</span><br><span class="line">        showToast(javaString.$new(MoneyName))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载方法"><a href="#重载方法" class="headerlink" title="重载方法"></a>重载方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case R.id.chongzai &#x2F;*&#123;ENCODED_INT: 2131165233&#125;*&#x2F;:</span><br><span class="line">    toastPrint(Utils.test(666));</span><br><span class="line">    toastPrint(Utils.test());</span><br><span class="line">    toastPrint(Utils.test(new Money(&quot;港币&quot;, 7000)));</span><br><span class="line">    toastPrint(new Money() &#123;</span><br><span class="line">        &#x2F;* class com.xiaojianbang.app.MainActivity.AnonymousClass1 *&#x2F;</span><br><span class="line"></span><br><span class="line">        @Override &#x2F;&#x2F; com.xiaojianbang.app.Money</span><br><span class="line">        public String getInfo() &#123;</span><br><span class="line">            return &quot;匿名类被调用&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.getInfo());</span><br><span class="line">    return;</span><br><span class="line"></span><br><span class="line">public static String test(int num) &#123;</span><br><span class="line">    return &quot;www.zygx8.com &quot; + num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>android hooking list class_methods com.xiaojianbang.app.Utils</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function invokeOverload() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; 静态重载方法</span><br><span class="line">        var result &#x3D; Java.use(&quot;com.xiaojianbang.app.Utils&quot;).test(666);</span><br><span class="line">        console.log(&quot;invoke overload result is &#x3D;&gt; &quot;, result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l hookxjb.js</p><p>invokeOverload()</p><h2 id="对象参数"><a href="#对象参数" class="headerlink" title="对象参数"></a>对象参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">case R.id.duixiang &#x2F;*&#123;ENCODED_INT: 2131165247&#125;*&#x2F;:</span><br><span class="line">    toastPrint(Utils.test(new Money(&quot;美元&quot;, 200)));</span><br><span class="line">    toastPrint(new Utils().myPrint(new String[]&#123;&quot;资源共享吧&quot;, &quot;官网&quot;, &quot;:&quot;, &quot;www.zygx8.com&quot;&#125;));</span><br><span class="line">    return;</span><br><span class="line"></span><br><span class="line">public static String test(Money money) &#123;</span><br><span class="line">    return money.getInfo();</span><br><span class="line">&#125;</span><br><span class="line">public String myPrint(String[] strArr) &#123;</span><br><span class="line">    StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">    for (String str : strArr) &#123;</span><br><span class="line">        sb.append(str);</span><br><span class="line">    &#125;</span><br><span class="line">    return sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida -UF -l hookxjb.js</p><p>invokeOverload()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function invokeObject() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var javaString &#x3D; Java.use(&quot;java.lang.String&quot;)</span><br><span class="line">        var newMoney &#x3D; Java.use(&quot;com.xiaojianbang.app.Money&quot;).$new(javaString.$new(&quot;dollar&quot;), 200);</span><br><span class="line">        var result &#x3D; Java.use(&quot;com.xiaojianbang.app.Utils&quot;).test(newMoney);</span><br><span class="line">        showToast(javaString.$new(result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var StringArray &#x3D; Java.array(&quot;java.lang.String&quot;, [javaString.$new(&quot;J  &quot;), javaString.$new(&quot;you are the &quot;), javaString.$new(&quot;best &quot;)])</span><br><span class="line">        var result &#x3D; Java.use(&quot;com.xiaojianbang.app.Utils&quot;).$new().myPrint(StringArray);</span><br><span class="line">        showToast(javaString.$new(result))</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">case R.id.helloFromC &#x2F;*&#123;ENCODED_INT: 2131165260&#125;*&#x2F;:</span><br><span class="line">    toastPrint(NativeHelper.helloFromC());</span><br><span class="line">    return;</span><br><span class="line">case R.id.add &#x2F;*&#123;ENCODED_INT: 2131165218&#125;*&#x2F;:</span><br><span class="line">    toastPrint(NativeHelper.add(5, 6, 7) + BuildConfig.FLAVOR);</span><br><span class="line">    return;    </span><br><span class="line">public static native String helloFromC();    </span><br><span class="line">public static native int add(int i, int i2, int i3);</span><br></pre></td></tr></table></figure><p>frida -UF -l hookxjb.js</p><p>invokeNative()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function invokeNative() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var javaString &#x3D; Java.use(&quot;java.lang.String&quot;)</span><br><span class="line">        var result &#x3D; Java.use(&quot;com.xiaojianbang.app.NativeHelper&quot;).helloFromC();</span><br><span class="line">        showToast(javaString.$new(result));</span><br><span class="line"></span><br><span class="line">        result &#x3D; Java.use(&quot;com.xiaojianbang.app.NativeHelper&quot;).add(100, 200, 300);</span><br><span class="line">        showToast(javaString.$new(String(result)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">case R.id.JavaMD5 &#x2F;*&#123;ENCODED_INT: 2131165191&#125;*&#x2F;:</span><br><span class="line">    toastPrint(MD5.md5_1(&quot;xiaojianbang&quot;));</span><br><span class="line">    return;</span><br><span class="line">public static String md5_1(String args) throws Exception &#123;</span><br><span class="line">    MessageDigest md &#x3D; MessageDigest.getInstance(&quot;MD5&quot;, &quot;BC&quot;);</span><br><span class="line">    md.update(args.getBytes());</span><br><span class="line">    return Utils.byteToHexString(md.digest());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hook类java.security.MessageDigest中所有的方法包括md5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function hookMD5() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var targetClassMethod &#x3D; &quot;java.security.MessageDigest.getInstance&quot;</span><br><span class="line">        var delim &#x3D; targetClassMethod.lastIndexOf(&quot;.&quot;);</span><br><span class="line">        if (delim &#x3D;&#x3D;&#x3D; -1) return;</span><br><span class="line">        var targetClass &#x3D; targetClassMethod.slice(0, delim)</span><br><span class="line">        var targetMethod &#x3D; targetClassMethod.slice(delim + 1, targetClassMethod.length)</span><br><span class="line">        var hook &#x3D; Java.use(targetClass);</span><br><span class="line">        var overloadCount &#x3D; hook[targetMethod].overloads.length;</span><br><span class="line">        var overloadCount &#x3D; hook[targetMethod].overloads.length;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; overloadCount; i++) &#123;</span><br><span class="line">            hook[targetMethod].overloads[i].implementation &#x3D; function () &#123;</span><br><span class="line">                console.warn(&quot;\n*** entered &quot; + targetClassMethod);</span><br><span class="line">                &#x2F;&#x2F; print args</span><br><span class="line">                if (arguments.length &gt;&#x3D; 0) &#123;</span><br><span class="line">                    for (var j &#x3D; 0; j &lt; arguments.length; j++) &#123;</span><br><span class="line">                        console.log(&quot;arg[&quot; + j + &quot;]: &quot; + arguments[j]);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                var retval &#x3D; this[targetMethod].apply(this, arguments);</span><br><span class="line">                console.log(&quot;\nretval: &quot; + retval);</span><br><span class="line">                console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">                return retval;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/16/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8java%E5%8F%8Anative%E5%B1%82/image-20210505224433551.png" alt="image-20210505224433551"></p><ul><li><a href="https://bbs.pediy.com/thread-266021.htm" target="_blank" rel="noopener">IDA从入门到理解</a></li><li><a href="https://bbs.pediy.com/thread-266013.htm" target="_blank" rel="noopener">某加固系统运行信息获取frida 脚本</a></li><li><a href="https://www.52pojie.cn/thread-1367840-1-1.html" target="_blank" rel="noopener">unidbg学习笔记</a></li><li><a href="https://mp.weixin.qq.com/s/GCTPZ4IZlih7plHowoYADQ" target="_blank" rel="noopener">浅谈渗透江湖之细水柔情</a></li><li><a href="https://www.freebuf.com/articles/system/190565.html" target="_blank" rel="noopener">领悟Frida的精髓_0512newCodeAndProject.zip</a></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> rpc </tag>
            
            <tag> so </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于内存漫游定位分析</title>
      <link href="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/"/>
      <url>/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><blockquote><p>三板斧：</p></blockquote><ul><li>先hook、看参数和返回值，利用命令行定位</li><li>再利用命令行/写代码构造参数、主动调用</li><li>最后规模化利用PYTHON配RPC导出结果</li></ul><h1 id="基于内存漫游定位"><a href="#基于内存漫游定位" class="headerlink" title="基于内存漫游定位"></a>基于内存漫游定位</h1><h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><p>adb install -r -t movetv.apk  移动tv  onejane/123456,-r强制升级，-t允许装debug版本</p><p>jadx打开发现com.tecent.StubShell加壳，找不到MainActivity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.0</span><br><span class="line">adb shell</span><br><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs128arm64</span><br><span class="line">objection -g com.cz.babySister explore</span><br><span class="line">android hooking search classes com.wrapper.proxyapplication</span><br><span class="line">android hooking watch class com.wrapper.proxyapplication.WrapperProxyApplication   该类在启动则被调用，attach将无法hook</span><br></pre></td></tr></table></figure><blockquote><p>Frida附加app的两种模式：</p></blockquote><ul><li>SPAWN：创建进程时就hook，有壳的话就不行</li><li>ATTACH：应用运行过程中hook，有壳也是ok</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities</span><br><span class="line">android intent launch_activity com.cz.babySister.activity.LoginActivity  指定启动Activity</span><br><span class="line">ps -ef|grep baby  进程一直自动启动</span><br></pre></td></tr></table></figure><p><code>objection -d -g com.cz.babySister explore --startup-command &quot;android hooking watch class com.wrapper.proxyapplication.WrapperProxyApplication&quot; </code> 开启debug -d</p><p>由于该app会自动后台启动</p><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/attach%E8%BF%90%E8%A1%8C%E4%B8%ADhook.png" alt="attach运行中hook"></p><p>需要在前台启动时立即使用objection漫游</p><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/spawn%E8%B5%B7%E5%A7%8Bhook.png" alt="spawn起始hook"></p><h3 id="批量hook"><a href="#批量hook" class="headerlink" title="批量hook"></a>批量hook</h3><p>android hooking search classes com.wrapper.proxyapplication  枚举包中所有类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.wrapper.proxyapplication.CustomerClassLoader</span><br><span class="line">com.wrapper.proxyapplication.MultiDex</span><br><span class="line">com.wrapper.proxyapplication.MultiDex$V19</span><br><span class="line">com.wrapper.proxyapplication.Util</span><br><span class="line">com.wrapper.proxyapplication.WrapperProxyApplication</span><br></pre></td></tr></table></figure><blockquote><p>如何使用objection去批量hook和trace？</p></blockquote><ol><li>把~/.objection/objection.log删掉； </li><li>到objection界面中运行android hooking list classes，列出所有的类； </li><li>对新生成的~/.objection/objection.log文件进行过滤，比如只关心http相关的。cat objection.log|grep -i http </li><li> 将输出结果保存到一个excel列中，前面补全android hooking watch class xxxxx，另存为文本文件</li><li>加载这个文件：objection -g com.android.settings explore -c “2.txt” ，这样一下子就hook上了几千个相关类的所有方法及其所有重载。 </li><li>如果trace感兴趣的方法也是同理，android hooking search methods * ，会打印出所有的方法。</li></ol><p>vim hooklist.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch   class   com.wrapper.proxyapplication.CustomerClassLoader</span><br><span class="line">android hooking watch   class   com.wrapper.proxyapplication.MultiDex</span><br><span class="line">android hooking watch   class   com.wrapper.proxyapplication.MultiDex$V19</span><br><span class="line">android hooking watch   class   com.wrapper.proxyapplication.Util</span><br><span class="line">android hooking watch   class   com.wrapper.proxyapplication.WrapperProxyApplication</span><br></pre></td></tr></table></figure><p>objection -g com.cz.babySister explore -c “hooklist.txt”  批量hook</p><p>android hooking list class_methods com.wrapper.proxyapplication.Util  枚举类中所有方法</p><h4 id="Zentracer"><a href="#Zentracer" class="headerlink" title="Zentracer"></a>Zentracer</h4><p>adb shell &amp;&amp; top 根据负载查看包名</p><p>java.net.HttpUrlConnection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.cz.babySister explore  --startup-command &quot;android hooking watch class java.net.HttpURLConnection&quot;</span><br><span class="line">jobs list</span><br><span class="line">jobs kill id</span><br><span class="line">android hooking watch class_method java.net.HttpURLConnection.getFollowRedirects --dump-args  登录发现堆栈来自于com.cz.babySister.c.a.a</span><br></pre></td></tr></table></figure><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/hookHttpURLConnection.png" alt="hookHttpURLConnection"></p><p>通过jadx搜索com.cz.babySister.c.a.a所在类，通过<code>android hooking watch class com.cz.babySister.c.a</code>进行trace类</p><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/hook%E7%B1%BB.png" alt="image-20210215230227148"></p><p>通过<code>android hooking watch class_method com.cz.babySister.c.a.a --dump-args --dump-backtrace --dump-return</code> 进行trace方法</p><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/hook%E6%96%B9%E6%B3%95.png" alt="image-20210215230705285"></p><blockquote><p>什么叫trace？hook多了就成了trace</p><p>系统框架是不可能被混淆的，基于枚举的内存漫游定位思路的含义是：怀疑你使用了什么框架API、怀疑你经过了哪个包哪处地方、就去那里埋伏起来，等待经过。</p></blockquote><p>针对混淆后的okhttp3,通过Frida实现的拦截<a href="https://github.com/siyujie/OkHttpLogger-Frida.git" target="_blank" rel="noopener">okhttp脚本</a></p><p>./data/local/tmp/fs1428arm64</p><p>cd <a href="https://github.com/hluwa/ZenTracer.git" target="_blank" rel="noopener">ZenTracer</a> &amp;&amp; proxychains pip install PyQt5  &amp;&amp; python ZenTracer.py</p><blockquote><p>报错：Could not load the Qt platform plugin “xcb” in “” even though it was found</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export QT_DEBUG_PLUGINS&#x3D;1</span><br></pre></td></tr></table></figure><p>python ZenTracer.py      </p></blockquote><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF.png" alt="报错信息"></p><blockquote><p>ldd libqxcb.so  查看具体哪个so文件为not found </p><p>apt install libxcb-util1 libxcb-xinerama0</p></blockquote><p>Action-Match RegEx</p><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/%E6%B7%BB%E5%8A%A0%E5%8C%B9%E9%85%8D%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="添加匹配表达式"></p><p>Action-Start  启动trace,登录trace保存为json</p><p>thunar .  打开当前目录 查看babySister查看json</p><p><strong>极端情况</strong>：Match RegEx 填写com.cz.babySister主包名，trace所有的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.cz.babySister explore</span><br><span class="line">android hooking search classes com.cz.babySister</span><br><span class="line">cat ~&#x2F;.objection&#x2F;objection.log|grep com.cz.babySister  拿到所有的类 在前面添加命令 android hooking watch class保存到classes.txt中</span><br><span class="line">objection -g com.cz.babySister explore -c classes.txt  实现批量hook</span><br></pre></td></tr></table></figure><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><p>adb install xes.apk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.xes.jazhanghui.activity explore -P ~&#x2F;.objection&#x2F;plugins  启动objection加载所有插件</span><br><span class="line">android hooking search classes okhttp3</span><br><span class="line">android hooking list class_methods okhttp3.OkHttpClient</span><br><span class="line">android heap search instances okhttp3.OkHttpClient  找到对象实例</span><br><span class="line">plugin wallbreaker objectsearch okhttp3.OkHttpClient   拿到ok3对象的地址，如混淆在jadx中找到ok3的类注释中的rename</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x37d2</span><br></pre></td></tr></table></figure><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/wallbreaker%E6%8B%BF%E5%88%B0%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%BB%93%E6%9E%84.png" alt="wallbreaker拿到对象属性结构"></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>adb push okhttplogging.dex /data/local/tmp</p><p>adb push myok2curl.dex /data/local/tmp</p><p>cd ~/Desktop/frida-agent-example &amp;&amp; npm run watch</p><p>frida -UF -l  <a href="https://onejane.gitee.io/picture/hookOkhttp3.js" target="_blank" rel="noopener">hookOkhttp3.js</a>  通过adb logcat | grep “okhttpGet”查看log</p><p>原生：离解释器更近：安卓原生就是dex被libart.so来解释、linux原生就是CPU直接解释的机器码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -e |grep -i chrome</span><br><span class="line">objection -g com.android.chrome explore</span><br><span class="line">memory list modules   发现dex被libart.so加载解析执行</span><br></pre></td></tr></table></figure><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><p><strong><a href="https://github.com/hanbinglengyue/FART/raw/master/frida_fart.zip" target="_blank" rel="noopener">frida_fart</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd frida_fart &amp;&amp; adb push lib&#x2F;* &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">cd &#x2F;data&#x2F;local&#x2F;tmp&#x2F; &amp;&amp; cp fart* &#x2F;data&#x2F;app &amp;&amp; cd &#x2F;data&#x2F;app &amp;&amp; chmod 777 fart*   加权限</span><br></pre></td></tr></table></figure><p>修改源码dex保存路径：var savepath = “/sdcard/com.cz.babySister.activity/“;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;sdcard&#x2F;com.cz.babySister.activity&#x2F; </span><br><span class="line">frida -U -f com.cz.babySister -l frida_fart_reflection.js --no-pause</span><br><span class="line">frida -UF -l frida_fart_reflection.js</span><br><span class="line">frida -U -f com.cz.babySister -l frida_fart_hook.js --no-pause  基于安卓8，生成dex</span><br></pre></td></tr></table></figure><p><a href="https://github.com/hluwa/FRIDA-DEXDump.git" target="_blank" rel="noopener"><strong>frida-dexdump</strong></a></p><p>核心原理：进程级别的内存漫游</p><p>cd ~/.objection/plugins/<a href="https://github.com/hluwa/FRIDA-DEXDump.git" target="_blank" rel="noopener">dexdump</a> &amp;&amp; python main.py  自动脱壳(前台运行的学而思app)</p><p>cd com.xes.jazhanghui.activity &amp;&amp; grep  -ril “okhttp3.OkHttpClient” *</p><p>du -h *  查看文件最大的dex使用jadx打开</p><p>objection -g com.xes.jazhanghui.activity explore -P ~/.objection/plugins</p><p>android hooking list activities  在jadx中查找到dex包含<code>com.xes.jazhanghui.activity.mvp.live.activity.LiveMainActivity</code></p><p>同理：脱壳移动TV，grep -ril “MainActivity” *,grep -ril “LoginActivity” *,找到唯一入口dex</p><h2 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h2><p>adb install 免费电影院v2.1.0_210.apk</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>静态：通过jadx搜索OkHttpClient,或者<code>apktool d 免费电影院v2.1.0_210.apk &amp;&amp; grep -ril &quot;OkHttpClient&quot; *</code></p><p>动态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat smali&#x2F;فمضﺝ&#x2F;ﻙﺫتك$ﺯﺵتﻝ.smali</span><br><span class="line">拿到.class public Lفمضﺝ&#x2F;ﻙﺫتك;类名</span><br><span class="line">objection -g com.singleman.freevideo explore -P &#x2F;root&#x2F;.objection&#x2F;plugins   点击登录调用ok3</span><br><span class="line">plugin wallbreaker objectsearch فمضﺝ.ﻙﺫتك</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x2452  查看该类是否ok3Client，获取其中List&lt;Interceptor&gt;地址，用wallbreaker dump下来class为Collections$UnmodifiableRandomAccessList 即为OkHttpClient类</span><br></pre></td></tr></table></figure><p>在hookOkhttp3.js中实现hook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Java.choose(&quot;فمضﺝ.ﻙﺫتك&quot;,&#123;</span><br><span class="line">    onMatch:function(instance)&#123;</span><br><span class="line">        console.log(&quot;1. found instance:&quot;,instance)</span><br><span class="line">        &#x2F;&#x2F;console.log(&quot;2. instance.interceptors():&quot;,instance.interceptors().$className)</span><br><span class="line">        console.log(&quot;3. instance._interceptors:&quot;,instance.ﻭﻍﺫﻉ.value.$className)</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;console.log(&quot;4. interceptors:&quot;,gson2.$new().toJson(instance.interceptors())) </span><br><span class="line">        console.log(&quot;5. interceptors:&quot;,Java.use(&quot;java.util.Arrays&quot;).toString(instance.ﻭﻍﺫﻉ.value.toArray()))</span><br><span class="line">        &#x2F;*</span><br><span class="line">        var newInter &#x3D; Java.use(&quot;java.util.ArrayList&quot;).$new();</span><br><span class="line">        newInter.addAll(instance.interceptors());</span><br><span class="line">        console.log(&quot;6. interceptors:&quot;,Java.use(&quot;java.util.Arrays&quot;).toString(newInter.toArray()));</span><br><span class="line">        console.log(&quot;7. interceptors:&quot;,newInter.$className);</span><br><span class="line">        newInter.add(MyInterceptorObj);</span><br><span class="line">        newInter.add(curlInter);</span><br><span class="line">        instance._interceptors.value &#x3D; newInter;</span><br><span class="line">        *&#x2F;</span><br><span class="line">        </span><br><span class="line">    &#125;,onComplete:function()&#123;</span><br><span class="line">        console.log(&quot;Search complete!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="案例四"><a href="#案例四" class="headerlink" title="案例四"></a>案例四</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb install 中国移动7.0.0.apk</span><br><span class="line">adb shell  打开app前台运行，top查看包名</span><br><span class="line">ps -ef|grep green</span><br><span class="line">pm -l | grep green  查看包名</span><br><span class="line">pyenv local 3.9.0</span><br><span class="line">.&#x2F;fs14216arm64</span><br><span class="line">objection -g com.greenpoint.android.mc10086.activity explore</span><br></pre></td></tr></table></figure><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/image-20210603141132832.png" alt="image-20210603141132832"></p><p>该样本是多进程</p><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/image-20210603141324746.png" alt="image-20210603141324746"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;11929&#x2F;status  发现该进程被子进程进行attach了，TracerPid:      11958</span><br><span class="line">frida -U -f com.greenpoint.android.mc10086.activity  因为frida比子进程快，attch后没有释放父进程</span><br><span class="line">%resume  会直接挂掉Process terminated</span><br><span class="line">frida -UF  报双进程错unable to access process with pid 13250 due to system restrictions;</span><br></pre></td></tr></table></figure><p>wget <a href="https://github.com/hluwa/strongR-frida-android/releases/download/14.2.16/hluda-server-14.2.16-android-arm64" target="_blank" rel="noopener">hluda-server-14.2.16-android-arm64</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;hluda14216arm64</span><br><span class="line">frida -U -f com.greenpoint.android.mc10086.activity</span><br><span class="line">%resume</span><br><span class="line">proxychains git clone https:&#x2F;&#x2F;github.com&#x2F;r0ysue&#x2F;r0tracer.git</span><br><span class="line">frida -U -f com.greenpoint.android.mc10086.activity -l r0tracer.js -o cmcc.txt</span><br></pre></td></tr></table></figure><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/image-20210603144532991.png" alt="image-20210603144532991"></p><p><strong>frida是app进程启动时spawn注入比任何程序都快，注入成功就dettach掉，trace id为父进程，子进程就可以回头调试主进程。</strong>frida server和脚本是进程间通信，即socket通信。</p><p>用objection不管是spawn还是attach都失败的双进程，frida命令的话可以先不加--no-pause，然后手动%resume就可以使用hluda进行hook上了。</p><h1 id="基于Frida的Hook"><a href="#基于Frida的Hook" class="headerlink" title="基于Frida的Hook"></a>基于Frida的Hook</h1><h2 id="案例一-1"><a href="#案例一-1" class="headerlink" title="案例一"></a>案例一</h2><p>adb install -r -t <a href="https://github.com/aqi00/android2.git" target="_blank" rel="noopener">junior.apk</a> 开启远程调用<code>frida -UF -l demo.js</code></p><h3 id="像素显示dip2px"><a href="#像素显示dip2px" class="headerlink" title="像素显示dip2px"></a>像素显示dip2px</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.example.junior explore -P ~&#x2F;.objection&#x2F;plugins  加载所有插件</span><br><span class="line">android hooking list activities 查看用于展示的界面</span><br><span class="line">android intent launch_activity com.example.junior.CalculatorActivity  启动计算器界面</span><br><span class="line">cat objection.log | grep com.example.junior.util.Utils</span><br><span class="line">android hooking list class_methods com.example.junior.util.Utils   打印来中所有可hook的函数</span><br><span class="line">android hooking watch class_method com.example.junior.util.Utils.dip2px --dump-args --dump-return --dump-backtrace  hook方法并打印像素显示出入参与调用栈</span><br><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;&#x2F;&#x2F;只要是java的代码都要跑在Java.perform里面</span><br><span class="line">        console.log(&quot;Entering Hook!&quot;)</span><br><span class="line">        Java.use(&quot;com.example.junior.util.Utils&quot;).dip2px.implementation &#x3D; function (context, float) &#123;</span><br><span class="line">            &#x2F;&#x2F;return null;</span><br><span class="line">            var result &#x3D; this.dip2px(context, 100)</span><br><span class="line">            console.log(&quot;context,float,result  &#x3D;&#x3D;&gt; &quot;, context, float, result);</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">            return 26;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分辨率显示setText"><a href="#分辨率显示setText" class="headerlink" title="分辨率显示setText"></a>分辨率显示setText</h3><p>hook用不上Java.choose的，hook函数时不分动静态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_activity com.example.junior.ScreenActivity </span><br><span class="line">cat objection.log|grep -i android.widget.TextView</span><br><span class="line">android hooking list class_methods android.widget.TextView  打印来中所有可hook的函数</span><br><span class="line">android hooking watch class_method android.widget.TextView.setText --dump-args --dump-backtrace --dump-return  hook公共方法setText</span><br><span class="line">android heap search instances com.example.junior.ScreenActivity 搜索activity类内存地址</span><br><span class="line">android heap execute 0x6f72 showScreenInfo  主动调用该类的指定方法，frida端hook自动执行</span><br><span class="line">function Screen() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        &#x2F;&#x2F; 重载</span><br><span class="line">        Java.use(&quot;android.widget.TextView&quot;).setText.overload(&#39;java.lang.CharSequence&#39;).implementation &#x3D; function (text) &#123;</span><br><span class="line"></span><br><span class="line">            var javaString &#x3D; Java.use(&quot;java.lang.String&quot;);</span><br><span class="line">            var newString &#x3D; javaString.$new(&quot;onejane&quot;)</span><br><span class="line"></span><br><span class="line">            var result &#x3D; null;</span><br><span class="line">            var realText &#x3D; String(text);</span><br><span class="line">            console.log(&quot;real text is &#x3D;&#x3D;&gt; &quot;,realText);</span><br><span class="line">            if (realText.indexOf(&quot;junior&quot;) &gt;&#x3D; 0) &#123;</span><br><span class="line">                var result &#x3D; this.setText(newString);</span><br><span class="line">                console.log(&quot;text,result &#x3D;&#x3D;&gt; &quot;, newString, result);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                var result &#x3D; this.setText(text);</span><br><span class="line">                console.log(&quot;text,result &#x3D;&#x3D;&gt; &quot;, text, result);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat objection.log|grep -i com.example.junior.util.Arith</span><br><span class="line">android hooking list class_methods com.example.junior.util.Arith  查看Arith类有哪些hook的方法</span><br><span class="line">android hooking watch class_method com.example.junior.util.Arith.sub --dump-args --dump-backtrace --dump-return   hook静态方法sub</span><br><span class="line"></span><br><span class="line">function Equals()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;java.lang.String&quot;).equals.implementation &#x3D; function(obj)&#123;</span><br><span class="line">            var result &#x3D; this.equals(obj);</span><br><span class="line">            console.log(&quot;obj,result &#x3D;&#x3D;&gt; &quot;,obj,result);</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function sub()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.use(&quot;com.example.junior.util.Arith&quot;).sub.overload(&#39;java.lang.String&#39;, &#39;java.lang.String&#39;).implementation &#x3D; function(str1,str2)&#123;</span><br><span class="line">            </span><br><span class="line">            var javaString &#x3D; Java.use(&quot;java.lang.String&quot;)</span><br><span class="line">            var result &#x3D; this.sub(str1,javaString.$new(&quot;2&quot;));  &#x2F;&#x2F; 本质上属于主动调用构造函数</span><br><span class="line">            console.log(&quot;str1,str2,result&#x3D;&#x3D;&gt;&quot;,str1,str2,result)</span><br><span class="line">            return javaString.$new(&quot;10&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h4><p>运行junior的计算器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker classsearch Arith  内存漫游搜索Arith类</span><br><span class="line">plugin wallbreaker classdump --fullname com.example.junior.util.Arith 将Arith类dump发现有静态变量</span><br></pre></td></tr></table></figure><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F.png" alt="静态变量"></p><p>通过frida获取静态变量DEF_DIV_SCALE并修改值为20，内存中的静态变量DEF_DIV_SCALE即变为20</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function staticField()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var divscale &#x3D; Java.use(&quot;com.example.junior.util.Arith&quot;).DEF_DIV_SCALE.value;</span><br><span class="line">        console.log(&quot;divscale1 is &#x3D;&gt;&quot;,divscale);</span><br><span class="line">        Java.use(&quot;com.example.junior.util.Arith&quot;).DEF_DIV_SCALE.value&#x3D;20;</span><br><span class="line">        divscale &#x3D; Java.use(&quot;com.example.junior.util.Arith&quot;).DEF_DIV_SCALE.value;</span><br><span class="line">        console.log(&quot;divscale2 is &#x3D;&gt;&quot;,divscale);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态主动调用"><a href="#静态主动调用" class="headerlink" title="静态主动调用"></a>静态主动调用</h4><p><code>frida -UF -l demo.js</code>主动调用Arith.add方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function operate()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var Arith &#x3D; Java.use(&quot;com.example.junior.util.Arith&quot;);</span><br><span class="line">        console.log(&quot;addResult is &#x3D;&gt;&quot;,Arith.add(&quot;1&quot;,&quot;1&quot;));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>plugin wallbreaker classsearch Build</code>  搜索含有Build的类</p><p><code>plugin wallbreaker classdump --fullname android.os.Build</code>  将Build类dump下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function fingerPrint()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var Build &#x3D; Java.use(&quot;android.os.Build&quot;);</span><br><span class="line">        console.log(Build.DEVICE.value,Build.ID.value,Build.MODEL.value,Build.SERIAL.value);</span><br><span class="line">        Build.SERIAL.value &#x3D; &#39;F123456&#39;;</span><br><span class="line">        console.log(Build.SERIAL.value,Build.getSerial());   &#x2F;&#x2F; 若app无权限getSerial()，换设置重新主动调用</span><br><span class="line">        console.log(&#39;sdk is &#39;,Build.getString(&quot;ro.build.version.sdk&quot;));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态变量"><a href="#动态变量" class="headerlink" title="动态变量"></a>动态变量</h4><p><code>plugin wallbreaker objectsearch com.example.junior.CalculatorActivity</code>  获取该类地址</p><p><code>plugin wallbreaker objectdump 0x1eea</code> 计算1+2=3后查看该类的动态变量</p><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/%E5%8A%A8%E6%80%81%E5%8F%98%E9%87%8F.png" alt="动态变量"></p><p>寻找CalculatorActivity实例，通过frida动态hook，通过修改showText值时内存中变量变为123</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function dynamicField()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.choose(&quot;com.example.junior.CalculatorActivity&quot;,&#123; </span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                console.log(&quot;found instance &#x3D;&gt;&quot;,instance);</span><br><span class="line">                console.log(&quot;instance showText is &#x3D;&gt;&quot;,instance.showText.value)</span><br><span class="line">                instance.showText.value &#x3D; &quot;123&quot;</span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&#39;Search complete&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态主动调用"><a href="#动态主动调用" class="headerlink" title="动态主动调用"></a>动态主动调用</h4><p>动态调用有参函数，计算机显示666，打印666</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function dynamic()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        Java.choose(&quot;com.example.junior.CalculatorActivity&quot;,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                console.log(&quot;found instance &#x3D;&gt;&quot;,instance);</span><br><span class="line">                console.log(&quot;instance showText is &#x3D;&gt;&quot;,instance.clear(&quot;666&quot;))</span><br><span class="line">                console.log(&quot;instance showText is &#x3D;&gt;&quot;,instance.showText.value)</span><br><span class="line">            &#125;,onComplete:function()&#123;</span><br><span class="line">                console.log(&#39;Search complete&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RPC调用"><a href="#RPC调用" class="headerlink" title="RPC调用"></a>RPC调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import frida</span><br><span class="line"></span><br><span class="line"># device&#x3D;frida.get_device_manager().add_remote_device(&#39;192.168.0.100:5555&#39;)  远程连接.&#x2F;fs128arm64 -l 0.0.0.0:5555,可定义多个device实现批量自动化群控</span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line"></span><br><span class="line">### attach</span><br><span class="line">pid&#x3D;device.get_frontmost_application().pid  # 若双进程保护，指定pid进行hook</span><br><span class="line">session &#x3D; device.attach(pid)</span><br><span class="line"></span><br><span class="line">### spawn </span><br><span class="line">#pid &#x3D; device.spawn([&quot;com.example.junior&quot;])</span><br><span class="line">#device.resume(pid)</span><br><span class="line">#time.sleep(1)</span><br><span class="line">#session &#x3D; device.attach(pid)</span><br><span class="line"></span><br><span class="line">with open(&quot;demo.js&quot;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line">script.load()</span><br><span class="line">input()</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3><h4 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h4><p>input keyevent 4 表示后退</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function subcommand()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        &#x2F;&#x2F; adb input api</span><br><span class="line">        var process &#x3D; Java.use(&#39;java.lang.Runtime&#39;).getRuntime().exec(&#39;input keyevent 4&#39;);</span><br><span class="line">        console.log(&#39;subcommand success process is &#39;, process)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环调用</strong></p><p>demo.js中导出指定方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line">    subcommand: subcommand</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo.py中开启循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">command &#x3D; &quot;&quot;</span><br><span class="line">while 1 &#x3D;&#x3D; 1:</span><br><span class="line">    command &#x3D; input(&quot;Enter command:\n1: Exit\n2: Call secret function\nchoice:&quot;)</span><br><span class="line">    if command &#x3D;&#x3D; &quot;1&quot;:</span><br><span class="line">        break</span><br><span class="line">    elif command &#x3D;&#x3D; &quot;2&quot;: # 在这里调用，可以设置多个条件判断</span><br><span class="line">        script.exports.subcommand()</span><br></pre></td></tr></table></figure><p>输入2对当前进程持续后退</p><h2 id="案例二-1"><a href="#案例二-1" class="headerlink" title="案例二"></a>案例二</h2><p>利用nps实现启动了frida-server和nps-client的device的内网穿透，真正意义上实现批量自动化群控</p><h3 id="案例三-1"><a href="#案例三-1" class="headerlink" title="案例三"></a>案例三</h3><p>利用ssr通过nps内网穿透实现4G作为出口ip代理供request/scrapy调用</p><blockquote><p>objection和frida不可同时hook一个函数,</p></blockquote><p><strong>hook Non-ASCII</strong></p><p>对于有些混淆后不可见或乱码的函数名，可以先编码打印出来, 再用编码后的字符串去 hook.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">    function x() &#123;</span><br><span class="line"></span><br><span class="line">        var targetClass &#x3D; &quot;com.example.hooktest.MainActivity&quot;;</span><br><span class="line"></span><br><span class="line">        var hookCls &#x3D; Java.use(targetClass);</span><br><span class="line">        var methods &#x3D; hookCls.class.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">        for (var i in methods) &#123;</span><br><span class="line">            console.log(methods[i].toString());</span><br><span class="line">            console.log(encodeURIComponent(methods[i].toString().replace(&#x2F;^.*?\.([^\s\.\(\)]+)\(.*?$&#x2F;, &quot;$1&quot;)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hookCls[decodeURIComponent(&quot;%D6%8F&quot;)]</span><br><span class="line">            .implementation &#x3D; function (x) &#123;</span><br><span class="line">                console.log(&quot;original call: fun(&quot; + x + &quot;)&quot;);</span><br><span class="line">                var result &#x3D; this[decodeURIComponent(&quot;%D6%8F&quot;)](900);</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>hook Intent</strong></p><p>MainActivity中<code>Intent intent2 = new Intent(this, Class.forName(&quot;com.shimeng.qq2693533893.MyServiceOne&quot;));</code>我们通过frida打印Intent</p><p><img src="/2021/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E5%AE%9A%E4%BD%8D%E5%88%86%E6%9E%90/%E6%89%93%E5%8D%B0Intent.png" alt="frida打印Intent"></p><p>参考资料：</p><ul><li><p><a href="https://mp.weixin.qq.com/s/tI89U6eht0F_KrMJXooo1A" target="_blank" rel="noopener"><strong>Android App 保护那些事儿 （一）</strong></a></p></li><li><p><strong><a href="https://mp.weixin.qq.com/s/DkpQ_71Gt-jkwOuRU1Mv0A" target="_blank" rel="noopener">Android App 保护那些事儿 (二)</a></strong></p></li><li><p><strong><a href="https://github.com/xiaokanghub/Android" target="_blank" rel="noopener">frida dexclassloader</a></strong></p></li><li><p><strong><a href="https://bbs.pediy.com/thread-260523.htm" target="_blank" rel="noopener">从三道题目入手入门frida</a></strong></p></li><li><p><strong><a href="https://bbs.pediy.com/thread-260536.htm" target="_blank" rel="noopener">Frida 入门小练习</a></strong></p></li><li><p><strong><a href="https://bbs.pediy.com/thread-260550.htm" target="_blank" rel="noopener">举杯邀Frida，对影成三题</a></strong></p></li><li><p><strong><a href="https://bbs.pediy.com/thread-247680.htm" target="_blank" rel="noopener">Null混淆</a></strong></p></li><li><p><a href="https://mp.weixin.qq.com/s/SRv1Oar87w1iKuDXS4oaew" target="_blank" rel="noopener"><strong>Android 字符串及字典混淆开源实现</strong></a></p></li><li><p><a href="https://github.com/shwenzhang/AndResGuard" target="_blank" rel="noopener"><strong>资源压缩</strong></a></p></li><li><p><strong><a href="https://bbs.pediy.com/thread-258213.htm" target="_blank" rel="noopener">Android微信逆向–实现发朋友圈动态</a></strong></p></li><li><p><a href="https://www.anquanke.com/post/id/207459" target="_blank" rel="noopener"><strong>微信朋友圈分析</strong></a></p></li><li><p><a href="https://www.anquanke.com/post/id/197670" target="_blank" rel="noopener"><strong>实用FRIDA进阶：脱壳、自动化、高频问题</strong></a></p></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objection </tag>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动静态分析之去弹窗重打包</title>
      <link href="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/"/>
      <url>/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="重打包"><a href="#重打包" class="headerlink" title="重打包"></a>重打包</h1><p>带壳应用重打包失败，需要先脱壳</p><p>objection的patchapk需要aapt、adb、jarsigner、apktool，其中apktool需要官网下载下，其他前仨在android-studio中就有，注意AndroidStudio版本号：</p><p><code>tree -NCfhl|grep aapt </code> 全局搜索aapt</p><p><code>tree -NCfhl|grep jarsigner</code> 全局搜索 jarsigner</p><p><a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener"><strong>apktool</strong></a>下载jar和编译文件后<code>mv apktool* /usr/local/bin &amp;&amp; chmod 777 /usr/local/bin/apktool*</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/Desktop/android-studio/jre/bin/jarsigner /usr/bin</span><br><span class="line">ln -s /root/Android/Sdk/build-tools/30.0.3/aapt /usr/bin</span><br><span class="line">ln -s /root/Android/Sdk/build-tools/30.0.3/aapt2 /usr/bin</span><br><span class="line">ln -s /root/Android/Sdk/platform-tools/adb /usr/bin </span><br><span class="line">ln -s /root/Android/Sdk/build-tools/30.0.3/zipalign /usr/bin</span><br></pre></td></tr></table></figure><p>获取到重打包Fulao2_2021-02-09.objection.apk，卸载fulao2后重新安装<code>adb install -r Fulao2_2021-02-09.objection.apk</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.5</span><br><span class="line">apt install aapt zipalign</span><br><span class="line">proxychains objection patchapk --architecture armeabi-v7a --source Fulao2_2021-02-09.apk</span><br></pre></td></tr></table></figure><blockquote><p>虚拟机中没有native层无法安装</p></blockquote><p><strong>内存信息搜索与执行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /data/local/tmp &amp;&amp; ./fs1428arm64  启动frida server</span><br><span class="line">objection -g com.ilulutv.fulao2 explore</span><br><span class="line">memory list modules  查看app加载的so模块</span><br><span class="line">memory list exports libcipher-lib.so --json /root/Desktop/fulao.libcipher.json 导出库所有函数</span><br><span class="line">android heap search instances android.graphics.Bitmap   获取内存中图片对象</span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/%E8%8E%B7%E5%8F%96%E5%86%85%E5%AD%98%E4%B8%AD%E5%9B%BE%E7%89%87%E5%AF%B9%E8%B1%A1.png" alt="获取内存中图片对象"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">android heap execute 257601546 getHeight --return-string  数字串是HashCode,获取图片高度</span><br><span class="line">android heap execute 257601546 getWidth --return-string  </span><br><span class="line">android heap evaluate 257601546    打印带参数的方法返回值</span><br><span class="line">console.log(clazz.getPixel(10,20))  在控制台中输入js脚本，调用有参函数</span><br></pre></td></tr></table></figure><p><strong>启动<code>activity</code>或<code>service</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities  查看当前可用的activities</span><br><span class="line">android intent launch_activity com.ilulutv.fulao2.me.news.NewsActivity   启动指定Activity</span><br><span class="line">android hooking list receivers   查看当前可用广播</span><br><span class="line">android hooking list services  </span><br><span class="line">android hooking watch class android.graphics.Bitmap hook图片所有方法</span><br><span class="line">jobs list  查看hook了116个函数,ID为oj90asdc</span><br><span class="line">jobs kill oj90asdc  取消hook</span><br><span class="line">android hooking watch class_method android.graphics.Bitmap.nativeRowBytes --dump-args --dump-backtrace --dump-return  hook指定方法</span><br><span class="line">android hooking watch class android.graphics.BitmapFactory   hook图片所有函数</span><br><span class="line">android hooking watch class_method android.graphics.BitmapFactory.decodeByteArray --dump-args --dump-backtrace --dump-return 直接得到图片数据流</span><br><span class="line">android hooking watch class_method android.graphics.BitmapFactory.decodeByteArray --dump-backtrace  获取显示图片前解密的函数，去jadx中查看该方法逻辑</span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/%E8%A7%A3%E5%AF%86%E5%87%BD%E6%95%B0.png" alt="trace中获取解密函数"></p><p>objection自带集成<a href="https://github.com/sensepost/objection/blob/master/agent/src/rpc/android.ts" target="_blank" rel="noopener">flask api</a>，可以通过rpc跑预置的命令，也可以自己传脚本到手机上跑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.ilulutv.fulao2 explore --enable-api</span><br><span class="line">curl -s "http://127.0.0.1:8888/rpc/invoke/androidFileCwd"</span><br><span class="line">curl -s "http://127.0.0.1:8888/rpc/invoke/androidHookingListActivities"</span><br><span class="line">curl -s "http://127.0.0.1:8888/rpc/invoke/androidHookingGetClasses" </span><br><span class="line">url -s -X POST "http://127.0.0.1:8888/rpc/invoke/androidHookingGetClassMethods" -H "Content-Type: application/json" -d '&#123;"clazz": "android.graphics.BitmapFactory"&#125;'  </span><br><span class="line">curl -s -X POST "http://127.0.0.1:8888/rpc/invoke/androidHookingWatchClass" -H "Content-Type: application/json" -d '&#123;"clazz": "android.graphics.BitmapFactory"&#125;'   启动hook BitmapFactory，job lisk可以查看hook</span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/frida&flask.png" alt="frida&amp;flask"></p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><p>objection patchapk –architecture arm64-v8a –source movetv.apk   重打包出错，加壳(腾讯)应用无法objection patchapk</p><p><del>objection -g com.cz.babySister explore -P ~/.objection/plugins/dexdump/frida_dexdump</del> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.5</span><br><span class="line">proxychains git clone https://github.com/hluwa/FRIDA-DEXDump ~/Downloads/FRIDA-DEXDump</span><br><span class="line">mv ~/Downloads/FRIDA-DEXDump/frida_dexdump ~/.objection/plugins/dexdump</span><br><span class="line">adb install movetv.apk</span><br><span class="line">objection -g com.cz.babySister explore -P ~/.objection/plugins   加载全部插件启动app多运行一会</span><br><span class="line">plugin dexdump dump  脱壳</span><br><span class="line">cd com.cz.babySister/</span><br><span class="line">grep -ril "MainActivity" *    查看主入口dex</span><br><span class="line">objection -g com.cz.babySister explore</span><br><span class="line">android hooking list activities</span><br><span class="line">android intent launch_activity com.cz.babySister.activity.MainActivity  不登录进Activity，判断是否越权bug</span><br></pre></td></tr></table></figure><h1 id="无壳去更新重打包"><a href="#无壳去更新重打包" class="headerlink" title="无壳去更新重打包"></a>无壳去更新重打包</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>/root/Android/Sdk/build-tools/30.0.3/d8 MainActivity 直接生成dex文件，老版的是d8-&gt;dx</p><p>adb install zhibo.apk 安装apk,启动新版本更新弹窗</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.5</span><br><span class="line">cd /data/local/tmp/ &amp;&amp; ./fs1428arm64</span><br><span class="line">objection -g com.hd.zhibo explore</span><br><span class="line">android hooking list activities  只有一个主界面com.zhibo.media.channel_main，在AndroidManifest.xml中只有一个activity</span><br><span class="line">android heap search instances android.app.AlertDialog  获取弹窗实例hashcode,在弹窗出现前hook</span><br><span class="line">plugin load /root/.objection/plugins/Wallbreaker</span><br><span class="line">plugin wallbreaker objectsearch android.app.AlertDialog  找到实例的地址</span><br><span class="line">plugin wallbreaker objectdump 0x2956 打印类结构，其中AlertController 指向地址是0x2b26</span><br><span class="line">plugin wallbreaker objectdump 0x2b26  拿出该类中的具体信息</span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/%E6%89%93%E5%8D%B0%E7%B1%BB%E7%BB%93%E6%9E%84.png" alt="打印类结构"></p><p>重新hook 类AlertDialog，并打印出调用栈</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">ps -e| grep zhibo   </span><br><span class="line">kill 18149    干掉进程</span><br><span class="line">objection -g com.hd.zhibo explore   启动超级直播</span><br><span class="line">android hooking watch class android.app.AlertDialog  在弹窗弹出之前开始hook</span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/hook%E5%BC%B9%E7%AA%97.png" alt="hook弹窗"></p><p><code>android hooking watch class_method android.app.AlertDialog.onCreate --dump-args --dump-backtrace --dump-return</code> 再次在弹窗弹出前hook OnCreate方法</p><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/hook%E5%BC%B9%E7%AA%97Oncreate.png" alt="hook弹窗Oncreate"></p><p>通过jadx搜索<code>com.zhibo.media.channel_receiver.onReceive</code>和<code>com.zhibo.media.channel_main.update_show</code>定位到核心弹窗判断逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update_show</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bundle != <span class="keyword">null</span> &amp;&amp; bundle.containsKey(<span class="string">"ver"</span>) &amp;&amp; bundle.containsKey(<span class="string">"info"</span>) &amp;&amp; bundle.containsKey(<span class="string">"path"</span>)) &#123;</span><br><span class="line">        <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>).setTitle(<span class="string">"发现新版本 "</span> + bundle.getString(<span class="string">"ver"</span>) + <span class="string">" 是否升级"</span>).setMessage(bundle.getString(<span class="string">"info"</span>)).setPositiveButton(<span class="string">"立刻升级"</span>, <span class="keyword">new</span> o(<span class="keyword">this</span>, bundle)).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者<code>objection -g com.hd.zhibo explore --startup-command &quot;android hooking watch class_method android.app.AlertDialog.onCreate --dump-args --dump-backtrace --dump-return&quot; </code> 启动时则运行命令即可避免在弹窗前跟不上执行hook</p><h2 id="去弹窗"><a href="#去弹窗" class="headerlink" title="去弹窗"></a>去弹窗</h2><p>apktool d zhibo.apk  &amp;&amp; vim zhibo/smali/com/zhibo/media/channel_main.smali  解包并搜索info，修改if-eqz改为if-nez</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apktool b zhibo/  重打包</span><br><span class="line">cd zhibo/dist &amp;&amp;  keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore abc.keystore</span><br><span class="line">Is CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct?</span><br><span class="line">  [no]:  yes</span><br><span class="line">jarsigner -verbose -keystore abc.keystore -signedjar textx.apk zhibo.apk abc.keystore</span><br><span class="line">pm uninstall com.hd.zhibo   卸载包</span><br><span class="line">adb install textx.apk    安装包</span><br><span class="line">am start-activity com.hd.zhibo   启动包</span><br></pre></td></tr></table></figure><h1 id="加壳去更新重打包"><a href="#加壳去更新重打包" class="headerlink" title="加壳去更新重打包"></a>加壳去更新重打包</h1><p>adb install 青青草视频.apk   启动弹窗是强制升级</p><p>jadx打开包,com.SecShell.SecShell 梆梆加固</p><h2 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.0 &amp;&amp; ./data/local/tmp/fs128arm64</span><br><span class="line">top 查看进程最高是com.hello.qqc</span><br><span class="line">┌──(root💀kali)-[~/Desktop]</span><br><span class="line">└─# frida-ps -U|grep hello                  双线程                                                                                                                                      </span><br><span class="line">23169  com.hello.qqc</span><br><span class="line">23190  com.hello.qqc</span><br><span class="line">23247  com.hello.qqc:pushcore</span><br><span class="line">23277  com.hello.qqc:pushcore</span><br></pre></td></tr></table></figure><h2 id="脱壳-1"><a href="#脱壳-1" class="headerlink" title="脱壳"></a>脱壳</h2><ul><li>objection plugin</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.hello.qqc explore -P ~/.objection/plugins  加载所有插件，关闭所有qqc进程，使用objection启动hook</span><br><span class="line">plugin dexdump dump  多进程的话，用objection先占用一个，再frida dexdump</span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/%E5%8F%8C%E8%BF%9B%E7%A8%8B%E8%84%B1%E5%A3%B3.png" alt="双进程脱壳"></p><ul><li>python main.py</li></ul><p>通过<code>cd ~/.objection/plugins/dexdump &amp;&amp; python main.py</code>  由于双进程，需要用objection先占住启动进程，再判断前台进程进行脱壳</p><ul><li>frida-dexdump</li></ul><p><code>pip install frida-dexdump</code> 通过直接运行frida-dexdump进行脱壳</p><h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities</span><br><span class="line">android intent launch_activity cn.net.tokyo.ccg.ui.activity.AboutActivity  进入关于我们页面，绕过弹窗，再进入其他页面发现依旧存在升级弹窗</span><br></pre></td></tr></table></figure><h2 id="弹窗分析"><a href="#弹窗分析" class="headerlink" title="弹窗分析"></a>弹窗分析</h2><p>基于objection进程动态hook弹窗</p><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>查看类是否可以hook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android hooking list classes   </span><br><span class="line">cat ~&#x2F;.objection&#x2F;objection.log |grep -i window    如果有则可以hook</span><br><span class="line">objection -g com.hello.qqc explore --startup-command &quot;android hooking watch class android.view.Window&quot;    对所有该Window类进行hook</span><br></pre></td></tr></table></figure><p>点击立即升级，objection显示新增agent如下</p><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/windows%E5%BC%B9%E7%AA%97%E5%8D%87%E7%BA%A7.png" alt="windows弹窗升级"></p><h3 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.objection&#x2F;objection.log |grep -i dialog</span><br><span class="line">objection -g com.hello.qqc explore --startup-command &quot;android hooking watch class android.app.Dialog&quot;</span><br></pre></td></tr></table></figure><p>点击立即升级，objection显示新增agent如下</p><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/dialog%E5%BC%B9%E7%AA%97%E5%8D%87%E7%BA%A7.png" alt="dialog弹窗升级"></p><p>点击弹窗也有agentlog打印出调用Dialog方法</p><h3 id="PopupWindow-amp-AlertDialog"><a href="#PopupWindow-amp-AlertDialog" class="headerlink" title="PopupWindow&amp;AlertDialog"></a><strong>PopupWindow&amp;AlertDialog</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.hello.qqc explore --startup-command &quot;android hooking watch class android.widget.PopupWindow&quot;</span><br><span class="line">或者</span><br><span class="line">objection -g com.hello.qqc explore</span><br><span class="line">android hooking watch class android.widget.PopupWindow</span><br><span class="line">android hooking watch class android.app.AlertDialog</span><br></pre></td></tr></table></figure><p>点击立即升级发现无新agentlog新增</p><hr><p>主要可能是<strong>Dialog弹窗</strong>嫌疑最大，其中agent的log<code>(agent) [5384329357348] Called android.app.Dialog.setCancelable(boolean)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method android.app.Dialog.setCancelable --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/hook%E5%BC%B9%E7%AA%97%E5%87%BA%E7%8E%B0.png" alt="hook弹窗出现"></p><p>通过jadx搜索脱壳下的dex文件cn.net.tokyo.ccg.ui.fragment.dialog.UpdateDialogFragment的onCreateDialog方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public Dialog onCreateDialog(@Nullable Bundle bundle) &#123;</span><br><span class="line">    FragmentActivity activity &#x3D; getActivity();</span><br><span class="line">    activity.getClass();</span><br><span class="line">    Dialog dialog &#x3D; new Dialog(activity, 2131755208);</span><br><span class="line">    dialog.requestWindowFeature(1);</span><br><span class="line">    dialog.setContentView(2131427414);</span><br><span class="line">    VersionBean.Version version &#x3D; this.f2134a;</span><br><span class="line">    if (version !&#x3D; null) &#123;</span><br><span class="line">        dialog.setCanceledOnTouchOutside(!WakedResultReceiver.CONTEXT_KEY.equals(version.status));</span><br><span class="line">        dialog.setCancelable(true ^ WakedResultReceiver.CONTEXT_KEY.equals(this.f2134a.status));</span><br><span class="line">        Window window &#x3D; dialog.getWindow();</span><br><span class="line">        if (window !&#x3D; null) &#123;</span><br><span class="line">            window.setBackgroundDrawable(new ColorDrawable(0));</span><br><span class="line">            WindowManager.LayoutParams attributes &#x3D; window.getAttributes();</span><br><span class="line">            attributes.width &#x3D; -1;</span><br><span class="line">            attributes.height &#x3D; -1;</span><br><span class="line">            window.setAttributes(attributes);</span><br><span class="line">        &#125;</span><br><span class="line">        a(dialog);</span><br><span class="line">    &#125;</span><br><span class="line">    return dialog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了a(dialog);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private void a(Dialog dialog) &#123;</span><br><span class="line">    Button button &#x3D; (Button) dialog.findViewById(b.btn_force_update);</span><br><span class="line">    Button button2 &#x3D; (Button) dialog.findViewById(b.btn_update);</span><br><span class="line">    Button button3 &#x3D; (Button) dialog.findViewById(b.btn_cancel);</span><br><span class="line">    TextView textView &#x3D; (TextView) dialog.findViewById(b.tv_file_size);</span><br><span class="line">    LinearLayout linearLayout &#x3D; (LinearLayout) dialog.findViewById(b.ll_button);</span><br><span class="line">    ((TextView) dialog.findViewById(b.tv_version)).setText(String.format(Locale.getDefault(), &quot;版本号：%s&quot;, this.f2134a.version));</span><br><span class="line">    ((TextView) dialog.findViewById(b.tv_content)).setText(this.f2134a.desc);</span><br><span class="line">    if (!TextUtils.isEmpty(this.f2134a.filesize)) &#123;</span><br><span class="line">        textView.setText(String.format(Locale.getDefault(), &quot;文件大小: %s&quot;, this.f2134a.filesize));</span><br><span class="line">    &#125;</span><br><span class="line">    ImageView imageView &#x3D; (ImageView) dialog.findViewById(b.im_close);</span><br><span class="line">    if (WakedResultReceiver.CONTEXT_KEY.equals(this.f2134a.status)) &#123;</span><br><span class="line">        linearLayout.setVisibility(8);</span><br><span class="line">        button.setVisibility(0);</span><br><span class="line">        button.setOnClickListener(new f(this));</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    linearLayout.setVisibility(0);</span><br><span class="line">    button.setVisibility(8);</span><br><span class="line">    button3.setOnClickListener(new g(this));</span><br><span class="line">    imageView.setVisibility(0);</span><br><span class="line">    imageView.setOnClickListener(new d(this));</span><br><span class="line">    button2.setOnClickListener(new e(this));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中文搜索，可能被字符串混淆加密，<a href="https://mp.weixin.qq.com/s/SRv1Oar87w1iKuDXS4oaew" target="_blank" rel="noopener">Android 字符串及字典混淆开源实现</a>,或通过wallbreak查看类结构，避免字符串加密。</p><p>plugin wallbreaker objectsearch cn.net.tokyo.ccg.ui.fragment.dialog.UpdateDialogFragment  搜索类地址</p><p>plugin wallbreaker objectdump –fullname 0x2452  打印类结构</p><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/wallbreaker%E6%9F%A5%E7%9C%8B%E7%B1%BB%E7%BB%93%E6%9E%84.png" alt="wallbreaker查看类结构"></p><p>通过点击立即升级按钮，打印调用栈如下，jadx搜索cn.net.tokyo.ccg.ui.activity.MainActivity.a</p><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/hook%E5%BC%B9%E7%AA%97%E5%8F%96%E6%B6%88.png" alt="hook弹窗取消"></p><pre><code>@Override // b.a.a.a.d.b.zpublic void a(VersionBean.Version version, boolean z) {    this.f1696a = version.url;    if (version != null) {        UpdateDialogFragment.b(version, z).show(getSupportFragmentManager(), UpdateDialogFragment.class.getSimpleName());    }}</code></pre><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/smali%E6%BA%90%E7%A0%81.png" alt="smali源码"></p><h3 id="去壳"><a href="#去壳" class="headerlink" title="去壳"></a>去壳</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apktool -s d 青青草视频.apk &amp;&amp; cd 青青草视频&#x2F;   解包指定不反编译源码并保留dex，并扔掉壳</span><br><span class="line">cp ~&#x2F;Desktop&#x2F;com.hello.qqc&#x2F;*.dex .  将之前去壳后的dex放入解包文件夹</span><br><span class="line">thunar .  打开所在文件夹，ctrl+2以详细信息查看文件，根据大小进行重命名dex，classes.dex,classes2.dex...</span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8E%BB%E5%BC%B9%E7%AA%97%E9%87%8D%E6%89%93%E5%8C%85/%E9%87%8D%E5%91%BD%E5%90%8Ddex.png" alt="重命名dex"></p><p>在jadx中搜索extends Application 找到主入口文件<code>cn.net.tokyo.ccg.base.App</code>,vim AndroidManifest.xml 搜索application标签，修改<code>android:name=&quot;com.SecShell.SecShell.ApplicationWrapper&quot;</code> 为<code>android:name=&quot;cn.net.tokyo.ccg.base.App&quot;</code>修改加壳入口点为原app的入口点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apktool b 青青草视频    回编译</span><br><span class="line">cd 青青草视频&#x2F;dist    编译完成的apk</span><br><span class="line">keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore abc.keystore</span><br><span class="line">jarsigner -verbose -keystore abc.keystore -signedjar qqc_signed.apk 青青草视频.apk abc.keystore   签名</span><br><span class="line">adb install -r qqc_signed.apk  重新安装编译后的apk，即脱壳后的重打包dex</span><br></pre></td></tr></table></figure><h3 id="去弹窗-1"><a href="#去弹窗-1" class="headerlink" title="去弹窗"></a>去弹窗</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apktool d 青青草视频.apk</span><br><span class="line">cd 青青草视频&#x2F;</span><br><span class="line">tree -NCfhl | grep MainActivity</span><br><span class="line">vim .&#x2F;青青草视频&#x2F;smali&#x2F;cn&#x2F;net&#x2F;tokyo&#x2F;ccg&#x2F;ui&#x2F;activity&#x2F;MainActivity.smali  搜索UpdateDialogFragment</span><br><span class="line">修改if-eqz p1, :cond_0为if-nez p1, :cond_0</span><br><span class="line">apktool b 青青草视频&#x2F;   回编译</span><br><span class="line">cd 青青草视频&#x2F;dist    编译完成的apk</span><br><span class="line">keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore abc.keystore</span><br><span class="line">jarsigner -verbose -keystore abc.keystore -signedjar qqc2_signed.apk 青青草视频.apk abc.keystore   重签名</span><br><span class="line">adb install -r qqc2_signed.apk  重新安装编译后的apk</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objection </tag>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动静态分析之锁机病毒</title>
      <link href="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/"/>
      <url>/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h1><h2 id="创建demo"><a href="#创建demo" class="headerlink" title="创建demo"></a>创建demo</h2><p>Android Studio新建demo项目</p><p><strong>MainActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    EditText username_et;</span><br><span class="line">    EditText password_et;</span><br><span class="line">    TextView message_tv;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        password_et = (EditText) <span class="keyword">this</span>.findViewById(R.id.editText2);</span><br><span class="line">        username_et = (EditText) <span class="keyword">this</span>.findViewById(R.id.editText);</span><br><span class="line">        message_tv = ((TextView) findViewById(R.id.textView));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (username_et.getText().toString().compareTo(<span class="string">"admin"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    message_tv.setText(<span class="string">"You cannot login as admin"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//hook target</span></span><br><span class="line">                message_tv.setText(<span class="string">"Sending to the server :"</span> + Base64.encodeToString((username_et.getText().toString() + <span class="string">":"</span> + password_et.getText().toString()).getBytes(), Base64.DEFAULT));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                    Log.i(<span class="string">"onejane"</span>,<span class="string">"now i is"</span>+Integer.valueOf(i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>activity_main.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"请输入纯数字"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"159dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"120dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/editText"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:ems</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"98dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"196dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/editText2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:ems</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"98dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"313dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Button"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"171dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"428dp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/demo.png" alt="demo"></p><p>debug启动，点击BUTTON打断点动态调试。</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>查看包名 :<code>dumpsys activity top|grep demo</code></p><p>debug启动应用:<code>adb shell am start -D -n com.example.demo/.MainActivity </code> 使用jeb tab进入smali，ctrl+b附加断点，关闭as，ddms等占用adb应用，jeb开启debug,修改变量类型为string查看变量内容</p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/jeb%E5%BC%80%E5%90%AFdebug.png" alt="jeb开启debug"></p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/debug%E6%9F%A5%E7%9C%8B%E5%8F%98%E9%87%8F.png" alt="debug查看变量"></p><h2 id="内存漫游"><a href="#内存漫游" class="headerlink" title="内存漫游"></a>内存漫游</h2><p>启动frida:<code>./fs1428arm64</code></p><p>启动app：<code>pm list packages|grep demo</code></p><p>内存漫游:<code>objection -g com.example.demo explore -P /root/.objection/plugins</code></p><p>通过hook关键Base64函数:<code>android hooking watch class_method android.util.Base64.encodeToString --dump-args --dump-backtrace --dump-return</code></p><p>输入username和password点击button操作，抓取内存中android.util.Base64.encodeToString入参及返回</p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80.png" alt="小试牛刀"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch com.example.demo.MainActivity  拿到进程地址</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x22d6   动态查看对象属性</span><br><span class="line">plugin wallbreaker classdump --fullname com.example.demo.MainActivity  动态查看内存中的MainActivity</span><br><span class="line">plugin wallbreaker classdump --fullname androidx.appcompat.app.AppCompatActivity</span><br><span class="line">apktool d demo.apk  解包</span><br><span class="line">thunar demo/smali/com/example/demo/MainActivity.smali  查看smali</span><br><span class="line">mousepad demo/smali/com/example/demo/MainActivity.smali</span><br></pre></td></tr></table></figure><p>AndroidManifest.xml debuggable属性，意为“可调试”，有true和false两种模式。<code>android:debuggable=”true”</code>，不可调试应用可通过xdebuggable模块实现jeb无源码调试smali。</p><blockquote><p>如果打包的是debug版本的apk文件，那么这个debuggable属性就自动设置为true，反之，如果打包的是release版本的apk文件，那么这个debuggable属性就自动设置为false</p></blockquote><p>使用jeb打开zhibo.apk，jeb开启debug attach com.hd.zhibo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dumpsys activity top|grep zhibo </span><br><span class="line">adb shell am start -D -n com.hd.zhibo&#x2F;com.zhibo.media.channel_main  使用debug启动应用</span><br></pre></td></tr></table></figure><p>Kali Linux里的as4的DDMS启动失败，原因是要用as自带的jre来启动，直接./monitor用的是Kali系统的jdk，版本太高了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s  &#x2F;root&#x2F;Desktop&#x2F;android-studio&#x2F;jre&#x2F; &#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;tools&#x2F;lib&#x2F;monitor-x86_64&#x2F;</span><br><span class="line">cd &#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;tools&#x2F;lib&#x2F;monitor-x86_64&#x2F; &amp;&amp;  .&#x2F;monitor</span><br></pre></td></tr></table></figure><p>点击Dump View Hierarchy for UI Automator,定位到元素所属类</p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/%E6%9F%A5%E7%9C%8B%E5%85%83%E7%B4%A0%E6%89%80%E5%B1%9E%E7%B1%BB.png" alt="查看元素所属类"></p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7.png" alt="辅助增强工具"></p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/HierarchyView.png" alt="Hierarchy View"></p><p>Open Perspective 打开Hierarchy View中的View 可以快速定位到AdView,拿到子类zzbbq即可hook该方法，使用jeb定位搜索zzbbq，干掉广告组件。</p><h1 id="锁机病毒"><a href="#锁机病毒" class="headerlink" title="锁机病毒"></a>锁机病毒</h1><h2 id="换不锈钢脸盆"><a href="#换不锈钢脸盆" class="headerlink" title="换不锈钢脸盆"></a>换不锈钢脸盆</h2><p>adb install yry-1.0.apk  启动app后，场面异常血腥，不忍直视。</p><ul><li>背景图片和背景音乐极其不健康</li><li>音量被调到最大，循环播放，且无法关闭</li><li>屏幕被锁定，无法进行任何操作</li><li>usb断开</li><li>开机自动启动</li><li>手机持续震动</li></ul><p>通过<a href="https://www.appscan.io/" target="_blank" rel="noopener">移动安全威胁数据平台</a>检测得知app开启了以下权限</p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/%E7%94%B3%E8%AF%B7%E6%9D%83%E9%99%90.png" alt="申请权限"></p><h2 id="不解释连招"><a href="#不解释连招" class="headerlink" title="不解释连招"></a>不解释连招</h2><p>打开源码分析，好家伙吗，我直接好家伙！！！充满了对家人的亲切问候，名字挺好听，人干的事一点都不沾边。</p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/%E9%97%AE%E5%80%99.png" alt="问候家人"></p><p>气的我又买了个手机，重新装上该app，上去就是frida+objection+jeb+jadx动静态分析一套不解释组合连招直接带走。</p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>通过jadx反编译AndroidManifest.xml中看到大片的uses-permission申请权限，以及对广播的receiver中申请的action，用于监听广播自启动调用action，妙啊，后续一系列的病毒实现广播监听就是罪魁祸首。</p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/%E5%B9%BF%E6%92%AD%E7%9B%91%E5%90%AC.png" alt="广播监听"></p><blockquote><p>不同反编译软件要结合着看，同一个软件不同版本可能结果都不一样，比如jeb3中将解锁加密逻辑判断为</p><p><code>if(颜如玉QQ2693533893.getSaltMD5(MyServiceOne.颜如玉(v2.substring(0, 3))) + v2.substring(3, v2.length()).equals(&quot;9DDEB743E935CE399F1DFAF080775366&quot; + v3_1))</code></p><p><strong>不能说逻辑严密吧，可以说是狗屁不通</strong>,字符串+布尔值居然还能放到if条件里，giao！！！</p></blockquote><ul><li>FloatViewUtil  UI工具类</li><li>MainActivity  入口</li><li>MyBroadcast  继承自BroadcastReceiver实现启动时调用onReceive</li><li>MyServiceOne  加解密服务类</li><li>UsbLock  锁死usb接口</li></ul><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p><strong>1.如何做到adb找不到设备，直接断开连接，无法hook动态分析，也没法DDMS？</strong></p><p>UsbLock继承自TimerTask，在重新run方法中执行一句话命令<code>Process exec = Runtime.getRuntime().exec(&quot;setprop persist.sys.usb.config none&quot;);</code></p><p><strong>方案一</strong>:apktool解包后修改smali源码注释掉这行smali指令并编译重打包，keytool制作秘钥库，apksigner重签名安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apktool d yry-1.0.apk  解包</span><br><span class="line">cd yry-1.0&#x2F;smali&#x2F;com&#x2F;shimeng&#x2F;诗梦 &amp;&amp; vim USBLock.smali 干掉这一行</span><br><span class="line">const-string v10, &quot;setprop persist.sys.usb.config none&quot;</span><br><span class="line">apktool b yry-1.0  回编译</span><br><span class="line">cd yry-1.0&#x2F;dist &amp;&amp; keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore abc.keystore  制作秘钥</span><br><span class="line">jarsigner -verbose -keystore abc.keystore -signedjar new_yry.apk yry-1.0.apk abc.keystore  重签名安装new_yry.apk</span><br></pre></td></tr></table></figure><p><strong>方案二</strong>:实现安装上termux，启动好frida即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb push frida-server-14.2.8-android-x86 &#x2F;data&#x2F;local&#x2F;tmp  赋予最高权限 </span><br><span class="line">adb install com.termux_92.apk   </span><br><span class="line">cd &#x2F;data&#x2F;local&#x2F;tmp &amp;&amp; chmod 777 * &amp;&amp; .&#x2F;frida-server-14.2.8-android-x86 -l 0.0.0.0:8888  启动frida</span><br><span class="line">pyenv local 3.8.5   切换py版本,保证objection frida版本对应</span><br><span class="line">frida-ps -H 192.168.0.104:8888 | grep shimeng   查找病毒进程确实存在</span><br><span class="line">objection -N -h 192.168.0.104 -p 8888 -g com.shimeng.qq2693533893 explore  开启内存分析</span><br><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure><p><strong>2.如何做到无法关闭音量，循环播放富强民主文明和谐的音乐？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking list services   拿到可hook的方法</span><br><span class="line">android hooking list receivers</span><br></pre></td></tr></table></figure><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1.png" alt="查看服务"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker classdump com.shimeng.qq2693533893.MyServiceOne --fullname  内存漫游可视化这两个类的源码结构</span><br><span class="line">plugin wallbreaker classdump com.shimeng.qq2693533893.MyBroadcast --fullname</span><br></pre></td></tr></table></figure><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/加载wallbreaker.png" alt="加载wallbreaker" style="zoom:80%;"><p><code>android hooking watch class  com.shimeng.qq2693533893.MyServiceOne </code>  通过hook类MyServiceOne 发现MyServiceOne.access$L1000018一直被反复调用</p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/hookMyServiceOne%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95.png" alt="hookMyServiceOne所有方法"></p><p><code>android hooking watch class_method com.shimeng.qq2693533893.MyServiceOne.access$L1000018 --dump-backtrace </code> 我们开始hook该内部类并打印调用栈，发现调用栈上层反复调用com.shimeng.qq2693533893.MyServiceOne.access$100000007.run，想必这就是为什么循环播放的原因了，瞄一波反编译源码，soga，该线程获取到系统audio服务后setStreamVolume调高最大音量，vibrator持续震动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 100000007 <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyServiceOne <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> MyServiceOne access$<span class="number">0</span>(<span class="number">100000007</span> arg4) &#123;</span><br><span class="line">        <span class="keyword">return</span> MyServiceOne.<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyServiceOne.<span class="keyword">this</span>.hand2.postDelayed(<span class="keyword">this</span>, <span class="number">1800L</span>);</span><br><span class="line">        AudioManager v1 = (AudioManager)MyServiceOne.<span class="keyword">this</span>.getSystemService(<span class="string">"audio"</span>);</span><br><span class="line">        v1.setStreamVolume(<span class="number">3</span>, v1.getStreamMaxVolume(<span class="number">3</span>), <span class="number">4</span>);</span><br><span class="line">        v1.getStreamMaxVolume(<span class="number">0</span>);</span><br><span class="line">        v1.getStreamVolume(<span class="number">0</span>);</span><br><span class="line">        v1.getStreamVolume(<span class="number">0</span>);</span><br><span class="line">        Vibrator v4 = (Vibrator)MyServiceOne.<span class="keyword">this</span>.getApplication().getSystemService(<span class="string">"vibrator"</span>);</span><br><span class="line">        <span class="keyword">long</span>[] v5 = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">4</span>][<span class="number">0</span>] = <span class="number">100L</span>;</span><br><span class="line">        v5[<span class="number">1</span>] = <span class="number">1500L</span>;</span><br><span class="line">        v5[<span class="number">2</span>] = <span class="number">100L</span>;</span><br><span class="line">        v5[<span class="number">3</span>] = <span class="number">1500L</span>;</span><br><span class="line">        v4.vibrate(v5, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.如何做到锁屏无法退出？</strong></p><p>之前初步分析到疑似UI工具类FloatViewUtil ，在MyServiceOne的m2() sm() sm2()中反复调用，使用frida主动调用FloatViewUtil.removeView() 去掉了锁屏界面，留下空白界面，那么这个空白界面才是真正的activity。</p><p>在createfloatview中调用了<code>this.wm.addView(this.v, this.w);</code>，原来是借助WindowManager显示一个全屏置顶的浮窗锁定了屏幕，<code>public void addView(View view, ViewGroup.LayoutParams params);</code>用this.w封装参数flags判断是否取消悬浮窗，每次触摸屏幕调用OnTouchListener后更新<code>this.this$0.wm.updateViewLayout(view2, this.this$0.w);</code>，保持原样，所以锁屏无法操作，除了调用系统库WindowManager.removeView()别无他法。</p><p><strong>4.如何做到开机启动并关闭也能复活？</strong></p><p>之前分析AndroidManifest.xml时发现MyBroadcast继承BroadcastReceiver监听了BOOT_COMPLETED启动方法实现onReceive。其中通过<code>if (intent2.getAction() != null) {</code>实现<code>context4.startService(intent5)</code>,通过<code>if (Intent.ACTION_SCREEN_ON.equals(intent2.getAction()) &amp;&amp; intent2.getAction() != null) {</code>实现<code>context5.startActivity(intent7)</code>，startService启动的service进程用户不可见，且不会被杀死，除非系统内存不足一保持前台进程和可视进程，这也太tm适合做自启服务了！！！当主动调用拿掉app的强制悬浮时，看到后台依旧有一个MyServiceOne服务偷偷运行，强制kill该进程后，果然不会再次复活了。哦！原来这就是惊喜啊！</p><h3 id="KO"><a href="#KO" class="headerlink" title="KO"></a>KO</h3><p>这个病毒已经被我们开膛破肚了，但是好像从开发角度分析没有太多成就感，那么就硬肛吧！！！<strong>伤害高而且侮辱性极强！！！</strong></p><p>之前hook MyServiceOne打印出了内存中所有的类名，由于输入密码需要点击那么就需要onClick，搜索jeb2中发现100000002，100000003，100000006三个匿名内部类中实现了View$OnClickListener的onClick方法，那么先从100000002开肛吧！</p><h4 id="一层解锁"><a href="#一层解锁" class="headerlink" title="一层解锁"></a>一层解锁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override public void onClick(View arg15) &#123;</span><br><span class="line">    100000002 v0 &#x3D; this;</span><br><span class="line">    String v2 &#x3D; v0.val$editText.getText().toString();</span><br><span class="line">    if(v2.length() &gt;&#x3D; 3) &#123;</span><br><span class="line">        String v3 &#x3D; MyServiceOne.颜如玉(颜如玉QQ2693533893.getSaltMD5(new StringBuffer().append(&quot;&quot;).append(v0.val$诗梦).toString())).replaceAll(&quot;\\D+&quot;, &quot;&quot;);</span><br><span class="line">        if(v3.length() &gt; 9 &amp;&amp; v3.length() &gt; 3) &#123;</span><br><span class="line">            if(new StringBuffer().append(颜如玉QQ2693533893.getSaltMD5(MyServiceOne.颜如玉(v2.substring(0, 3)))).append(v2.substring(3, v2.length())).toString().equals(new StringBuffer().append(&quot;9DDEB743E935CE399F1DFAF080775366&quot;).append(v3.substring(0, 9)).toString())) &#123;</span><br><span class="line">                v0.this$0.util.removeView();</span><br><span class="line">                v0.this$0.sm2();</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                --v0.this$0.L;</span><br><span class="line">                ++v0.this$0.B;</span><br><span class="line">                v0.val$lpo.setText(new StringBuffer().append(new StringBuffer().append(new StringBuffer().append(new StringBuffer().append(new StringBuffer().append(&quot;很抱歉！密码错误解锁请加QQ群:437732815联系管理员购买正确的密码解锁...密码以错&quot;).append(v0.this$0.B).toString()).append(&quot;次！&quot;).toString()).append(&quot;还剩&quot;).toString()).append(v0.this$0.L).toString()).append(&quot;次输入错误密码的机会&quot;).toString());</span><br><span class="line">                if(v0.this$0.L &lt;&#x3D; 0) &#123;</span><br><span class="line">                    v0.val$lpo.setText(&quot;本次输入密码错误次数累计以达10次,请重启手机后获取输入密码机会！&quot;);</span><br><span class="line">                    v0.val$button.setVisibility(8);</span><br><span class="line">                    v0.val$textView2.setVisibility(8);</span><br><span class="line">                    v0.val$editText.setVisibility(8);</span><br><span class="line">                    v0.val$a00.setVisibility(8);</span><br><span class="line">                    v0.val$b00.setVisibility(8);</span><br><span class="line">                    v0.val$c00.setVisibility(8);</span><br><span class="line">                    v0.val$d00.setVisibility(8);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用jeb2反编译拿到100000002中解锁的逻辑，那么v2必定是我们输入的字符串，当长度大于3时调用MyServiceOne.颜如玉方法，那么就hook这个颜如玉</p><p><code>android hooking watch class_method com.shimeng.qq2693533893.MyServiceOne.颜如玉 --dump-args --dump-backtrace  --dump-return</code></p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/%E7%82%B9%E5%87%BB%E8%A7%A3%E9%94%81.png" alt="点击解锁log"></p><p>打印调用栈果然调用了onClick方法，页面弹出很抱歉！密码错误解锁等恰好是onClick中解锁失败返回的信息</p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/First.png" alt="First"></p><p>在sm()方法中拿到生成识别码的逻辑，跟进去原来是随机四位数做了火星文对应，在100000002构造函数中<code>this.val$诗梦 = arg17;</code>就是随机四位数v11 ^ 1288，，所以才显示在前台页面是火星文，那么我们首先<strong>通过hook颜如玉QQ2693533893.get()拿到四位数对应的该火星文</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int v11 &#x3D; ((int)(Math.random() * (((double)9876))));</span><br><span class="line">v4.setText(new StringBuffer().append(&quot;你的识别码&#x3D;&quot;).append(颜如玉QQ2693533893.get(new StringBuffer().append(&quot;&quot;).append(v11).toString())).toString());</span><br><span class="line">v3.setOnClickListener(new 100000002(this, v5, v11 ^ 1288, v6, v3, v4, v7, v8, v9, v10));</span><br></pre></td></tr></table></figure><p>接着分析onClick方法可知随机四位数被作为参数给了getSaltMD5,那么我们可以<strong>通过反射和四位数拿到v3的值。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String v3 &#x3D; MyServiceOne.颜如玉(颜如玉QQ2693533893.getSaltMD5(new StringBuffer().append(&quot;&quot;).append(v0.val$诗梦).toString())).replaceAll(&quot;\\D+&quot;, &quot;&quot;);</span><br><span class="line">if(new StringBuffer().append(颜如玉QQ2693533893.getSaltMD5(MyServiceOne.颜如玉(v2.substring(0, 3)))).append(v2.substring(3, v2.length())).toString().equals(new StringBuffer().append(&quot;9DDEB743E935CE399F1DFAF080775366&quot;).append(v3.substring(0, 9)).toString())) &#123;</span><br><span class="line">    v0.this$0.util.removeView();</span><br><span class="line">    v0.this$0.sm2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida脚本编写如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function stage1()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var javaString &#x3D; Java.use(&#39;java.lang.String&#39;)</span><br><span class="line"></span><br><span class="line">        for(var i&#x3D;999;i&lt;10000;i++)&#123;</span><br><span class="line">            var i_str &#x3D; javaString.$new(String(i));</span><br><span class="line">            var recogCode &#x3D; Java.use(&quot;com.shimeng.颜如玉.颜如玉QQ2693533893&quot;).get(i_str);</span><br><span class="line">            var final_last9 &#x3D; Java.use(&quot;com.shimeng.qq2693533893.MyServiceOne&quot;).颜如玉(Java.use(&quot;com.shimeng.颜如玉.颜如玉QQ2693533893&quot;).getSaltMD5((javaString.$new(String(i^1288)))));</span><br><span class="line">            var final_final_last9 &#x3D; javaString.$new(final_last9).replaceAll(&quot;\\D+&quot;, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">            console.log(&quot;i_str,recogCode,final_final_last9:&quot;,i_str,recogCode,final_final_last9);</span><br><span class="line">            if (recogCode &#x3D;&#x3D; &quot;©©&#x2F;÷&quot;)&#123; &#x2F;&#x2F; 5147</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>frida -H 192.168.0.104:8888 -f com.shimeng.qq2693533893 -l yry.js</code> 并运行stage1()拿到四位数,火星文,加密串对应关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">i_str,recogCode,final_final_last9: 5582 ©©※÷ 95207171906204966108845772</span><br><span class="line">i_str,recogCode,final_final_last9: 5583 ©©※∷ 39716345426943642188517</span><br><span class="line">i_str,recogCode,final_final_last9: 5584 ©©※● 5796073015486055711181</span><br><span class="line">i_str,recogCode,final_final_last9: 5585 ©©※© 4182232792980711126331187</span><br><span class="line">i_str,recogCode,final_final_last9: 5586 ©©※额 99099593856461775560719982</span><br><span class="line">i_str,recogCode,final_final_last9: 5587 ©©※★ 19863461630870460433322044</span><br><span class="line">i_str,recogCode,final_final_last9: 5588 ©©※※ 9011175927236532778650</span><br><span class="line">i_str,recogCode,final_final_last9: 5589 ©©※&#x2F; 132271537343570495458138</span><br><span class="line">i_str,recogCode,final_final_last9: 5590 ©©&#x2F;嘻 7083188607268447436716</span><br><span class="line">i_str,recogCode,final_final_last9: 5591 ©©&#x2F;❥ 61563069152823766973923722</span><br><span class="line">i_str,recogCode,final_final_last9: 5592 ©©&#x2F;÷ 50084396538178613588090863</span><br></pre></td></tr></table></figure><p>接着分析这个equals大长串,很明显前面字符串md5(颜如玉(输入串(0,3)))+输入串(3,).equals(“9DDEB743E935CE399F1DFAF080775366”+加密串前9位)</p><p>众所周知，MD5是128位二进制位，一位16进制数=4位二进制数，以16进制显示为32位字符串，那么md5(颜如玉(输入串(0,3))) === “9DDEB743E935CE399F1DFAF080775366”，且输入串(3,)=加密串前9位。</p><p>通过剥离反编译后的算法，拿到输入串前3位为358，加上输入串(3,)即加密串前9位500843965===》输入串v2=358500843965  <strong>一giao我里giaogiao</strong></p><h4 id="二层解锁"><a href="#二层解锁" class="headerlink" title="二层解锁"></a>二层解锁</h4><p> <strong>giao</strong>中计了</p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/Second.png" alt="Second"></p><p>耐心分析，原来只是故技重施，雕虫小技而已，随机数从四位变成了五位，加密方法修改了下而已。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String v3 &#x3D; 颜如玉QQ2693533893.hex_sha1(MyServiceOne.破解死妈.getTwiceMD5ofString(new StringBuffer().append(&quot;&quot;).append(v0.val$u2).toString())).replaceAll(&quot;\\D+&quot;, &quot;&quot;);</span><br><span class="line">if(v3.length() &gt; 9 &amp;&amp; v3.length() &gt; 3 &amp;&amp; (new StringBuffer().append(MyServiceOne.破解死妈.getTwiceMD5ofString(颜如玉QQ2693533893.hex_sha1(v2.substring(0, 3)))).append(v2.substring(3, v2.length())).toString().equals(new StringBuffer().append(&quot;8D4FF507DCDA63C201EB8B99D4170900&quot;).append(v3.substring(0, 9)).toString()))) &#123;</span><br><span class="line">    v0.this$0.util.removeView();</span><br><span class="line">    v0.this$0.诗梦();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的方式，修改frida脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function stage2()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var QQinstance &#x3D; null;</span><br><span class="line">        Java.choose(&quot;com.shimeng.颜如玉.颜如玉QQ2693533893&quot;,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                console.log(&quot;found instance :&quot;,instance);</span><br><span class="line">                QQinstance &#x3D; instance;</span><br><span class="line">            &#125;,onComplete:function()&#123;console.log(&quot;search Competed!&quot;)&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&quot;QQinstance is :&quot;,QQinstance)</span><br><span class="line"></span><br><span class="line">        var javaString &#x3D; Java.use(&#39;java.lang.String&#39;)</span><br><span class="line">        for (var i &#x3D; 9999;i&lt;100000;i++)&#123;</span><br><span class="line">            var i_str &#x3D; javaString.$new(String(i));</span><br><span class="line">            var recogCode &#x3D; Java.use(&quot;com.shimeng.颜如玉.颜如玉QQ2693533893&quot;).get(i_str);</span><br><span class="line">            var final_right9 &#x3D; Java.use(&quot;com.shimeng.颜如玉.颜如玉QQ2693533893&quot;).hex_sha1(QQinstance.getTwiceMD5ofString(i_str));</span><br><span class="line">            var finalFinalright9 &#x3D; javaString.$new(final_right9).replaceAll(&quot;\\D+&quot;, &quot;&quot;);</span><br><span class="line">            console.log(&quot;i_str,recogCode,finalFinalright9&quot;,i_str,recogCode,finalFinalright9)</span><br><span class="line">            </span><br><span class="line">            if (recogCode &#x3D;&#x3D; &quot;※嘻额❥&#x2F;&quot;)&#123; &#x2F;&#x2F; 98074</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>frida -H 192.168.0.104:8888 -f com.shimeng.qq2693533893 -l yry.js</code> 并运行stage2()拿到四位数,火星文,加密串对应关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i_str,recogCode,finalFinalright9 80614 ※嘻额❥● 387001687403591151857740</span><br><span class="line">i_str,recogCode,finalFinalright9 80615 ※嘻额❥© 82202783102877783960515732</span><br><span class="line">i_str,recogCode,finalFinalright9 80616 ※嘻额❥额 20062102770068853202687179</span><br><span class="line">i_str,recogCode,finalFinalright9 80617 ※嘻额❥★ 13702574120572139433375947</span><br><span class="line">i_str,recogCode,finalFinalright9 80618 ※嘻额❥※ 681123636848227458618110944</span><br><span class="line">i_str,recogCode,finalFinalright9 80619 ※嘻额❥&#x2F; 93184320701127896024850</span><br></pre></td></tr></table></figure><p>拿到输入串v2=694931843207  <strong>一giao我里giaogiao</strong></p><h4 id="三层解锁"><a href="#三层解锁" class="headerlink" title="三层解锁"></a>三层解锁</h4><p> <strong>giao</strong>又双叒叕中计了</p><p><img src="/2021/02/05/%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%94%81%E6%9C%BA%E7%97%85%E6%AF%92/Third.png" alt="Third"></p><p>耐心分析，jeb2反编译发现这次不是故技重施，而是要放大招了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override public void onClick(View arg12) &#123;</span><br><span class="line">    100000006 v0 &#x3D; this;</span><br><span class="line">    new Thread(new 100000004(v0)).start();</span><br><span class="line">    if(颜如玉QQ2693533893.hex_sha1(&quot;破解死妈&quot;).equals(v0.this$0.坐等前往世界的尽头的小船)) &#123;</span><br><span class="line">        v0.this$0.util.removeView();</span><br><span class="line">        new Timer().schedule(new 100000005(v0), ((long)1500));</span><br><span class="line">    &#125;</span><br><span class="line">    else if(颜如玉QQ2693533893.hex_sha1(v0.val$fuck.getText().toString()).equals(v0.this$0.坐等前往世界的尽头的小船)) &#123;</span><br><span class="line">        v0.this$0.util.removeView();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        v0.this$0.解锁.setVisibility(0);</span><br><span class="line">        v0.this$0.解锁.setText(new StringBuffer().append(new StringBuffer().append(&quot;密码错误，手机恢复正常失败&quot;).append(&quot;&#x2F;n&quot;).toString()).append(&quot;Manifest-Version: 1.0Created-By: 1.0 (Android SignApk)&quot;).toString());</span><br><span class="line">        v0.this$0.hand3.postDelayed(v0.this$0.runn3, ((long)2000));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次输入的值经过hex_sha1后要和变量<code>v0.this$0.坐等前往世界的尽头的小船</code>一致才行，通过smali插桩打印log重打包或者通过hook String的equals方法得知这个变量居然为空，也就是无论如何也不可能解开了，这局又是逆风局。</p><blockquote><p>smali插桩：</p><p>通过Android逆向助手反编译apk中的dex，找到指定方法所在的smali文件，打印变量处添加log，将crack.smali放到com同级目录下，log打印使用方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输出byte</span><br><span class="line">invoke-static &#123;v*&#125;, Lcrack;-&gt;convertByteArrayToString([B)Ljava&#x2F;lang&#x2F;String;</span><br><span class="line"></span><br><span class="line">输出string</span><br><span class="line">invoke-static &#123;v*&#125;, Lcrack;-&gt;log(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line"></span><br><span class="line">输出tag</span><br><span class="line">&#x3D;&#x3D;Debug-Info&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>将classes目录通过Android逆向助手重打包dex，不解压原apk并生成的dex直接替换原apk中的classes.dex并安装改过的apk</p></blockquote><p>全局搜索<code>坐等前往世界的尽头的小船</code>发现这是个全局变量，在内部类100000006的内部类100000004中存在赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override public void run() &#123;</span><br><span class="line">    100000001 v0 &#x3D; this;</span><br><span class="line">    100000001 v4 &#x3D; v0;</span><br><span class="line">    try &#123;</span><br><span class="line">        String v1 &#x3D; v4.this$0.独自走在孤独的雨中(&quot;https:&#x2F;&#x2F;www.lanzous.com&#x2F;b897189&quot;);</span><br><span class="line">        String v2 &#x3D; v1.substring(v1.indexOf(&quot;【&quot;), v1.indexOf(&quot;】&quot;)).replace(&quot;【&quot;, &quot;&quot;);</span><br><span class="line">        if(&quot;&quot;.equals(v2)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v0.this$0.smsOpera(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    catch(Exception v4_1) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>独自走在孤独的雨中</code>是一个http请求工具类，返回请求结果，那么打开这个地址需要输入密码，看起来应该是作者会给到倒霉蛋的密码，然后输入即可拿到子串，请求不听的向该地址发送，知道拿到子串后smsOpera发送短信，即可给内存中变量<code>v0.this$0.坐等前往世界的尽头的小船</code>赋值，那么<strong>新机词挖一此莫bai禾多此！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function stage3()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var javaString &#x3D; Java.use(&#39;java.lang.String&#39;)</span><br><span class="line">        var ikey &#x3D; javaString.$new(String(123456))</span><br><span class="line">        var ikeySign &#x3D; Java.use(&quot;com.shimeng.颜如玉.颜如玉QQ2693533893&quot;).hex_sha1(ikey)</span><br><span class="line">        Java.choose(&quot;com.shimeng.qq2693533893.MyServiceOne&quot;,&#123;</span><br><span class="line">            onMatch:function(instance)&#123;</span><br><span class="line">                console.log(&quot;found instance&quot;,instance)</span><br><span class="line">                instance.坐等前往世界的尽头的小船.value &#x3D; ikeySign;</span><br><span class="line">            &#125;,onComplete()&#123;console.log(&quot;search completed!&quot;)&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>frida -H 192.168.0.104:8888 -f com.shimeng.qq2693533893 -l yry.js</code> 并运行stage3()利用frida在内存中给<code>坐等前往世界的尽头的小船</code>进行赋值，再输入123456，终于解锁。</p><p>我是J，一个让你沉迷于技术的讲述者。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objection </tag>
            
            <tag> frida </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加壳与脱壳之基本原理</title>
      <link href="/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="逆向基本流程"><a href="#逆向基本流程" class="headerlink" title="逆向基本流程"></a>逆向基本流程</h1><ol><li>使用自动化检测工具检测apk是否加壳，或者借助一些反编译工具依靠经验推断是否加壳</li></ol><p>GDA3.85 或者 常见so文件</p><table><thead><tr><th>《娜迦》企业版本加固</th><th>libedog.so</th></tr></thead><tbody><tr><td>《娜迦》免费版本加固</td><td>libddog.so</td></tr><tr><td>《梆梆》企业版本加固</td><td>libDexHelper.so</td></tr><tr><td>《梆梆》免费版本加固</td><td>libsecexe.so</td></tr><tr><td>《爱加密》企业版本加固</td><td>ijiami.ajm</td></tr><tr><td>《爱加密》免费版本加固</td><td>libexec.so</td></tr><tr><td>《通付盾》加固</td><td>libegis.so</td></tr><tr><td>《360》加固</td><td>libprotectClass.so，libjiagu.so</td></tr><tr><td>《百度》加固</td><td>libbaiduprotect.so</td></tr><tr><td>《阿里》加固</td><td>libmobisec.so</td></tr><tr><td>《腾讯》加固</td><td>libtup.so</td></tr><tr><td>《盛大》加固</td><td>libapssec.so</td></tr><tr><td>《瑞星》加固</td><td>librsprotect.so</td></tr><tr><td>《网秦》加固</td><td>nqdata</td></tr><tr><td>《国信灵通》加固</td><td>libnqshield.so</td></tr><tr><td>《apkprotect》加固</td><td>apkprotect</td></tr><tr><td>《几维安全》加固</td><td>libkwscmm.so，libkwscr.so，libkwslinker.so</td></tr><tr><td>《UU安全》加固</td><td>libuusafe.jar.so，libuusafe.so，libuusafeempty.so</td></tr><tr><td>几维安全</td><td>lib/armeabi-v7a/libkwscmm.so，lib/armeabi-v7a/libkwscr.so，lib/armeabi-v7a/libkwslinker.so</td></tr><tr><td>UU安全</td><td>assets/libuusafe.jar.so，assets/libuusafe.so，lib/armeabi/libuusafeempty.so</td></tr></tbody></table><ol start="2"><li><p>如果apk加壳，则需要首先对apk进行脱壳</p></li><li><p>使用jeb，jadx，apktool等反编译工具对apk进行反编译</p><blockquote><p>如果反编译工具打不开，使用010Editor把文件魔术字修复前8个字节</p><p>64 65 78 0A 30 33 35 00    dex.035.     再使用jadx反编译</p><p>grep -ril “MainAcitvity” ./*.txt 找到对应dex前缀名</p></blockquote></li><li><p>先依据静态分析中得到的关键字字符串，关键api调用等方法快速定位需要分析的关键函数和流程</p></li><li><p>如果依据简单的字符串，关键api无法快速定位，则apk可能使用了字符串加密，反射调用等手段，此时可以结合hook，动态调试等</p></li><li><p>定位到关键函数后，再根据是java实现还是jni实现进一步分析</p></li></ol><h1 id="类加载基本原理"><a href="#类加载基本原理" class="headerlink" title="类加载基本原理"></a>类加载基本原理</h1><h2 id="JVM类加载器"><a href="#JVM类加载器" class="headerlink" title="JVM类加载器"></a>JVM类加载器</h2><ol><li><p>Bootstrap ClassLoader（引导类加载器）</p><blockquote><p>C/C++代码实现的加载器,用于加载指定的JDK的核心类库,比如java. lang、java.utI等这些系统类。Java虚拟机的启动就是通过 Bootstrap,该 Classloader在java里无法获取,负责加载/lib下的类。</p></blockquote></li><li><p>Extensions Classloader(拓展类加载器)</p><blockquote><p>Java中的实现类为 Extclassloader,提供了除了系统类之外的额外功能,可以在java里获取,负责加载/lib/ext下的类</p></blockquote></li><li><p>Application ClassLoader(应用程序类加载器)</p><blockquote><p>Java中的实现类为 AppClassLoader,是与我们接触对多的类加载器,开发人员写的代码默认就是由它来加载, ClassLoader.getSystemClassLoader返回的就是它。</p></blockquote></li></ol><p>可以自定义类加载器，只需要通过java.lang.ClassLoader来实现自己的类加载器。</p><p>加载顺序：Bootstrap ClassLoader-&gt;Extensions Classloader-&gt;Application ClassLoader</p><p><strong>双亲委派</strong></p><img src="/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/类加载器.png" alt="类加载流程" style="zoom:80%;"><p>如果一个类加载器收到了类加载请求,它并不会自己先去加载,而是把这个请求委托给父类的加载器去执行,如果父类加载器还存在其父类加载器,则进一步向上委托,依次递归,请求最终将到达顶层的启动类加载器,如果父类加载器可以完成类加载任务,就成功返回,倘若父类加载器无法完成此加载任务,子加载器才会尝试自己去加载。</p><p>1)避免重复加载,如果已经加载过一次class,可以直接读取已经加载的class</p><p>2)更加安全,无法自定义类来替代系统的类,可以防止核心API库被随意篡改</p><h2 id="Android类加载器"><a href="#Android类加载器" class="headerlink" title="Android类加载器"></a>Android类加载器</h2><p><strong>加载时机</strong>：</p><ul><li>隐式加载：创建类的实例，访问类的静态变量，或者为静态变量赋值，调用类的静态方法，使用反射方式来强制创建某个类或接口对应的java.lang.Class对象，初始化某个类的子类</li><li>显式加载：使用LoadClass()加载，使用forName()加载</li></ul><p><strong>加载过程</strong>：</p><img src="/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/类加载过程.png" alt="类加载过程" style="zoom:50%;"><ol><li>装载：查找和导入Class文件</li><li>链接：其中解析步骤是可以选择的<br>（a）检查：检查载入的class文件数据的正确性<br>（b）准备：给类的静态变量分配存储空间<br>（c）解析：将符号引用转成直接引用</li><li>初始化：即调用&lt;clinit&gt;函数，对静态变量，静态代码块执行初始化工作</li></ol><p><strong>ClassLoader继承关系</strong></p><img src="/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/classloader继承关系.png" alt="classloader继承关系" style="zoom: 67%;"><p><strong>ClassLoader</strong>:抽象类；<br><strong>BootClassLoader</strong>:预加载常用类，单例模式。与Java中的BootClassLoader不同，它并不是由C/C++代码实现，而是由Java实现的；<br><strong>BaseDexClassLoader</strong>是PathClassLoader、DexClassLoader、InMemoryDexClassLoader的父类，类加载的主要逻辑都是在BaseDexClassLoader完成的。<br><strong>SecureClassLoader</strong>继承了抽象类ClassLoader，拓展了ClassLoader类加入了权限方面的功能，加强了安全性，其子类URLClassLoader是用URL路径从jar文件中加载类和资源。<br>其中重点关注的是<strong>PathClassLoader</strong>和<strong>DexClassLoader</strong>。<br><strong>PathClassLoader是Android默认使用的类加载器，一个apk中的Activity等类便是在其中加载。</strong><br><strong>DexClassLoader可以加载任意目录下的dex/jar/apk/zip文件，比PathClassLoader更灵活，是实现插件化、热修复以及dex加壳的重点。</strong></p><blockquote><p>DexClassLoader方法参数</p><p>dexPath:目标所在的apk或者jar文件的路径，装载器将从路径中寻找指定的目标类。<br>dexOutputDir:由于dex 文件在APK或者 jar文件中，所以在装载前面前先要从里面解压出dex文件，这个路径就是dex文件存放的路径，在 android系统中，一个应用程序对应一个linux用户id ,应用程序只对自己的数据目录有写的权限，所以我们存放在这个路径中。<br>libPath :目标类中使用的C/C++库。<br>parent：该装载器的父装载器，一般为当前执行类的装载器。</p></blockquote><p>Android8.0新引入InMemoryDexClassLoader，用于直接从内存中加载dex。</p><p><a href="http://androidxref.com/8.0.0_r4/" target="_blank" rel="noopener">http://androidxref.com/8.0.0_r4/</a> 搜索位于libcore中的Definition的DexClassLoader 、PathClassLoader、 InmemoryDexClassLoader查看源码。</p><h3 id="ClassLoaderTest"><a href="#ClassLoaderTest" class="headerlink" title="ClassLoaderTest"></a>ClassLoaderTest</h3><p>新建项目ClassLoaderTest验证类加载器的加载顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        testClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  I/kanxue: thisClassLoader:dalvik.system.PathClassLoader[DexPathList[[zip file "/data/app/com.onejane.classloadertest-8BzVJE0RmCd4VMY0V2ZBAQ==/base.apk"],nativeLibraryDirectories=[/data/app/com.onejane.classloadertest-8BzVJE0RmCd4VMY0V2ZBAQ==/lib/x86, /system/lib, /system/product/lib]]]</span></span><br><span class="line"><span class="comment">     *  I/kanxue: this:dalvik.system.PathClassLoader[DexPathList[[zip file "/data/app/com.onejane.classloadertest-8BzVJE0RmCd4VMY0V2ZBAQ==/base.apk"],nativeLibraryDirectories=[/data/app/com.onejane.classloadertest-8BzVJE0RmCd4VMY0V2ZBAQ==/lib/x86, /system/lib, /system/product/lib]]]===java.lang.BootClassLoader@232d58a</span></span><br><span class="line"><span class="comment">     *  I/kanxue: root:java.lang.BootClassLoader@232d58a</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClassLoader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ClassLoader thisClassLoader=MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        Log.i(<span class="string">"kanxue"</span>,<span class="string">"thisClassLoader:"</span>+thisClassLoader);</span><br><span class="line">        ClassLoader tmpClassLoader = <span class="keyword">null</span>;</span><br><span class="line">        ClassLoader parentClassLoader=thisClassLoader.getParent();</span><br><span class="line">        <span class="keyword">while</span> (parentClassLoader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            Log.i(<span class="string">"kanxue"</span>,<span class="string">"this:"</span>+thisClassLoader+<span class="string">"==="</span>+parentClassLoader);</span><br><span class="line">            tmpClassLoader=parentClassLoader.getParent();</span><br><span class="line">            thisClassLoader=parentClassLoader;</span><br><span class="line">            parentClassLoader=tmpClassLoader;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(<span class="string">"kanxue"</span>,<span class="string">"root:"</span>+thisClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LoadDex"><a href="#LoadDex" class="headerlink" title="LoadDex"></a>LoadDex</h3><p>通过DexClassLoader实现一个<strong>动态加载</strong>的dex插件</p><p>在ClassLoaderTest项目中打印log</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDexClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(<span class="string">"kanxue"</span>,<span class="string">"I'm from com.onejane.classloadertest.TestDexClass.testFunc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过build生成ClassLoaderTest\app\build\outputs\apk\debug\app-debug.apk, <code>apktool d -s app-debug.apk</code>保留并抽取出classes.dex</p><p>adb push classes.dex /sdcard</p><p>创建LoadDex空白Android项目，加载调用位于dex下com.onejane.classloadertest.TestDexClass </p><p>在AndroidManifest.xml中添加读写权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新增application配置android:requestLegacyExternalStorage=”true”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Context context = <span class="keyword">this</span>.getApplicationContext();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Android 10 sdk30 无法获取sdcard权限，通过获取当前app的cache目录</span></span><br><span class="line"><span class="comment">         * if(!getExternalCacheDir().exists()) getExternalCacheDir().mkdirs();</span></span><br><span class="line"><span class="comment">         * testDexClassLoader(context,getExternalCacheDir().getAbsolutePath()+"/classes.dex");</span></span><br><span class="line"><span class="comment">         * 再将TestDexClass所在的adb push classes.dex /sdcard/Android/data/com.onejane.loaddex/cache/</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 若sdk30需要sdcard，通过requestMyPermissions动态获取读写权限</span></span><br><span class="line">        testDexClassLoader(context,<span class="string">"/sdcard/classes.dex"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestMyPermissions</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>,</span><br><span class="line">                Manifest.permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line">                != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            <span class="comment">//没有授权，编写申请权限代码</span></span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, <span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.d(<span class="string">"kanxue"</span>, <span class="string">"requestMyPermissions: 有写SD权限"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>,</span><br><span class="line">                Manifest.permission.READ_EXTERNAL_STORAGE)</span><br><span class="line">                != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            <span class="comment">//没有授权，编写申请权限代码</span></span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.READ_EXTERNAL_STORAGE&#125;, <span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.d(<span class="string">"kanxue"</span>, <span class="string">"requestMyPermissions: 有读SD权限"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可应对app热更新bug修复</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDexClassLoader</span><span class="params">(Context context, String dexfilepath)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 存放dex文件</span></span><br><span class="line">        File optFile = context.getDir(<span class="string">"opt_dex"</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 存放依赖的so文件</span></span><br><span class="line">        File libFile = context.getDir(<span class="string">"lib_path"</span>,<span class="number">0</span>);</span><br><span class="line">        ClassLoader parentClassLoader=MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        Log.i(<span class="string">"kanxue"</span>,parentClassLoader.toString()); <span class="comment">//PathClassLoader</span></span><br><span class="line">        ClassLoader tmpClassLoader=context.getClassLoader();</span><br><span class="line">        Log.i(<span class="string">"kanxue"</span>,tmpClassLoader.toString()); <span class="comment">// PathClassLoader</span></span><br><span class="line">        requestMyPermissions();</span><br><span class="line">        DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(dexfilepath,optFile.getAbsolutePath(),libFile.getAbsolutePath(),MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line">        Class&lt;?&gt; clazz=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            clazz=dexClassLoader.loadClass(<span class="string">"com.onejane.classloadertest.TestDexClass"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(clazz!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method testFuncMethod=clazz.getDeclaredMethod(<span class="string">"testFunc"</span>);</span><br><span class="line">                Object obj = clazz.newInstance();</span><br><span class="line">                testFuncMethod.invoke(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用外部dex下发热修复bug，用户无感知更新。</p><h1 id="APP启动流程"><a href="#APP启动流程" class="headerlink" title="APP启动流程"></a>APP启动流程</h1><p>由发起进程通过binder进程间通信告知system_server进程启动指定的app，system_server通过socket方式与安卓孵化器进程进行通信，告诉孵化器进程启动指定app，由进程fork产生新的进程真正进入ActivityThread.main()，在此之前一直处于安卓的framework中。</p><p><img src="/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.png" alt="APP启动流程"></p><p>ActivityThread是单例模式，在app整个进程的生命周期中，只存在一个实例，<a href="http://androidxref.com/8.0.0_r4/" target="_blank" rel="noopener">http://androidxref.com/8.0.0_r4/</a> 搜索位于frameworks中的ActivityThread</p><p>调用静态函数currentActivityThread获取当前进程中的ActivityThread实例，进而可以获取ActivityThread的重要变量,如mPackages </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static ActivityThread currentActivityThread() &#123;</span><br><span class="line">    return sCurrentActivityThread;</span><br><span class="line">&#125;</span><br><span class="line">final ArrayMap&lt;String, WeakReference&lt;LoadedApk&gt;&gt; mPackages &#x3D; new ArrayMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p><strong>其中LoadedApk中有加载app组件的PathClassLoader,即mClassLoader</strong></p><ol><li><p>通过反射获取app进程中单例<strong>ActivityThread</strong>，其中的<strong>sCurrentActivityThread静态变量</strong>用于全局保存创建的ActivityThread实例，同时还提供了<strong>currentActivityThread()静态函数</strong>用于获取当前虚拟机创建的ActivityThread实例。</p></li><li><p>反射拿到ActivityThread中的 <strong>mPackages</strong>的ArrayMap，通过当前app包名<strong>获取LoadedApk</strong>。</p></li><li><p>最后通过LoadedApk获取<strong>mClassLoader-&gt;PathClassLoader</strong>。</p></li></ol><blockquote><p>PathClassLoader:  app运行过程中用于加载四大组件类的ClassLoader</p></blockquote><p>**ActivityThread.main()**函数是java中的入口main函数,这里会启动主消息循环，并创建ActivityThread实例，之后调用thread.attach(false)完成一系列初始化准备工作，并完成全局静态变量sCurrentActivityThread的初始化。之后主线程进入消息循环，等待接收来自系统的消息。当收到系统发送来的bindapplication的进程间调用时，调用函数handleBindApplication来处理该请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void handleBindApplication(AppBindData data) &#123;</span><br><span class="line">    &#x2F;&#x2F;step 1: 创建LoadedApk对象</span><br><span class="line">    data.info &#x3D; getPackageInfoNoCheck(data.appInfo, data.compatInfo);</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F;step 2: 创建ContextImpl对象;</span><br><span class="line">    final ContextImpl appContext &#x3D; ContextImpl.createAppContext(this, data.info);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;step 3: 创建Instrumentation</span><br><span class="line">    mInstrumentation &#x3D; new Instrumentation();</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;step 4: 创建Application对象;在makeApplication函数中调用了newApplication，真正执行app代码。在该函数中又调用了app.attach(context)，在attach函数中调用了Application.attachBaseContext函数</span><br><span class="line">    Application app &#x3D; data.info.makeApplication(data.restrictedBackupMode, null);</span><br><span class="line">    mInitialApplication &#x3D; app;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;step 5: 安装providers</span><br><span class="line">    List&lt;ProviderInfo&gt; providers &#x3D; data.providers;</span><br><span class="line">    installContentProviders(app, providers);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;step 6: 执行Application.Create回调</span><br><span class="line">    mInstrumentation.callApplicationOnCreate(app);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>handleBindApplication</strong>函数中第一次进入了app的代码世界，该函数功能是<strong>启动一个application</strong>，并把系统收集的apk组件等相关信息绑定到application里，在创建完application对象后，接着<strong>调用了application的attachBaseContext</strong>方法，之后<strong>调用了application的onCreate</strong>函数。由此可以发现，app的Application类中的<strong>attachBaseContext</strong>和<strong>onCreate</strong>这两个函数是最先获取执行权进行代码执行的。这也是为什么各家的加固工具的主要逻辑都是通过替换app入口Application，并自实现这两个函数，在这两个函数中进行加密dex释放以及执行权交付的原因。</p><h1 id="APP运行流程"><a href="#APP运行流程" class="headerlink" title="APP运行流程"></a>APP运行流程</h1><img src="/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/app运行流程.png" alt="app运行流程" style="zoom:67%;"><p>无壳：PathClassLoader加载自身app自身dex，包括app声明的Application及所有其他类信息</p><p>加壳：PathClassLoader只加载壳自身代码，不包含app自身真正代码。首先进入壳的application的attachBaseContext，解密原始dex，再完成执行权的交付。</p><p><img src="/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E5%8A%A0%E5%A3%B3app%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.png" alt="加壳app启动流程"></p><p><strong>DexClassLoader加载的类是没有组件生命周期的</strong>，也就是说即使DexClassLoader通过对APK的动态加载完成了对组件类的加载，当系统启动该组件时，依然会出现加载类失败的异常，因为插件没有组件相关的类，如一些activity或service，若只用DexClassLoader进行动态加载，系统PathClassLoader无法找到相关组件信息，app将直接崩溃。所以如何解决动态加载dex中的生命周期成为加壳厂商首先需要解决的问题！！！</p><p>在项目<strong>ClassLoaderTest</strong>中新建TestActivity ，并将build的apk中的classes.dex取出，adb push classes.dex /sdcard</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class TestActivity extends AppCompatActivity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        &#x2F;&#x2F; adb push classes.dex &#x2F;sdcard</span><br><span class="line">        Log.i(&quot;kanxue&quot;,&quot;I&#39;m from TestActivity.onCreate&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目<strong>LoadDex</strong>中，配置AndroidManifest.xml<code>&lt;activity android:name=&quot;com.onejane.classloadertest.TestActivity&quot;&gt;&lt;/activity&gt;</code>,在MainActivity中新增方法，并启动运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    Context context &#x3D; this.getApplicationContext();</span><br><span class="line">    startTestActivity(context,&quot;&#x2F;sdcard&#x2F;classes.dex&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void startTestActivity(Context context,String dexfilepath)&#123;</span><br><span class="line">    &#x2F;&#x2F; 存放dex文件</span><br><span class="line">    File optFile &#x3D; context.getDir(&quot;opt_dex&quot;,0);</span><br><span class="line">    &#x2F;&#x2F; 存放依赖的so文件</span><br><span class="line">    File libFile &#x3D; context.getDir(&quot;lib_path&quot;,0);</span><br><span class="line">    ClassLoader parentClassLoader&#x3D;MainActivity.class.getClassLoader();</span><br><span class="line">    Log.i(&quot;kanxue&quot;,parentClassLoader.toString()); &#x2F;&#x2F;PathClassLoader</span><br><span class="line">    ClassLoader tmpClassLoader&#x3D;context.getClassLoader();</span><br><span class="line">    Log.i(&quot;kanxue&quot;,tmpClassLoader.toString()); &#x2F;&#x2F; PathClassLoader</span><br><span class="line">    requestMyPermissions();</span><br><span class="line">    DexClassLoader dexClassLoader &#x3D; new DexClassLoader(dexfilepath,optFile.getAbsolutePath(),libFile.getAbsolutePath(),MainActivity.class.getClassLoader());</span><br><span class="line">    Class&lt;?&gt; clazz&#x3D;null;</span><br><span class="line">    try&#123;</span><br><span class="line">        clazz&#x3D;dexClassLoader.loadClass(&quot;com.onejane.classloadertest.TestActivity&quot;);</span><br><span class="line">    &#125;catch (ClassNotFoundException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    if(clazz!&#x3D;null)&#123;</span><br><span class="line">        context.startActivity(new Intent(context,clazz));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动app将报错ClassNotFoundException: Didn’t find class “com.onejane.classloadertest.TestActivity”</p><p>说明组件相关的Activity由mClassLoader-&gt;PathClassLoader加载了，<strong>虽然获取到非空TestActivity，却无法找到启动的目标Activity</strong>。</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>反射替换，替换系统组件类加载器mClassLoader为我们的DexClassLoader，同时设置DexClassLoader的parent为系统组件类加载器PathClassLoader；</p><img src="/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/反射替换.png" alt="反射替换" style="zoom:67%;"><p>修改LoadDex项目的MainActivity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Context context &#x3D; this.getApplicationContext();</span><br><span class="line">        startTestActivityReplaceMethod(this,&quot;&#x2F;sdcard&#x2F;classes.dex&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void requestMyPermissions() &#123;</span><br><span class="line"></span><br><span class="line">        if (ContextCompat.checkSelfPermission(this,</span><br><span class="line">                Manifest.permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line">                !&#x3D; PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            &#x2F;&#x2F;没有授权，编写申请权限代码</span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, 100);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Log.d(&quot;kanxue&quot;, &quot;requestMyPermissions: 有写SD权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ContextCompat.checkSelfPermission(this,</span><br><span class="line">                Manifest.permission.READ_EXTERNAL_STORAGE)</span><br><span class="line">                !&#x3D; PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            &#x2F;&#x2F;没有授权，编写申请权限代码</span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123;Manifest.permission.READ_EXTERNAL_STORAGE&#125;, 100);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Log.d(&quot;kanxue&quot;, &quot;requestMyPermissions: 有读SD权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void replaceClassloader(ClassLoader classloader)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class&lt;?&gt; ActivityThreadClazz&#x3D;classloader.loadClass(&quot;android.app.ActivityThread&quot;);</span><br><span class="line">            &#x2F;&#x2F; 获取静态函数currentActivityThread</span><br><span class="line">            Method currentActivityThreadMethod&#x3D; ActivityThreadClazz.getDeclaredMethod(&quot;currentActivityThread&quot;);</span><br><span class="line">            currentActivityThreadMethod.setAccessible(true);</span><br><span class="line">            Object activityThreadObj&#x3D;currentActivityThreadMethod.invoke(null); &#x2F;&#x2F; 获取ActivityThread对象</span><br><span class="line">            &#x2F;&#x2F;final ArrayMap&lt;String, WeakReference&lt;LoadedApk&gt;&gt; mPackages &#x3D; new ArrayMap&lt;&gt;();  </span><br><span class="line">            Field mPackagesField&#x3D;ActivityThreadClazz.getDeclaredField(&quot;mPackages&quot;);  &#x2F;&#x2F; 获取ActivityThread对象的ArrayMap的Field</span><br><span class="line">            mPackagesField.setAccessible(true);</span><br><span class="line">            ArrayMap mPackagesObj&#x3D; (ArrayMap) mPackagesField.get(activityThreadObj); &#x2F;&#x2F; 通过Field获取mPackages实例</span><br><span class="line">            WeakReference wr&#x3D; (WeakReference) mPackagesObj.get(this.getPackageName()); &#x2F;&#x2F; 从ArrayMap中获取LoadApk</span><br><span class="line">            Object loadedApkObj&#x3D;wr.get();</span><br><span class="line"></span><br><span class="line">            Class LoadedApkClazz&#x3D;classloader.loadClass(&quot;android.app.LoadedApk&quot;);</span><br><span class="line">            &#x2F;&#x2F;private ClassLoader mClassLoader;</span><br><span class="line">            Field mClassLoaderField&#x3D;LoadedApkClazz.getDeclaredField(&quot;mClassLoader&quot;);</span><br><span class="line">            mClassLoaderField.setAccessible(true);</span><br><span class="line">            mClassLoaderField.set(loadedApkObj,classloader); &#x2F;&#x2F; 将LoadApk(mClassLoader)替换为我们的DexClassLoader</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public void startTestActivityReplaceMethod(Context context,String dexfilepath)&#123;</span><br><span class="line">        &#x2F;&#x2F; 存放dex文件</span><br><span class="line">        File optFile &#x3D; context.getDir(&quot;opt_dex&quot;,0);</span><br><span class="line">        &#x2F;&#x2F; 存放依赖的so文件</span><br><span class="line">        File libFile &#x3D; context.getDir(&quot;lib_path&quot;,0);</span><br><span class="line">        requestMyPermissions();</span><br><span class="line">        DexClassLoader dexClassLoader &#x3D; new DexClassLoader(dexfilepath,optFile.getAbsolutePath(),libFile.getAbsolutePath(),MainActivity.class.getClassLoader());</span><br><span class="line">        replaceClassloader(dexClassLoader);</span><br><span class="line">        Class&lt;?&gt; clazz&#x3D;null;</span><br><span class="line">        try&#123;</span><br><span class="line">            clazz&#x3D;dexClassLoader.loadClass(&quot;com.onejane.classloadertest.TestActivity&quot;);</span><br><span class="line">        &#125;catch (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        if(clazz!&#x3D;null)&#123;</span><br><span class="line">            context.startActivity(new Intent(context,clazz));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>打破原有的双亲关系，在系统组件类加载器和BootClassLoader的中间插入我们自己的DexClassLoader即可</p><img src="/2021/02/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/反射插入.png" alt="反射插入" style="zoom:67%;"><p>修改ClassLoaderTest中的TestActivity类继承自Activity </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class TestActivity extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">&#x2F;&#x2F;        setContentView(R.layout.activity_main);</span><br><span class="line">        &#x2F;&#x2F; adb push classes.dex &#x2F;sdcard</span><br><span class="line">        Log.i(&quot;kanxue&quot;,&quot;I&#39;m from TestActivity.onCreate&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改LoadDex中的MainActivity继承Activity </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Context context &#x3D; this.getApplicationContext();</span><br><span class="line">        &#x2F;&#x2F; 若sdk30需要sdcard，通过requestMyPermissions动态获取读写权限</span><br><span class="line">&#x2F;&#x2F;        testDexClassLoader(context,&quot;&#x2F;sdcard&#x2F;classes.dex&quot;);</span><br><span class="line">&#x2F;&#x2F;        startTestActivityReplaceMethod(this,&quot;&#x2F;sdcard&#x2F;classes.dex&quot;);</span><br><span class="line">        startTestActivityInsertMethod(this,&quot;&#x2F;sdcard&#x2F;classes.dex&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void requestMyPermissions() &#123;</span><br><span class="line"></span><br><span class="line">        if (ContextCompat.checkSelfPermission(this,</span><br><span class="line">                Manifest.permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line">                !&#x3D; PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            &#x2F;&#x2F;没有授权，编写申请权限代码</span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, 100);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Log.d(&quot;kanxue&quot;, &quot;requestMyPermissions: 有写SD权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ContextCompat.checkSelfPermission(this,</span><br><span class="line">                Manifest.permission.READ_EXTERNAL_STORAGE)</span><br><span class="line">                !&#x3D; PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            &#x2F;&#x2F;没有授权，编写申请权限代码</span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123;Manifest.permission.READ_EXTERNAL_STORAGE&#125;, 100);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Log.d(&quot;kanxue&quot;, &quot;requestMyPermissions: 有读SD权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void startTestActivityInsertMethod(Context context,String dexfilepath)&#123;</span><br><span class="line">        File optfile&#x3D;context.getDir(&quot;opt_dex&quot;,0);</span><br><span class="line">        File libfile&#x3D;context.getDir(&quot;lib_path&quot;,0);</span><br><span class="line">        requestMyPermissions();</span><br><span class="line">        ClassLoader pathClassloader&#x3D;MainActivity.class.getClassLoader();</span><br><span class="line">        ClassLoader bootClassloader&#x3D;MainActivity.class.getClassLoader().getParent();</span><br><span class="line">        &#x2F;&#x2F; 设置自定义dexClassLoader父ClassLoader为bootClassloader</span><br><span class="line">        DexClassLoader dexClassLoader&#x3D;new DexClassLoader(dexfilepath,optfile.getAbsolutePath(),libfile.getAbsolutePath(),bootClassloader);</span><br><span class="line">        try &#123;</span><br><span class="line">            Field parentField&#x3D;ClassLoader.class.getDeclaredField(&quot;parent&quot;);</span><br><span class="line">            parentField.setAccessible(true);</span><br><span class="line">            &#x2F;&#x2F; 设置pathClassLoader父ClassLoader为自定义dexClassLoader</span><br><span class="line">            parentField.set(pathClassloader,dexClassLoader);</span><br><span class="line">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ClassLoader tmpClassloader&#x3D;pathClassloader;</span><br><span class="line">        ClassLoader parentClassloader&#x3D;pathClassloader.getParent();</span><br><span class="line">        while(parentClassloader!&#x3D;null)&#123;</span><br><span class="line">            Log.i(&quot;kanxue&quot;,&quot;this:&quot;+tmpClassloader+&quot;--parent:&quot;+parentClassloader);</span><br><span class="line">            tmpClassloader&#x3D;parentClassloader;</span><br><span class="line">            parentClassloader&#x3D;parentClassloader.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(&quot;kanxue&quot;,&quot;root:&quot;+tmpClassloader);</span><br><span class="line">        Class&lt;?&gt; clazz&#x3D;null;</span><br><span class="line">        try &#123;</span><br><span class="line">            clazz &#x3D; dexClassLoader.loadClass(&quot;com.onejane.classloadertest.TestActivity&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        context.startActivity(new Intent(context,clazz));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上都是基于文件形式的外部加载，Android 8.0引入InMemoryDexClassLoader实现从内存中直接加载字节流，更加安全，不能通过文件监控形式达到脱壳目的，需要从进程内存中扣出这块完整的dex实现脱壳。</p></blockquote><ul><li>部分app在AndroidManifest.xml中没有声明application，加固厂商只需要添加一个application，在自己的application中完成classloader的替换。</li><li>部分app在AndroidManifest.xml中已经声明application，加固需要一个代理的application，壳的application不仅需要完成解密dex以及classloader相关修复，还需要完成解密dex后原app的application的attachBaseContext和onCreate函数调用。</li></ul><hr><ul><li>逆向分析和脱壳的意义</li><li>ClassLoader和动态加载</li><li>加壳APP运行流程和ClassLoader修正</li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
          <category> 加壳与脱壳 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> classloader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猿人学之访问逻辑罗生门</title>
      <link href="/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E8%AE%BF%E9%97%AE%E9%80%BB%E8%BE%91%E7%BD%97%E7%94%9F%E9%97%A8/"/>
      <url>/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E8%AE%BF%E9%97%AE%E9%80%BB%E8%BE%91%E7%BD%97%E7%94%9F%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://match.yuanrenxue.com/match/3" target="_blank" rel="noopener">http://match.yuanrenxue.com/match/3</a></p><p>抓取下列5页商标的数据，并将出现频率最高的申请号填入答案中</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p><img src="/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E8%AE%BF%E9%97%AE%E9%80%BB%E8%BE%91%E7%BD%97%E7%94%9F%E9%97%A8/%E6%8A%93%E5%8C%85.png" alt="抓包"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><a href="http://match.yuanrenxue.com/match/3" target="_blank" rel="noopener">http://match.yuanrenxue.com/match/3</a>  请求原始网页后请求一堆js/css,并没有携带cookie和特殊的返回</p><p><img src="/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E8%AE%BF%E9%97%AE%E9%80%BB%E8%BE%91%E7%BD%97%E7%94%9F%E9%97%A8/%E5%88%9D%E5%A7%8B%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E.png" alt="初始请求返回"></p><p><a href="http://match.yuanrenxue.com/logo" target="_blank" rel="noopener">http://match.yuanrenxue.com/logo</a> 每次请求页数的时候都会先请求logo并set了一个cookie，说明cookie是从服务器返回的</p><p><img src="/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E8%AE%BF%E9%97%AE%E9%80%BB%E8%BE%91%E7%BD%97%E7%94%9F%E9%97%A8/%E8%8E%B7%E5%8F%96cookie.png" alt="获取cookie"></p><p><a href="http://match.yuanrenxue.com/api/match/3" target="_blank" rel="noopener">http://match.yuanrenxue.com/api/match/3</a> 请求返回页面json数据，携带logo返回的cookie</p><p><img src="/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8B%E8%AE%BF%E9%97%AE%E9%80%BB%E8%BE%91%E7%BD%97%E7%94%9F%E9%97%A8/%E8%BF%94%E5%9B%9Ejson.png" alt="返回json"></p><p>没有带cookie不能访问<a href="http://match.yuanrenxue.com/api/match/3" target="_blank" rel="noopener">http://match.yuanrenxue.com/api/match/3</a></p><p>使用<code>请求头加引号.py</code> 将fiddler的请求头包上</p><blockquote><p>请求头加引号.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">old_headers =<span class="string">'''</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string">Accept: application/json, text/javascript, */*; q=0.01</span></span><br><span class="line"><span class="string">X-Requested-With: XMLHttpRequest</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36</span></span><br><span class="line"><span class="string">Referer: http://match.yuanrenxue.com/match/3</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Cookie: sessionid=7ly07o9fclh1llfsposkhh9jqvujxkth</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">pattern = <span class="string">'^(.*?):[\s]*(.*?)$'</span></span><br><span class="line">headers = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> old_headers.splitlines():</span><br><span class="line">    headers += (re.sub(pattern,<span class="string">'\'\\1\': \'\\2\','</span>,line)) + <span class="string">'\n'</span></span><br><span class="line">print(headers[:<span class="number">-2</span>])</span><br></pre></td></tr></table></figure><p>加上cookie使用python请求抓取返回一堆js代码，因为cookie是由服务器生成的，所以这一段返回的js没有意义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class="line">    <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'yuanrenxue.project'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://match.yuanrenxue.com/match/3'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'sessionid=7ly07o9fclh1llfsposkhh9jqvujxkth'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'http://match.yuanrenxue.com/api/match/3'</span></span><br><span class="line">res = requests.get(url=url, headers=headers)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><p>规律：请求完logo后再请求api则正常返回，同理请求第二页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class="line">    <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'yuanrenxue.project'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://match.yuanrenxue.com/match/3'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span></span><br><span class="line">&#125;</span><br><span class="line">session.headers = headers</span><br><span class="line">url_logo = <span class="string">'http://match.yuanrenxue.com/logo'</span></span><br><span class="line">res = session.post(url_logo)</span><br><span class="line">print(res, res.cookies)</span><br><span class="line">url = <span class="string">'http://match.yuanrenxue.com/api/match/3?page=1'</span></span><br><span class="line">res = session.get(url=url)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猿人学之js混淆动态cookie</title>
      <link href="/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E5%8A%A8%E6%80%81cookie/"/>
      <url>/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E5%8A%A8%E6%80%81cookie/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://match.yuanrenxue.com/match/2" target="_blank" rel="noopener">http://match.yuanrenxue.com/match/2</a></p><p>提取全部5页发布日热度的值，计算所有值的加和,并提交答案</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>chrome无痕模式通过抓包获取所有请求</p><p><img src="/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E5%8A%A8%E6%80%81cookie/charls%E6%8A%93%E5%8C%85.png" alt="charls抓包"></p><p>第一个match/2不携带cookie并返回一串js代码</p><p>第二个match/2最早携带cookie并返回html页面，且并没有在请求头set-cookie,说明cookie是本地生成，而非服务器生成带到前端的，那么第一个match/2返回的js很可能就会生成cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie m&#x3D;dd5572e825610043a17c791d1eadc601|1607590427000</span><br></pre></td></tr></table></figure><p>第三个api/match/2携带cookie返回页面请求json数据</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="ob-decrypt"><a href="#ob-decrypt" class="headerlink" title="ob-decrypt"></a>ob-decrypt</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;DingZaiHub&#x2F;ob-decrypt.git  原js在source.js，解密后的js在code.js</span><br><span class="line">node ob-decrypt.js</span><br></pre></td></tr></table></figure><p>如果报错TypeError: Cannot read property ‘split’ of undefined</p><pre><code>if (arrName == id.name &amp;&amp; init.callee.object.value != undefined) {    // 数组节点    console.log(typeof init.callee.object.value)    arr = init.callee.object.value.split(&#39;|&#39;);    pre_path.remove()}</code></pre><p>当搜索<code>document</code>的时候，恰好找到了存cookie的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document[&quot;coo&quot; + &quot;kie&quot;] &#x3D; _0x2c1923[&quot;ley&quot; + &quot;Wl&quot;](_0x2c1923[&quot;sJt&quot; + &quot;Xw&quot;](_0x2c1923[&quot;sJt&quot; + &quot;Xw&quot;](_0x2c1923[&quot;sJt&quot; + &quot;Xw&quot;](_0x2c1923[&quot;BwY&quot; + &quot;uN&quot;](_0x2c1923[&quot;BwY&quot; + &quot;uN&quot;](&quot;m&quot;, _0x2c1923[&quot;UET&quot; + &quot;ZQ&quot;](_0x10cbb5)), &quot;&#x3D;&quot;), _0x2c1923[&quot;zel&quot; + &quot;pz&quot;](_0x40ee99, _0x476429)), &quot;|&quot;), _0x476429), _0x2c1923[&quot;GYP&quot; + &quot;En&quot;]);</span><br><span class="line">location[&quot;rel&quot; + &quot;oad&quot;]();</span><br></pre></td></tr></table></figure><p>类似以上的套娃混淆<code>a(b(c(d,e),f),g(h,i))</code>，从表达式中间的逗号开始处理对应的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_0x2c1923[&quot;ley&quot; + &quot;Wl&quot;] &#x3D; function (_0x53c832, _0x599c90) &#123;</span><br><span class="line">  return _0x53c832 + _0x599c90;</span><br><span class="line">&#125;;</span><br><span class="line">_0x2c1923[&quot;sJt&quot; + &quot;Xw&quot;] &#x3D; function (_0x28b4c2, _0x43d6c8) &#123;</span><br><span class="line">  return _0x28b4c2 + _0x43d6c8;</span><br><span class="line">&#125;;</span><br><span class="line">_0x2c1923[&quot;BwY&quot; + &quot;uN&quot;] &#x3D; function (_0x4bea8f, _0x478a42) &#123;</span><br><span class="line">  return _0x4bea8f + _0x478a42;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>比如<code>_0x2c1923[&quot;BwY&quot; + &quot;uN&quot;](&quot;m&quot;, _0x2c1923[&quot;UET&quot; + &quot;ZQ&quot;](_0x10cbb5))</code>改成<code>&quot;m&quot;+ _0x2c1923[&quot;UET&quot; + &quot;ZQ&quot;](_0x10cbb5)</code>,以此类推，以上套娃混淆改成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie &#x3D; &quot;m&quot;+ _0x10cbb5()+ &quot;&#x3D;&quot;+ _0x40ee99(_0x59d742)+ &quot;|&quot;+ _0x59d742+ &quot;; p&quot; + &quot;ath&quot; + &quot;&#x3D;&#x2F;&quot;</span><br></pre></td></tr></table></figure><p>与生成的cookie对比m=之间应该是空字符串，不过<code>_0x10cbb5()</code>还是有可能通过eval执行其他操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line">function _0x10cbb5(_0x5f13ed, _0x478af7) &#123;</span><br><span class="line">    var _0x676db2 &#x3D; &#123;&#125;;</span><br><span class="line">    _0x676db2[&quot;zmh&quot; + &quot;zz&quot;] &#x3D; _0x2c1923[&quot;kBz&quot; + &quot;Ka&quot;];</span><br><span class="line">    _0x676db2[&quot;Gbk&quot; + &quot;oY&quot;] &#x3D; function (_0x1081d2, _0x4d51d1) &#123;</span><br><span class="line">        return _0x2c1923[&quot;Dkz&quot; + &quot;qh&quot;](_0x1081d2, _0x4d51d1);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;pvW&quot; + &quot;KS&quot;] &#x3D; _0x2c1923[&quot;MNm&quot; + &quot;hh&quot;];</span><br><span class="line">    _0x676db2[&quot;YYF&quot; + &quot;qH&quot;] &#x3D; _0x2c1923[&quot;Mty&quot; + &quot;HN&quot;];</span><br><span class="line">    _0x676db2[&quot;Sfa&quot; + &quot;kl&quot;] &#x3D; _0x2c1923[&quot;ecZ&quot; + &quot;Qk&quot;];</span><br><span class="line">    _0x676db2[&quot;gUm&quot; + &quot;VG&quot;] &#x3D; function (_0x3f6b12, _0x2d619d) &#123;</span><br><span class="line">        return _0x2c1923[&quot;BhS&quot; + &quot;oX&quot;](_0x3f6b12, _0x2d619d);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;OPB&quot; + &quot;pQ&quot;] &#x3D; function (_0x3ff6e7, _0x3bef5f) &#123;</span><br><span class="line">        return _0x2c1923[&quot;JAx&quot; + &quot;OR&quot;](_0x3ff6e7, _0x3bef5f);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;BjH&quot; + &quot;Sb&quot;] &#x3D; _0x2c1923[&quot;Klw&quot; + &quot;fb&quot;];</span><br><span class="line">    _0x676db2[&quot;PTQ&quot; + &quot;Ui&quot;] &#x3D; function (_0x1b44b4) &#123;</span><br><span class="line">        return _0x2c1923[&quot;fha&quot; + &quot;Jp&quot;](_0x1b44b4);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;kTD&quot; + &quot;PO&quot;] &#x3D; function (_0xfb99e4, _0x40cf5b) &#123;</span><br><span class="line">        return _0x2c1923[&quot;BhS&quot; + &quot;oX&quot;](_0xfb99e4, _0x40cf5b);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;YEP&quot; + &quot;pq&quot;] &#x3D; function (_0x1bda72, _0x47daba) &#123;</span><br><span class="line">        return _0x2c1923[&quot;qgy&quot; + &quot;zh&quot;](_0x1bda72, _0x47daba);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;KLK&quot; + &quot;fL&quot;] &#x3D; function (_0x416106, _0x55357b) &#123;</span><br><span class="line">        return _0x2c1923[&quot;JAx&quot; + &quot;OR&quot;](_0x416106, _0x55357b);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;ISp&quot; + &quot;bk&quot;] &#x3D; _0x2c1923[&quot;mcW&quot; + &quot;Jc&quot;];</span><br><span class="line">    _0x676db2[&quot;tWb&quot; + &quot;gg&quot;] &#x3D; _0x2c1923[&quot;OBQ&quot; + &quot;iX&quot;];</span><br><span class="line">    _0x676db2[&quot;lKc&quot; + &quot;bf&quot;] &#x3D; _0x2c1923[&quot;puu&quot; + &quot;fA&quot;];</span><br><span class="line">    _0x676db2[&quot;XMC&quot; + &quot;Ur&quot;] &#x3D; _0x2c1923[&quot;cte&quot; + &quot;DM&quot;];</span><br><span class="line">    _0x676db2[&quot;dfK&quot; + &quot;OC&quot;] &#x3D; _0x2c1923[&quot;Jng&quot; + &quot;FV&quot;];</span><br><span class="line">    _0x676db2[&quot;egT&quot; + &quot;Fi&quot;] &#x3D; function (_0x21631f, _0x4bfcdf) &#123;</span><br><span class="line">        return _0x2c1923[&quot;mdY&quot; + &quot;ma&quot;](_0x21631f, _0x4bfcdf);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;UpF&quot; + &quot;Fn&quot;] &#x3D; _0x2c1923[&quot;RoK&quot; + &quot;bA&quot;];</span><br><span class="line">    _0x676db2[&quot;Xqa&quot; + &quot;uV&quot;] &#x3D; function (_0x51abee, _0x5ab76f) &#123;</span><br><span class="line">        return _0x2c1923[&quot;UfH&quot; + &quot;Ee&quot;](_0x51abee, _0x5ab76f);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;iiW&quot; + &quot;bz&quot;] &#x3D; _0x2c1923[&quot;wZN&quot; + &quot;LZ&quot;];</span><br><span class="line">    _0x676db2[&quot;Teo&quot; + &quot;Zg&quot;] &#x3D; _0x2c1923[&quot;fND&quot; + &quot;Sz&quot;];</span><br><span class="line">    _0x676db2[&quot;gZh&quot; + &quot;Wd&quot;] &#x3D; function (_0x10719b, _0x56e20a) &#123;</span><br><span class="line">        return _0x2c1923[&quot;pkn&quot; + &quot;vA&quot;](_0x10719b, _0x56e20a);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;YmC&quot; + &quot;AF&quot;] &#x3D; _0x2c1923[&quot;uLh&quot; + &quot;Sz&quot;];</span><br><span class="line">    _0x676db2[&quot;NJQ&quot; + &quot;wb&quot;] &#x3D; function (_0x38e4cb) &#123;</span><br><span class="line">        return _0x2c1923[&quot;fha&quot; + &quot;Jp&quot;](_0x38e4cb);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;IxU&quot; + &quot;UW&quot;] &#x3D; _0x2c1923[&quot;xwp&quot; + &quot;cD&quot;];</span><br><span class="line">    _0x676db2[&quot;VaY&quot; + &quot;Gr&quot;] &#x3D; function (_0x1b36ae, _0x3c24be, _0x3d336b) &#123;</span><br><span class="line">        return _0x2c1923[&quot;XGh&quot; + &quot;hn&quot;](_0x1b36ae, _0x3c24be, _0x3d336b);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;qKV&quot; + &quot;mx&quot;] &#x3D; _0x2c1923[&quot;DfB&quot; + &quot;tS&quot;];</span><br><span class="line">    _0x676db2[&quot;smj&quot; + &quot;kw&quot;] &#x3D; _0x2c1923[&quot;JsK&quot; + &quot;bk&quot;];</span><br><span class="line">    _0x676db2[&quot;cqw&quot; + &quot;Qh&quot;] &#x3D; function (_0x50db75) &#123;</span><br><span class="line">        return _0x2c1923[&quot;fha&quot; + &quot;Jp&quot;](_0x50db75);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;MRA&quot; + &quot;zw&quot;] &#x3D; function (_0x16b21f, _0x33fd9f, _0x4b394b) &#123;</span><br><span class="line">        return _0x2c1923[&quot;Yxf&quot; + &quot;pg&quot;](_0x16b21f, _0x33fd9f, _0x4b394b);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;VLC&quot; + &quot;OW&quot;] &#x3D; function (_0x5bcbd5, _0x2d0cee, _0x3e387d) &#123;</span><br><span class="line">        return _0x2c1923[&quot;KWs&quot; + &quot;dR&quot;](_0x5bcbd5, _0x2d0cee, _0x3e387d);</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x676db2[&quot;SYr&quot; + &quot;hB&quot;] &#x3D; function (_0x3c4717, _0x496a53) &#123;</span><br><span class="line">        return _0x2c1923[&quot;Gqh&quot; + &quot;Ur&quot;](_0x3c4717, _0x496a53);</span><br><span class="line">    &#125;;</span><br><span class="line">    if (_0x2c1923[&quot;JAx&quot; + &quot;OR&quot;](_0x2c1923[&quot;COQ&quot; + &quot;Wa&quot;], _0x2c1923[&quot;COQ&quot; + &quot;Wa&quot;])) &#123;</span><br><span class="line">        var _0x6ee9d8 &#x3D; _0x2c1923[&quot;rfJ&quot; + &quot;MM&quot;](_0x35cbe4, this, function () &#123;</span><br><span class="line">            var _0x2f0878 &#x3D; &#123;&#125;;</span><br><span class="line">            _0x2f0878[&quot;nQU&quot; + &quot;fV&quot;] &#x3D; _0x676db2[&quot;zmh&quot; + &quot;zz&quot;];</span><br><span class="line">            _0x2f0878[&quot;zPo&quot; + &quot;jC&quot;] &#x3D; function (_0x2f55d1, _0x100e5a) &#123;</span><br><span class="line">                return _0x676db2[&quot;Gbk&quot; + &quot;oY&quot;](_0x2f55d1, _0x100e5a);</span><br><span class="line">            &#125;;</span><br><span class="line">            _0x2f0878[&quot;jQt&quot; + &quot;lW&quot;] &#x3D; _0x676db2[&quot;pvW&quot; + &quot;KS&quot;];</span><br><span class="line">            _0x2f0878[&quot;ZTr&quot; + &quot;YJ&quot;] &#x3D; _0x676db2[&quot;YYF&quot; + &quot;qH&quot;];</span><br><span class="line">            _0x2f0878[&quot;ngu&quot; + &quot;BX&quot;] &#x3D; _0x676db2[&quot;Sfa&quot; + &quot;kl&quot;];</span><br><span class="line">            _0x2f0878[&quot;zVE&quot; + &quot;nH&quot;] &#x3D; function (_0x52ff30, _0x37e1a1) &#123;</span><br><span class="line">                return _0x676db2[&quot;gUm&quot; + &quot;VG&quot;](_0x52ff30, _0x37e1a1);</span><br><span class="line">            &#125;;</span><br><span class="line">            if (_0x676db2[&quot;OPB&quot; + &quot;pQ&quot;](_0x676db2[&quot;BjH&quot; + &quot;Sb&quot;], _0x676db2[&quot;BjH&quot; + &quot;Sb&quot;])) &#123;</span><br><span class="line">                var _0x1cf61c &#x3D; function () &#123;</span><br><span class="line">                    if (_0x2f0878[&quot;zPo&quot; + &quot;jC&quot;](_0x2f0878[&quot;jQt&quot; + &quot;lW&quot;], _0x2f0878[&quot;jQt&quot; + &quot;lW&quot;])) &#123;</span><br><span class="line">                        while (1) &#123;</span><br><span class="line">                            console[&quot;log&quot;](_0x2f0878[&quot;nQU&quot; + &quot;fV&quot;]);</span><br><span class="line">                            debugger;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        var _0x27e4dc &#x3D; _0x1cf61c[&quot;con&quot; + &quot;str&quot; + &quot;uct&quot; + &quot;or&quot;](_0x2f0878[&quot;ZTr&quot; + &quot;YJ&quot;])()[&quot;com&quot; + &quot;pil&quot; + &quot;e&quot;](_0x2f0878[&quot;ngu&quot; + &quot;BX&quot;]);</span><br><span class="line">                        return !_0x27e4dc[&quot;tes&quot; + &quot;t&quot;](_0x6ee9d8);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                return _0x676db2[&quot;PTQ&quot; + &quot;Ui&quot;](_0x1cf61c);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                tVQxMC[&quot;zVE&quot; + &quot;nH&quot;](result, &quot;0&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        _0x2c1923[&quot;fha&quot; + &quot;Jp&quot;](_0x6ee9d8);</span><br><span class="line">        (function () &#123;</span><br><span class="line">            var _0x389680 &#x3D; &#123;&#125;;</span><br><span class="line">            _0x389680[&quot;AOX&quot; + &quot;GX&quot;] &#x3D; _0x676db2[&quot;YYF&quot; + &quot;qH&quot;];</span><br><span class="line">            _0x389680[&quot;VzQ&quot; + &quot;tD&quot;] &#x3D; _0x676db2[&quot;Sfa&quot; + &quot;kl&quot;];</span><br><span class="line">            _0x389680[&quot;Iet&quot; + &quot;SJ&quot;] &#x3D; function (_0x35b105, _0x49691e) &#123;</span><br><span class="line">                return _0x676db2[&quot;kTD&quot; + &quot;PO&quot;](_0x35b105, _0x49691e);</span><br><span class="line">            &#125;;</span><br><span class="line">            _0x389680[&quot;vne&quot; + &quot;Zn&quot;] &#x3D; function (_0x4645ab, _0x1fe59e) &#123;</span><br><span class="line">                return _0x676db2[&quot;YEP&quot; + &quot;pq&quot;](_0x4645ab, _0x1fe59e);</span><br><span class="line">            &#125;;</span><br><span class="line">            _0x389680[&quot;aAC&quot; + &quot;QE&quot;] &#x3D; function (_0x39bf1f, _0x1e7a33) &#123;</span><br><span class="line">                return _0x676db2[&quot;KLK&quot; + &quot;fL&quot;](_0x39bf1f, _0x1e7a33);</span><br><span class="line">            &#125;;</span><br><span class="line">            _0x389680[&quot;wIa&quot; + &quot;VK&quot;] &#x3D; _0x676db2[&quot;ISp&quot; + &quot;bk&quot;];</span><br><span class="line">            _0x389680[&quot;cIl&quot; + &quot;vA&quot;] &#x3D; _0x676db2[&quot;tWb&quot; + &quot;gg&quot;];</span><br><span class="line">            _0x389680[&quot;hJS&quot; + &quot;Up&quot;] &#x3D; _0x676db2[&quot;lKc&quot; + &quot;bf&quot;];</span><br><span class="line">            _0x389680[&quot;Xie&quot; + &quot;LS&quot;] &#x3D; _0x676db2[&quot;XMC&quot; + &quot;Ur&quot;];</span><br><span class="line">            _0x389680[&quot;fxT&quot; + &quot;ZL&quot;] &#x3D; function (_0x345d86, _0x51eceb) &#123;</span><br><span class="line">                return _0x676db2[&quot;YEP&quot; + &quot;pq&quot;](_0x345d86, _0x51eceb);</span><br><span class="line">            &#125;;</span><br><span class="line">            _0x389680[&quot;wtX&quot; + &quot;zc&quot;] &#x3D; _0x676db2[&quot;dfK&quot; + &quot;OC&quot;];</span><br><span class="line">            _0x389680[&quot;zEr&quot; + &quot;ej&quot;] &#x3D; function (_0x210ca1, _0x5abe82) &#123;</span><br><span class="line">                return _0x676db2[&quot;egT&quot; + &quot;Fi&quot;](_0x210ca1, _0x5abe82);</span><br><span class="line">            &#125;;</span><br><span class="line">            _0x389680[&quot;HEu&quot; + &quot;mW&quot;] &#x3D; _0x676db2[&quot;UpF&quot; + &quot;Fn&quot;];</span><br><span class="line">            _0x389680[&quot;Yma&quot; + &quot;PV&quot;] &#x3D; function (_0x4285c1, _0x268f50) &#123;</span><br><span class="line">                return _0x676db2[&quot;Xqa&quot; + &quot;uV&quot;](_0x4285c1, _0x268f50);</span><br><span class="line">            &#125;;</span><br><span class="line">            _0x389680[&quot;xhS&quot; + &quot;Ho&quot;] &#x3D; _0x676db2[&quot;iiW&quot; + &quot;bz&quot;];</span><br><span class="line">            _0x389680[&quot;vWk&quot; + &quot;MG&quot;] &#x3D; _0x676db2[&quot;Teo&quot; + &quot;Zg&quot;];</span><br><span class="line">            _0x389680[&quot;kmc&quot; + &quot;dm&quot;] &#x3D; function (_0x5ba947, _0x533ea6) &#123;</span><br><span class="line">                return _0x676db2[&quot;YEP&quot; + &quot;pq&quot;](_0x5ba947, _0x533ea6);</span><br><span class="line">            &#125;;</span><br><span class="line">            _0x389680[&quot;UUP&quot; + &quot;CN&quot;] &#x3D; function (_0x575e79, _0x497b6c) &#123;</span><br><span class="line">                return _0x676db2[&quot;gZh&quot; + &quot;Wd&quot;](_0x575e79, _0x497b6c);</span><br><span class="line">            &#125;;</span><br><span class="line">            _0x389680[&quot;tAf&quot; + &quot;jG&quot;] &#x3D; _0x676db2[&quot;YmC&quot; + &quot;AF&quot;];</span><br><span class="line">            _0x389680[&quot;awM&quot; + &quot;Du&quot;] &#x3D; function (_0x12d63a) &#123;</span><br><span class="line">                return _0x676db2[&quot;NJQ&quot; + &quot;wb&quot;](_0x12d63a);</span><br><span class="line">            &#125;;</span><br><span class="line">            if (_0x676db2[&quot;gZh&quot; + &quot;Wd&quot;](_0x676db2[&quot;IxU&quot; + &quot;UW&quot;], _0x676db2[&quot;IxU&quot; + &quot;UW&quot;])) &#123;</span><br><span class="line">                var _0x46c9da &#x3D; test[&quot;con&quot; + &quot;str&quot; + &quot;uct&quot; + &quot;or&quot;](QaQCGf[&quot;AOX&quot; + &quot;GX&quot;])()[&quot;com&quot; + &quot;pil&quot; + &quot;e&quot;](QaQCGf[&quot;VzQ&quot; + &quot;tD&quot;]);</span><br><span class="line">                return !_0x46c9da[&quot;tes&quot; + &quot;t&quot;](_0xb4a243);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                _0x676db2[&quot;VaY&quot; + &quot;Gr&quot;](_0x3be8cd, this, function () &#123;</span><br><span class="line">                    var _0x3b4193 &#x3D; &#123;&#125;;</span><br><span class="line">                    _0x3b4193[&quot;IzZ&quot; + &quot;kU&quot;] &#x3D; function (_0x35a2d1, _0x5103da) &#123;</span><br><span class="line">                        return _0x389680[&quot;Iet&quot; + &quot;SJ&quot;](_0x35a2d1, _0x5103da);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    _0x3b4193[&quot;pIC&quot; + &quot;da&quot;] &#x3D; function (_0x2041c6, _0x55cf4b) &#123;</span><br><span class="line">                        return _0x389680[&quot;Iet&quot; + &quot;SJ&quot;](_0x2041c6, _0x55cf4b);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    _0x3b4193[&quot;iAb&quot; + &quot;GP&quot;] &#x3D; function (_0x93c757, _0x5c5049) &#123;</span><br><span class="line">                        return _0x389680[&quot;vne&quot; + &quot;Zn&quot;](_0x93c757, _0x5c5049);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    if (_0x389680[&quot;aAC&quot; + &quot;QE&quot;](_0x389680[&quot;wIa&quot; + &quot;VK&quot;], _0x389680[&quot;cIl&quot; + &quot;vA&quot;])) &#123;</span><br><span class="line">                        return _0x3b4193[&quot;IzZ&quot; + &quot;kU&quot;](_0x539398, _0x3b4193[&quot;pIC&quot; + &quot;da&quot;](_0x34aebb, _0x5f13ed));</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        var _0x372fe3 &#x3D; new RegExp(_0x389680[&quot;hJS&quot; + &quot;Up&quot;]);</span><br><span class="line">                        var _0x21e399 &#x3D; new RegExp(_0x389680[&quot;Xie&quot; + &quot;LS&quot;], &quot;i&quot;);</span><br><span class="line">                        var _0x36d1ec &#x3D; _0x389680[&quot;fxT&quot; + &quot;ZL&quot;]($dbsm_0x598564, _0x389680[&quot;wtX&quot; + &quot;zc&quot;]);</span><br><span class="line">                        if (!_0x372fe3[&quot;tes&quot; + &quot;t&quot;](_0x389680[&quot;zEr&quot; + &quot;ej&quot;](_0x36d1ec, _0x389680[&quot;HEu&quot; + &quot;mW&quot;])) || !_0x21e399[&quot;tes&quot; + &quot;t&quot;](_0x389680[&quot;Yma&quot; + &quot;PV&quot;](_0x36d1ec, _0x389680[&quot;xhS&quot; + &quot;Ho&quot;]))) &#123;</span><br><span class="line">                            if (_0x389680[&quot;aAC&quot; + &quot;QE&quot;](_0x389680[&quot;vWk&quot; + &quot;MG&quot;], _0x389680[&quot;vWk&quot; + &quot;MG&quot;])) &#123;</span><br><span class="line">                                _0x389680[&quot;kmc&quot; + &quot;dm&quot;](_0x36d1ec, &quot;0&quot;);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                if (ret) &#123;</span><br><span class="line">                                    return debuggerProtection;</span><br><span class="line">                                &#125; else &#123;</span><br><span class="line">                                    itNjFl[&quot;iAb&quot; + &quot;GP&quot;](debuggerProtection, 0);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            if (_0x389680[&quot;UUP&quot; + &quot;CN&quot;](_0x389680[&quot;tAf&quot; + &quot;jG&quot;], _0x389680[&quot;tAf&quot; + &quot;jG&quot;])) &#123;</span><br><span class="line">                                var _0x54f102,</span><br><span class="line">                                    _0x2d235e,</span><br><span class="line">                                    _0x4141b3,</span><br><span class="line">                                    _0x15cf75,</span><br><span class="line">                                    _0x3979a1,</span><br><span class="line">                                    _0x1b2486 &#x3D; 0,</span><br><span class="line">                                    _0x32b74e &#x3D; -0,</span><br><span class="line">                                    _0x13f848 &#x3D; -0,</span><br><span class="line">                                    _0x117ded &#x3D; 0;</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                _0x389680[&quot;awM&quot; + &quot;Du&quot;]($dbsm_0x598564);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br><span class="line">        _0x2c1923[&quot;fha&quot; + &quot;Jp&quot;](_0x2e765b);</span><br><span class="line">        qz &#x3D; [10, 99, 111, 110, 115, 111, 108, 101, 32, 61, 32, 110, 101, 119, 32, 79, 98, 106, 101, 99, 116, 40, 41, 10, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 115, 41, 32, 123, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 49, 41, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 40, 105, 61, 48, 59, 105, 60, 49, 49, 48, 48, 48, 48, 48, 59, 105, 43, 43, 41, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 105, 115, 116, 111, 114, 121, 46, 112, 117, 115, 104, 83, 116, 97, 116, 101, 40, 48, 44, 48, 44, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 10, 125, 10, 99, 111, 110, 115, 111, 108, 101, 46, 116, 111, 83, 116, 114, 105, 110, 103, 32, 61, 32, 39, 91, 111, 98, 106, 101, 99, 116, 32, 79, 98, 106, 101, 99, 116, 93, 39, 10, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 46, 116, 111, 83, 116, 114, 105, 110, 103, 32, 61, 32, 39, 402, 32, 116, 111, 83, 116, 114, 105, 110, 103, 40, 41, 32, 123, 32, 91, 110, 97, 116, 105, 118, 101, 32, 99, 111, 100, 101, 93, 32, 125, 39, 10];</span><br><span class="line">        _0x2c1923[&quot;Gqh&quot; + &quot;Ur&quot;](eval, _0x2c1923[&quot;Gqh&quot; + &quot;Ur&quot;](_0x479444, qz));</span><br><span class="line">        try &#123;</span><br><span class="line">            if (_0x2c1923[&quot;pkn&quot; + &quot;vA&quot;](_0x2c1923[&quot;vib&quot; + &quot;ZR&quot;], _0x2c1923[&quot;vib&quot; + &quot;ZR&quot;])) &#123;</span><br><span class="line">                return function (_0x19e254) &#123; &#125;[&quot;con&quot; + &quot;str&quot; + &quot;uct&quot; + &quot;or&quot;](qagLji[&quot;qKV&quot; + &quot;mx&quot;])[&quot;app&quot; + &quot;ly&quot;](qagLji[&quot;smj&quot; + &quot;kw&quot;]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (global) &#123;</span><br><span class="line">                    if (_0x2c1923[&quot;sMz&quot; + &quot;OI&quot;](_0x2c1923[&quot;Czp&quot; + &quot;mr&quot;], _0x2c1923[&quot;jXI&quot; + &quot;QF&quot;])) &#123;</span><br><span class="line">                        return _0x2c1923[&quot;ltM&quot; + &quot;vm&quot;](_0x2c1923[&quot;Fut&quot; + &quot;Nn&quot;](_0x5f13ed, _0x52cae0), _0x2c1923[&quot;ytp&quot; + &quot;Jc&quot;](_0x5f13ed, _0x2c1923[&quot;cnC&quot; + &quot;ig&quot;](32, _0x52cae0)));</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        console[&quot;log&quot;](_0x2c1923[&quot;kBz&quot; + &quot;Ka&quot;]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (_0x2c1923[&quot;osL&quot; + &quot;ze&quot;](_0x2c1923[&quot;sPt&quot; + &quot;gu&quot;], _0x2c1923[&quot;Zkz&quot; + &quot;LF&quot;])) &#123;</span><br><span class="line">                        var _0x176277,</span><br><span class="line">                            _0x1aa798 &#x3D; &quot;&quot;,</span><br><span class="line">                            _0x14ae63 &#x3D; _0x2c1923[&quot;tui&quot; + &quot;zA&quot;](32, _0x5f13ed[&quot;len&quot; + &quot;gth&quot;]);</span><br><span class="line">                        for (_0x176277 &#x3D; 0; _0x2c1923[&quot;fST&quot; + &quot;ws&quot;](_0x176277, _0x14ae63); _0x176277 +&#x3D; 8) _0x1aa798 +&#x3D; String[&quot;fro&quot; + &quot;mCh&quot; + &quot;arC&quot; + &quot;ode&quot;](_0x2c1923[&quot;mPE&quot; + &quot;nw&quot;](_0x2c1923[&quot;YcE&quot; + &quot;yA&quot;](_0x5f13ed[_0x2c1923[&quot;auH&quot; + &quot;KH&quot;](_0x176277, 5)], _0x2c1923[&quot;uBC&quot; + &quot;tw&quot;](_0x176277, 32)), 255));</span><br><span class="line">                        return _0x1aa798;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        while (1) &#123;</span><br><span class="line">                            if (_0x2c1923[&quot;xso&quot; + &quot;nc&quot;](_0x2c1923[&quot;QAx&quot; + &quot;NH&quot;], _0x2c1923[&quot;ZsR&quot; + &quot;Il&quot;])) &#123;</span><br><span class="line">                                _0x676db2[&quot;cqw&quot; + &quot;Qh&quot;](_0x10cbb5);</span><br><span class="line">                                return _0x52cae0 ? _0x4d6ae5 ? _0x676db2[&quot;MRA&quot; + &quot;zw&quot;](_0x1196c7, _0x52cae0, _0x5f13ed) : _0x676db2[&quot;VLC&quot; + &quot;OW&quot;](y, _0x52cae0, _0x5f13ed) : _0x4d6ae5 ? _0x676db2[&quot;YEP&quot; + &quot;pq&quot;](_0x5c4a33, _0x5f13ed) : _0x676db2[&quot;SYr&quot; + &quot;hB&quot;](_0x1a412b, _0x5f13ed);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                console[&quot;log&quot;](_0x2c1923[&quot;kBz&quot; + &quot;Ka&quot;]);</span><br><span class="line">                                debugger;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (_0x4cd00c) &#123;</span><br><span class="line">            if (_0x2c1923[&quot;pkn&quot; + &quot;vA&quot;](_0x2c1923[&quot;yKg&quot; + &quot;SK&quot;], _0x2c1923[&quot;RJU&quot; + &quot;Xr&quot;])) &#123;</span><br><span class="line">                return navigator[&quot;ven&quot; + &quot;dor&quot; + &quot;Sub&quot;];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                PJTCmw[&quot;fha&quot; + &quot;Jp&quot;]($dbsm_0x598564);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        var _0x316c04 &#x3D; firstCall ? function () &#123;</span><br><span class="line">            if (fn) &#123;</span><br><span class="line">                var _0xc8cc17 &#x3D; fn[&quot;app&quot; + &quot;ly&quot;](context, arguments);</span><br><span class="line">                fn &#x3D; null;</span><br><span class="line">                return _0xc8cc17;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; : function () &#123; &#125;;</span><br><span class="line">        firstCall &#x3D; ![];</span><br><span class="line">        return _0x316c04;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过分析<code>_0x10cbb5</code>函数逻辑，首先定义对象<code>_0x676db2</code>，并对应定义对象中的函数，通过在函数开头加上debugger，断点调试发现进入<code>_0x2c1923[&quot;fha&quot; + &quot;Jp&quot;](_0x6ee9d8)</code>时卡死，可能是触发定时器循环调用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_0x2c1923[&quot;fha&quot; + &quot;Jp&quot;] &#x3D; function (_0x5ec0e7) &#123;</span><br><span class="line">    return _0x5ec0e7();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以在调用<code>_0x6ee9d8()</code>时卡死，在该方法中加入<code>debugger</code>重新调用<code>_0x10cbb5()</code>进入<code>return _0x676db2[&quot;PTQ&quot; + &quot;Ui&quot;](_0x1cf61c)</code>后卡死，由于<code>_0x676db2[&quot;PTQ&quot; + &quot;Ui&quot;](_0x1cf61c)</code>即<code>_0x2c1923[&quot;fha&quot; + &quot;Jp&quot;](_0x1cf61c)</code>即<code>_0x1cf61c()</code>，在<code>_0x1cf61c</code>方法中加上debugger重新跟踪</p><p><img src="/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E5%8A%A8%E6%80%81cookie/image-20210906204936794-1630936462478.png" alt="image-20210906204936794"></p><p>由于上面的if表达式返回false，所以总是会进入<code>return !_0x27e4dc[&quot;tes&quot; + &quot;t&quot;](_0x6ee9d8)</code>，而<code>_0x27e4dc</code>中的<code>_0x1cf61c</code>函数不接受参数，该逻辑对cookie加密没有任何影响，未传参 未改变全局变量 无返回。同理分析<code>_0x2c1923[&quot;fha&quot; + &quot;Jp&quot;](_0x2e765b);</code>未传参 未改变全局变量 无返回，唯一出现eval的位置就是<code>_0x2c1923[&quot;Gqh&quot; + &quot;Ur&quot;](eval, _0x2c1923[&quot;Gqh&quot; + &quot;Ur&quot;](_0x479444, qz));</code>，即<code>eval(_0x479444(qz))</code>的出来一串字符串罢了。所以<code>_0x10cbb5()</code>即返回空。</p><p>接下来分析<code>cookie = &quot;m&quot;+ _0x10cbb5()+ &quot;=&quot;+ _0x40ee99(_0x59d742)+ &quot;|&quot;+ _0x59d742+ &quot;; p&quot; + &quot;ath&quot; + &quot;=/&quot;</code>中的<code> _0x40ee99(_0x59d742)</code>和<code>_0x59d742</code>，根据抓包结果<code>m=dd5572e825610043a17c791d1eadc601|1607590427000</code>，<code>_0x59d742</code>在<code>function _0x94ebae(_0x59d742, _0x426e6a)</code>中没有发现定义，只能获取该方法的引用位置，<code>_0x2c1923[&quot;duF&quot; + &quot;Bq&quot;](_0x94ebae, _0x2c1923[&quot;gvf&quot; + &quot;Ex&quot;](_0x4bd99c))</code>,即<code>_0x94ebae(_0x4bd99c())</code>,而<code>_0x4bd99c</code>函数中返回了<code>Date[&quot;par&quot; + &quot;se&quot;](new Date())</code>,所以<code>_0x59d742</code>为时间戳。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数为时间戳，其他都为null</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_0x40ee99</span>(<span class="params">_0x37e3fa, _0x29817b, _0x399d9b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_0x2c1923[<span class="string">"Xig"</span> + <span class="string">"eA"</span>](_0x2c1923[<span class="string">"Ezx"</span> + <span class="string">"AN"</span>], _0x2c1923[<span class="string">"nav"</span> + <span class="string">"HD"</span>])) &#123;</span><br><span class="line">        _0x2c1923[<span class="string">"vry"</span> + <span class="string">"dI"</span>](_0x10cbb5);</span><br><span class="line">        <span class="keyword">return</span> _0x29817b ? _0x399d9b ? _0x2c1923[<span class="string">"OXT"</span> + <span class="string">"ft"</span>](_0x1196c7, _0x29817b, _0x37e3fa) : _0x2c1923[<span class="string">"wIK"</span> + <span class="string">"US"</span>](y, _0x29817b, _0x37e3fa) : _0x399d9b ? _0x2c1923[<span class="string">"jJy"</span> + <span class="string">"be"</span>](_0x5c4a33, _0x37e3fa) : _0x2c1923[<span class="string">"yqw"</span> + <span class="string">"db"</span>](_0x1a412b, _0x37e3fa);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (global) &#123;</span><br><span class="line">            <span class="built_in">console</span>[<span class="string">"log"</span>](_0x2c1923[<span class="string">"kBz"</span> + <span class="string">"Ka"</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>[<span class="string">"log"</span>](_0x2c1923[<span class="string">"kBz"</span> + <span class="string">"Ka"</span>]);</span><br><span class="line">                <span class="keyword">debugger</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过分析大三元表达式得<code>_0x2c1923[&quot;yqw&quot; + &quot;db&quot;](_0x1a412b, _0x37e3fa)</code>即<code>_0x1a412b(_0x37e3fa)</code>，继续分析扣取<code>_0x1a412b</code>函数，过程省略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取时间戳</span><br><span class="line">function _0x59d742(_0x53a223, _0xc9f38e) &#123;</span><br><span class="line">   return Date[&quot;parse&quot;](new Date());</span><br><span class="line"> &#125;</span><br><span class="line">&#x2F;&#x2F; 这是取到加密值</span><br><span class="line">function _0x83032f(_0x37e3fa, _0x281a82) &#123;</span><br><span class="line">    return &quot;m&quot;+ _0x10cbb5()+ &quot;&#x3D;&quot;+ _0x1a412b(_0x37e3fa)+ &quot;|&quot;+ _0x37e3fa+ &quot;; p&quot; + &quot;ath&quot; + &quot;&#x3D;&#x2F;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 使用函数去调用代码</span><br><span class="line">function get_m_value()&#123;</span><br><span class="line">    return _0x83032f(_0x59d742()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ob混淆专解测试版V0-1"><a href="#ob混淆专解测试版V0-1" class="headerlink" title="ob混淆专解测试版V0.1"></a><a href="http://tool.yuanrenxue.com/decode_obfuscator" target="_blank" rel="noopener">ob混淆专解测试版V0.1</a></h2><p>使用<a href="http://tool.yuanrenxue.com/decode_obfuscator" target="_blank" rel="noopener">ob混淆专解测试版V0.1</a>反混淆第一个match/2返回的js代码去掉script标签</p><p><img src="/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E5%8A%A8%E6%80%81cookie/ob%E5%8F%8D%E6%B7%B7%E6%B7%86-1630936462478.png" alt="ob反混淆"></p><p>将解析完的js放到notepad++中进行js format，查找eval，setInterval，document等函数或者cookie等关键字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">V</span>(<span class="params">Y, Z, a0</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 空参数  </span></span><br><span class="line">    M();</span><br><span class="line">    <span class="keyword">return</span> Z ? a0 ? H(Z, Y) : y(Z, Y) : a0 ? T(Y) : U(Y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Y=X()时间戳，Z无用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">W</span>(<span class="params">Y, Z</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取cookie  </span></span><br><span class="line">    <span class="built_in">document</span>[<span class="string">"cookie"</span>] = <span class="string">"m"</span> + M() + <span class="string">"="</span> + V(Y) + <span class="string">"|"</span> + Y + <span class="string">"; path=/"</span>;</span><br><span class="line">    <span class="comment">// 带上cookie重新刷新页面返回真实网页并发送ajax请求获取json数据</span></span><br><span class="line">    location[<span class="string">"reload"</span>]();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 时间戳</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">X</span>(<span class="params">Y, Z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>[<span class="string">"parse"</span>](<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最先执行js</span></span><br><span class="line">  W(X());</span><br></pre></td></tr></table></figure><p>查看W和V中的M(),都没有传参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M</span>(<span class="params">Y, Z</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 只定义函数并无更新值</span></span><br><span class="line">    <span class="keyword">var</span> a2 = B(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> a5 = &#123;</span><br><span class="line">        <span class="string">"JLTiy"</span>: <span class="string">"return /\" + this + \"/"</span>,</span><br><span class="line">        <span class="string">"uynWF"</span>: <span class="string">"^([^ ]+( +[^ ]+)+)+[^ ]&#125;"</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> a7 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a8 = a7[<span class="string">"constructor"</span>](a5[<span class="string">"JLTiy"</span>])()[<span class="string">"compile"</span>](a5[<span class="string">"uynWF"</span>]);</span><br><span class="line">        <span class="keyword">return</span> !a8[<span class="string">"test"</span>](a2);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> a7();</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 未传参 未改变全局变量 无返回</span></span><br><span class="line">    a2();</span><br><span class="line"><span class="comment">// 未传参 未改变全局变量 无返回</span></span><br><span class="line">    K();</span><br><span class="line">    qz = [<span class="number">10</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">61</span>, <span class="number">32</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">10</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">46</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">32</span>, <span class="number">61</span>, <span class="number">32</span>, <span class="number">102</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">32</span>, <span class="number">40</span>, <span class="number">115</span>, <span class="number">41</span>, <span class="number">32</span>, <span class="number">123</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">40</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">123</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">102</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">40</span>, <span class="number">105</span>, <span class="number">61</span>, <span class="number">48</span>, <span class="number">59</span>, <span class="number">105</span>, <span class="number">60</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">59</span>, <span class="number">105</span>, <span class="number">43</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">123</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">46</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">40</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">105</span>, <span class="number">41</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">125</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">125</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">125</span>, <span class="number">10</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">46</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">32</span>, <span class="number">61</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">91</span>, <span class="number">111</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">32</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">93</span>, <span class="number">39</span>, <span class="number">10</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">46</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">46</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">32</span>, <span class="number">61</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">402</span>, <span class="number">32</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">32</span>, <span class="number">123</span>, <span class="number">32</span>, <span class="number">91</span>, <span class="number">110</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">93</span>, <span class="number">32</span>, <span class="number">125</span>, <span class="number">39</span>, <span class="number">10</span>];</span><br><span class="line">    <span class="built_in">eval</span>(L(qz));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (global) &#123;</span><br><span class="line">        <span class="built_in">console</span>[<span class="string">"log"</span>](<span class="string">"\u4EBA\u751F\u82E6\u77ED\uFF0C\u4F55\u5FC5python\uFF1F"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>[<span class="string">"log"</span>](<span class="string">"\u4EBA\u751F\u82E6\u77ED\uFF0C\u4F55\u5FC5python\uFF1F"</span>);</span><br><span class="line">          <span class="keyword">debugger</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (a5) &#123;</span><br><span class="line">      <span class="keyword">return</span> navigator[<span class="string">"vendorSub"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过WT-JS查看L(qz)，并没有对cookie进行影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L</span>(<span class="params">Y, Z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a0 = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> a1 = <span class="number">0</span>; a1 &lt; Y[<span class="string">"length"</span>]; a1++) &#123;</span><br><span class="line">    a0 += <span class="built_in">String</span>[<span class="string">"fromCharCode"</span>](Y[a1]);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">return</span> a0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/03/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E5%8A%A8%E6%80%81cookie/L%E5%87%BD%E6%95%B0-1630936462478.png" alt="L函数"></p><p><code>navigator[&quot;vendorSub&quot;]</code>放到console返回””,得出M()结论不返回或者返回””,也没修改变量参数，去除无用首行<code>(function $c(k) {</code>和尾行<code>})()</code>;，去除最先执行<code>W(X());</code>，去除W内的<code>location[&quot;reload&quot;]();</code>，将<code>document[&quot;cookie&quot;] =</code>改为<code>return </code>，去除无用<code>setInterval(M(), 500);</code>,去除W函数无用Z,M()为null也可以去除，删除无返回js，因为会报test未定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无返回   </span></span><br><span class="line"><span class="keyword">var</span> a2 = B(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a5 = &#123;</span><br><span class="line">    <span class="string">"JLTiy"</span>: <span class="string">"return /\" + this + \"/"</span>,</span><br><span class="line">    <span class="string">"uynWF"</span>: <span class="string">"^([^ ]+( +[^ ]+)+)+[^ ]&#125;"</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a7 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a8 = a7[<span class="string">"constructor"</span>](a5[<span class="string">"JLTiy"</span>])()[<span class="string">"compile"</span>](a5[<span class="string">"uynWF"</span>]);</span><br><span class="line">    <span class="keyword">return</span> !a8[<span class="string">"test"</span>](a2);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a7();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 未传参 未改变全局变量 无返回</span></span><br><span class="line">a2();</span><br></pre></td></tr></table></figure><p>新增var navigator = {};，使用鬼鬼调试工具，执行<code>W(X());</code>，核心js如下2.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> navigator = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M</span>(<span class="params">Y, Z</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未传参 未改变全局变量 无返回</span></span><br><span class="line">    K();</span><br><span class="line">    qz = [<span class="number">10</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">61</span>, <span class="number">32</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">10</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">46</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">32</span>, <span class="number">61</span>, <span class="number">32</span>, <span class="number">102</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">32</span>, <span class="number">40</span>, <span class="number">115</span>, <span class="number">41</span>, <span class="number">32</span>, <span class="number">123</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">40</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">123</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">102</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">40</span>, <span class="number">105</span>, <span class="number">61</span>, <span class="number">48</span>, <span class="number">59</span>, <span class="number">105</span>, <span class="number">60</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">59</span>, <span class="number">105</span>, <span class="number">43</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">123</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">46</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">40</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">105</span>, <span class="number">41</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">125</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">125</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">125</span>, <span class="number">10</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">46</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">32</span>, <span class="number">61</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">91</span>, <span class="number">111</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">32</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">93</span>, <span class="number">39</span>, <span class="number">10</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">46</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">46</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">32</span>, <span class="number">61</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">402</span>, <span class="number">32</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">32</span>, <span class="number">123</span>, <span class="number">32</span>, <span class="number">91</span>, <span class="number">110</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">93</span>, <span class="number">32</span>, <span class="number">125</span>, <span class="number">39</span>, <span class="number">10</span>];</span><br><span class="line">    <span class="built_in">eval</span>(L(qz));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (global) &#123;</span><br><span class="line">            <span class="built_in">console</span>[<span class="string">"log"</span>](<span class="string">"\u4EBA\u751F\u82E6\u77ED\uFF0C\u4F55\u5FC5python\uFF1F"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>[<span class="string">"log"</span>](<span class="string">"\u4EBA\u751F\u82E6\u77ED\uFF0C\u4F55\u5FC5python\uFF1F"</span>);</span><br><span class="line">                <span class="keyword">debugger</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (a5) &#123;</span><br><span class="line">        <span class="keyword">return</span> navigator[<span class="string">"vendorSub"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">V</span>(<span class="params">Y, Z, a0</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 空参数</span></span><br><span class="line">    M();</span><br><span class="line">    <span class="keyword">return</span> Z ? a0 ? H(Z, Y) : y(Z, Y) : a0 ? T(Y) : U(Y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Y=X()时间戳，Z无用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">W</span>(<span class="params">Y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"m"</span> + <span class="string">"="</span> + V(Y) + <span class="string">"|"</span> + Y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span>(<span class="params">Y, Z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>[<span class="string">"parse"</span>](<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> W(X());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(page_num,param)</span>:</span></span><br><span class="line">    url = <span class="string">"http://match.yuanrenxue.com/api/match/2?page=&#123;&#125;"</span>.format(page_num)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'match.yuanrenxue.com'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>:<span class="string">'http://match.yuanrenxue.com/match/2'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'yuanrenxue.project'</span>,</span><br><span class="line">        <span class="string">'X-Requested-With'</span>:<span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>: param</span><br><span class="line">    &#125;</span><br><span class="line">    resonse = requests.get(url=url,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> resonse.json()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_m_value</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'2.js'</span>,encoding=<span class="string">'utf-8'</span>,mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        JsData = f.read()</span><br><span class="line">    psd = execjs.compile(JsData).call(<span class="string">'request'</span>)</span><br><span class="line">    psd = psd.replace(<span class="string">'丨'</span>,<span class="string">'%E4%B8%A8'</span>)</span><br><span class="line">    print(<span class="string">'this request parameters is :'</span>,psd)</span><br><span class="line">    <span class="keyword">return</span> psd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sum_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> page_num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        res = get_page(page_num,calculate_m_value())</span><br><span class="line">        data = [__[<span class="string">'value'</span>] <span class="keyword">for</span> __ <span class="keyword">in</span> res[<span class="string">'data'</span>]]</span><br><span class="line">        print(data)</span><br><span class="line">        sum_num+=sum(data)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'the answer is :'</span>,sum_num)</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猿人学之js混淆源码乱码</title>
      <link href="/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/"/>
      <url>/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://match.yuanrenxue.com/match/1" target="_blank" rel="noopener">https://match.yuanrenxue.com/match/1</a></p><p>抓取所有（5页）机票的价格，并计算所有机票价格的平均值，填入答案。</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>打开控制台开始抓包，出现无限debugger循环,可以通过Never pause here或Fiddler过掉。</p><p><img src="/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/debugger-1630908473097.png" alt="无限debugger"></p><p>方案一：在第2行选中右键Never pause here</p><p><img src="/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/never-pause-1630908473098.png" alt="never-pause-here过debugger"></p><p>方案二：通过查看该debug的js名为uzt.js，本地创建uzt.js并修改其中的jsFiddler的AutoResponder下，选中Enable automatic reaponses 和Unmatched requests passthrough</p><p><img src="/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/fiddler-1630908473098.png" alt="fiddler过debugger"></p><p>通过翻页获取请求<code>https://match.yuanrenxue.com/api/match/1</code>，参数得其中1607516709为秒时间戳，即time.time()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page: 2</span><br><span class="line">m: 3ddf4f4e72bd84562a0e0104d425a791丨1607657864</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>搜索丨中文竖线，未果，目测做了js混淆加密。添加XHR断点<code>api/match/1</code>跟踪调用栈到request发现被源码被混淆加密。</p><p><img src="/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/Users/JDD/Desktop/tmp/a/image-20210906132754997.png" alt="image-20210906132754997"></p><p>将该页面js拷贝下来，存到demo.js中，开始反混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitee.com&#x2F;virjar&#x2F;jsrepair.git</span><br><span class="line">cd jsrepair</span><br><span class="line">npm i</span><br><span class="line">node cli.js demo.js  开始反混淆</span><br></pre></td></tr></table></figure><p>反混淆结果如下，<code>_0x2268f9</code>为毫秒时间戳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">window[&#39;url&#39;] &#x3D; &#39;&#x2F;api&#x2F;match&#x2F;1&#39;;</span><br><span class="line">request &#x3D; function () &#123;</span><br><span class="line">    var _0x2268f9 &#x3D; Date[&#39;parse&#39;](new Date()) + (16798545 + -72936737 + 156138192), _0x57feae &#x3D; oo0O0(_0x2268f9[&#39;toString&#39;]()) + window[&#39;f&#39;];</span><br><span class="line">    const _0x5d83a3 &#x3D; &#123;&#125;;</span><br><span class="line">    _0x5d83a3[&#39;page&#39;] &#x3D; window[&#39;page&#39;];</span><br><span class="line">    _0x5d83a3[&#39;m&#39;] &#x3D; _0x57feae + &#39;丨&#39; + _0x2268f9 &#x2F; (-1 * 3483 + -9059 + 13542);</span><br><span class="line">    var _0xb89747 &#x3D; _0x5d83a3;</span><br><span class="line">    $[&#39;ajax&#39;](&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">request();</span><br></pre></td></tr></table></figure><p><img src="/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/image-20210906133825371.png" alt="image-20210906133825371"></p><p>搜索<code>oo0O0</code>，扣出所在的js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">function oo0O0(mw) &#123;</span><br><span class="line">    window.b &#x3D; &#39;&#39;;</span><br><span class="line">    for (var i &#x3D; 0, len &#x3D; window.a.length; i &lt; len; i++) &#123;</span><br><span class="line">        console.log(window.a[i]);</span><br><span class="line">        window.b +&#x3D; String[document.e + document.g](window.a[i][document.f + document.h]() - i - window.c)</span><br><span class="line">    &#125;</span><br><span class="line">    var U &#x3D; [&#39;W5r5W6VdIHZcT8kU&#39;, &#39;WQ8CWRaxWQirAW&#x3D;&#x3D;&#39;];</span><br><span class="line">    var J &#x3D; function(o, E) &#123;</span><br><span class="line">        o &#x3D; o - 0x0;</span><br><span class="line">        var N &#x3D; U[o];</span><br><span class="line">        if (J[&#39;bSSGte&#39;] &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">            var Y &#x3D; function(w) &#123;</span><br><span class="line">                var m &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+&#x2F;&#x3D;&#39;,</span><br><span class="line">                    T &#x3D; String(w)[&#39;replace&#39;](&#x2F;&#x3D;+$&#x2F;, &#39;&#39;);</span><br><span class="line">                var A &#x3D; &#39;&#39;;</span><br><span class="line">                for (var C &#x3D; 0x0, b, W, l &#x3D; 0x0; W &#x3D; T[&#39;charAt&#39;](l++); ~W &amp;&amp; (b &#x3D; C % 0x4 ? b * 0x40 + W : W, C++ % 0x4) ? A +&#x3D; String[&#39;fromCharCode&#39;](0xff &amp; b &gt;&gt; (-0x2 * C &amp; 0x6)) : 0x0) &#123;</span><br><span class="line">                    W &#x3D; m[&#39;indexOf&#39;](W)</span><br><span class="line">                &#125;</span><br><span class="line">                return A</span><br><span class="line">            &#125;;</span><br><span class="line">            var t &#x3D; function(w, m) &#123;</span><br><span class="line">                var T &#x3D; [],</span><br><span class="line">                    A &#x3D; 0x0,</span><br><span class="line">                    C, b &#x3D; &#39;&#39;,</span><br><span class="line">                    W &#x3D; &#39;&#39;;</span><br><span class="line">                w &#x3D; Y(w);</span><br><span class="line">                for (var R &#x3D; 0x0, v &#x3D; w[&#39;length&#39;]; R &lt; v; R++) &#123;</span><br><span class="line">                    W +&#x3D; &#39;%&#39; + (&#39;00&#39; + w[&#39;charCodeAt&#39;](R)[&#39;toString&#39;](0x10))[&#39;slice&#39;](-0x2)</span><br><span class="line">                &#125;</span><br><span class="line">                w &#x3D; decodeURIComponent(W);</span><br><span class="line">                var l;</span><br><span class="line">                for (l &#x3D; 0x0; l &lt; 0x100; l++) &#123;</span><br><span class="line">                    T[l] &#x3D; l</span><br><span class="line">                &#125;</span><br><span class="line">                for (l &#x3D; 0x0; l &lt; 0x100; l++) &#123;</span><br><span class="line">                    A &#x3D; (A + T[l] + m[&#39;charCodeAt&#39;](l % m[&#39;length&#39;])) % 0x100, C &#x3D; T[l], T[l] &#x3D; T[A], T[A] &#x3D; C</span><br><span class="line">                &#125;</span><br><span class="line">                l &#x3D; 0x0, A &#x3D; 0x0;</span><br><span class="line">                for (var L &#x3D; 0x0; L &lt; w[&#39;length&#39;]; L++) &#123;</span><br><span class="line">                    l &#x3D; (l + 0x1) % 0x100, A &#x3D; (A + T[l]) % 0x100, C &#x3D; T[l], T[l] &#x3D; T[A], T[A] &#x3D; C, b +&#x3D; String[&#39;fromCharCode&#39;](w[&#39;charCodeAt&#39;](L) ^ T[(T[l] + T[A]) % 0x100])</span><br><span class="line">                &#125;</span><br><span class="line">                return b</span><br><span class="line">            &#125;;</span><br><span class="line">            J[&#39;luAabU&#39;] &#x3D; t, J[&#39;qlVPZg&#39;] &#x3D; &#123;&#125;, J[&#39;bSSGte&#39;] &#x3D; !![]</span><br><span class="line">        &#125;</span><br><span class="line">        var H &#x3D; J[&#39;qlVPZg&#39;][o];</span><br><span class="line">        return H &#x3D;&#x3D;&#x3D; undefined ? (J[&#39;TUDBIJ&#39;] &#x3D;&#x3D;&#x3D; undefined &amp;&amp; (J[&#39;TUDBIJ&#39;] &#x3D; !![]), N &#x3D; J[&#39;luAabU&#39;](N, E), J[&#39;qlVPZg&#39;][o] &#x3D; N) : N &#x3D; H, N</span><br><span class="line">    &#125;;</span><br><span class="line">    eval(atob(window[&#39;b&#39;])[J(&#39;0x0&#39;, &#39;]dQW&#39;)](J(&#39;0x1&#39;, &#39;GTu!&#39;), &#39;\x27&#39; + mw + &#39;\x27&#39;));</span><br><span class="line">    return &#39;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于本js中返回’’，所以只需要关注<code>eval(atob(window[&#39;b&#39;])[J(&#39;0x0&#39;, &#39;]dQW&#39;)](J(&#39;0x1&#39;, &#39;GTu!&#39;), &#39;\x27&#39; + mw + &#39;\x27&#39;));</code>中做了什么操作。atob是解码使用 base-64 编码的字符串的函数，通过console中获取<code>atob(window[&#39;b&#39;])</code>。</p><p><img src="/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/Users/JDD/Desktop/tmp/a/image-20210906134606845.png" alt="image-20210906134606845"></p><p>通过WT-JS加载计算<code>window.f=hex_md5(mwqqppz)</code></p><p><img src="/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/WT-JS-1630908473098.png" alt="获取windows的f参数"></p><p>报错未定义，<code>mwqqppz</code>可能是被其他地方替换或者加密来的，<code>eval(atob(window[&#39;b&#39;])[J(&#39;0x0&#39;, &#39;]dQW&#39;)](J(&#39;0x1&#39;, &#39;GTu!&#39;), &#39;\x27&#39; + mw + &#39;\x27&#39;));</code>中的J方法在<code>oo0O0</code>中被定义，且J方法中引用了U，在控制台定义J和U方法后，再执行J方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var U &#x3D; [&#39;W5r5W6VdIHZcT8kU&#39;, &#39;WQ8CWRaxWQirAW&#x3D;&#x3D;&#39;];</span><br><span class="line">var J &#x3D; function (o, E) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/clipboard-1630908473098.png" alt="调用J函数"></p><p>拼接得到<code>eval(atob(window[&#39;b&#39;])[replace](&#39;mwqqppz&#39;, &#39;\x27&#39; + mw + &#39;\x27&#39;));</code>，搜索<code>\bmw\b</code>,发现mw为oo0O0的入参，即时间戳</p><p><img src="/2021/02/01/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E4%B9%8Bjs%E6%B7%B7%E6%B7%86%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/mw-1630908473098.png" alt="获取mw参数"></p><p>在<code>atob(window[&#39;b&#39;])</code>返回的js后追加get_m_value方法获取m=window.f的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function get_m_value() &#123;</span><br><span class="line">    var timestamp &#x3D; Date.parse(new Date()) + 100000000;</span><br><span class="line">   &#x2F;&#x2F; timestamp &#x3D; &#39;1607657864000&#39;</span><br><span class="line">    f &#x3D; hex_md5(timestamp+&#39;&#39;)</span><br><span class="line">    var m &#x3D; f;</span><br><span class="line">    m &#x3D; m + &#39;丨&#39; + timestamp &#x2F; 1000</span><br><span class="line">    return m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import execjs</span><br><span class="line">import requests</span><br><span class="line">def get_page(page_num,parameters):</span><br><span class="line">    url &#x3D; &#39;http:&#x2F;&#x2F;match.yuanrenxue.com&#x2F;api&#x2F;match&#x2F;1?page&#x3D;&#123;&#125;&amp;m&#x3D;&#123;&#125;&#39;.format(page_num,parameters)</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;Host&#39;: &#39;match.yuanrenxue.com&#39;,</span><br><span class="line">        &#39;Referer&#39;: &#39;http:&#x2F;&#x2F;match.yuanrenxue.com&#x2F;match&#x2F;1&#39;,</span><br><span class="line">        &#39;User-Agent&#39;: &#39;yuanrenxue.project&#39;,</span><br><span class="line">        &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;,</span><br><span class="line">        &#39;Cookie&#39;: &#39;qpfccr&#x3D;true; Hm_lvt_c99546cf032aaa5a679230de9a95c7db&#x3D;1607556997,1607557857; Hm_lpvt_c99546cf032aaa5a679230de9a95c7db&#x3D;1607557857; no-alert&#x3D;true&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    response &#x3D; requests.get(url&#x3D;url,headers&#x3D;headers)</span><br><span class="line">    return response.json()</span><br><span class="line"></span><br><span class="line">def calculate_m_value():</span><br><span class="line">    with open(r&#39;1.js&#39;,encoding&#x3D;&#39;utf-8&#39;,mode&#x3D;&#39;r&#39;) as f:</span><br><span class="line">        JsData &#x3D; f.read()</span><br><span class="line">    psd &#x3D; execjs.compile(JsData).call(&#39;request&#39;)</span><br><span class="line">    psd &#x3D; psd.replace(&#39;丨&#39;,&#39;%E4%B8%A8&#39;)</span><br><span class="line">    print(&#39;this request parameters is :&#39;,psd)</span><br><span class="line">    return psd</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    sum_num &#x3D; 0</span><br><span class="line">    index_num &#x3D; 0</span><br><span class="line">    for page_num in range(1,6):</span><br><span class="line">        res &#x3D; get_page(page_num,calculate_m_value())</span><br><span class="line">        data &#x3D; [__[&#39;value&#39;] for __ in res[&#39;data&#39;]]</span><br><span class="line">        print(data)</span><br><span class="line">        sum_num+&#x3D;sum(data)</span><br><span class="line">        index_num +&#x3D; len(data)</span><br><span class="line">        time.sleep(1)</span><br><span class="line"></span><br><span class="line">    average &#x3D; sum_num&#x2F;index_num</span><br><span class="line">    print(&#39;the answer is :&#39;,average)</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2021/01/31/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/01/31/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https://nodejs.org/download/release/v10.15.3/ 安装node</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">npm config set registry https://registry.npm.taobao.org  </span><br><span class="line">npm install -g hexo@4.1.1</span><br><span class="line">npm install -g hexo-cli@1.3.0  </span><br><span class="line">hexo init blog    </span><br><span class="line">cd blog     </span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h1 id="Melody"><a href="#Melody" class="headerlink" title="Melody"></a>Melody</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:1080</span><br><span class="line">set https_proxy=https://127.0.0.1:1080</span><br><span class="line">git clone -b master https://github.com/Molunerfinn/hexo-theme-melody themes/melody</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br><span class="line">cp themes\melody\_config.yml themes\melody\melody.yml  通过git pull 即可更新melody</span><br><span class="line">npm i --save hexo-wordcount</span><br><span class="line">npm i hexo-deployer-git --save </span><br><span class="line"></span><br><span class="line">使用git bash</span><br><span class="line">npm install --save-dev gulp@3.9.1</span><br><span class="line">npm install -g gulp@3.9.1</span><br><span class="line">npm install gulp-imagemin@3.1.1 --save</span><br><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify --save</span><br></pre></td></tr></table></figure><p>blog\package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">   "build": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d &amp; git add * &amp; git commit -m 'deploy' &amp; git push origin master",</span><br><span class="line">   "test": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s",</span><br><span class="line">   "dev": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s"</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过npm run build 即可自动打包上传发布<a href="http://onejane.gitee.io/" target="_blank" rel="noopener">http://onejane.gitee.io/</a></p><p>新建Onajane公开项目，hexo d后启用服务的Gitee Pages</p><p><img src="/2021/01/31/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/gitee_page.png" alt="gitee_page"></p><p>新建picture公开项目，上传图片后启动服务的Gitee Pages图床服务，<a href="http://onejane.gitee.io/picture/avatar.jpg" target="_blank" rel="noopener">http://onejane.gitee.io/picture/avatar.jpg</a></p><p>blog_config.yml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">title: J</span><br><span class="line">subtitle: '朝花夕拾'</span><br><span class="line">description: '逆向,爬虫'</span><br><span class="line">keywords:</span><br><span class="line">author: J</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: 'Hongkong'</span><br><span class="line">url: https://gitee.com/OneJane</span><br><span class="line">theme: melody</span><br><span class="line">post_asset_folder: true   # npm install https://github.com/CodeFalling/hexo-asset-image --save 上传图片到博客</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    gitee: https://gitee.com/OneJane/OneJane.git</span><br><span class="line">    github: git@github.com:OneJane/OneJane.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: gitee</span><br></pre></td></tr></table></figure><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p><a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">https://leancloud.cn/dashboard/applist.html#/apps</a>  新建应用获取AppID,AppKey</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true # if you want use valine,please set this value is true</span><br><span class="line">  appId:  cWLsquGr5PNi33OWXNhzerep-gzGzoHsz # leancloud application app id</span><br><span class="line">  appKey:  S35phfCSbm8dAG9LpOc5rjm3 # leancloud application app key</span><br><span class="line">  notify: false # valine mail notify (true/false) https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # valine verify code (true/false)</span><br><span class="line">  recordip: false # whether record commentor's ip (true/false)</span><br><span class="line">  pageSize: 10 # comment list page size</span><br><span class="line">  avatar: mm # gravatar style https://valine.js.org/#/avatar</span><br><span class="line">  lang: zh-cn # i18n: zh-cn/en</span><br><span class="line">  placeholder: 一起来吹牛逼好吗！ # valine comment input placeholder(like: Please leave your footprints )</span><br><span class="line">  guest_info: nick,mail,link #valine comment header inf</span><br></pre></td></tr></table></figure><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sharejs:</span><br><span class="line"> enable: true</span><br><span class="line"> disabled_sites: google,facebook</span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>本地 npm install hexo-generator-search –save</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true # or false</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: "We didn't find any results for the search: $&#123;query&#125;" # if there are no result</span><br></pre></td></tr></table></figure><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: http://onejane.gitee.io/picture/avatar.jpg # 网站 Logo</span><br></pre></td></tr></table></figure><h2 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">修改source/tags/index.md</span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br><span class="line">hexo new page categories</span><br><span class="line">修改source/categories/index.md</span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: "categories"</span><br><span class="line">---</span><br><span class="line">修改_config.yml</span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  归档: /archives</span><br><span class="line">  标签: /tags</span><br><span class="line">  分类: /categories</span><br></pre></td></tr></table></figure><h2 id="自动节选"><a href="#自动节选" class="headerlink" title="自动节选"></a>自动节选</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><h2 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top_img_height: 80 </span><br><span class="line">top_img: http://onejane.gitee.io/picture/hacker.jpg   在_config.yml和文章中使用</span><br></pre></td></tr></table></figure><h2 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QR_code:</span><br><span class="line">  - itemlist:</span><br><span class="line">      img: http://onejane.gitee.io/picture/alipay.png</span><br><span class="line">      text: 支付宝打赏</span><br><span class="line">  - itemlist:</span><br><span class="line">      img: http://onejane.gitee.io/picture/wx.png</span><br><span class="line">      text: 微信打赏</span><br></pre></td></tr></table></figure><h2 id="广告-音乐播放器"><a href="#广告-音乐播放器" class="headerlink" title="广告/音乐播放器"></a>广告/音乐播放器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adv:</span><br><span class="line">  enable: true</span><br><span class="line">  info: <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"center"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=572547816&amp;auto=1&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Follow"><a href="#Follow" class="headerlink" title="Follow"></a>Follow</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">follow:</span><br><span class="line">  enable: true</span><br><span class="line">  url: 'https://gitee.com/OneJane/'</span><br><span class="line">  text: 'Follow Me'</span><br></pre></td></tr></table></figure><h2 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">links_title: 友链   # 配置友链的标题文字</span><br><span class="line">links:</span><br><span class="line">  OneJane: http://onejane.gitee.io/</span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toc:</span><br><span class="line">  enable: true # or false</span><br><span class="line">  number: true # or false. 版本v1.5.6新增</span><br><span class="line">  在文章头部加入toc_number: true</span><br></pre></td></tr></table></figure><h2 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">footer_custom_text: Hi, welcome to my <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://onejane.gitee.io/</span>"&gt;</span>blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span>!</span><br></pre></td></tr></table></figure><p>配置成hitokoto则是随机的谚语</p><h2 id="点击特效"><a href="#点击特效" class="headerlink" title="点击特效"></a>点击特效</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fireworks: true</span><br></pre></td></tr></table></figure><h2 id="彩带"><a href="#彩带" class="headerlink" title="彩带"></a>彩带</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 150</span><br><span class="line">  alpha: 0.6</span><br><span class="line">  zIndex: -1</span><br><span class="line">  click_to_change: false</span><br></pre></td></tr></table></figure><h2 id="阅读密码"><a href="#阅读密码" class="headerlink" title="阅读密码"></a>阅读密码</h2><p>npm install –save hexo-blog-encrypt</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文中标题填入</span><br><span class="line">password: blogJ</span><br><span class="line">message: 请联系微信：codewj，获取本文密码</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="baidu"><a href="#baidu" class="headerlink" title="baidu"></a>baidu</h3><p><a href="https://tongji.baidu.com/sc-web/10000134724/home/site/index?from=3" target="_blank" rel="noopener">https://tongji.baidu.com/sc-web/10000134724/home/site/index?from=3</a></p><p>新增网站后，获取hm.src = “<a href="https://hm.baidu.com/hm.js?***&quot;;%E4%BD%9C%E4%B8%BA%E7%99%BE%E5%BA%A6id" target="_blank" rel="noopener">https://hm.baidu.com/hm.js?***&quot;;作为百度id</a></p><h3 id="google"><a href="#google" class="headerlink" title="google"></a>google</h3><p><a href="https://analytics.google.com/analytics/web/#/a111479568p260655414/admin" target="_blank" rel="noopener">https://analytics.google.com/analytics/web/#/a111479568p260655414/admin</a></p><p>创建媒体资源-显示高级选项-创建 Universal Analytics 媒体资源，创建好后进入媒体资源设置获取跟踪ID,UA开头的就是谷歌id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">baidu_analytics: ***</span><br><span class="line">google_analytics: ***</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向环境搭建</title>
      <link href="/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<div id="vip-container"><h1 id="篇幅有限"><a href="#篇幅有限" class="headerlink" title="篇幅有限"></a>篇幅有限</h1><p>完整内容及源码关注公众号：ReverseCode，发送  <strong>冲</strong></p><h1 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h1><p><a href="https://developers.google.com/android/images#angler" target="_blank" rel="noopener">https://developers.google.com/android/images#angler</a></p><p>开机键+音量减 进入recovery</p><h2 id="Pixel"><a href="#Pixel" class="headerlink" title="Pixel"></a>Pixel</h2><p><a href="http://s.duapps.com/apks/own/ESFileExplorer-cn.apk" target="_blank" rel="noopener">ES文件浏览器</a>   查看系统文件</p><p>玩逆向必备一台真机，那么非谷歌亲儿子莫属，模拟器缺失native/so层，属于精简版系统，故还是真机香呀。 </p><ol><li><a href="https://developers.google.com/android/images#sailfish" target="_blank" rel="noopener">官网</a>下载pixel 8.1.0<a href="https://dl.google.com/dl/android/aosp/sailfish-opm4.171019.021.d1-factory-e2315135.zip" target="_blank" rel="noopener">镜像</a>，建议刷OPM1.171019.011版本安卓8.1.0</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader 或 按住音量向下键和开机键 进入fastboot状态</span><br><span class="line">cd sailfish-opm4.171019.021.p1-factory-0bcf4315/sailfish-opm4.171019.021.p1 &amp;&amp; flash-all.sh 开始刷机</span><br></pre></td></tr></table></figure><p>设置-关于手机-版本号8下点击-进入开发者模式，进入系统-高级-打开开发者选项-USB调试 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb push Magisk-v20.4.zip /sdcard    </span><br><span class="line">adb push magisk-riru-v21.3.zip /sdcard/Download 使用magisk模块安装并重启</span><br><span class="line">adb push magisk-EdXposed-SandHook-v0.4.5.1_beta.4463.-release.zip /sdcard/Download  使用magisk模块安装并重启</span><br><span class="line">adb install EdXposedManager-4.5.7-45700-org.meowcat.edxposed.manager-release.apk    安装xposed</span><br><span class="line">adb push MagiskHidePropsConf-v5.3.4.zip /sdcard/Download   </span><br><span class="line">adb install JustTrustMePlus-debug.apk  用于结合xposed突破SSL Pinning抓包限制</span><br></pre></td></tr></table></figure><p><a href="https://dl.twrp.me/sailfish/" target="_blank" rel="noopener">twrp</a>作为第三方刷机工具，刷入Magisk，nethunter等魔改系统。</p><p><del>fastboot flash recovery <a href="https://dl.twrp.me/angler/twrp-3.3.0-0-angler.img.html" target="_blank" rel="noopener">twrp-3.3.0-0-angler.img</a></del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot boot twrp-3.4.0-0-sailfish.img   进入recovery mode</span><br><span class="line">install Magisk-v20.4.zip</span><br><span class="line">adb install MagiskManager-v7.5.1.apk</span><br><span class="line">settings put global captive_portal_http_url https://www.google.cn/generate_204  去除wifi上的×</span><br><span class="line">settings put global captive_portal_https_url https://www.google.cn/generate_204</span><br><span class="line">settings put global ntp_server 1.hk.pool.ntp.org  修改时区</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><blockquote><p>linux下载最新的platform-tools刷机的时候，fastboot会报各种unknow command或接近的错误，把fastboot文件替换成随着aosp一起编译出来的即可,使用自行编译的fastboot即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm ~&#x2F;Android&#x2F;Sdk&#x2F;platform-tools&#x2F;fastboot</span><br><span class="line">cp fastboot810r1 fastboot</span><br><span class="line">fastboot --version</span><br></pre></td></tr></table></figure></blockquote><p>通过wifi连接adb可实现群控<br><code>adb -s 192.168.0.104:5555 install com.ttxapps.wifiadb_2.1.3-810031745_minAPI15(nodpi)_apkmirror.com.apk</code>  安装apk</p><p><code>adb connect 192.168.0.104:5555</code>     使用adb连接手机，如果异常“由于目标计算机积极拒绝，无法连接。 (10061)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb root </span><br><span class="line">adb remount</span><br><span class="line">adb shell setprop service.adb.tcp.port 5555</span><br><span class="line">adb tcpip 5555</span><br><span class="line">adb connect 192.168.3.88</span><br></pre></td></tr></table></figure><p><strong>termux</strong></p><p><code>adb -s 192.168.0.104:5555 install com.termux_92.apk</code>   adb被禁时在app端使用命令行操作</p><p><code>pkg update &amp;&amp; pkg install htop </code>   在app端安装管理进程的包</p><p><strong><del>xdebuggable</del>  &amp;&amp; XAppDebug</strong><br>启动EdXposed,搜索<del>xdebuggable</del> 和XAppDebug模块并安装开启debug apk(需要借助ssr科学上网)</p><p><strong>ro.debuggable</strong></p><p><code>adb push MagiskHidePropsConf-v5.3.4.zip /sdcard/Download</code> 并通过Magisk Manager-模块-下载-安装MagiskHidePropsConf-v5.3.4.zip</p><p>reboot-adb shell-props</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1 - Edit device fingerprint</span><br><span class="line">2 - Force BASIC key attestation</span><br><span class="line">3 - Device simulation (disabled)</span><br><span class="line">4 - Edit MagiskHide props</span><br><span class="line">5 - Add&#x2F;edit custom props</span><br><span class="line">6 - Delete prop values</span><br><span class="line">7 - Script settings</span><br><span class="line">8 - Collect logs</span><br><span class="line">u - Perform module update check</span><br><span class="line">r - Reset all options&#x2F;settings</span><br><span class="line">b - Reboot device</span><br><span class="line">e - Exit</span><br><span class="line"></span><br><span class="line">See the module readme or the</span><br><span class="line">support thread @ XDA for details.</span><br><span class="line"></span><br><span class="line">Enter your desired option: 4</span><br><span class="line"></span><br><span class="line">1 - ro.debuggable</span><br><span class="line">2 - ro.secure</span><br><span class="line">3 - ro.build.type</span><br><span class="line">4 - ro.build.tags</span><br><span class="line">5 - ro.bootmode</span><br><span class="line">6 - ro.boot.mode</span><br><span class="line">a - Change all props</span><br><span class="line">b - Go back to main menu</span><br><span class="line">e - Exit</span><br><span class="line"></span><br><span class="line">Pick several options at once by</span><br><span class="line">separating inputs with a comma.</span><br><span class="line">Example: 1,3,4</span><br><span class="line"></span><br><span class="line">See the module readme or the</span><br><span class="line">support thread @ XDA for details.</span><br><span class="line"></span><br><span class="line">Enter your desired option: 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">You currently have the safe value set.</span><br><span class="line">Are you sure you want to change it to 1?</span><br><span class="line"></span><br><span class="line">Enter y(es), n(o) or e(xit): y</span><br><span class="line"></span><br><span class="line">Do you want to reboot now (y&#x2F;n)?</span><br><span class="line"></span><br><span class="line">Enter y(es), n(o) or e(xit): y</span><br></pre></td></tr></table></figure><p>getprop ro.debuggable  即可查看1,开启全局可调式</p><h2 id="Pixel-XL"><a href="#Pixel-XL" class="headerlink" title="Pixel XL"></a>Pixel XL</h2><p><a href="https://download.lineageos.org/marlin" target="_blank" rel="noopener">lineageos</a>,<a href="https://dl.twrp.me/marlin/" target="_blank" rel="noopener">twrp</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader </span><br><span class="line">fastboot boot twrp-3.4.0-0-marlin.img 进入twrp</span><br><span class="line">「TWRP主界面」-&gt;「Wipe」-&gt;「Format Data」  输入yes</span><br><span class="line">「Adavanced Wipe」-&gt; 勾选「Dalvik &#x2F; ART Cache」、「Cache」、「System」、「Data」、「Internal Storage」（切勿勾选到「Vendor」） -&gt; 划过滑动条确认擦除  </span><br><span class="line">「TWRP主界面」-&gt;「Advanced」-&gt;「ADB Sideload」（划过滑条即可）  勾选双清</span><br><span class="line">adb sideload lineage-17.1-20201028-nightly-marlin-signed.zip  重启</span><br><span class="line">设置-关于手机-版本号-8次打开开发者选项</span><br><span class="line">设置-系统-高级-开发者选项-Android 调试</span><br><span class="line">adb install MagiskManager-v7.5.1.apk</span><br><span class="line">adb install EdXposedManager-4.5.7-45700-org.meowcat.edxposed.manager-release.apk</span><br><span class="line">adb push magisk-riru-v21.3.zip &#x2F;sdcard&#x2F;Download</span><br><span class="line">adb push MagiskHidePropsConf-v5.3.4.zip &#x2F;sdcard&#x2F;Download</span><br><span class="line">adb push EdXposed-SandHook-v0.4.6.2.4529.-release.zip &#x2F;sdcard&#x2F;Download</span><br><span class="line">adb reboot bootloader</span><br><span class="line">fastboot boot twrp-3.4.0-0-marlin.img</span><br><span class="line">「TWRP主界面」-&gt;「Advanced」-&gt;「ADB Sideload」（划过滑条即可）</span><br><span class="line">adb sideload Magisk-v20.4.zip 重启</span><br><span class="line">通过Magisk模块新增选择下载目录，安装riru，MagiskHidePropsConf，EdXposed</span><br><span class="line">adb install JustTrustMePlus-debug.apk</span><br></pre></td></tr></table></figure><p><a href="https://dl.google.com/dl/android/aosp/marlin-nhg47k-factory-fc027c3b.zip" target="_blank" rel="noopener">marlin</a>,SR5-SuperSU-v2.82-SR5-20171001224502.zip,<a href="https://dl-xda.xposed.info/framework/sdk25/arm64/xposed-v89-sdk25-arm64.zip" target="_blank" rel="noopener">xposed-v89-sdk25-arm64.zip</a>,<a href="https://forum.xda-developers.com/attachments/xposedinstaller_3-1-5-apk.4393082/" target="_blank" rel="noopener">XposedInstaller_3.1.5</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader </span><br><span class="line">.&#x2F;flash-all.bat</span><br><span class="line">设置-关于手机-版本号-8次打开开发者选项</span><br><span class="line">设置-系统-高级-开发者选项-Android 调试</span><br><span class="line">adb install XposedInstaller_3.1.5.apk</span><br><span class="line">fastboot boot twrp-3.4.0-0-marlin.img</span><br><span class="line">install SR5-SuperSU-v2.82-SR5-20171001224502.zip,xposed-v89-sdk25-arm64.zip</span><br><span class="line">adb push timeadjust.sh &#x2F;data&#x2F;local&#x2F;tmp &amp;&amp; sh timeadjust.sh</span><br></pre></td></tr></table></figure><blockquote><p>pixel系列安装xposed不可使用xposed-v89-sdk25-arm64.zip，只能ssr后谷歌下载xposed框架安装。</p></blockquote><h2 id="Nexus-6P"><a href="#Nexus-6P" class="headerlink" title="Nexus 6P"></a>Nexus 6P</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot devices</span><br><span class="line">fastboot erase cache 如出现&lt; waiting for any device &gt;，插拔usb</span><br><span class="line">fastboot erase userdata</span><br><span class="line">fastboot flashing unlock</span><br><span class="line">fastboot flash bootloader .\bootloader-angler-angler-03.68.img</span><br><span class="line">fastboot reboot-bootloader</span><br><span class="line">fastboot flash radio .\radio-angler-angler-03.81.img</span><br><span class="line">fastboot reboot-bootloader</span><br><span class="line">fastboot flash vendor .\image-angler-n2g48c\vendor.img</span><br><span class="line">fastboot reboot-bootloader</span><br><span class="line">fastboot flash system .\image-angler-n2g48c\system.img</span><br><span class="line">fastboot flash boot .\image-angler-n2g48c\boot.img</span><br><span class="line">fastboot flash recovery recovery.img</span><br><span class="line">fastboot erase cache</span><br><span class="line">fastboot erase userdata</span><br><span class="line">fastboot flash cache cache.img</span><br><span class="line">fastboot flash userdata userdata.img</span><br><span class="line">fastboot flashing lock</span><br></pre></td></tr></table></figure><p>设置-关于手机-版本号8下点击-进入开发者模式-打开开发者选项</p><p>adb push <a href="https://download.chainfire.eu/1016/SuperSU/UPDATE-SuperSU-v2.79-20161211114519.zip" target="_blank" rel="noopener">UPDATE-SuperSU-v2.79-20161211114519.zip</a> /sdcard</p><p>adb push <a href="https://dl-xda.xposed.info/framework/sdk25/arm64/xposed-v89-sdk25-arm64.zip" target="_blank" rel="noopener">xposed-v89-sdk25-arm64.zip</a> /sdcard</p><p>rom:<a href="https://dl.google.com/dl/android/aosp/angler-n2g48c-factory-6a21e528.zip" target="_blank" rel="noopener">https://dl.google.com/dl/android/aosp/angler-n2g48c-factory-6a21e528.zip</a></p><p>解压得到angler-n2g48c-factory-6a21e528\angler-n2g48c\image-angler-n2g48c</p><p>superSu:<a href="https://download.chainfire.eu/1016/SuperSU/UPDATE-SuperSU-v2.79-20161211114519.zip" target="_blank" rel="noopener">https://download.chainfire.eu/1016/SuperSU/UPDATE-SuperSU-v2.79-20161211114519.zip</a></p><p>xposed安卓7.1对应sdk:<a href="https://dl-xda.xposed.info/framework/sdk25/arm64/xposed-v89-sdk25-arm64.zip" target="_blank" rel="noopener">https://dl-xda.xposed.info/framework/sdk25/arm64/xposed-v89-sdk25-arm64.zip</a></p><p>xposed apk:<a href="https://dl.xda-cdn.com/4/3/9/3/0/8/2/XposedInstaller_3.1.5.apk?key=4Rkip9MZy_4KitcodXSxBw&amp;ts=1598862686" target="_blank" rel="noopener">https://dl.xda-cdn.com/4/3/9/3/0/8/2/XposedInstaller_3.1.5.apk?key=4Rkip9MZy_4KitcodXSxBw&amp;ts=1598862686</a></p><p>twrp:<a href="https://dl.twrp.me/angler/twrp-3.4.0-0-angler.img" target="_blank" rel="noopener">https://dl.twrp.me/angler/twrp-3.4.0-0-angler.img</a></p><h2 id="Kali-NetHunter"><a href="#Kali-NetHunter" class="headerlink" title="Kali NetHunter"></a>Kali NetHunter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dl.google.com&#x2F;dl&#x2F;android&#x2F;aosp&#x2F;angler-opm1.171019.011-factory-39448337.zip</span><br><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br><span class="line">adb reboot bootloader</span><br><span class="line">.&#x2F;flash-all.sh 如报错替换fastboot,which fastboot,使用fastboot8.1.0r1,开启开发者选项，打开USB调试 </span><br><span class="line">https:&#x2F;&#x2F;www.kali.org&#x2F;kali-nethunter&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.offensive-security.com&#x2F;kali-linux-nethunter-download&#x2F;</span><br><span class="line">Nexus 6P Oreo (ZIP)</span><br><span class="line">adb push SR5-SuperSU-v2.82-SR5-20171001224502.zip &#x2F;sdcard&#x2F;</span><br><span class="line">adb push nethunter-2021.1-angler-oreo-kalifs-full.zip &#x2F;sdcard&#x2F;</span><br><span class="line">adb push timeadjust.sh &#x2F;sdcard&#x2F;</span><br><span class="line">adb reboot bootloader</span><br><span class="line">fastboot flash recovery twrp-3.4.0-0-angler.img</span><br><span class="line">刷完之后按音量向下键，选择Recovery mode，按电源键进入，</span><br><span class="line">进入Recovery之后，选择Install→SR5-SuperSU-v2.82-SR5-20171001224502.zip开始刷机。</span><br><span class="line">再次进入recovery，把nethunter-2020.2-pre3-angler-oreo-kalifs-full.zip.torrent刷进去，中间解压Kali rootfs的过程，会至多25分钟</span><br><span class="line">连接wifi</span><br><span class="line">sh timeadjust.sh  同步时间，reboot</span><br><span class="line">刷机结束后进入系统首次也要先点击Nethunter的应用，申请的所有权限都给，左侧导航进入Kali Chroot Manager，点击START KALI CHROOT，只要初始化这一次，后续无论如何重启都会出现如图所示的Everything is fine and Chroot has been started!。</span><br><span class="line"></span><br><span class="line">点开Nethunter终端这款App，选择KALI，进入Kali系统</span><br><span class="line">apt update升级系统中的软件库信息</span><br><span class="line">apt install neofetch htop jnettop</span><br><span class="line"></span><br><span class="line">点开Nethunter进入标左侧签KeX Manager，点击“SETUP LOCAL SERVER”，会要求输入一个连接密码和显示密码，输入和确认即可，然后点击“START SERVER”开启服务器。点开“Nethunter KeX”这个App，在密码那一栏输入密码之后，点击“Connect”进行连接，即可直接进入Kali Nethunter操作系统的桌面。</span><br></pre></td></tr></table></figure><p>搭配QtScrcpy就可以在电脑上观看手机屏幕上的内容，或者通过usb一拖四实现鼠标键盘完全电脑操作。该系统自动集成了java,BurpSuite2020.06,charles,python3,python。</p><h3 id="vnc"><a href="#vnc" class="headerlink" title="vnc"></a>vnc</h3><p>点开<code>Nethunter</code>这个<code>app</code></p><ul><li>切换到<code>Kali Chroot Manager</code>,START KALI CHROOT</li><li>切换到<code>Kali Services</code>，将<code>SSH</code>启动并且勾选<code>Start at Boot</code>，这样就拥有了<code>sshd</code></li><li>切换到<code>Kex Manage</code>–<code>SETUP LOCAL SERVER</code> 设置好密码后–取消Localhost Only–START SERVER–OPEN KEX CLIENT</li></ul><p><img src="/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210601103108877.png" alt="image-20210601103108877"></p><p>打开VNC Viewer,通过NetHunter 终端查看ip地址，显示器为1，开启VNC登录</p><p><img src="/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210601103213687.png" alt="image-20210601103213687"></p><p>通过一拖四的typec转USB，连接键盘鼠标，将Nexus 6p变成一台kali电脑。</p><p><img src="/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210601103619564.png" alt="image-20210601103619564"></p><h2 id="Nexus"><a href="#Nexus" class="headerlink" title="Nexus"></a>Nexus</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot oem unlock</span><br><span class="line">fastboot erase cache 如出现&lt; waiting for any device &gt;，插拔usb</span><br><span class="line">fastboot erase userdata</span><br><span class="line">fastboot flash bootloader .\bootloader-hammerhead-hhz20h.img</span><br><span class="line">fastboot flash radio .\radio-hammerhead-m8974a-2.0.50.2.30.img</span><br><span class="line">fastboot reboot-bootloader</span><br><span class="line">cd .\image-hammerhead-m4b30z\</span><br><span class="line">fastboot flash recovery recovery.img</span><br><span class="line">fastboot flash boot boot.img</span><br><span class="line">fastboot flash system system.img</span><br><span class="line">fastboot flash userdata userdata.img</span><br><span class="line">fastboot erase cache</span><br><span class="line">fastboot erase userdata</span><br><span class="line">fastboot flash cache cache.img</span><br><span class="line">fastboot flash userdata userdata.img</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>设置-关于手机-版本号8下点击-进入开发者模式-打开开发者选项</p><p>adb push <a href="https://download.chainfire.eu/1016/SuperSU/UPDATE-SuperSU-v2.79-20161211114519.zip" target="_blank" rel="noopener">UPDATE-SuperSU-v2.79-20161211114519.zip</a> /sdcard</p><p>adb push <a href="https://dl-xda.xposed.info/framework/sdk23/arm/xposed-v89-sdk23-arm.zip" target="_blank" rel="noopener">.\xposed-v89-sdk23-arm.zip</a> /sdcard</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot flash recovery twrp-3.4.0-0-hammerhead.img 然后进入recovery mode</span><br><span class="line">adb install .\XposedInstaller_3.1.5.apk  安装Xposed</span><br><span class="line">adb shell</span><br><span class="line">adb shell 输入su获取超级用户权限</span><br><span class="line">chmod 711 &#x2F;data&#x2F;user&#x2F;0&#x2F;de.robv.android.xposed.installer</span><br><span class="line">reboot 安装完毕</span><br></pre></td></tr></table></figure><p><img src="/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/clipboard.png" alt="img"></p><h2 id="小米-Mix-2"><a href="#小米-Mix-2" class="headerlink" title="小米 Mix 2"></a><strong>小米 Mix 2</strong></h2><p>打开开发者选项-usb调试<br>            -设备解锁状态-绑定账号和设备</p><p>adb reboot bootloader 解锁bootloader，执行miflash_unlock.exe</p><p><a href="https://github.com/ElderDrivers/EdXposed/releases/download/v0.4.6.2/EdXposed-SandHook-v0.4.6.2.4529.-release.zip" target="_blank" rel="noopener">EdXposed-SandHook-v0.4.6.2.4529.-release.zip</a></p><p>t<a href="https://dl.twrp.me/chiron/twrp-3.3.1-1-chiron.img" target="_blank" rel="noopener">wrp-3.3.1-1-chiron.img</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot flash recovery twrp-3.3.1-1-chiron.img</span><br><span class="line">fastboot boot twrp-3.3.1-1-chiron.img</span><br><span class="line">adb push lineage-17.0-chiron.zip  不能有中文</span><br><span class="line">进入twrp后清除Cache，System，Data分区</span><br><span class="line">install lineage-17.0-chiron.zip</span><br><span class="line">install Magisk-v20.4.zip</span><br><span class="line">adb install MagiskManager-v7.5.1.apk </span><br><span class="line">adb install EdXposedManager-4.5.7-45700-org.meowcat.edxposed.manager-release.apk</span><br><span class="line">在magisk中安装</span><br><span class="line">adb push magisk-riru-v21.3.zip &#x2F;sdcard&#x2F;Download</span><br><span class="line">adb push MagiskHidePropsConf-v5.3.4.zip &#x2F;sdcard&#x2F;Download</span><br><span class="line">adb push EdXposed-SandHook-v0.4.6.2.4529.-release.zip &#x2F;sdcard&#x2F;Download</span><br></pre></td></tr></table></figure><h2 id="小米6"><a href="#小米6" class="headerlink" title="小米6"></a><strong>小米6</strong></h2><p>我的设备-全部参数-双击8次MIUI版本-开发者选项</p><p>更多设置-开发者选项-usb调试<br>                                  -设备解锁状态-绑定账号和设备</p><p>解锁bootloader，执行miflash_unlock.exe</p><p><a href="https://download.lineageos.org/sagit" target="_blank" rel="noopener">https://download.lineageos.org/sagit</a> lineage-17.1-20201022-nightly-sagit-signed.zip</p><p><a href="https://dl.twrp.me/sagit/twrp-3.3.1-2-sagit.img" target="_blank" rel="noopener">twrp-3.3.1-2-sagit.img</a></p><p><a href="https://osdn.net/projects/xiaomifirmwareupdater/storage/Stable/V10/sagit/fw_sagit_miui_MI6Global_V10.4.1.0.PCAMIXM_38edd1584c_9.0.zip" target="_blank" rel="noopener">fw_sagit_miui_MI6Global_V10.4.1.0.PCAMIXM_38edd1584c_9.0.zip</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader 重启到引导系统</span><br><span class="line">fastboot flash recovery twrp-3.3.1-2-sagit.img</span><br><span class="line">fastboot reboot  执行完命令马上长按音量+ 清除数据</span><br><span class="line">fastboot reboot  重启进入 TWRP ，执行完命令马上长按音量+，滑动开始</span><br><span class="line">「TWRP主界面」-&gt;「Wipe」-&gt;「Format Data」  输入yes</span><br><span class="line">「Adavanced Wipe」-&gt; 勾选「Dalvik &#x2F; ART Cache」、「Cache」、「System」、「Data」、「Internal Storage」（切勿勾选到「Vendor」） -&gt; 划过滑动条确认擦除  </span><br><span class="line">「TWRP主界面」-&gt;「Advanced」-&gt;「ADB Sideload」（划过滑条即可）</span><br><span class="line">adb sideload fw_sagit_miui_MI6Global_V10.4.1.0.PCAMIXM_38edd1584c_9.0.zip 刷完后手机会自动退出 ADB Sideload</span><br><span class="line">「TWRP主界面」-&gt;「Advanced」-&gt;「ADB Sideload」（划过滑条即可）</span><br><span class="line">adb sideload lineage-17.1-20201105-nightly-sagit-signed.zip 刷完后手机会自动退出 ADB Sideload</span><br><span class="line">重启按住音量+ 进入twrp</span><br><span class="line">install Magisk-v20.4.zip  重启</span><br><span class="line">adb install MagiskManager-v7.5.1.apk</span><br></pre></td></tr></table></figure><p>设置-关于手机-版本号-8次打开开发者选项</p><p>设置-系统-高级-开发者选项-Android 调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb install EdXposedManager-4.5.7-45700-org.meowcat.edxposed.manager-release.apk</span><br><span class="line">在magisk中安装</span><br><span class="line">adb push magisk-riru-v21.3.zip &#x2F;sdcard&#x2F;Download</span><br><span class="line">adb push MagiskHidePropsConf-v5.3.4.zip &#x2F;sdcard&#x2F;Download</span><br><span class="line">adb push EdXposed-SandHook-v0.4.6.2.4529.-release.zip &#x2F;sdcard&#x2F;Download</span><br><span class="line">adb install JustTrustMePlus-debug.apk</span><br></pre></td></tr></table></figure><h1 id="Genymotion"><a href="#Genymotion" class="headerlink" title="Genymotion"></a><a href="https://dl.genymotion.com/releases/genymotion-3.1.2/genymotion-3.1.2-vbox.exe" target="_blank" rel="noopener">Genymotion</a></h1><p>安装全程开全局代理，安装nexus 5x 8.0<img src="/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/nexus_5x.png" alt="nexus_5x"><br>network mode选择Bridge或者在virtualbox中修改网络为桥接，如virtualbox网络连接里没有桥接网卡选择<br>修改D:\VirtualBox\drivers\network\netlwf\VBoxNetLwf.inf<img src="/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C.png" alt="桥接网络"><br>settings-system-Languages&amp;input-Languages-Add a language-简体中文</p><blockquote><p>adb 无法连接genymotion怎么办？</p><p>修改genymotion的settings，Use custom Android SDK tools为本地android sdk路径<br>adb kill-server + adb start-server 重启adb<br>安装wifiadb后即可，默认可以连接192网段，配置桥接，可adb connect 192.168.0.104:5555</p></blockquote><p><strong>arm桥接</strong></p><p><code>uname -a  i686</code>  查看cpu架构为x86 32位  不支持arm，需要安装<a href="https://github.com/m9rco/Genymotion_ARM_Translation/blob/master/package/Genymotion-ARM-Translation_for_8.0.zip" target="_blank" rel="noopener">arm桥</a>，直接将 Genymotion-ARM-Translation_for_8.0.zip拖入nexus 5x 8.0, 进行安装<br>adb reboot 即可安装带有arm的so的apk</p><h1 id="Kali"><a href="#Kali" class="headerlink" title="Kali"></a>Kali</h1><p><strong>别用Windows了，鲁迅曾经说过，他在逆向生涯中超过一半的苦难均由Windows赐予</strong>。</p><p>vmware<a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.0-14665864.exe" target="_blank" rel="noopener">安装文件</a> 秘钥：YC34H-6WWDK-085MQ-JYPNX-NZRA2</p><p>kali-linux-2020.4-vmware-amd64.7z<a href="https://images.kali.org/virtual-images/kali-linux-2020.4-vmware-amd64.7z.torrent" target="_blank" rel="noopener">种子</a>，使用vmware打开vmx文件，配置6g内存，80g磁盘存储，网络适配选择桥接到本地网卡(虚拟网络编辑器)，默认账密：kali/kali，sudo passwd root 修改密码123456</p><p>重启后使用root登录，android-studio-ide-201.7042882-linux.tar.gz<a href="https://developer.android.google.cn/studio/#downloads" target="_blank" rel="noopener">安装包</a><br>~/.cache/vmware/drag_and_drop   定期删除拷贝的文件缓存<br><img src="/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vm%E7%BC%93%E5%AD%98.png" alt="drag_and_drop"></p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt update;apt install htop jnettop tmux iotop</span><br><span class="line">dpkg-reconfigure tzdata 选择Asia-Shanghai  </span><br><span class="line">apt update 更新自动同步时间</span><br><span class="line">apt install xfonts-intl-chinese 装中文字体</span><br><span class="line">apt-get install ttf-wqy-microhei</span><br><span class="line"><span class="meta">#</span><span class="bash"> nano /etc/ssh/sshd_config  开启sshd</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/init.d/ssh start</span></span><br></pre></td></tr></table></figure><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar zxf android-studio-ide-201.7042882-linux.tar.gz</span><br><span class="line">cd ~/Desktop/android-studio/bin &amp;&amp; ./studio.sh 启动android studio</span><br><span class="line">ctrl+shift+t 当前窗口新建终端</span><br><span class="line">vim ~/.zshrc</span><br><span class="line">export PATH="/root/Android/Sdk/platform-tools:$PATH"  加入环境变量</span><br><span class="line">exec "$SHELL"</span><br><span class="line">dpkg -i code_1.52.1-1608136922_amd64.deb  安装vscode</span><br></pre></td></tr></table></figure><blockquote><p>as若报错<code>To build this project, accept the SDK license agreements and install the missing components？</code></p><p>执行/root/Android/Sdk/tools/bin/sdkmanager   –licenses</p></blockquote><p> <a href="https://gitee.com/Barryda/QtScrcpy" target="_blank" rel="noopener">Android设备投屏</a></p><p><a href="https://github.com/nodesource/distributions/blob/master/README.md" target="_blank" rel="noopener">NodeJs</a></p><p><a href="https://github.com/skylot/jadx/releases/download/v1.2.0/jadx-1.2.0.zip" target="_blank" rel="noopener">jadx-1.2.0.zip</a>多dex打开，修改jadx-gui中<code>set DEFAULT_JVM_OPTS=&quot;-Xms512M&quot; &quot;-Xmx8g&quot;</code>,加入zshrc的环境变量中<code>export PATH=&quot;/root/Android/Sdk/ndk-bundle:/root/Android/Sdk/platform-tools:${JAVA_HOME}/bin:$PATH:/root/Desktop/charles/bin:/root/Desktop/jadx-1.2.0/bin:$NDK_HOME&quot;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_14.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br><span class="line">npm install --save @types/frida-gum  frida代码提示</span><br></pre></td></tr></table></figure><p>jeb-pro-3.19.1.202005071620_pwd_ilbtcdnwiuypbzeo_.7z  运行./jeb_linux.sh，输入密码：ilbtcdnwiuypbzeo，进入界面点击Manual Key Generation中间按钮获取LICENSE DATA，运行<a href="https://bbs.pediy.com/attach-download-206890-a05895160896cb2ba9fe470bca2ad5fe@m8o0Rv6sZiqL_2FTphB9Cmgg_3D_3D.htm" target="_blank" rel="noopener">jebKeygen.py </a>获取license key后输入到界面的key中，continue</p><p>Kali Linux里的as4的DDMS启动失败，原因是要用as自带的jre来启动，直接./monitor用的是Kali系统的jdk，版本太高了<code>ln -s  /root/Desktop/android-studio/jre/ /root/Android/Sdk/tools/lib/monitor-x86_64/</code>,然后通过~/Android/Sdk/tools/monitor打开ddms</p><p>vim ~/.bashrc   &amp;&amp; source ~/.bashrc</p><p><code>export PATH=$PATH:/root/Android/Sdk/platform-tools</code></p><p><strong>jdk1.8</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove openjdk-11-jre-headless:amd64</span><br><span class="line">apt-get remove openjdk-11-jre:amd64</span><br><span class="line">tar zxf jdk-8u191-linux-x64.tar.gz -C &#x2F;opt&#x2F;jdk</span><br><span class="line">vim ~&#x2F;.zshrc</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;opt&#x2F;jdk</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib</span><br><span class="line">export PATH&#x3D;&quot;&#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;ndk-bundle:&#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;platform-tools:$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH&quot;</span><br><span class="line">source ~&#x2F;.zshrc</span><br><span class="line">update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;java java &#x2F;opt&#x2F;jdk&#x2F;bin&#x2F;java 1</span><br><span class="line">update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;javac javac &#x2F;opt&#x2F;jdk&#x2F;bin&#x2F;javac 1</span><br><span class="line">update-alternatives --set java &#x2F;opt&#x2F;jdk&#x2F;bin&#x2F;java</span><br><span class="line">update-alternatives --set javac &#x2F;opt&#x2F;jdk&#x2F;bin&#x2F;javac</span><br></pre></td></tr></table></figure><p><strong>nexus 5x</strong></p><p>安装流程 twrp-&gt;SuperSu-&gt; nethunter</p><p><a href="https://www.offensive-security.com/kali-linux-nethunter-download/" target="_blank" rel="noopener">kali nethunter</a>下载nexus 5x <a href="https://images.kali.org/nethunter/nethunter-2020.4-bullhead-oreo-kalifs-full.zip" target="_blank" rel="noopener">nethunter</a>，使用投屏可变成一个迷你的linux渗透系统，通过twrp进行install ，<code>sh userinit.sh</code> 同步时间<br><img src="/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E8%BF%90%E8%A1%8Cnethunter.png" alt="运行nethunter"></p><table><thead><tr><th>tab</th><th>smali与java代码转换</th></tr></thead><tbody><tr><td>ctrl+b</td><td>下断点（注意这个必须在smali代码界面才有用）</td></tr><tr><td>esc</td><td>回退上一级引用</td></tr></tbody></table><p>activity_main.xml中配置的view组件：jeb中以十六进制存在于代码中，利用计算器的程序员模式转为十进制，jadx将该十进制存入resources.arsc，gda有APK入口直接进入MainActivity，同样以十六进制存入代码中。</p><h2 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h2><p>dpkg -i electron-ssr-0.2.6.deb  卸载使用-r，查询使用-l ,失败缺少包，经过<a href="https://pkgs.org/" target="_blank" rel="noopener">https://pkgs.org/</a>   查找所缺的包并安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt --fix-broken install</span><br><span class="line">apt-get install gconf2</span><br><span class="line">dpkg -i libdbusmenu-gtk4_18.10.20180917_bzr492+repack1-2_amd64.deb </span><br><span class="line">dpkg -i libindicator7_0.5.0-4_amd64.deb </span><br><span class="line">dpkg -i libappindicator1_0.4.92-8_amd64.deb</span><br><span class="line">dpkg -i electron-ssr-0.2.6.deb</span><br></pre></td></tr></table></figure><p>启动electron-ssr的pac模式即可<br>vim /etc/proxychains4.conf   通过右键复制SSR服务器订阅代理设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http 127.0.0.1 12333</span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><table><thead><tr><th>getprop ro.product.cpu.abi</th><th>判断系统cpu版本 虚拟机一般都是x86</th></tr></thead><tbody><tr><td>dumpsys meminfo pid</td><td>查看进程占用内存映射的信息</td></tr><tr><td>cat /proc/pid/maps</td><td>进程加载的so</td></tr><tr><td>cat /proc/pid/maps | grep -i libart.so</td><td>所有java代码通过libart.so解析，脱壳机的关键</td></tr><tr><td>dumpsys activity top</td><td>显示当前的Activity，显示View Hierarchy，看view的类信息</td></tr><tr><td>dumpsys package com.soviet.hook4crawler</td><td>查看运行包信息</td></tr><tr><td>pm list packages</td><td>查看所有安装的包</td></tr></tbody></table><h2 id="pyenv环境"><a href="#pyenv环境" class="headerlink" title="pyenv环境"></a>pyenv环境</h2><p>对python不同包(frida,objection…)多版本管理</p><p>全套安装最新版本：<code>proxychains pip install objection</code></p><h3 id="3-8-5"><a href="#3-8-5" class="headerlink" title="3.8.5"></a>3.8.5</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ctrl+alt+t 新建终端</span><br><span class="line">git clone https://github.com/pyenv/pyenv.git ~/.pyenv   安装pyenv，python全版本随意切</span><br><span class="line">echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.zshrc</span><br><span class="line">echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.zshrc</span><br><span class="line">echo -e 'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval "$(pyenv init -)"\nfi' &gt;&gt; ~/.zshrc</span><br><span class="line">exec "$SHELL"</span><br><span class="line">apt-get update; apt-get install --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</span><br><span class="line">PYTHON_CONFIGURE_OPTS="--disable-ipv6" proxychains4 pyenv install 3.8.5  使用代理访问，不然会报错you can specify "--disable-ipv6".</span><br><span class="line">pyenv local 3.8.5</span><br><span class="line">python -V</span><br><span class="line">pyenv local system  切换原系统pyenv</span><br><span class="line">pip install frida-tools</span><br><span class="line">proxychains4 pip install objection==1.9.5</span><br></pre></td></tr></table></figure><p>针对指定frida版本的objection，通过<a href="https://pypi.org/project/objection/#history" target="_blank" rel="noopener">pypi</a>中查找frida release日期稍后一点版本的objection即可<br>7x x <a href="https://github.com/frida/frida/releases/download/14.2.8/frida-server-14.2.8-android-arm64.xz" target="_blank" rel="noopener">frida-server-14.2.8-android-arm64.xz</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb push frida-server-14.2.8-android-arm64  /data/local/tmp</span><br><span class="line">mv frida-server-14.2.8-android-arm64 fs1428arm64 改名fs1428arm64,防止反调试</span><br><span class="line">chmod 777 fs1428arm64  加权</span><br><span class="line">./fs1428arm64</span><br><span class="line">frida-ps -U</span><br><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure><p><img src="/2021/01/31/%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/objection.png" alt="objection"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">android sslpinning disable  关闭app的ssl校验</span><br><span class="line">android hooking set return_value com.xxx.xxx.methodName false  设置返回值</span><br><span class="line">android hooking generate simple com.sf.security.AuthConfig   直接生成hook代码</span><br><span class="line">android hooking search classes [search_name] </span><br><span class="line">android hooking search methods [search_name] </span><br><span class="line">android intent launch_activity [class_activity]</span><br><span class="line">android hooking list class_methods com.android.settings.DisplaySettings  查看类全部方法</span><br><span class="line">android root disable  关闭app的root检测</span><br><span class="line">android heap search instances com.android.settings.DisplaySettings   堆内存中搜索指定类的实例</span><br><span class="line">android heap execute 40977078 c  拿到hashcode调用c方法</span><br><span class="line">android heap execute 0x2526 getPreferenceScreenResId 直接调用指定实例下的方法</span><br><span class="line">plugin wallbreaker classdump --fullname com.sf.security.AuthConfig</span><br><span class="line">plugin wallbreaker objectsearch com.sf.security.AuthConfig</span><br><span class="line">plugin wallbreaker objectdump --fullname 0x36d6  查看源码</span><br></pre></td></tr></table></figure><h3 id="3-8-0"><a href="#3-8-0" class="headerlink" title="3.8.0"></a>3.8.0</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PYTHON_CONFIGURE_OPTS="--disable-ipv6" proxychains4 pyenv install 3.8.0 </span><br><span class="line">pyenv local 3.8.0 </span><br><span class="line">PYTHON_CONFIGURE_OPTS="--disable-ipv6" proxychains4 pip install frida==12.8.0</span><br><span class="line">PYTHON_CONFIGURE_OPTS="--disable-ipv6" proxychains4 pip install frida-tools==5.3.0</span><br><span class="line">PYTHON_CONFIGURE_OPTS="--disable-ipv6" proxychains4 pip install objection==1.8.4</span><br><span class="line">objection -g com.android.settings explore</span><br></pre></td></tr></table></figure><p>7z x  <a href="https://github.com/frida/frida/releases/download/12.8.0/frida-server-12.8.0-android-arm64.xz" target="_blank" rel="noopener">frida-server-12.8.0-android-arm64</a>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb push frida-server-12.8.0-android-arm64 /data/local/tmp</span><br><span class="line">mv frida-server-12.8.0-android-arm64 fs128arm64 改名防止反调试</span><br><span class="line">chmod 777 frida-server-12.8.0-android-arm64</span><br><span class="line">objection -g com.android.settings explore</span><br><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure><p><strong>特定版本frida</strong></p><p>按照这个顺序，在装objection的时候，就会直接Requirement already satisfied，不会再去下载新的frida来安装了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install frida&#x3D;&#x3D;12.8.0 </span><br><span class="line">pip install frida-tools&#x3D;&#x3D;5.3.0 </span><br><span class="line">pip install objection&#x3D;&#x3D;1.8.4</span><br></pre></td></tr></table></figure><p><strong>frida开发环境</strong></p><p>pyenv local 3.8.0 &amp;&amp; ./fs128arm64</p><ol><li>git clone <a href="https://github.com/oleavr/frida-agent-example.git" target="_blank" rel="noopener">https://github.com/oleavr/frida-agent-example.git</a></li><li>cd frida-agent-example/ </li><li>npm install </li><li>使用VSCode等IDE打开此工程，在agent下编写typescript，会有智能提示。 </li><li>npm run watch会监控代码修改自动编译生成js文件 </li><li>frida -UF -l demo.js    usb连接手机保存将自动调用demo.js 进行hook <code>Java.perform(function(){console.log(&quot;frida hook&quot;)})  </code></li><li>frida -UF -l demo.js –runtime=v8  使用v8引擎 <code>Java.perform(()=&gt;{console.log(&quot;Hello World&quot;)})</code></li><li>frida-ps -U  查看所有进程</li><li>frida -H 192.168.0.100:5555 -f com.ttxapps.wifiadb -l demo.js –runtime=v8  远程hook,-l指定脚本</li><li>frida -Uf com.android.settings  -l demo.js –runtime=v8   –no-pause 经过usb主动启动应用调用demo.js,-f是spawn模式,–no-pause直接加载应用，没有的话需要%resume启动主线程</li><li>frida -UF –runtime=v8 -e “Java.perform(()=&gt;{console.log(‘Hello World’)})”  -o /root/log.txt  直接执行脚本写入文件</li></ol><p><strong>远程连接</strong></p><p><code>./fs128arm64 -v -l 0.0.0.0:8888</code>  指定端口启动frida，默认端口27042</p><p><code>frida-ps -H  192.168.0.8:8888</code>   指定-U表示usb,-H表示主机ip</p><p><code>frida -H 192.168.0.8:8888 -F</code>  指定-H表示主机ip，-F表示前台应用，输入frida即可查看Frida信息</p><p>cd <a href="https://github.com/oleavr/frida-agent-example.git" target="_blank" rel="noopener">frida-agent-example</a>/ &amp;&amp; npm install &amp;&amp;  npm run watch &amp;&amp; frida -H 192.168.0.8:8888 -F -l agent/demo.js  远程调用js脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(()&#x3D;&gt;&#123;console.log(&quot;Hello World&quot;)&#125;) </span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        console.log(&quot;hello&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><strong>远程调用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import frida</span><br><span class="line">device &#x3D; frida.get_usb_device() </span><br><span class="line">print(device.get_frontmost_application())</span><br><span class="line">#pid &#x3D; device.spawn([&quot;com.onejane.demo02&quot;])</span><br><span class="line">pid&#x3D;device.get_frontmost_application().pid  # 若双进程保护，指定pid进行hook </span><br><span class="line">print(device.enumerate_processes())   # 枚举所有进程</span><br><span class="line">print(device.enumerate_applications())  # 枚举所有包名</span><br><span class="line"># device.resume(pid)</span><br><span class="line"># time.sleep(1)</span><br><span class="line">session &#x3D; device.attach(pid) </span><br><span class="line">with open(&quot;demo.js&quot;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure><p><strong>plugins</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxychains git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;FRIDA-DEXDump ~&#x2F;Downloads&#x2F;FRIDA-DEXDump  脱壳</span><br><span class="line">mv ~&#x2F;Downloads&#x2F;FRIDA-DEXDump&#x2F;frida_dexdump ~&#x2F;.objection&#x2F;plugins&#x2F;dexdump  在plugins子目录插件下必须有__init__.py</span><br><span class="line">proxychains git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;Wallbreaker ~&#x2F;.objection&#x2F;plugins&#x2F;Wallbreaker  内存漫游</span><br><span class="line">objection -N -h 192.168.0.8 -p 8888 -g com.android.settings explore -P ~&#x2F;.objection&#x2F;plugins  远程连接批量加载插件</span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>pip uninstall frida</p><p>pip uninstall frida-tools</p><p>pip uninstall objection</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "25827-1638538754631-918",        "name": "万物皆可逆向",        "qrcode": "https://onejane.github.io/gzh.jpg",        "keyword": "密码"    });}</script>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objection </tag>
            
            <tag> frida </tag>
            
            <tag> kali </tag>
            
            <tag> xposed </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
